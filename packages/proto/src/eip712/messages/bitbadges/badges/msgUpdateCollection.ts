import { BadgeMetadataTimeline, Balance, CollectionApprovedTransferTimeline, CollectionMetadataTimeline, CollectionPermissions, ContractAddressTimeline, CustomDataTimeline, InheritedBalancesTimeline, IsArchivedTimeline, ManagerTimeline, NumberType, OffChainBalancesMetadataTimeline, StandardsTimeline, UserApprovedIncomingTransferTimeline, UserApprovedOutgoingTransferTimeline, UserPermissions, getWrappedBadgeMetadataTimeline, getWrappedBalances, getWrappedCollectionApprovedTransfersTimeline, getWrappedCollectionMetadataTimeline, getWrappedCollectionPermissions, getWrappedContractAddressTimeline, getWrappedCustomDataTimeline, getWrappedIncomingTransfersTimeline, getWrappedInheritedBalancesTimeline, getWrappedIsArchivedTimeline, getWrappedManagerTimeline, getWrappedOffChainBalancesMetadataTimeline, getWrappedOutgoingTransfersTimeline, getWrappedStandardsTimeline, getWrappedUserPermissions } from "../../../../"
import { COLLECTIONS_PERMISSIONS_TYPES, MANAGER_TIMELINE_TYPES, COLLECTION_METADATA_TIMELINE_TYPES, BADGE_METADATA_TIMELINE_TYPES, CUSTOM_DATA_TIMELINE_TYPES, INHERITED_BALANCES_TIMELINE_TYPES, COLLECTION_APPROVED_TRANSFER_TIMELINE_TYPES, STANDARDS_TIMELINE_TYPES, CONTRACT_ADDRESS_TIMELINE_TYPES, IS_ARCHIVED_TIMELINE_TYPES, COLLECTION_APPROVED_TRANSFER_TYPES, INHERITED_BALANCE_TYPES, UINT_RANGE_TYPES, BALANCE_TYPES, USER_APPROVED_OUTGOING_TRANSFER_TIMELINE_TYPES, USER_APPROVED_INCOMING_TRANSFER_TIMELINE_TYPES, USER_PERMISSIONS_TYPES, USER_APPROVED_OUTGOING_TRANSFER_TYPES, USER_APPROVED_INCOMING_TRANSFER_TYPES, USER_APPROVED_OUTGOING_TRANSFER_PERMISSION_TYPES, USER_APPROVED_INCOMING_TRANSFER_PERMISSION_TYPES, USER_APPROVED_OUTGOING_TRANSFER_DEFAULT_VALUES_TYPES, USER_APPROVED_OUTGOING_TRANSFER_COMBINATION_TYPES, USER_APPROVED_INCOMING_TRANSFER_DEFAULT_VALUES_TYPES, USER_APPROVED_INCOMING_TRANSFER_COMBINATION_TYPES, VALUE_OPTIONS_TYPES, IS_USER_OUTGOING_TRANSFER_ALLOWED_TYPES, OUTGOING_APPROVAL_DETAILS_TYPES, IS_USER_INCOMING_TRANSFER_ALLOWED_TYPES, INCOMING_APPROVAL_DETAILS_TYPES, MUST_OWN_BADGES_TYPES, MERKLE_CHALLENGE_TYPES, PREDETERMINED_BALANCES_TYPES, APPROVAL_AMOUNTS_TYPES, MAX_NUM_TRANSFERS_TYPES, MANUAL_BALANCES_TYPES, INCREMENTED_BALANCES_TYPES, PREDETERMINED_ORDER_CALCULATION_METHOD_TYPES, ACTION_COMBINATION_TYPES, ACTION_DEFAULT_VALUES_TYPES, ACTION_PERMISSION_TYPES, APPROVAL_DETAILS_TYPES, BADGE_METADATA_TYPES, BALANCES_ACTION_COMBINATION_TYPES, BALANCES_ACTION_DEFAULT_VALUES_TYPES, BALANCES_ACTION_PERMISSION_TYPES, COLLECTION_APPROVED_TRANSFER_COMBINATION_TYPES, COLLECTION_APPROVED_TRANSFER_DEFAULT_VALUES_TYPES, COLLECTION_APPROVED_TRANSFER_PERMISSION_TYPES, COLLECTION_METADATA_TYPES, IS_COLLECTION_TRANSFER_ALLOWED_TYPES, TIMED_UPDATE_COMBINATION_TYPES, TIMED_UPDATE_DEFAULT_VALUES_TYPES, TIMED_UPDATE_PERMISSION_TYPES, TIMED_UPDATE_WITH_BADGE_IDS_COMBINATION_TYPES, TIMED_UPDATE_WITH_BADGE_IDS_DEFAULT_VALUES_TYPES, TIMED_UPDATE_WITH_BADGE_IDS_PERMISSION_TYPES, OFF_CHAIN_BALANCES_METADATA_TYPES, OFF_CHAIN_BALANCES_METADATA_TIMELINE_TYPES } from "./eip712HelperTypes"

const MsgUpdateCollectionValueType = [
  { name: 'creator', type: 'string' },
  { name: 'collectionId', type: 'string' },
]

export const MSG_UPDATE_COLLECTION_TYPES = {
  MsgValue: MsgUpdateCollectionValueType,
  "CollectionsPermissions": COLLECTIONS_PERMISSIONS_TYPES,
  "ManagerTimeline": MANAGER_TIMELINE_TYPES,
  "CollectionMetadataTimeline": COLLECTION_METADATA_TIMELINE_TYPES,
  "BadgeMetadataTimeline": BADGE_METADATA_TIMELINE_TYPES,
  "OffChainBalancesMetadataTimeline": OFF_CHAIN_BALANCES_METADATA_TIMELINE_TYPES,
  "CustomDataTimeline": CUSTOM_DATA_TIMELINE_TYPES,
  "InheritedBalancesTimeline": INHERITED_BALANCES_TIMELINE_TYPES,
  "CollectionApprovedTransferTimeline": COLLECTION_APPROVED_TRANSFER_TIMELINE_TYPES,
  "StandardsTimeline": STANDARDS_TIMELINE_TYPES,
  "ContractAddressTimeline": CONTRACT_ADDRESS_TIMELINE_TYPES,
  "IsArchivedTimeline": IS_ARCHIVED_TIMELINE_TYPES,
  "CollectionApprovedTransfer": COLLECTION_APPROVED_TRANSFER_TYPES,
  "InheritedBalance": INHERITED_BALANCE_TYPES,
  "UintRange": UINT_RANGE_TYPES,
  "Balance": BALANCE_TYPES,
  "BadgeMetadata": BADGE_METADATA_TYPES,
  "CollectionMetadata": COLLECTION_METADATA_TYPES,
  "OffChainBalancesMetadata": OFF_CHAIN_BALANCES_METADATA_TYPES,
  "IsCollectionTransferAllowed": IS_COLLECTION_TRANSFER_ALLOWED_TYPES,
  "ActionPermission": ACTION_PERMISSION_TYPES,
  "TimedUpdatePermission": TIMED_UPDATE_PERMISSION_TYPES,
  "BalancesActionPermission": BALANCES_ACTION_PERMISSION_TYPES,
  "TimedUpdateWithBadgeIdsPermission": TIMED_UPDATE_WITH_BADGE_IDS_PERMISSION_TYPES,
  "CollectionApprovedTransferPermission": COLLECTION_APPROVED_TRANSFER_PERMISSION_TYPES,
  "CollectionApprovedTransferCombination": COLLECTION_APPROVED_TRANSFER_COMBINATION_TYPES,
  "CollectionApprovedTransferDefaultValues": COLLECTION_APPROVED_TRANSFER_DEFAULT_VALUES_TYPES,
  "BalancesActionCombination": BALANCES_ACTION_COMBINATION_TYPES,
  "BalancesActionDefaultValues": BALANCES_ACTION_DEFAULT_VALUES_TYPES,
  "ActionCombination": ACTION_COMBINATION_TYPES,
  "ActionDefaultValues": ACTION_DEFAULT_VALUES_TYPES,
  "TimedUpdateCombination": TIMED_UPDATE_COMBINATION_TYPES,
  "TimedUpdateDefaultValues": TIMED_UPDATE_DEFAULT_VALUES_TYPES,
  "TimedUpdateWithBadgeIdsCombination": TIMED_UPDATE_WITH_BADGE_IDS_COMBINATION_TYPES,
  "TimedUpdateWithBadgeIdsDefaultValues": TIMED_UPDATE_WITH_BADGE_IDS_DEFAULT_VALUES_TYPES,
  "ApprovalDetails": APPROVAL_DETAILS_TYPES,
  "UserApprovedOutgoingTransferTimeline": USER_APPROVED_OUTGOING_TRANSFER_TIMELINE_TYPES,
  "UserApprovedIncomingTransferTimeline": USER_APPROVED_INCOMING_TRANSFER_TIMELINE_TYPES,
  "UserPermissions": USER_PERMISSIONS_TYPES,
  "UserApprovedOutgoingTransfer": USER_APPROVED_OUTGOING_TRANSFER_TYPES,
  "UserApprovedIncomingTransfer": USER_APPROVED_INCOMING_TRANSFER_TYPES,
  "UserApprovedOutgoingTransferPermission": USER_APPROVED_OUTGOING_TRANSFER_PERMISSION_TYPES,
  "UserApprovedIncomingTransferPermission": USER_APPROVED_INCOMING_TRANSFER_PERMISSION_TYPES,
  "UserApprovedOutgoingTransferDefaultValues": USER_APPROVED_OUTGOING_TRANSFER_DEFAULT_VALUES_TYPES,
  "UserApprovedOutgoingTransferCombination": USER_APPROVED_OUTGOING_TRANSFER_COMBINATION_TYPES,
  "UserApprovedIncomingTransferDefaultValues": USER_APPROVED_INCOMING_TRANSFER_DEFAULT_VALUES_TYPES,
  "UserApprovedIncomingTransferCombination": USER_APPROVED_INCOMING_TRANSFER_COMBINATION_TYPES,
  "ValueOptions": VALUE_OPTIONS_TYPES,
  "IsUserOutgoingTransferAllowed": IS_USER_OUTGOING_TRANSFER_ALLOWED_TYPES,
  "OutgoingApprovalDetails": OUTGOING_APPROVAL_DETAILS_TYPES,
  "IsUserIncomingTransferAllowed": IS_USER_INCOMING_TRANSFER_ALLOWED_TYPES,
  "IncomingApprovalDetails": INCOMING_APPROVAL_DETAILS_TYPES,
  "MustOwnBadges": MUST_OWN_BADGES_TYPES,
  "MerkleChallenge": MERKLE_CHALLENGE_TYPES,
  "PredeterminedBalances": PREDETERMINED_BALANCES_TYPES,
  "ApprovalAmounts": APPROVAL_AMOUNTS_TYPES,
  "MaxNumTransfers": MAX_NUM_TRANSFERS_TYPES,
  "ManualBalances": MANUAL_BALANCES_TYPES,
  "IncrementedBalances": INCREMENTED_BALANCES_TYPES,
  "PredeterminedOrderCalculationMethod": PREDETERMINED_ORDER_CALCULATION_METHOD_TYPES
}



export function createEIP712MsgUpdateCollection<T extends NumberType>(
  creator: string,
  collectionId: T,
  balancesType: string,
  defaultApprovedOutgoingTransfersTimeline: UserApprovedOutgoingTransferTimeline<T>[],
  defaultApprovedIncomingTransfersTimeline: UserApprovedIncomingTransferTimeline<T>[],
  defaultUserPermissions: UserPermissions<T>,
  badgesToCreate: Balance<T>[],
  updateCollectionPermissions: boolean,
  collectionPermissions: CollectionPermissions<T>,
  updateManagerTimeline: boolean,
  managerTimeline: ManagerTimeline<T>[],
  updateCollectionMetadataTimeline: boolean,
  collectionMetadataTimeline: CollectionMetadataTimeline<T>[],
  updateBadgeMetadataTimeline: boolean,
  badgeMetadataTimeline: BadgeMetadataTimeline<T>[],
  updateOffChainBalancesMetadataTimeline: boolean,
  offChainBalancesMetadataTimeline: OffChainBalancesMetadataTimeline<T>[],
  updateCustomDataTimeline: boolean,
  customDataTimeline: CustomDataTimeline<T>[],
  updateInheritedBalancesTimeline: boolean,
  inheritedBalancesTimeline: InheritedBalancesTimeline<T>[],
  updateCollectionApprovedTransfersTimeline: boolean,
  collectionApprovedTransfersTimeline: CollectionApprovedTransferTimeline<T>[],
  updateStandardsTimeline: boolean,
  standardsTimeline: StandardsTimeline<T>[],
  updateContractAddressTimeline: boolean,
  contractAddressTimeline: ContractAddressTimeline<T>[],
  updateIsArchivedTimeline: boolean,
  isArchivedTimeline: IsArchivedTimeline<T>[],
) {
  return {
    type: 'badges/UpdateCollection',
    value: {
      creator,
      collectionId: collectionId.toString(),
      balancesType,
      defaultApprovedOutgoingTransfersTimeline: getWrappedOutgoingTransfersTimeline(defaultApprovedOutgoingTransfersTimeline).map((s) => s.toObject()),
      defaultApprovedIncomingTransfersTimeline: getWrappedIncomingTransfersTimeline(defaultApprovedIncomingTransfersTimeline).map((s) => s.toObject()),
      defaultUserPermissions: getWrappedUserPermissions(defaultUserPermissions).toObject(),
      badgesToCreate: getWrappedBalances(badgesToCreate).map((s) => s.toObject()),
      updateCollectionPermissions,
      collectionPermissions: getWrappedCollectionPermissions(collectionPermissions).toObject(),
      updateManagerTimeline,
      managerTimeline: getWrappedManagerTimeline(managerTimeline).map((s) => s.toObject()),
      updateCollectionMetadataTimeline,
      collectionMetadataTimeline: getWrappedCollectionMetadataTimeline(collectionMetadataTimeline).map((s) => s.toObject()),
      updateBadgeMetadataTimeline,
      badgeMetadataTimeline: getWrappedBadgeMetadataTimeline(badgeMetadataTimeline).map((s) => s.toObject()),
      updateOffChainBalancesMetadataTimeline,
      offChainBalancesMetadataTimeline: getWrappedOffChainBalancesMetadataTimeline(offChainBalancesMetadataTimeline).map((s) => s.toObject()),
      updateCustomDataTimeline,
      customDataTimeline: getWrappedCustomDataTimeline(customDataTimeline).map((s) => s.toObject()),
      updateInheritedBalancesTimeline,
      inheritedBalancesTimeline: getWrappedInheritedBalancesTimeline(inheritedBalancesTimeline).map((s) => s.toObject()),
      updateCollectionApprovedTransfersTimeline,
      collectionApprovedTransfersTimeline: getWrappedCollectionApprovedTransfersTimeline(collectionApprovedTransfersTimeline).map((s) => s.toObject()),
      updateStandardsTimeline,
      standardsTimeline: getWrappedStandardsTimeline(standardsTimeline).map((s) => s.toObject()),
      updateContractAddressTimeline,
      contractAddressTimeline: getWrappedContractAddressTimeline(contractAddressTimeline).map((s) => s.toObject()),
      updateIsArchivedTimeline,
      isArchivedTimeline: getWrappedIsArchivedTimeline(isArchivedTimeline).map((s) => s.toObject()),
    },
  }
}
