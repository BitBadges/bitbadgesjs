// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/metadata.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/any";
import * as dependency_2 from "./balances";
import * as dependency_3 from "./../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
  export class BadgeMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
      uri?: string;
      customData?: string;
      badgeIds?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
    }) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("uri" in data && data.uri != undefined) {
          this.uri = data.uri;
        }
        if ("customData" in data && data.customData != undefined) {
          this.customData = data.customData;
        }
        if ("badgeIds" in data && data.badgeIds != undefined) {
          this.badgeIds = data.badgeIds;
        }
      }
    }
    get uri() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set uri(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get customData() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set customData(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    get badgeIds() {
      return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 3) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
    }
    set badgeIds(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
      pb_1.Message.setRepeatedWrapperField(this, 3, value);
    }
    static fromObject(data: {
      uri?: string;
      customData?: string;
      badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
    }): BadgeMetadata {
      const message = new BadgeMetadata({});
      if (data.uri != null) {
        message.uri = data.uri;
      }
      if (data.customData != null) {
        message.customData = data.customData;
      }
      if (data.badgeIds != null) {
        message.badgeIds = data.badgeIds.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
      }
      return message;
    }
    toObject() {
      const data: {
        uri?: string;
        customData?: string;
        badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
      } = {};
      if (this.uri != null) {
        data.uri = this.uri;
      }
      if (this.customData != null) {
        data.customData = this.customData;
      }
      if (this.badgeIds != null) {
        data.badgeIds = this.badgeIds.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.uri.length)
        writer.writeString(1, this.uri);
      if (this.customData.length)
        writer.writeString(2, this.customData);
      if (this.badgeIds.length)
        writer.writeRepeatedMessage(3, this.badgeIds, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
      if (!w)
        return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BadgeMetadata {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BadgeMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup())
          break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.uri = reader.readString();
            break;
          case 2:
            message.customData = reader.readString();
            break;
          case 3:
            reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
            break;
          default: reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): BadgeMetadata {
      return BadgeMetadata.deserialize(bytes);
    }
  }
  export class CollectionMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
      uri?: string;
      customData?: string;
    }) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("uri" in data && data.uri != undefined) {
          this.uri = data.uri;
        }
        if ("customData" in data && data.customData != undefined) {
          this.customData = data.customData;
        }
      }
    }
    get uri() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set uri(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get customData() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set customData(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      uri?: string;
      customData?: string;
    }): CollectionMetadata {
      const message = new CollectionMetadata({});
      if (data.uri != null) {
        message.uri = data.uri;
      }
      if (data.customData != null) {
        message.customData = data.customData;
      }
      return message;
    }
    toObject() {
      const data: {
        uri?: string;
        customData?: string;
      } = {};
      if (this.uri != null) {
        data.uri = this.uri;
      }
      if (this.customData != null) {
        data.customData = this.customData;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.uri.length)
        writer.writeString(1, this.uri);
      if (this.customData.length)
        writer.writeString(2, this.customData);
      if (!w)
        return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionMetadata {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup())
          break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.uri = reader.readString();
            break;
          case 2:
            message.customData = reader.readString();
            break;
          default: reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): CollectionMetadata {
      return CollectionMetadata.deserialize(bytes);
    }
  }
  export class OffChainBalancesMetadata extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
      uri?: string;
      customData?: string;
    }) {
      super();
      pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
      if (!Array.isArray(data) && typeof data == "object") {
        if ("uri" in data && data.uri != undefined) {
          this.uri = data.uri;
        }
        if ("customData" in data && data.customData != undefined) {
          this.customData = data.customData;
        }
      }
    }
    get uri() {
      return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set uri(value: string) {
      pb_1.Message.setField(this, 1, value);
    }
    get customData() {
      return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set customData(value: string) {
      pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
      uri?: string;
      customData?: string;
    }): OffChainBalancesMetadata {
      const message = new OffChainBalancesMetadata({});
      if (data.uri != null) {
        message.uri = data.uri;
      }
      if (data.customData != null) {
        message.customData = data.customData;
      }
      return message;
    }
    toObject() {
      const data: {
        uri?: string;
        customData?: string;
      } = {};
      if (this.uri != null) {
        data.uri = this.uri;
      }
      if (this.customData != null) {
        data.customData = this.customData;
      }
      return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
      const writer = w || new pb_1.BinaryWriter();
      if (this.uri.length)
        writer.writeString(1, this.uri);
      if (this.customData.length)
        writer.writeString(2, this.customData);
      if (!w)
        return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OffChainBalancesMetadata {
      const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OffChainBalancesMetadata();
      while (reader.nextField()) {
        if (reader.isEndGroup())
          break;
        switch (reader.getFieldNumber()) {
          case 1:
            message.uri = reader.readString();
            break;
          case 2:
            message.customData = reader.readString();
            break;
          default: reader.skipField();
        }
      }
      return message;
    }
    serializeBinary(): Uint8Array {
      return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): OffChainBalancesMetadata {
      return OffChainBalancesMetadata.deserialize(bytes);
    }
  }
}
