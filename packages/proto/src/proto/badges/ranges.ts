// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/ranges.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export enum AddressOptions {
        None = 0,
        IncludeManager = 1,
        ExcludeManager = 2
    }
    export class IdRange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start?: string;
            end?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start" in data && data.start != undefined) {
                    this.start = data.start;
                }
                if ("end" in data && data.end != undefined) {
                    this.end = data.end;
                }
            }
        }
        get start() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set start(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get end() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set end(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            start?: string;
            end?: string;
        }): IdRange {
            const message = new IdRange({});
            if (data.start != null) {
                message.start = data.start;
            }
            if (data.end != null) {
                message.end = data.end;
            }
            return message;
        }
        toObject() {
            const data: {
                start?: string;
                end?: string;
            } = {};
            if (this.start != null) {
                data.start = this.start;
            }
            if (this.end != null) {
                data.end = this.end;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start.length)
                writer.writeString(1, this.start);
            if (this.end.length)
                writer.writeString(2, this.end);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IdRange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IdRange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start = reader.readString();
                        break;
                    case 2:
                        message.end = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IdRange {
            return IdRange.deserialize(bytes);
        }
    }
    export class AddressesMapping extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            addresses?: string[];
            includeOnlySpecified?: boolean;
            managerOptions?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("addresses" in data && data.addresses != undefined) {
                    this.addresses = data.addresses;
                }
                if ("includeOnlySpecified" in data && data.includeOnlySpecified != undefined) {
                    this.includeOnlySpecified = data.includeOnlySpecified;
                }
                if ("managerOptions" in data && data.managerOptions != undefined) {
                    this.managerOptions = data.managerOptions;
                }
            }
        }
        get addresses() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set addresses(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get includeOnlySpecified() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set includeOnlySpecified(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get managerOptions() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set managerOptions(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            addresses?: string[];
            includeOnlySpecified?: boolean;
            managerOptions?: string;
        }): AddressesMapping {
            const message = new AddressesMapping({});
            if (data.addresses != null) {
                message.addresses = data.addresses;
            }
            if (data.includeOnlySpecified != null) {
                message.includeOnlySpecified = data.includeOnlySpecified;
            }
            if (data.managerOptions != null) {
                message.managerOptions = data.managerOptions;
            }
            return message;
        }
        toObject() {
            const data: {
                addresses?: string[];
                includeOnlySpecified?: boolean;
                managerOptions?: string;
            } = {};
            if (this.addresses != null) {
                data.addresses = this.addresses;
            }
            if (this.includeOnlySpecified != null) {
                data.includeOnlySpecified = this.includeOnlySpecified;
            }
            if (this.managerOptions != null) {
                data.managerOptions = this.managerOptions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.addresses.length)
                writer.writeRepeatedString(1, this.addresses);
            if (this.includeOnlySpecified != false)
                writer.writeBool(2, this.includeOnlySpecified);
            if (this.managerOptions.length)
                writer.writeString(3, this.managerOptions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddressesMapping {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddressesMapping();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        message.includeOnlySpecified = reader.readBool();
                        break;
                    case 3:
                        message.managerOptions = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddressesMapping {
            return AddressesMapping.deserialize(bytes);
        }
    }
    export class TransferMapping extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            from?: AddressesMapping;
            to?: AddressesMapping;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("to" in data && data.to != undefined) {
                    this.to = data.to;
                }
            }
        }
        get from() {
            return pb_1.Message.getWrapperField(this, AddressesMapping, 1) as AddressesMapping;
        }
        set from(value: AddressesMapping) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_from() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get to() {
            return pb_1.Message.getWrapperField(this, AddressesMapping, 2) as AddressesMapping;
        }
        set to(value: AddressesMapping) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_to() {
            return pb_1.Message.getField(this, 2) != null;
        }
        static fromObject(data: {
            from?: ReturnType<typeof AddressesMapping.prototype.toObject>;
            to?: ReturnType<typeof AddressesMapping.prototype.toObject>;
        }): TransferMapping {
            const message = new TransferMapping({});
            if (data.from != null) {
                message.from = AddressesMapping.fromObject(data.from);
            }
            if (data.to != null) {
                message.to = AddressesMapping.fromObject(data.to);
            }
            return message;
        }
        toObject() {
            const data: {
                from?: ReturnType<typeof AddressesMapping.prototype.toObject>;
                to?: ReturnType<typeof AddressesMapping.prototype.toObject>;
            } = {};
            if (this.from != null) {
                data.from = this.from.toObject();
            }
            if (this.to != null) {
                data.to = this.to.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_from)
                writer.writeMessage(1, this.from, () => this.from.serialize(writer));
            if (this.has_to)
                writer.writeMessage(2, this.to, () => this.to.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TransferMapping {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TransferMapping();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.from, () => message.from = AddressesMapping.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.to, () => message.to = AddressesMapping.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TransferMapping {
            return TransferMapping.deserialize(bytes);
        }
    }
}
