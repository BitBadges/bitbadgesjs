// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../gogoproto/gogo";
import * as dependency_2 from "./../google/api/annotations";
import * as dependency_3 from "./../cosmos/base/query/v1beta1/pagination";
import * as dependency_4 from "./params";
import * as dependency_5 from "./badges";
import * as dependency_6 from "./balances";
import * as pb_1 from "google-protobuf";
export namespace trevormil.bitbadgeschain.badges {
    export class QueryParamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryParamsRequest {
            const message = new QueryParamsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_4.trevormil.bitbadgeschain.badges.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_4.trevormil.bitbadgeschain.badges.Params, 1) as dependency_4.trevormil.bitbadgeschain.badges.Params;
        }
        set params(value: dependency_4.trevormil.bitbadgeschain.badges.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_4.trevormil.bitbadgeschain.badges.Params.prototype.toObject>;
        }): QueryParamsResponse {
            const message = new QueryParamsResponse({});
            if (data.params != null) {
                message.params = dependency_4.trevormil.bitbadgeschain.badges.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_4.trevormil.bitbadgeschain.badges.Params.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_4.trevormil.bitbadgeschain.badges.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    export class QueryGetBadgeRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): QueryGetBadgeRequest {
            const message = new QueryGetBadgeRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetBadgeRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetBadgeRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetBadgeRequest {
            return QueryGetBadgeRequest.deserialize(bytes);
        }
    }
    export class QueryGetBadgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            badge?: dependency_5.trevormil.bitbadgeschain.badges.BitBadge;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("badge" in data && data.badge != undefined) {
                    this.badge = data.badge;
                }
            }
        }
        get badge() {
            return pb_1.Message.getWrapperField(this, dependency_5.trevormil.bitbadgeschain.badges.BitBadge, 1) as dependency_5.trevormil.bitbadgeschain.badges.BitBadge;
        }
        set badge(value: dependency_5.trevormil.bitbadgeschain.badges.BitBadge) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_badge() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            badge?: ReturnType<typeof dependency_5.trevormil.bitbadgeschain.badges.BitBadge.prototype.toObject>;
        }): QueryGetBadgeResponse {
            const message = new QueryGetBadgeResponse({});
            if (data.badge != null) {
                message.badge = dependency_5.trevormil.bitbadgeschain.badges.BitBadge.fromObject(data.badge);
            }
            return message;
        }
        toObject() {
            const data: {
                badge?: ReturnType<typeof dependency_5.trevormil.bitbadgeschain.badges.BitBadge.prototype.toObject>;
            } = {};
            if (this.badge != null) {
                data.badge = this.badge.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_badge)
                writer.writeMessage(1, this.badge, () => this.badge.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetBadgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetBadgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.badge, () => message.badge = dependency_5.trevormil.bitbadgeschain.badges.BitBadge.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetBadgeResponse {
            return QueryGetBadgeResponse.deserialize(bytes);
        }
    }
    export class QueryGetBalanceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            badgeId?: number;
            address?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set address(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            badgeId?: number;
            address?: number;
        }): QueryGetBalanceRequest {
            const message = new QueryGetBalanceRequest({});
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                badgeId?: number;
                address?: number;
            } = {};
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.badgeId != 0)
                writer.writeUint64(1, this.badgeId);
            if (this.address != 0)
                writer.writeUint64(2, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetBalanceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetBalanceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.badgeId = reader.readUint64();
                        break;
                    case 2:
                        message.address = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetBalanceRequest {
            return QueryGetBalanceRequest.deserialize(bytes);
        }
    }
    export class QueryGetBalanceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balanceInfo?: dependency_6.trevormil.bitbadgeschain.badges.UserBalanceInfo;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balanceInfo" in data && data.balanceInfo != undefined) {
                    this.balanceInfo = data.balanceInfo;
                }
            }
        }
        get balanceInfo() {
            return pb_1.Message.getWrapperField(this, dependency_6.trevormil.bitbadgeschain.badges.UserBalanceInfo, 1) as dependency_6.trevormil.bitbadgeschain.badges.UserBalanceInfo;
        }
        set balanceInfo(value: dependency_6.trevormil.bitbadgeschain.badges.UserBalanceInfo) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_balanceInfo() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            balanceInfo?: ReturnType<typeof dependency_6.trevormil.bitbadgeschain.badges.UserBalanceInfo.prototype.toObject>;
        }): QueryGetBalanceResponse {
            const message = new QueryGetBalanceResponse({});
            if (data.balanceInfo != null) {
                message.balanceInfo = dependency_6.trevormil.bitbadgeschain.badges.UserBalanceInfo.fromObject(data.balanceInfo);
            }
            return message;
        }
        toObject() {
            const data: {
                balanceInfo?: ReturnType<typeof dependency_6.trevormil.bitbadgeschain.badges.UserBalanceInfo.prototype.toObject>;
            } = {};
            if (this.balanceInfo != null) {
                data.balanceInfo = this.balanceInfo.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_balanceInfo)
                writer.writeMessage(1, this.balanceInfo, () => this.balanceInfo.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetBalanceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetBalanceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.balanceInfo, () => message.balanceInfo = dependency_6.trevormil.bitbadgeschain.badges.UserBalanceInfo.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetBalanceResponse {
            return QueryGetBalanceResponse.deserialize(bytes);
        }
    }
}
