// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../gogoproto/gogo";
import * as dependency_2 from "./../google/api/annotations";
import * as dependency_3 from "./../cosmos/base/query/v1beta1/pagination";
import * as dependency_4 from "./params";
import * as dependency_5 from "./badges";
import * as dependency_6 from "./balances";
import * as dependency_7 from "./claims";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class QueryParamsRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): QueryParamsRequest {
            const message = new QueryParamsRequest({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsRequest {
            return QueryParamsRequest.deserialize(bytes);
        }
    }
    export class QueryParamsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_4.bitbadges.bitbadgeschain.badges.Params;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_4.bitbadges.bitbadgeschain.badges.Params, 1) as dependency_4.bitbadges.bitbadgeschain.badges.Params;
        }
        set params(value: dependency_4.bitbadges.bitbadgeschain.badges.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_4.bitbadges.bitbadgeschain.badges.Params.prototype.toObject>;
        }): QueryParamsResponse {
            const message = new QueryParamsResponse({});
            if (data.params != null) {
                message.params = dependency_4.bitbadges.bitbadgeschain.badges.Params.fromObject(data.params);
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_4.bitbadges.bitbadgeschain.badges.Params.prototype.toObject>;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryParamsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryParamsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_4.bitbadges.bitbadgeschain.badges.Params.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryParamsResponse {
            return QueryParamsResponse.deserialize(bytes);
        }
    }
    export class QueryGetCollectionRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
            }
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            collectionId?: string;
        }): QueryGetCollectionRequest {
            const message = new QueryGetCollectionRequest({});
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            return message;
        }
        toObject() {
            const data: {
                collectionId?: string;
            } = {};
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collectionId.length)
                writer.writeString(1, this.collectionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetCollectionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetCollectionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collectionId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetCollectionRequest {
            return QueryGetCollectionRequest.deserialize(bytes);
        }
    }
    export class QueryGetCollectionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collection?: dependency_5.bitbadges.bitbadgeschain.badges.BadgeCollection;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
            }
        }
        get collection() {
            return pb_1.Message.getWrapperField(this, dependency_5.bitbadges.bitbadgeschain.badges.BadgeCollection, 1) as dependency_5.bitbadges.bitbadgeschain.badges.BadgeCollection;
        }
        set collection(value: dependency_5.bitbadges.bitbadgeschain.badges.BadgeCollection) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_collection() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            collection?: ReturnType<typeof dependency_5.bitbadges.bitbadgeschain.badges.BadgeCollection.prototype.toObject>;
        }): QueryGetCollectionResponse {
            const message = new QueryGetCollectionResponse({});
            if (data.collection != null) {
                message.collection = dependency_5.bitbadges.bitbadgeschain.badges.BadgeCollection.fromObject(data.collection);
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: ReturnType<typeof dependency_5.bitbadges.bitbadgeschain.badges.BadgeCollection.prototype.toObject>;
            } = {};
            if (this.collection != null) {
                data.collection = this.collection.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_collection)
                writer.writeMessage(1, this.collection, () => this.collection.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetCollectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetCollectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.collection, () => message.collection = dependency_5.bitbadges.bitbadgeschain.badges.BadgeCollection.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetCollectionResponse {
            return QueryGetCollectionResponse.deserialize(bytes);
        }
    }
    export class QueryGetClaimRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionId?: string;
            claimId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("claimId" in data && data.claimId != undefined) {
                    this.claimId = data.claimId;
                }
            }
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get claimId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set claimId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            collectionId?: string;
            claimId?: string;
        }): QueryGetClaimRequest {
            const message = new QueryGetClaimRequest({});
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.claimId != null) {
                message.claimId = data.claimId;
            }
            return message;
        }
        toObject() {
            const data: {
                collectionId?: string;
                claimId?: string;
            } = {};
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.claimId != null) {
                data.claimId = this.claimId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collectionId.length)
                writer.writeString(1, this.collectionId);
            if (this.claimId.length)
                writer.writeString(2, this.claimId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetClaimRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetClaimRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collectionId = reader.readString();
                        break;
                    case 2:
                        message.claimId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetClaimRequest {
            return QueryGetClaimRequest.deserialize(bytes);
        }
    }
    export class QueryGetClaimResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            claim?: dependency_7.bitbadges.bitbadgeschain.badges.Claim;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("claim" in data && data.claim != undefined) {
                    this.claim = data.claim;
                }
            }
        }
        get claim() {
            return pb_1.Message.getWrapperField(this, dependency_7.bitbadges.bitbadgeschain.badges.Claim, 1) as dependency_7.bitbadges.bitbadgeschain.badges.Claim;
        }
        set claim(value: dependency_7.bitbadges.bitbadgeschain.badges.Claim) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_claim() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            claim?: ReturnType<typeof dependency_7.bitbadges.bitbadgeschain.badges.Claim.prototype.toObject>;
        }): QueryGetClaimResponse {
            const message = new QueryGetClaimResponse({});
            if (data.claim != null) {
                message.claim = dependency_7.bitbadges.bitbadgeschain.badges.Claim.fromObject(data.claim);
            }
            return message;
        }
        toObject() {
            const data: {
                claim?: ReturnType<typeof dependency_7.bitbadges.bitbadgeschain.badges.Claim.prototype.toObject>;
            } = {};
            if (this.claim != null) {
                data.claim = this.claim.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_claim)
                writer.writeMessage(1, this.claim, () => this.claim.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetClaimResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetClaimResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.claim, () => message.claim = dependency_7.bitbadges.bitbadgeschain.badges.Claim.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetClaimResponse {
            return QueryGetClaimResponse.deserialize(bytes);
        }
    }
    export class QueryGetAddressByIdRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: string;
        }): QueryGetAddressByIdRequest {
            const message = new QueryGetAddressByIdRequest({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id.length)
                writer.writeString(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetAddressByIdRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetAddressByIdRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetAddressByIdRequest {
            return QueryGetAddressByIdRequest.deserialize(bytes);
        }
    }
    export class QueryGetAddressByIdResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            address?: string;
        }): QueryGetAddressByIdResponse {
            const message = new QueryGetAddressByIdResponse({});
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetAddressByIdResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetAddressByIdResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetAddressByIdResponse {
            return QueryGetAddressByIdResponse.deserialize(bytes);
        }
    }
    export class QueryGetBalanceRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionId?: string;
            address?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            collectionId?: string;
            address?: string;
        }): QueryGetBalanceRequest {
            const message = new QueryGetBalanceRequest({});
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                collectionId?: string;
                address?: string;
            } = {};
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collectionId.length)
                writer.writeString(1, this.collectionId);
            if (this.address.length)
                writer.writeString(2, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetBalanceRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetBalanceRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collectionId = reader.readString();
                        break;
                    case 2:
                        message.address = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetBalanceRequest {
            return QueryGetBalanceRequest.deserialize(bytes);
        }
    }
    export class QueryGetBalanceResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balance?: dependency_6.bitbadges.bitbadgeschain.badges.UserBalanceStore;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balance" in data && data.balance != undefined) {
                    this.balance = data.balance;
                }
            }
        }
        get balance() {
            return pb_1.Message.getWrapperField(this, dependency_6.bitbadges.bitbadgeschain.badges.UserBalanceStore, 1) as dependency_6.bitbadges.bitbadgeschain.badges.UserBalanceStore;
        }
        set balance(value: dependency_6.bitbadges.bitbadgeschain.badges.UserBalanceStore) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_balance() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            balance?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.UserBalanceStore.prototype.toObject>;
        }): QueryGetBalanceResponse {
            const message = new QueryGetBalanceResponse({});
            if (data.balance != null) {
                message.balance = dependency_6.bitbadges.bitbadgeschain.badges.UserBalanceStore.fromObject(data.balance);
            }
            return message;
        }
        toObject() {
            const data: {
                balance?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.UserBalanceStore.prototype.toObject>;
            } = {};
            if (this.balance != null) {
                data.balance = this.balance.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_balance)
                writer.writeMessage(1, this.balance, () => this.balance.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryGetBalanceResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryGetBalanceResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.balance, () => message.balance = dependency_6.bitbadges.bitbadgeschain.badges.UserBalanceStore.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryGetBalanceResponse {
            return QueryGetBalanceResponse.deserialize(bytes);
        }
    }
    export class QueryIsClaimDataUsedRequest extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionId?: string;
            claimId?: string;
            claimData?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("claimId" in data && data.claimId != undefined) {
                    this.claimId = data.claimId;
                }
                if ("claimData" in data && data.claimData != undefined) {
                    this.claimData = data.claimData;
                }
            }
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get claimId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set claimId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get claimData() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set claimData(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            collectionId?: string;
            claimId?: string;
            claimData?: string;
        }): QueryIsClaimDataUsedRequest {
            const message = new QueryIsClaimDataUsedRequest({});
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.claimId != null) {
                message.claimId = data.claimId;
            }
            if (data.claimData != null) {
                message.claimData = data.claimData;
            }
            return message;
        }
        toObject() {
            const data: {
                collectionId?: string;
                claimId?: string;
                claimData?: string;
            } = {};
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.claimId != null) {
                data.claimId = this.claimId;
            }
            if (this.claimData != null) {
                data.claimData = this.claimData;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collectionId.length)
                writer.writeString(1, this.collectionId);
            if (this.claimId.length)
                writer.writeString(2, this.claimId);
            if (this.claimData.length)
                writer.writeString(3, this.claimData);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryIsClaimDataUsedRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryIsClaimDataUsedRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collectionId = reader.readString();
                        break;
                    case 2:
                        message.claimId = reader.readString();
                        break;
                    case 3:
                        message.claimData = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryIsClaimDataUsedRequest {
            return QueryIsClaimDataUsedRequest.deserialize(bytes);
        }
    }
    export class QueryIsClaimDataUsedResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            used?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("used" in data && data.used != undefined) {
                    this.used = data.used;
                }
            }
        }
        get used() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set used(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            used?: boolean;
        }): QueryIsClaimDataUsedResponse {
            const message = new QueryIsClaimDataUsedResponse({});
            if (data.used != null) {
                message.used = data.used;
            }
            return message;
        }
        toObject() {
            const data: {
                used?: boolean;
            } = {};
            if (this.used != null) {
                data.used = this.used;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.used != false)
                writer.writeBool(1, this.used);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryIsClaimDataUsedResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryIsClaimDataUsedResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.used = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryIsClaimDataUsedResponse {
            return QueryIsClaimDataUsedResponse.deserialize(bytes);
        }
    }
}
