// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file badges/balances.proto (package badges, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * uintRange is a range of IDs from some start to some end (inclusive).
 *
 * uintRanges are one of the core types used in the BitBadgesChain module.
 * They are used for evrything from badge IDs to time ranges to min / max balance amounts.
 *
 * @generated from message badges.UintRange
 */
export class UintRange extends Message<UintRange> {
  /**
   * @generated from field: string start = 1;
   */
  start = "";

  /**
   * @generated from field: string end = 2;
   */
  end = "";

  constructor(data?: PartialMessage<UintRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.UintRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "end", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UintRange {
    return new UintRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UintRange {
    return new UintRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UintRange {
    return new UintRange().fromJsonString(jsonString, options);
  }

  static equals(a: UintRange | PlainMessage<UintRange> | undefined, b: UintRange | PlainMessage<UintRange> | undefined): boolean {
    return proto3.util.equals(UintRange, a, b);
  }
}

/**
 * Balance represents the balance of a badge for a specific user.
 * The user amounts xAmount of a badge for the badgeID specified for the time ranges specified.
 *
 * Ex: User A owns x10 of badge IDs 1-10 from 1/1/2020 to 1/1/2021.
 *
 * If times or badgeIDs have len > 1, then the user owns all badge IDs specified for all time ranges specified.
 *
 * @generated from message badges.Balance
 */
export class Balance extends Message<Balance> {
  /**
   * @generated from field: string amount = 1;
   */
  amount = "";

  /**
   * @generated from field: repeated badges.UintRange ownershipTimes = 2;
   */
  ownershipTimes: UintRange[] = [];

  /**
   * @generated from field: repeated badges.UintRange badgeIds = 3;
   */
  badgeIds: UintRange[] = [];

  constructor(data?: PartialMessage<Balance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.Balance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ownershipTimes", kind: "message", T: UintRange, repeated: true },
    { no: 3, name: "badgeIds", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Balance {
    return new Balance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Balance {
    return new Balance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Balance {
    return new Balance().fromJsonString(jsonString, options);
  }

  static equals(a: Balance | PlainMessage<Balance> | undefined, b: Balance | PlainMessage<Balance> | undefined): boolean {
    return proto3.util.equals(Balance, a, b);
  }
}

/**
 * @generated from message badges.MustOwnBadges
 */
export class MustOwnBadges extends Message<MustOwnBadges> {
  /**
   * @generated from field: string collectionId = 1;
   */
  collectionId = "";

  /**
   * @generated from field: badges.UintRange amountRange = 2;
   */
  amountRange?: UintRange;

  /**
   * @generated from field: repeated badges.UintRange ownershipTimes = 3;
   */
  ownershipTimes: UintRange[] = [];

  /**
   * @generated from field: repeated badges.UintRange badgeIds = 4;
   */
  badgeIds: UintRange[] = [];

  /**
   * @generated from field: bool overrideWithCurrentTime = 5;
   */
  overrideWithCurrentTime = false;

  /**
   * @generated from field: bool mustOwnAll = 6;
   */
  mustOwnAll = false;

  constructor(data?: PartialMessage<MustOwnBadges>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.MustOwnBadges";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "amountRange", kind: "message", T: UintRange },
    { no: 3, name: "ownershipTimes", kind: "message", T: UintRange, repeated: true },
    { no: 4, name: "badgeIds", kind: "message", T: UintRange, repeated: true },
    { no: 5, name: "overrideWithCurrentTime", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "mustOwnAll", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MustOwnBadges {
    return new MustOwnBadges().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MustOwnBadges {
    return new MustOwnBadges().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MustOwnBadges {
    return new MustOwnBadges().fromJsonString(jsonString, options);
  }

  static equals(a: MustOwnBadges | PlainMessage<MustOwnBadges> | undefined, b: MustOwnBadges | PlainMessage<MustOwnBadges> | undefined): boolean {
    return proto3.util.equals(MustOwnBadges, a, b);
  }
}

/**
 * InheritedBalances are a powerful feature of the BitBadges module.
 * They allow a colllection to inherit the balances from another collection.
 * Ex: Badges from Collection A inherits the balances from badges from Collection B.
 *
 * The badgeIds specified will inherit the balances from the parent collection and badges specified.
 * If the total number of parent badges == 1, then all the badgeIds will inherit the balance from that parent badge.
 * Otherwise, the total number of parent badges must equal the total number of badgeIds specified.
 * By total number, we mean the sum of the number of badgeIds in each UintRange.
 *
 * @generated from message badges.InheritedBalance
 */
export class InheritedBalance extends Message<InheritedBalance> {
  /**
   * @generated from field: repeated badges.UintRange badgeIds = 1;
   */
  badgeIds: UintRange[] = [];

  /**
   * @generated from field: string parentCollectionId = 2;
   */
  parentCollectionId = "";

  /**
   * @generated from field: repeated badges.UintRange parentBadgeIds = 3;
   */
  parentBadgeIds: UintRange[] = [];

  constructor(data?: PartialMessage<InheritedBalance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.InheritedBalance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "badgeIds", kind: "message", T: UintRange, repeated: true },
    { no: 2, name: "parentCollectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parentBadgeIds", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): InheritedBalance {
    return new InheritedBalance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): InheritedBalance {
    return new InheritedBalance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): InheritedBalance {
    return new InheritedBalance().fromJsonString(jsonString, options);
  }

  static equals(a: InheritedBalance | PlainMessage<InheritedBalance> | undefined, b: InheritedBalance | PlainMessage<InheritedBalance> | undefined): boolean {
    return proto3.util.equals(InheritedBalance, a, b);
  }
}

