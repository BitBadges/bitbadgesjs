// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file badges/genesis.proto (package badges, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { BadgeCollection } from "./collections_pb.js";
import { ApprovalsTracker, UserBalanceStore } from "./transfers_pb.js";
import { AddressMapping } from "./address_mappings_pb.js";

/**
 * GenesisState defines the badges module's genesis state.
 *
 * @generated from message badges.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: badges.Params params = 1;
   */
  params?: Params;

  /**
   * @generated from field: string port_id = 2;
   */
  portId = "";

  /**
   * @generated from field: repeated badges.BadgeCollection collections = 3;
   */
  collections: BadgeCollection[] = [];

  /**
   * @generated from field: string nextCollectionId = 4;
   */
  nextCollectionId = "";

  /**
   * @generated from field: repeated badges.UserBalanceStore balances = 5;
   */
  balances: UserBalanceStore[] = [];

  /**
   * @generated from field: repeated string balanceStoreKeys = 6;
   */
  balanceStoreKeys: string[] = [];

  /**
   * @generated from field: repeated string numUsedForMerkleChallenges = 7;
   */
  numUsedForMerkleChallenges: string[] = [];

  /**
   * @generated from field: repeated string numUsedForMerkleChallengesStoreKeys = 8;
   */
  numUsedForMerkleChallengesStoreKeys: string[] = [];

  /**
   * @generated from field: repeated badges.AddressMapping addressMappings = 9;
   */
  addressMappings: AddressMapping[] = [];

  /**
   * @generated from field: repeated badges.ApprovalsTracker approvalsTrackers = 10;
   */
  approvalsTrackers: ApprovalsTracker[] = [];

  /**
   * this line is used by starport scaffolding # genesis/proto/state
   *
   * @generated from field: repeated string approvalsTrackerStoreKeys = 11;
   */
  approvalsTrackerStoreKeys: string[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "port_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "collections", kind: "message", T: BadgeCollection, repeated: true },
    { no: 4, name: "nextCollectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "balances", kind: "message", T: UserBalanceStore, repeated: true },
    { no: 6, name: "balanceStoreKeys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "numUsedForMerkleChallenges", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "numUsedForMerkleChallengesStoreKeys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "addressMappings", kind: "message", T: AddressMapping, repeated: true },
    { no: 10, name: "approvalsTrackers", kind: "message", T: ApprovalsTracker, repeated: true },
    { no: 11, name: "approvalsTrackerStoreKeys", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

