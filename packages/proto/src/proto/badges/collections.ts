// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/collections.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/any";
import * as dependency_2 from "./transfers";
import * as dependency_3 from "./balances";
import * as dependency_4 from "./permissions";
import * as dependency_5 from "./metadata";
import * as dependency_6 from "./timelines";
import * as dependency_7 from "./../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class BadgeCollection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionId?: string;
            collectionMetadataTimeline?: dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline[];
            badgeMetadataTimeline?: dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline[];
            balancesType?: string;
            offChainBalancesMetadataTimeline?: dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline[];
            customDataTimeline?: dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline[];
            managerTimeline?: dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline[];
            collectionPermissions?: dependency_4.bitbadges.bitbadgeschain.badges.CollectionPermissions;
            collectionApprovals?: dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval[];
            standardsTimeline?: dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline[];
            isArchivedTimeline?: dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline[];
            contractAddressTimeline?: dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline[];
            defaultUserOutgoingApprovals?: dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval[];
            defaultUserIncomingApprovals?: dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval[];
            defaultUserPermissions?: dependency_4.bitbadges.bitbadgeschain.badges.UserPermissions;
            createdBy?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 5, 7, 8, 10, 11, 12, 13, 14, 15], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("collectionMetadataTimeline" in data && data.collectionMetadataTimeline != undefined) {
                    this.collectionMetadataTimeline = data.collectionMetadataTimeline;
                }
                if ("badgeMetadataTimeline" in data && data.badgeMetadataTimeline != undefined) {
                    this.badgeMetadataTimeline = data.badgeMetadataTimeline;
                }
                if ("balancesType" in data && data.balancesType != undefined) {
                    this.balancesType = data.balancesType;
                }
                if ("offChainBalancesMetadataTimeline" in data && data.offChainBalancesMetadataTimeline != undefined) {
                    this.offChainBalancesMetadataTimeline = data.offChainBalancesMetadataTimeline;
                }
                if ("customDataTimeline" in data && data.customDataTimeline != undefined) {
                    this.customDataTimeline = data.customDataTimeline;
                }
                if ("managerTimeline" in data && data.managerTimeline != undefined) {
                    this.managerTimeline = data.managerTimeline;
                }
                if ("collectionPermissions" in data && data.collectionPermissions != undefined) {
                    this.collectionPermissions = data.collectionPermissions;
                }
                if ("collectionApprovals" in data && data.collectionApprovals != undefined) {
                    this.collectionApprovals = data.collectionApprovals;
                }
                if ("standardsTimeline" in data && data.standardsTimeline != undefined) {
                    this.standardsTimeline = data.standardsTimeline;
                }
                if ("isArchivedTimeline" in data && data.isArchivedTimeline != undefined) {
                    this.isArchivedTimeline = data.isArchivedTimeline;
                }
                if ("contractAddressTimeline" in data && data.contractAddressTimeline != undefined) {
                    this.contractAddressTimeline = data.contractAddressTimeline;
                }
                if ("defaultUserOutgoingApprovals" in data && data.defaultUserOutgoingApprovals != undefined) {
                    this.defaultUserOutgoingApprovals = data.defaultUserOutgoingApprovals;
                }
                if ("defaultUserIncomingApprovals" in data && data.defaultUserIncomingApprovals != undefined) {
                    this.defaultUserIncomingApprovals = data.defaultUserIncomingApprovals;
                }
                if ("defaultUserPermissions" in data && data.defaultUserPermissions != undefined) {
                    this.defaultUserPermissions = data.defaultUserPermissions;
                }
                if ("createdBy" in data && data.createdBy != undefined) {
                    this.createdBy = data.createdBy;
                }
            }
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionMetadataTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline, 2) as dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline[];
        }
        set collectionMetadataTimeline(value: dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get badgeMetadataTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline, 3) as dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline[];
        }
        set badgeMetadataTimeline(value: dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get balancesType() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set balancesType(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get offChainBalancesMetadataTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline, 5) as dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline[];
        }
        set offChainBalancesMetadataTimeline(value: dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get customDataTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline, 7) as dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline[];
        }
        set customDataTimeline(value: dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get managerTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline, 8) as dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline[];
        }
        set managerTimeline(value: dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get collectionPermissions() {
            return pb_1.Message.getWrapperField(this, dependency_4.bitbadges.bitbadgeschain.badges.CollectionPermissions, 9) as dependency_4.bitbadges.bitbadgeschain.badges.CollectionPermissions;
        }
        set collectionPermissions(value: dependency_4.bitbadges.bitbadgeschain.badges.CollectionPermissions) {
            pb_1.Message.setWrapperField(this, 9, value);
        }
        get has_collectionPermissions() {
            return pb_1.Message.getField(this, 9) != null;
        }
        get collectionApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval, 10) as dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval[];
        }
        set collectionApprovals(value: dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get standardsTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline, 11) as dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline[];
        }
        set standardsTimeline(value: dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        get isArchivedTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline, 12) as dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline[];
        }
        set isArchivedTimeline(value: dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get contractAddressTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline, 13) as dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline[];
        }
        set contractAddressTimeline(value: dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 13, value);
        }
        get defaultUserOutgoingApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval, 14) as dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval[];
        }
        set defaultUserOutgoingApprovals(value: dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval[]) {
            pb_1.Message.setRepeatedWrapperField(this, 14, value);
        }
        get defaultUserIncomingApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval, 15) as dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval[];
        }
        set defaultUserIncomingApprovals(value: dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval[]) {
            pb_1.Message.setRepeatedWrapperField(this, 15, value);
        }
        get defaultUserPermissions() {
            return pb_1.Message.getWrapperField(this, dependency_4.bitbadges.bitbadgeschain.badges.UserPermissions, 16) as dependency_4.bitbadges.bitbadgeschain.badges.UserPermissions;
        }
        set defaultUserPermissions(value: dependency_4.bitbadges.bitbadgeschain.badges.UserPermissions) {
            pb_1.Message.setWrapperField(this, 16, value);
        }
        get has_defaultUserPermissions() {
            return pb_1.Message.getField(this, 16) != null;
        }
        get createdBy() {
            return pb_1.Message.getFieldWithDefault(this, 17, "") as string;
        }
        set createdBy(value: string) {
            pb_1.Message.setField(this, 17, value);
        }
        static fromObject(data: {
            collectionId?: string;
            collectionMetadataTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline.prototype.toObject>[];
            badgeMetadataTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline.prototype.toObject>[];
            balancesType?: string;
            offChainBalancesMetadataTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline.prototype.toObject>[];
            customDataTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline.prototype.toObject>[];
            managerTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline.prototype.toObject>[];
            collectionPermissions?: ReturnType<typeof dependency_4.bitbadges.bitbadgeschain.badges.CollectionPermissions.prototype.toObject>;
            collectionApprovals?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval.prototype.toObject>[];
            standardsTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline.prototype.toObject>[];
            isArchivedTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline.prototype.toObject>[];
            contractAddressTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline.prototype.toObject>[];
            defaultUserOutgoingApprovals?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.prototype.toObject>[];
            defaultUserIncomingApprovals?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval.prototype.toObject>[];
            defaultUserPermissions?: ReturnType<typeof dependency_4.bitbadges.bitbadgeschain.badges.UserPermissions.prototype.toObject>;
            createdBy?: string;
        }): BadgeCollection {
            const message = new BadgeCollection({});
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.collectionMetadataTimeline != null) {
                message.collectionMetadataTimeline = data.collectionMetadataTimeline.map(item => dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline.fromObject(item));
            }
            if (data.badgeMetadataTimeline != null) {
                message.badgeMetadataTimeline = data.badgeMetadataTimeline.map(item => dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline.fromObject(item));
            }
            if (data.balancesType != null) {
                message.balancesType = data.balancesType;
            }
            if (data.offChainBalancesMetadataTimeline != null) {
                message.offChainBalancesMetadataTimeline = data.offChainBalancesMetadataTimeline.map(item => dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline.fromObject(item));
            }
            if (data.customDataTimeline != null) {
                message.customDataTimeline = data.customDataTimeline.map(item => dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline.fromObject(item));
            }
            if (data.managerTimeline != null) {
                message.managerTimeline = data.managerTimeline.map(item => dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline.fromObject(item));
            }
            if (data.collectionPermissions != null) {
                message.collectionPermissions = dependency_4.bitbadges.bitbadgeschain.badges.CollectionPermissions.fromObject(data.collectionPermissions);
            }
            if (data.collectionApprovals != null) {
                message.collectionApprovals = data.collectionApprovals.map(item => dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval.fromObject(item));
            }
            if (data.standardsTimeline != null) {
                message.standardsTimeline = data.standardsTimeline.map(item => dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline.fromObject(item));
            }
            if (data.isArchivedTimeline != null) {
                message.isArchivedTimeline = data.isArchivedTimeline.map(item => dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline.fromObject(item));
            }
            if (data.contractAddressTimeline != null) {
                message.contractAddressTimeline = data.contractAddressTimeline.map(item => dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline.fromObject(item));
            }
            if (data.defaultUserOutgoingApprovals != null) {
                message.defaultUserOutgoingApprovals = data.defaultUserOutgoingApprovals.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.fromObject(item));
            }
            if (data.defaultUserIncomingApprovals != null) {
                message.defaultUserIncomingApprovals = data.defaultUserIncomingApprovals.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval.fromObject(item));
            }
            if (data.defaultUserPermissions != null) {
                message.defaultUserPermissions = dependency_4.bitbadges.bitbadgeschain.badges.UserPermissions.fromObject(data.defaultUserPermissions);
            }
            if (data.createdBy != null) {
                message.createdBy = data.createdBy;
            }
            return message;
        }
        toObject() {
            const data: {
                collectionId?: string;
                collectionMetadataTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline.prototype.toObject>[];
                badgeMetadataTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline.prototype.toObject>[];
                balancesType?: string;
                offChainBalancesMetadataTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline.prototype.toObject>[];
                customDataTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline.prototype.toObject>[];
                managerTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline.prototype.toObject>[];
                collectionPermissions?: ReturnType<typeof dependency_4.bitbadges.bitbadgeschain.badges.CollectionPermissions.prototype.toObject>;
                collectionApprovals?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval.prototype.toObject>[];
                standardsTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline.prototype.toObject>[];
                isArchivedTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline.prototype.toObject>[];
                contractAddressTimeline?: ReturnType<typeof dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline.prototype.toObject>[];
                defaultUserOutgoingApprovals?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.prototype.toObject>[];
                defaultUserIncomingApprovals?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval.prototype.toObject>[];
                defaultUserPermissions?: ReturnType<typeof dependency_4.bitbadges.bitbadgeschain.badges.UserPermissions.prototype.toObject>;
                createdBy?: string;
            } = {};
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.collectionMetadataTimeline != null) {
                data.collectionMetadataTimeline = this.collectionMetadataTimeline.map((item: dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline) => item.toObject());
            }
            if (this.badgeMetadataTimeline != null) {
                data.badgeMetadataTimeline = this.badgeMetadataTimeline.map((item: dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline) => item.toObject());
            }
            if (this.balancesType != null) {
                data.balancesType = this.balancesType;
            }
            if (this.offChainBalancesMetadataTimeline != null) {
                data.offChainBalancesMetadataTimeline = this.offChainBalancesMetadataTimeline.map((item: dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline) => item.toObject());
            }
            if (this.customDataTimeline != null) {
                data.customDataTimeline = this.customDataTimeline.map((item: dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline) => item.toObject());
            }
            if (this.managerTimeline != null) {
                data.managerTimeline = this.managerTimeline.map((item: dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline) => item.toObject());
            }
            if (this.collectionPermissions != null) {
                data.collectionPermissions = this.collectionPermissions.toObject();
            }
            if (this.collectionApprovals != null) {
                data.collectionApprovals = this.collectionApprovals.map((item: dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval) => item.toObject());
            }
            if (this.standardsTimeline != null) {
                data.standardsTimeline = this.standardsTimeline.map((item: dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline) => item.toObject());
            }
            if (this.isArchivedTimeline != null) {
                data.isArchivedTimeline = this.isArchivedTimeline.map((item: dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline) => item.toObject());
            }
            if (this.contractAddressTimeline != null) {
                data.contractAddressTimeline = this.contractAddressTimeline.map((item: dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline) => item.toObject());
            }
            if (this.defaultUserOutgoingApprovals != null) {
                data.defaultUserOutgoingApprovals = this.defaultUserOutgoingApprovals.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval) => item.toObject());
            }
            if (this.defaultUserIncomingApprovals != null) {
                data.defaultUserIncomingApprovals = this.defaultUserIncomingApprovals.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval) => item.toObject());
            }
            if (this.defaultUserPermissions != null) {
                data.defaultUserPermissions = this.defaultUserPermissions.toObject();
            }
            if (this.createdBy != null) {
                data.createdBy = this.createdBy;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collectionId.length)
                writer.writeString(1, this.collectionId);
            if (this.collectionMetadataTimeline.length)
                writer.writeRepeatedMessage(2, this.collectionMetadataTimeline, (item: dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline) => item.serialize(writer));
            if (this.badgeMetadataTimeline.length)
                writer.writeRepeatedMessage(3, this.badgeMetadataTimeline, (item: dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline) => item.serialize(writer));
            if (this.balancesType.length)
                writer.writeString(4, this.balancesType);
            if (this.offChainBalancesMetadataTimeline.length)
                writer.writeRepeatedMessage(5, this.offChainBalancesMetadataTimeline, (item: dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline) => item.serialize(writer));
            if (this.customDataTimeline.length)
                writer.writeRepeatedMessage(7, this.customDataTimeline, (item: dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline) => item.serialize(writer));
            if (this.managerTimeline.length)
                writer.writeRepeatedMessage(8, this.managerTimeline, (item: dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline) => item.serialize(writer));
            if (this.has_collectionPermissions)
                writer.writeMessage(9, this.collectionPermissions, () => this.collectionPermissions.serialize(writer));
            if (this.collectionApprovals.length)
                writer.writeRepeatedMessage(10, this.collectionApprovals, (item: dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval) => item.serialize(writer));
            if (this.standardsTimeline.length)
                writer.writeRepeatedMessage(11, this.standardsTimeline, (item: dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline) => item.serialize(writer));
            if (this.isArchivedTimeline.length)
                writer.writeRepeatedMessage(12, this.isArchivedTimeline, (item: dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline) => item.serialize(writer));
            if (this.contractAddressTimeline.length)
                writer.writeRepeatedMessage(13, this.contractAddressTimeline, (item: dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline) => item.serialize(writer));
            if (this.defaultUserOutgoingApprovals.length)
                writer.writeRepeatedMessage(14, this.defaultUserOutgoingApprovals, (item: dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval) => item.serialize(writer));
            if (this.defaultUserIncomingApprovals.length)
                writer.writeRepeatedMessage(15, this.defaultUserIncomingApprovals, (item: dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval) => item.serialize(writer));
            if (this.has_defaultUserPermissions)
                writer.writeMessage(16, this.defaultUserPermissions, () => this.defaultUserPermissions.serialize(writer));
            if (this.createdBy.length)
                writer.writeString(17, this.createdBy);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BadgeCollection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BadgeCollection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collectionId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.collectionMetadataTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline.deserialize(reader), dependency_6.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline));
                        break;
                    case 3:
                        reader.readMessage(message.badgeMetadataTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline.deserialize(reader), dependency_6.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline));
                        break;
                    case 4:
                        message.balancesType = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.offChainBalancesMetadataTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline.deserialize(reader), dependency_6.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline));
                        break;
                    case 7:
                        reader.readMessage(message.customDataTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline.deserialize(reader), dependency_6.bitbadges.bitbadgeschain.badges.CustomDataTimeline));
                        break;
                    case 8:
                        reader.readMessage(message.managerTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline.deserialize(reader), dependency_6.bitbadges.bitbadgeschain.badges.ManagerTimeline));
                        break;
                    case 9:
                        reader.readMessage(message.collectionPermissions, () => message.collectionPermissions = dependency_4.bitbadges.bitbadgeschain.badges.CollectionPermissions.deserialize(reader));
                        break;
                    case 10:
                        reader.readMessage(message.collectionApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.CollectionApproval));
                        break;
                    case 11:
                        reader.readMessage(message.standardsTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 11, dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline.deserialize(reader), dependency_6.bitbadges.bitbadgeschain.badges.StandardsTimeline));
                        break;
                    case 12:
                        reader.readMessage(message.isArchivedTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 12, dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline.deserialize(reader), dependency_6.bitbadges.bitbadgeschain.badges.IsArchivedTimeline));
                        break;
                    case 13:
                        reader.readMessage(message.contractAddressTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 13, dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline.deserialize(reader), dependency_6.bitbadges.bitbadgeschain.badges.ContractAddressTimeline));
                        break;
                    case 14:
                        reader.readMessage(message.defaultUserOutgoingApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 14, dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UserOutgoingApproval));
                        break;
                    case 15:
                        reader.readMessage(message.defaultUserIncomingApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 15, dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UserIncomingApproval));
                        break;
                    case 16:
                        reader.readMessage(message.defaultUserPermissions, () => message.defaultUserPermissions = dependency_4.bitbadges.bitbadgeschain.badges.UserPermissions.deserialize(reader));
                        break;
                    case 17:
                        message.createdBy = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BadgeCollection {
            return BadgeCollection.deserialize(bytes);
        }
    }
}
