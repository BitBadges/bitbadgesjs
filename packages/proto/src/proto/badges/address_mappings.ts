/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/address_mappings.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../gogoproto/gogo";
import * as dependency_2 from "./balances";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class AddressMapping extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            mappingId?: string;
            addresses?: string[];
            includeAddresses?: boolean;
            uri?: string;
            customData?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("mappingId" in data && data.mappingId != undefined) {
                    this.mappingId = data.mappingId;
                }
                if ("addresses" in data && data.addresses != undefined) {
                    this.addresses = data.addresses;
                }
                if ("includeAddresses" in data && data.includeAddresses != undefined) {
                    this.includeAddresses = data.includeAddresses;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("customData" in data && data.customData != undefined) {
                    this.customData = data.customData;
                }
            }
        }
        get mappingId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set mappingId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addresses() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set addresses(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get includeAddresses() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set includeAddresses(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get customData() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set customData(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            mappingId?: string;
            addresses?: string[];
            includeAddresses?: boolean;
            uri?: string;
            customData?: string;
        }): AddressMapping {
            const message = new AddressMapping({});
            if (data.mappingId != null) {
                message.mappingId = data.mappingId;
            }
            if (data.addresses != null) {
                message.addresses = data.addresses;
            }
            if (data.includeAddresses != null) {
                message.includeAddresses = data.includeAddresses;
            }
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.customData != null) {
                message.customData = data.customData;
            }
            return message;
        }
        toObject() {
            const data: {
                mappingId?: string;
                addresses?: string[];
                includeAddresses?: boolean;
                uri?: string;
                customData?: string;
            } = {};
            if (this.mappingId != null) {
                data.mappingId = this.mappingId;
            }
            if (this.addresses != null) {
                data.addresses = this.addresses;
            }
            if (this.includeAddresses != null) {
                data.includeAddresses = this.includeAddresses;
            }
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.customData != null) {
                data.customData = this.customData;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.mappingId.length)
                writer.writeString(1, this.mappingId);
            if (this.addresses.length)
                writer.writeRepeatedString(2, this.addresses);
            if (this.includeAddresses != false)
                writer.writeBool(3, this.includeAddresses);
            if (this.uri.length)
                writer.writeString(4, this.uri);
            if (this.customData.length)
                writer.writeString(5, this.customData);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AddressMapping {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AddressMapping();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.mappingId = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    case 3:
                        message.includeAddresses = reader.readBool();
                        break;
                    case 4:
                        message.uri = reader.readString();
                        break;
                    case 5:
                        message.customData = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AddressMapping {
            return AddressMapping.deserialize(bytes);
        }
    }
}
