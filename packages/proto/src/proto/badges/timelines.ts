/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/timelines.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/any";
import * as dependency_2 from "./transfers";
import * as dependency_3 from "./balances";
import * as dependency_4 from "./permissions";
import * as dependency_5 from "./metadata";
import * as dependency_6 from "./../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class CollectionMetadataTimeline extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionMetadata?: dependency_5.bitbadges.bitbadgeschain.badges.CollectionMetadata;
            timelineTimes?: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionMetadata" in data && data.collectionMetadata != undefined) {
                    this.collectionMetadata = data.collectionMetadata;
                }
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
            }
        }
        get collectionMetadata() {
            return pb_1.Message.getWrapperField(this, dependency_5.bitbadges.bitbadgeschain.badges.CollectionMetadata, 1) as dependency_5.bitbadges.bitbadgeschain.badges.CollectionMetadata;
        }
        set collectionMetadata(value: dependency_5.bitbadges.bitbadgeschain.badges.CollectionMetadata) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_collectionMetadata() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            collectionMetadata?: ReturnType<typeof dependency_5.bitbadges.bitbadgeschain.badges.CollectionMetadata.prototype.toObject>;
            timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): CollectionMetadataTimeline {
            const message = new CollectionMetadataTimeline({});
            if (data.collectionMetadata != null) {
                message.collectionMetadata = dependency_5.bitbadges.bitbadgeschain.badges.CollectionMetadata.fromObject(data.collectionMetadata);
            }
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_3.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                collectionMetadata?: ReturnType<typeof dependency_5.bitbadges.bitbadgeschain.badges.CollectionMetadata.prototype.toObject>;
                timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.collectionMetadata != null) {
                data.collectionMetadata = this.collectionMetadata.toObject();
            }
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_collectionMetadata)
                writer.writeMessage(1, this.collectionMetadata, () => this.collectionMetadata.serialize(writer));
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(2, this.timelineTimes, (item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionMetadataTimeline {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionMetadataTimeline();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.collectionMetadata, () => message.collectionMetadata = dependency_5.bitbadges.bitbadgeschain.badges.CollectionMetadata.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CollectionMetadataTimeline {
            return CollectionMetadataTimeline.deserialize(bytes);
        }
    }
    export class BadgeMetadataTimeline extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            badgeMetadata?: dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata[];
            timelineTimes?: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("badgeMetadata" in data && data.badgeMetadata != undefined) {
                    this.badgeMetadata = data.badgeMetadata;
                }
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
            }
        }
        get badgeMetadata() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata, 1) as dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata[];
        }
        set badgeMetadata(value: dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            badgeMetadata?: ReturnType<typeof dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata.prototype.toObject>[];
            timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): BadgeMetadataTimeline {
            const message = new BadgeMetadataTimeline({});
            if (data.badgeMetadata != null) {
                message.badgeMetadata = data.badgeMetadata.map(item => dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata.fromObject(item));
            }
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_3.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                badgeMetadata?: ReturnType<typeof dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata.prototype.toObject>[];
                timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.badgeMetadata != null) {
                data.badgeMetadata = this.badgeMetadata.map((item: dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata) => item.toObject());
            }
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.badgeMetadata.length)
                writer.writeRepeatedMessage(1, this.badgeMetadata, (item: dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata) => item.serialize(writer));
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(2, this.timelineTimes, (item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BadgeMetadataTimeline {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BadgeMetadataTimeline();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.badgeMetadata, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata.deserialize(reader), dependency_5.bitbadges.bitbadgeschain.badges.BadgeMetadata));
                        break;
                    case 2:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BadgeMetadataTimeline {
            return BadgeMetadataTimeline.deserialize(bytes);
        }
    }
    export class OffChainBalancesMetadataTimeline extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            offChainBalancesMetadata?: dependency_5.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadata;
            timelineTimes?: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("offChainBalancesMetadata" in data && data.offChainBalancesMetadata != undefined) {
                    this.offChainBalancesMetadata = data.offChainBalancesMetadata;
                }
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
            }
        }
        get offChainBalancesMetadata() {
            return pb_1.Message.getWrapperField(this, dependency_5.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadata, 1) as dependency_5.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadata;
        }
        set offChainBalancesMetadata(value: dependency_5.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadata) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_offChainBalancesMetadata() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            offChainBalancesMetadata?: ReturnType<typeof dependency_5.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadata.prototype.toObject>;
            timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): OffChainBalancesMetadataTimeline {
            const message = new OffChainBalancesMetadataTimeline({});
            if (data.offChainBalancesMetadata != null) {
                message.offChainBalancesMetadata = dependency_5.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadata.fromObject(data.offChainBalancesMetadata);
            }
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_3.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                offChainBalancesMetadata?: ReturnType<typeof dependency_5.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadata.prototype.toObject>;
                timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.offChainBalancesMetadata != null) {
                data.offChainBalancesMetadata = this.offChainBalancesMetadata.toObject();
            }
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_offChainBalancesMetadata)
                writer.writeMessage(1, this.offChainBalancesMetadata, () => this.offChainBalancesMetadata.serialize(writer));
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(2, this.timelineTimes, (item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): OffChainBalancesMetadataTimeline {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new OffChainBalancesMetadataTimeline();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.offChainBalancesMetadata, () => message.offChainBalancesMetadata = dependency_5.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadata.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): OffChainBalancesMetadataTimeline {
            return OffChainBalancesMetadataTimeline.deserialize(bytes);
        }
    }
    export class InheritedBalancesTimeline extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            inheritedBalances?: dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance[];
            timelineTimes?: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("inheritedBalances" in data && data.inheritedBalances != undefined) {
                    this.inheritedBalances = data.inheritedBalances;
                }
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
            }
        }
        get inheritedBalances() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance, 1) as dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance[];
        }
        set inheritedBalances(value: dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            inheritedBalances?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance.prototype.toObject>[];
            timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): InheritedBalancesTimeline {
            const message = new InheritedBalancesTimeline({});
            if (data.inheritedBalances != null) {
                message.inheritedBalances = data.inheritedBalances.map(item => dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance.fromObject(item));
            }
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_3.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                inheritedBalances?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance.prototype.toObject>[];
                timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.inheritedBalances != null) {
                data.inheritedBalances = this.inheritedBalances.map((item: dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance) => item.toObject());
            }
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.inheritedBalances.length)
                writer.writeRepeatedMessage(1, this.inheritedBalances, (item: dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance) => item.serialize(writer));
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(2, this.timelineTimes, (item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InheritedBalancesTimeline {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InheritedBalancesTimeline();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.inheritedBalances, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.InheritedBalance));
                        break;
                    case 2:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InheritedBalancesTimeline {
            return InheritedBalancesTimeline.deserialize(bytes);
        }
    }
    export class CustomDataTimeline extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            customData?: string;
            timelineTimes?: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("customData" in data && data.customData != undefined) {
                    this.customData = data.customData;
                }
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
            }
        }
        get customData() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set customData(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            customData?: string;
            timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): CustomDataTimeline {
            const message = new CustomDataTimeline({});
            if (data.customData != null) {
                message.customData = data.customData;
            }
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_3.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                customData?: string;
                timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.customData != null) {
                data.customData = this.customData;
            }
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.customData.length)
                writer.writeString(1, this.customData);
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(2, this.timelineTimes, (item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CustomDataTimeline {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CustomDataTimeline();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.customData = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CustomDataTimeline {
            return CustomDataTimeline.deserialize(bytes);
        }
    }
    export class ManagerTimeline extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            manager?: string;
            timelineTimes?: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("manager" in data && data.manager != undefined) {
                    this.manager = data.manager;
                }
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
            }
        }
        get manager() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set manager(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            manager?: string;
            timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): ManagerTimeline {
            const message = new ManagerTimeline({});
            if (data.manager != null) {
                message.manager = data.manager;
            }
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_3.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                manager?: string;
                timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.manager != null) {
                data.manager = this.manager;
            }
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.manager.length)
                writer.writeString(1, this.manager);
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(2, this.timelineTimes, (item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ManagerTimeline {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ManagerTimeline();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.manager = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ManagerTimeline {
            return ManagerTimeline.deserialize(bytes);
        }
    }
    export class IsArchivedTimeline extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            isArchived?: boolean;
            timelineTimes?: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("isArchived" in data && data.isArchived != undefined) {
                    this.isArchived = data.isArchived;
                }
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
            }
        }
        get isArchived() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set isArchived(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            isArchived?: boolean;
            timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): IsArchivedTimeline {
            const message = new IsArchivedTimeline({});
            if (data.isArchived != null) {
                message.isArchived = data.isArchived;
            }
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_3.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                isArchived?: boolean;
                timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.isArchived != null) {
                data.isArchived = this.isArchived;
            }
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.isArchived != false)
                writer.writeBool(1, this.isArchived);
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(2, this.timelineTimes, (item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): IsArchivedTimeline {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new IsArchivedTimeline();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.isArchived = reader.readBool();
                        break;
                    case 2:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): IsArchivedTimeline {
            return IsArchivedTimeline.deserialize(bytes);
        }
    }
    export class ContractAddressTimeline extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            contractAddress?: string;
            timelineTimes?: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("contractAddress" in data && data.contractAddress != undefined) {
                    this.contractAddress = data.contractAddress;
                }
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
            }
        }
        get contractAddress() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set contractAddress(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            contractAddress?: string;
            timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): ContractAddressTimeline {
            const message = new ContractAddressTimeline({});
            if (data.contractAddress != null) {
                message.contractAddress = data.contractAddress;
            }
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_3.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                contractAddress?: string;
                timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.contractAddress != null) {
                data.contractAddress = this.contractAddress;
            }
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.contractAddress.length)
                writer.writeString(1, this.contractAddress);
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(2, this.timelineTimes, (item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractAddressTimeline {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractAddressTimeline();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.contractAddress = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractAddressTimeline {
            return ContractAddressTimeline.deserialize(bytes);
        }
    }
    export class StandardsTimeline extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            standards?: string[];
            timelineTimes?: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("standards" in data && data.standards != undefined) {
                    this.standards = data.standards;
                }
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
            }
        }
        get standards() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as string[];
        }
        set standards(value: string[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_3.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_3.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            standards?: string[];
            timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): StandardsTimeline {
            const message = new StandardsTimeline({});
            if (data.standards != null) {
                message.standards = data.standards;
            }
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_3.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                standards?: string[];
                timelineTimes?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.standards != null) {
                data.standards = this.standards;
            }
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.standards.length)
                writer.writeRepeatedString(1, this.standards);
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(2, this.timelineTimes, (item: dependency_3.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): StandardsTimeline {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new StandardsTimeline();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        pb_1.Message.addToRepeatedField(message, 1, reader.readString());
                        break;
                    case 2:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): StandardsTimeline {
            return StandardsTimeline.deserialize(bytes);
        }
    }
}
