// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file badges/query.proto (package badges, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { BadgeCollection } from "./collections_pb.js";
import { ApprovalsTracker, UserBalanceStore } from "./transfers_pb.js";
import { AddressMapping } from "./address_mappings_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message badges.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message badges.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: badges.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message badges.QueryGetCollectionRequest
 */
export class QueryGetCollectionRequest extends Message<QueryGetCollectionRequest> {
  /**
   * @generated from field: string collectionId = 1;
   */
  collectionId = "";

  constructor(data?: PartialMessage<QueryGetCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetCollectionRequest {
    return new QueryGetCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetCollectionRequest {
    return new QueryGetCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetCollectionRequest {
    return new QueryGetCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetCollectionRequest | PlainMessage<QueryGetCollectionRequest> | undefined, b: QueryGetCollectionRequest | PlainMessage<QueryGetCollectionRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetCollectionRequest, a, b);
  }
}

/**
 * @generated from message badges.QueryGetCollectionResponse
 */
export class QueryGetCollectionResponse extends Message<QueryGetCollectionResponse> {
  /**
   * @generated from field: badges.BadgeCollection collection = 1;
   */
  collection?: BadgeCollection;

  constructor(data?: PartialMessage<QueryGetCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: BadgeCollection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetCollectionResponse {
    return new QueryGetCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetCollectionResponse {
    return new QueryGetCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetCollectionResponse {
    return new QueryGetCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetCollectionResponse | PlainMessage<QueryGetCollectionResponse> | undefined, b: QueryGetCollectionResponse | PlainMessage<QueryGetCollectionResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetCollectionResponse, a, b);
  }
}

/**
 * @generated from message badges.QueryGetBalanceRequest
 */
export class QueryGetBalanceRequest extends Message<QueryGetBalanceRequest> {
  /**
   * @generated from field: string collectionId = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<QueryGetBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetBalanceRequest {
    return new QueryGetBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetBalanceRequest {
    return new QueryGetBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetBalanceRequest {
    return new QueryGetBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetBalanceRequest | PlainMessage<QueryGetBalanceRequest> | undefined, b: QueryGetBalanceRequest | PlainMessage<QueryGetBalanceRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetBalanceRequest, a, b);
  }
}

/**
 * @generated from message badges.QueryGetBalanceResponse
 */
export class QueryGetBalanceResponse extends Message<QueryGetBalanceResponse> {
  /**
   * @generated from field: badges.UserBalanceStore balance = 1;
   */
  balance?: UserBalanceStore;

  constructor(data?: PartialMessage<QueryGetBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "message", T: UserBalanceStore },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetBalanceResponse {
    return new QueryGetBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetBalanceResponse {
    return new QueryGetBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetBalanceResponse {
    return new QueryGetBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetBalanceResponse | PlainMessage<QueryGetBalanceResponse> | undefined, b: QueryGetBalanceResponse | PlainMessage<QueryGetBalanceResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetBalanceResponse, a, b);
  }
}

/**
 * @generated from message badges.QueryGetAddressMappingRequest
 */
export class QueryGetAddressMappingRequest extends Message<QueryGetAddressMappingRequest> {
  /**
   * @generated from field: string mappingId = 1;
   */
  mappingId = "";

  constructor(data?: PartialMessage<QueryGetAddressMappingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetAddressMappingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mappingId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetAddressMappingRequest {
    return new QueryGetAddressMappingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetAddressMappingRequest {
    return new QueryGetAddressMappingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetAddressMappingRequest {
    return new QueryGetAddressMappingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetAddressMappingRequest | PlainMessage<QueryGetAddressMappingRequest> | undefined, b: QueryGetAddressMappingRequest | PlainMessage<QueryGetAddressMappingRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetAddressMappingRequest, a, b);
  }
}

/**
 * @generated from message badges.QueryGetAddressMappingResponse
 */
export class QueryGetAddressMappingResponse extends Message<QueryGetAddressMappingResponse> {
  /**
   * @generated from field: badges.AddressMapping mapping = 1;
   */
  mapping?: AddressMapping;

  constructor(data?: PartialMessage<QueryGetAddressMappingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetAddressMappingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mapping", kind: "message", T: AddressMapping },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetAddressMappingResponse {
    return new QueryGetAddressMappingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetAddressMappingResponse {
    return new QueryGetAddressMappingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetAddressMappingResponse {
    return new QueryGetAddressMappingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetAddressMappingResponse | PlainMessage<QueryGetAddressMappingResponse> | undefined, b: QueryGetAddressMappingResponse | PlainMessage<QueryGetAddressMappingResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetAddressMappingResponse, a, b);
  }
}

/**
 * @generated from message badges.QueryGetApprovalsTrackerRequest
 */
export class QueryGetApprovalsTrackerRequest extends Message<QueryGetApprovalsTrackerRequest> {
  /**
   * @generated from field: string collectionId = 5;
   */
  collectionId = "";

  /**
   * "collection" or "incoming" or "outgoing"
   *
   * @generated from field: string approvalLevel = 2;
   */
  approvalLevel = "";

  /**
   * if approvalLevel is "collection", leave blank
   *
   * @generated from field: string approverAddress = 3;
   */
  approverAddress = "";

  /**
   * @generated from field: string amountTrackerId = 1;
   */
  amountTrackerId = "";

  /**
   * @generated from field: string trackerType = 4;
   */
  trackerType = "";

  /**
   * if trackerType is "overall", leave blank
   *
   * @generated from field: string approvedAddress = 6;
   */
  approvedAddress = "";

  constructor(data?: PartialMessage<QueryGetApprovalsTrackerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetApprovalsTrackerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "collectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "approvalLevel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "approverAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "amountTrackerId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "trackerType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "approvedAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetApprovalsTrackerRequest {
    return new QueryGetApprovalsTrackerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetApprovalsTrackerRequest {
    return new QueryGetApprovalsTrackerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetApprovalsTrackerRequest {
    return new QueryGetApprovalsTrackerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetApprovalsTrackerRequest | PlainMessage<QueryGetApprovalsTrackerRequest> | undefined, b: QueryGetApprovalsTrackerRequest | PlainMessage<QueryGetApprovalsTrackerRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetApprovalsTrackerRequest, a, b);
  }
}

/**
 * @generated from message badges.QueryGetApprovalsTrackerResponse
 */
export class QueryGetApprovalsTrackerResponse extends Message<QueryGetApprovalsTrackerResponse> {
  /**
   * @generated from field: badges.ApprovalsTracker tracker = 1;
   */
  tracker?: ApprovalsTracker;

  constructor(data?: PartialMessage<QueryGetApprovalsTrackerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetApprovalsTrackerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tracker", kind: "message", T: ApprovalsTracker },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetApprovalsTrackerResponse {
    return new QueryGetApprovalsTrackerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetApprovalsTrackerResponse {
    return new QueryGetApprovalsTrackerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetApprovalsTrackerResponse {
    return new QueryGetApprovalsTrackerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetApprovalsTrackerResponse | PlainMessage<QueryGetApprovalsTrackerResponse> | undefined, b: QueryGetApprovalsTrackerResponse | PlainMessage<QueryGetApprovalsTrackerResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetApprovalsTrackerResponse, a, b);
  }
}

/**
 * @generated from message badges.QueryGetNumUsedForMerkleChallengeRequest
 */
export class QueryGetNumUsedForMerkleChallengeRequest extends Message<QueryGetNumUsedForMerkleChallengeRequest> {
  /**
   * @generated from field: string collectionId = 1;
   */
  collectionId = "";

  /**
   * "collection" or "incoming" or "outgoing"
   *
   * @generated from field: string approvalLevel = 2;
   */
  approvalLevel = "";

  /**
   * if approvalLevel is "collection", leave blank
   *
   * @generated from field: string approverAddress = 3;
   */
  approverAddress = "";

  /**
   * @generated from field: string challengeTrackerId = 4;
   */
  challengeTrackerId = "";

  /**
   * @generated from field: string leafIndex = 5;
   */
  leafIndex = "";

  constructor(data?: PartialMessage<QueryGetNumUsedForMerkleChallengeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetNumUsedForMerkleChallengeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "approvalLevel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "approverAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "challengeTrackerId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "leafIndex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetNumUsedForMerkleChallengeRequest {
    return new QueryGetNumUsedForMerkleChallengeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetNumUsedForMerkleChallengeRequest {
    return new QueryGetNumUsedForMerkleChallengeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetNumUsedForMerkleChallengeRequest {
    return new QueryGetNumUsedForMerkleChallengeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetNumUsedForMerkleChallengeRequest | PlainMessage<QueryGetNumUsedForMerkleChallengeRequest> | undefined, b: QueryGetNumUsedForMerkleChallengeRequest | PlainMessage<QueryGetNumUsedForMerkleChallengeRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetNumUsedForMerkleChallengeRequest, a, b);
  }
}

/**
 * @generated from message badges.QueryGetNumUsedForMerkleChallengeResponse
 */
export class QueryGetNumUsedForMerkleChallengeResponse extends Message<QueryGetNumUsedForMerkleChallengeResponse> {
  /**
   * @generated from field: string numUsed = 1;
   */
  numUsed = "";

  constructor(data?: PartialMessage<QueryGetNumUsedForMerkleChallengeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetNumUsedForMerkleChallengeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numUsed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetNumUsedForMerkleChallengeResponse {
    return new QueryGetNumUsedForMerkleChallengeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetNumUsedForMerkleChallengeResponse {
    return new QueryGetNumUsedForMerkleChallengeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetNumUsedForMerkleChallengeResponse {
    return new QueryGetNumUsedForMerkleChallengeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetNumUsedForMerkleChallengeResponse | PlainMessage<QueryGetNumUsedForMerkleChallengeResponse> | undefined, b: QueryGetNumUsedForMerkleChallengeResponse | PlainMessage<QueryGetNumUsedForMerkleChallengeResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetNumUsedForMerkleChallengeResponse, a, b);
  }
}

