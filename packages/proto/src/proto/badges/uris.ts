// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/uris.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ranges";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class UriObject extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            decodeScheme?: number;
            scheme?: number;
            uri?: Uint8Array;
            idxRangeToRemove?: dependency_1.bitbadges.bitbadgeschain.badges.IdRange;
            insertSubassetBytesIdx?: number;
            bytesToInsert?: Uint8Array;
            insertIdIdx?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("decodeScheme" in data && data.decodeScheme != undefined) {
                    this.decodeScheme = data.decodeScheme;
                }
                if ("scheme" in data && data.scheme != undefined) {
                    this.scheme = data.scheme;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("idxRangeToRemove" in data && data.idxRangeToRemove != undefined) {
                    this.idxRangeToRemove = data.idxRangeToRemove;
                }
                if ("insertSubassetBytesIdx" in data && data.insertSubassetBytesIdx != undefined) {
                    this.insertSubassetBytesIdx = data.insertSubassetBytesIdx;
                }
                if ("bytesToInsert" in data && data.bytesToInsert != undefined) {
                    this.bytesToInsert = data.bytesToInsert;
                }
                if ("insertIdIdx" in data && data.insertIdIdx != undefined) {
                    this.insertIdIdx = data.insertIdIdx;
                }
            }
        }
        get decodeScheme() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set decodeScheme(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get scheme() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set scheme(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
        }
        set uri(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get idxRangeToRemove() {
            return pb_1.Message.getWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.IdRange, 4) as dependency_1.bitbadges.bitbadgeschain.badges.IdRange;
        }
        set idxRangeToRemove(value: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_idxRangeToRemove() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get insertSubassetBytesIdx() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set insertSubassetBytesIdx(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get bytesToInsert() {
            return pb_1.Message.getFieldWithDefault(this, 6, new Uint8Array()) as Uint8Array;
        }
        set bytesToInsert(value: Uint8Array) {
            pb_1.Message.setField(this, 6, value);
        }
        get insertIdIdx() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set insertIdIdx(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            decodeScheme?: number;
            scheme?: number;
            uri?: Uint8Array;
            idxRangeToRemove?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>;
            insertSubassetBytesIdx?: number;
            bytesToInsert?: Uint8Array;
            insertIdIdx?: number;
        }): UriObject {
            const message = new UriObject({});
            if (data.decodeScheme != null) {
                message.decodeScheme = data.decodeScheme;
            }
            if (data.scheme != null) {
                message.scheme = data.scheme;
            }
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.idxRangeToRemove != null) {
                message.idxRangeToRemove = dependency_1.bitbadges.bitbadgeschain.badges.IdRange.fromObject(data.idxRangeToRemove);
            }
            if (data.insertSubassetBytesIdx != null) {
                message.insertSubassetBytesIdx = data.insertSubassetBytesIdx;
            }
            if (data.bytesToInsert != null) {
                message.bytesToInsert = data.bytesToInsert;
            }
            if (data.insertIdIdx != null) {
                message.insertIdIdx = data.insertIdIdx;
            }
            return message;
        }
        toObject() {
            const data: {
                decodeScheme?: number;
                scheme?: number;
                uri?: Uint8Array;
                idxRangeToRemove?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>;
                insertSubassetBytesIdx?: number;
                bytesToInsert?: Uint8Array;
                insertIdIdx?: number;
            } = {};
            if (this.decodeScheme != null) {
                data.decodeScheme = this.decodeScheme;
            }
            if (this.scheme != null) {
                data.scheme = this.scheme;
            }
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.idxRangeToRemove != null) {
                data.idxRangeToRemove = this.idxRangeToRemove.toObject();
            }
            if (this.insertSubassetBytesIdx != null) {
                data.insertSubassetBytesIdx = this.insertSubassetBytesIdx;
            }
            if (this.bytesToInsert != null) {
                data.bytesToInsert = this.bytesToInsert;
            }
            if (this.insertIdIdx != null) {
                data.insertIdIdx = this.insertIdIdx;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.decodeScheme != 0)
                writer.writeUint64(1, this.decodeScheme);
            if (this.scheme != 0)
                writer.writeUint64(2, this.scheme);
            if (this.uri.length)
                writer.writeBytes(3, this.uri);
            if (this.has_idxRangeToRemove)
                writer.writeMessage(4, this.idxRangeToRemove, () => this.idxRangeToRemove.serialize(writer));
            if (this.insertSubassetBytesIdx != 0)
                writer.writeUint64(5, this.insertSubassetBytesIdx);
            if (this.bytesToInsert.length)
                writer.writeBytes(6, this.bytesToInsert);
            if (this.insertIdIdx != 0)
                writer.writeUint64(7, this.insertIdIdx);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UriObject {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UriObject();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.decodeScheme = reader.readUint64();
                        break;
                    case 2:
                        message.scheme = reader.readUint64();
                        break;
                    case 3:
                        message.uri = reader.readBytes();
                        break;
                    case 4:
                        reader.readMessage(message.idxRangeToRemove, () => message.idxRangeToRemove = dependency_1.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader));
                        break;
                    case 5:
                        message.insertSubassetBytesIdx = reader.readUint64();
                        break;
                    case 6:
                        message.bytesToInsert = reader.readBytes();
                        break;
                    case 7:
                        message.insertIdIdx = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UriObject {
            return UriObject.deserialize(bytes);
        }
    }
}
