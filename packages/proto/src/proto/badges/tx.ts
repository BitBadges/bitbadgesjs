// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ranges";
import * as dependency_2 from "./uris";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class MsgNewBadge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            uri?: dependency_2.bitbadges.bitbadgeschain.badges.UriObject;
            permissions?: number;
            arbitraryBytes?: Uint8Array;
            defaultSubassetSupply?: number;
            freezeAddressRanges?: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
            standard?: number;
            subassetSupplys?: number[];
            subassetAmountsToCreate?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [9, 7, 8], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("permissions" in data && data.permissions != undefined) {
                    this.permissions = data.permissions;
                }
                if ("arbitraryBytes" in data && data.arbitraryBytes != undefined) {
                    this.arbitraryBytes = data.arbitraryBytes;
                }
                if ("defaultSubassetSupply" in data && data.defaultSubassetSupply != undefined) {
                    this.defaultSubassetSupply = data.defaultSubassetSupply;
                }
                if ("freezeAddressRanges" in data && data.freezeAddressRanges != undefined) {
                    this.freezeAddressRanges = data.freezeAddressRanges;
                }
                if ("standard" in data && data.standard != undefined) {
                    this.standard = data.standard;
                }
                if ("subassetSupplys" in data && data.subassetSupplys != undefined) {
                    this.subassetSupplys = data.subassetSupplys;
                }
                if ("subassetAmountsToCreate" in data && data.subassetAmountsToCreate != undefined) {
                    this.subassetAmountsToCreate = data.subassetAmountsToCreate;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get uri() {
            return pb_1.Message.getWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UriObject, 2) as dependency_2.bitbadges.bitbadgeschain.badges.UriObject;
        }
        set uri(value: dependency_2.bitbadges.bitbadgeschain.badges.UriObject) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_uri() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get permissions() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set permissions(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get arbitraryBytes() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array()) as Uint8Array;
        }
        set arbitraryBytes(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get defaultSubassetSupply() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set defaultSubassetSupply(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get freezeAddressRanges() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.IdRange, 9) as dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
        }
        set freezeAddressRanges(value: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get standard() {
            return pb_1.Message.getFieldWithDefault(this, 10, 0) as number;
        }
        set standard(value: number) {
            pb_1.Message.setField(this, 10, value);
        }
        get subassetSupplys() {
            return pb_1.Message.getFieldWithDefault(this, 7, []) as number[];
        }
        set subassetSupplys(value: number[]) {
            pb_1.Message.setField(this, 7, value);
        }
        get subassetAmountsToCreate() {
            return pb_1.Message.getFieldWithDefault(this, 8, []) as number[];
        }
        set subassetAmountsToCreate(value: number[]) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            creator?: string;
            uri?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UriObject.prototype.toObject>;
            permissions?: number;
            arbitraryBytes?: Uint8Array;
            defaultSubassetSupply?: number;
            freezeAddressRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
            standard?: number;
            subassetSupplys?: number[];
            subassetAmountsToCreate?: number[];
        }): MsgNewBadge {
            const message = new MsgNewBadge({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.uri != null) {
                message.uri = dependency_2.bitbadges.bitbadgeschain.badges.UriObject.fromObject(data.uri);
            }
            if (data.permissions != null) {
                message.permissions = data.permissions;
            }
            if (data.arbitraryBytes != null) {
                message.arbitraryBytes = data.arbitraryBytes;
            }
            if (data.defaultSubassetSupply != null) {
                message.defaultSubassetSupply = data.defaultSubassetSupply;
            }
            if (data.freezeAddressRanges != null) {
                message.freezeAddressRanges = data.freezeAddressRanges.map(item => dependency_1.bitbadges.bitbadgeschain.badges.IdRange.fromObject(item));
            }
            if (data.standard != null) {
                message.standard = data.standard;
            }
            if (data.subassetSupplys != null) {
                message.subassetSupplys = data.subassetSupplys;
            }
            if (data.subassetAmountsToCreate != null) {
                message.subassetAmountsToCreate = data.subassetAmountsToCreate;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                uri?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UriObject.prototype.toObject>;
                permissions?: number;
                arbitraryBytes?: Uint8Array;
                defaultSubassetSupply?: number;
                freezeAddressRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
                standard?: number;
                subassetSupplys?: number[];
                subassetAmountsToCreate?: number[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.uri != null) {
                data.uri = this.uri.toObject();
            }
            if (this.permissions != null) {
                data.permissions = this.permissions;
            }
            if (this.arbitraryBytes != null) {
                data.arbitraryBytes = this.arbitraryBytes;
            }
            if (this.defaultSubassetSupply != null) {
                data.defaultSubassetSupply = this.defaultSubassetSupply;
            }
            if (this.freezeAddressRanges != null) {
                data.freezeAddressRanges = this.freezeAddressRanges.map((item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.toObject());
            }
            if (this.standard != null) {
                data.standard = this.standard;
            }
            if (this.subassetSupplys != null) {
                data.subassetSupplys = this.subassetSupplys;
            }
            if (this.subassetAmountsToCreate != null) {
                data.subassetAmountsToCreate = this.subassetAmountsToCreate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.has_uri)
                writer.writeMessage(2, this.uri, () => this.uri.serialize(writer));
            if (this.permissions != 0)
                writer.writeUint64(4, this.permissions);
            if (this.arbitraryBytes.length)
                writer.writeBytes(5, this.arbitraryBytes);
            if (this.defaultSubassetSupply != 0)
                writer.writeUint64(6, this.defaultSubassetSupply);
            if (this.freezeAddressRanges.length)
                writer.writeRepeatedMessage(9, this.freezeAddressRanges, (item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.serialize(writer));
            if (this.standard != 0)
                writer.writeUint64(10, this.standard);
            if (this.subassetSupplys.length)
                writer.writePackedUint64(7, this.subassetSupplys);
            if (this.subassetAmountsToCreate.length)
                writer.writePackedUint64(8, this.subassetAmountsToCreate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgNewBadge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgNewBadge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.uri, () => message.uri = dependency_2.bitbadges.bitbadgeschain.badges.UriObject.deserialize(reader));
                        break;
                    case 4:
                        message.permissions = reader.readUint64();
                        break;
                    case 5:
                        message.arbitraryBytes = reader.readBytes();
                        break;
                    case 6:
                        message.defaultSubassetSupply = reader.readUint64();
                        break;
                    case 9:
                        reader.readMessage(message.freezeAddressRanges, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_1.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.IdRange));
                        break;
                    case 10:
                        message.standard = reader.readUint64();
                        break;
                    case 7:
                        message.subassetSupplys = reader.readPackedUint64();
                        break;
                    case 8:
                        message.subassetAmountsToCreate = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgNewBadge {
            return MsgNewBadge.deserialize(bytes);
        }
    }
    export class MsgNewBadgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            id?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            id?: number;
        }): MsgNewBadgeResponse {
            const message = new MsgNewBadgeResponse({});
            if (data.id != null) {
                message.id = data.id;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: number;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.id != 0)
                writer.writeUint64(1, this.id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgNewBadgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgNewBadgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgNewBadgeResponse {
            return MsgNewBadgeResponse.deserialize(bytes);
        }
    }
    export class MsgNewSubBadge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            badgeId?: number;
            supplys?: number[];
            amountsToCreate?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("supplys" in data && data.supplys != undefined) {
                    this.supplys = data.supplys;
                }
                if ("amountsToCreate" in data && data.amountsToCreate != undefined) {
                    this.amountsToCreate = data.amountsToCreate;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get supplys() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set supplys(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get amountsToCreate() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set amountsToCreate(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            creator?: string;
            badgeId?: number;
            supplys?: number[];
            amountsToCreate?: number[];
        }): MsgNewSubBadge {
            const message = new MsgNewSubBadge({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.supplys != null) {
                message.supplys = data.supplys;
            }
            if (data.amountsToCreate != null) {
                message.amountsToCreate = data.amountsToCreate;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                badgeId?: number;
                supplys?: number[];
                amountsToCreate?: number[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.supplys != null) {
                data.supplys = this.supplys;
            }
            if (this.amountsToCreate != null) {
                data.amountsToCreate = this.amountsToCreate;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.badgeId != 0)
                writer.writeUint64(2, this.badgeId);
            if (this.supplys.length)
                writer.writePackedUint64(3, this.supplys);
            if (this.amountsToCreate.length)
                writer.writePackedUint64(4, this.amountsToCreate);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgNewSubBadge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgNewSubBadge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.badgeId = reader.readUint64();
                        break;
                    case 3:
                        message.supplys = reader.readPackedUint64();
                        break;
                    case 4:
                        message.amountsToCreate = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgNewSubBadge {
            return MsgNewSubBadge.deserialize(bytes);
        }
    }
    export class MsgNewSubBadgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nextSubassetId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nextSubassetId" in data && data.nextSubassetId != undefined) {
                    this.nextSubassetId = data.nextSubassetId;
                }
            }
        }
        get nextSubassetId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set nextSubassetId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            nextSubassetId?: number;
        }): MsgNewSubBadgeResponse {
            const message = new MsgNewSubBadgeResponse({});
            if (data.nextSubassetId != null) {
                message.nextSubassetId = data.nextSubassetId;
            }
            return message;
        }
        toObject() {
            const data: {
                nextSubassetId?: number;
            } = {};
            if (this.nextSubassetId != null) {
                data.nextSubassetId = this.nextSubassetId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nextSubassetId != 0)
                writer.writeUint64(1, this.nextSubassetId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgNewSubBadgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgNewSubBadgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nextSubassetId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgNewSubBadgeResponse {
            return MsgNewSubBadgeResponse.deserialize(bytes);
        }
    }
    export class MsgTransferBadge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            from?: number;
            toAddresses?: number[];
            amounts?: number[];
            badgeId?: number;
            subbadgeRanges?: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
            expiration_time?: number;
            cantCancelBeforeTime?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("toAddresses" in data && data.toAddresses != undefined) {
                    this.toAddresses = data.toAddresses;
                }
                if ("amounts" in data && data.amounts != undefined) {
                    this.amounts = data.amounts;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("subbadgeRanges" in data && data.subbadgeRanges != undefined) {
                    this.subbadgeRanges = data.subbadgeRanges;
                }
                if ("expiration_time" in data && data.expiration_time != undefined) {
                    this.expiration_time = data.expiration_time;
                }
                if ("cantCancelBeforeTime" in data && data.cantCancelBeforeTime != undefined) {
                    this.cantCancelBeforeTime = data.cantCancelBeforeTime;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set from(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get toAddresses() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set toAddresses(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get amounts() {
            return pb_1.Message.getFieldWithDefault(this, 4, []) as number[];
        }
        set amounts(value: number[]) {
            pb_1.Message.setField(this, 4, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get subbadgeRanges() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.IdRange, 6) as dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
        }
        set subbadgeRanges(value: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get expiration_time() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set expiration_time(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get cantCancelBeforeTime() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set cantCancelBeforeTime(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            creator?: string;
            from?: number;
            toAddresses?: number[];
            amounts?: number[];
            badgeId?: number;
            subbadgeRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
            expiration_time?: number;
            cantCancelBeforeTime?: number;
        }): MsgTransferBadge {
            const message = new MsgTransferBadge({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.toAddresses != null) {
                message.toAddresses = data.toAddresses;
            }
            if (data.amounts != null) {
                message.amounts = data.amounts;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.subbadgeRanges != null) {
                message.subbadgeRanges = data.subbadgeRanges.map(item => dependency_1.bitbadges.bitbadgeschain.badges.IdRange.fromObject(item));
            }
            if (data.expiration_time != null) {
                message.expiration_time = data.expiration_time;
            }
            if (data.cantCancelBeforeTime != null) {
                message.cantCancelBeforeTime = data.cantCancelBeforeTime;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                from?: number;
                toAddresses?: number[];
                amounts?: number[];
                badgeId?: number;
                subbadgeRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
                expiration_time?: number;
                cantCancelBeforeTime?: number;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.toAddresses != null) {
                data.toAddresses = this.toAddresses;
            }
            if (this.amounts != null) {
                data.amounts = this.amounts;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.subbadgeRanges != null) {
                data.subbadgeRanges = this.subbadgeRanges.map((item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.toObject());
            }
            if (this.expiration_time != null) {
                data.expiration_time = this.expiration_time;
            }
            if (this.cantCancelBeforeTime != null) {
                data.cantCancelBeforeTime = this.cantCancelBeforeTime;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.from != 0)
                writer.writeUint64(2, this.from);
            if (this.toAddresses.length)
                writer.writePackedUint64(3, this.toAddresses);
            if (this.amounts.length)
                writer.writePackedUint64(4, this.amounts);
            if (this.badgeId != 0)
                writer.writeUint64(5, this.badgeId);
            if (this.subbadgeRanges.length)
                writer.writeRepeatedMessage(6, this.subbadgeRanges, (item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.serialize(writer));
            if (this.expiration_time != 0)
                writer.writeUint64(7, this.expiration_time);
            if (this.cantCancelBeforeTime != 0)
                writer.writeUint64(8, this.cantCancelBeforeTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferBadge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferBadge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.from = reader.readUint64();
                        break;
                    case 3:
                        message.toAddresses = reader.readPackedUint64();
                        break;
                    case 4:
                        message.amounts = reader.readPackedUint64();
                        break;
                    case 5:
                        message.badgeId = reader.readUint64();
                        break;
                    case 6:
                        reader.readMessage(message.subbadgeRanges, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.IdRange));
                        break;
                    case 7:
                        message.expiration_time = reader.readUint64();
                        break;
                    case 8:
                        message.cantCancelBeforeTime = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferBadge {
            return MsgTransferBadge.deserialize(bytes);
        }
    }
    export class MsgTransferBadgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgTransferBadgeResponse {
            const message = new MsgTransferBadgeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferBadgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferBadgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferBadgeResponse {
            return MsgTransferBadgeResponse.deserialize(bytes);
        }
    }
    export class MsgRequestTransferBadge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            from?: number;
            amount?: number;
            badgeId?: number;
            subbadgeRanges?: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
            expiration_time?: number;
            cantCancelBeforeTime?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("subbadgeRanges" in data && data.subbadgeRanges != undefined) {
                    this.subbadgeRanges = data.subbadgeRanges;
                }
                if ("expiration_time" in data && data.expiration_time != undefined) {
                    this.expiration_time = data.expiration_time;
                }
                if ("cantCancelBeforeTime" in data && data.cantCancelBeforeTime != undefined) {
                    this.cantCancelBeforeTime = data.cantCancelBeforeTime;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set from(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 5, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 5, value);
        }
        get subbadgeRanges() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.IdRange, 6) as dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
        }
        set subbadgeRanges(value: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get expiration_time() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set expiration_time(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        get cantCancelBeforeTime() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set cantCancelBeforeTime(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            creator?: string;
            from?: number;
            amount?: number;
            badgeId?: number;
            subbadgeRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
            expiration_time?: number;
            cantCancelBeforeTime?: number;
        }): MsgRequestTransferBadge {
            const message = new MsgRequestTransferBadge({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.subbadgeRanges != null) {
                message.subbadgeRanges = data.subbadgeRanges.map(item => dependency_1.bitbadges.bitbadgeschain.badges.IdRange.fromObject(item));
            }
            if (data.expiration_time != null) {
                message.expiration_time = data.expiration_time;
            }
            if (data.cantCancelBeforeTime != null) {
                message.cantCancelBeforeTime = data.cantCancelBeforeTime;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                from?: number;
                amount?: number;
                badgeId?: number;
                subbadgeRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
                expiration_time?: number;
                cantCancelBeforeTime?: number;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.subbadgeRanges != null) {
                data.subbadgeRanges = this.subbadgeRanges.map((item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.toObject());
            }
            if (this.expiration_time != null) {
                data.expiration_time = this.expiration_time;
            }
            if (this.cantCancelBeforeTime != null) {
                data.cantCancelBeforeTime = this.cantCancelBeforeTime;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.from != 0)
                writer.writeUint64(2, this.from);
            if (this.amount != 0)
                writer.writeUint64(4, this.amount);
            if (this.badgeId != 0)
                writer.writeUint64(5, this.badgeId);
            if (this.subbadgeRanges.length)
                writer.writeRepeatedMessage(6, this.subbadgeRanges, (item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.serialize(writer));
            if (this.expiration_time != 0)
                writer.writeUint64(7, this.expiration_time);
            if (this.cantCancelBeforeTime != 0)
                writer.writeUint64(8, this.cantCancelBeforeTime);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRequestTransferBadge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRequestTransferBadge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.from = reader.readUint64();
                        break;
                    case 4:
                        message.amount = reader.readUint64();
                        break;
                    case 5:
                        message.badgeId = reader.readUint64();
                        break;
                    case 6:
                        reader.readMessage(message.subbadgeRanges, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.IdRange));
                        break;
                    case 7:
                        message.expiration_time = reader.readUint64();
                        break;
                    case 8:
                        message.cantCancelBeforeTime = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRequestTransferBadge {
            return MsgRequestTransferBadge.deserialize(bytes);
        }
    }
    export class MsgRequestTransferBadgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgRequestTransferBadgeResponse {
            const message = new MsgRequestTransferBadgeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRequestTransferBadgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRequestTransferBadgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRequestTransferBadgeResponse {
            return MsgRequestTransferBadgeResponse.deserialize(bytes);
        }
    }
    export class MsgHandlePendingTransfer extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            accept?: boolean;
            badgeId?: number;
            nonceRanges?: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
            forcefulAccept?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("accept" in data && data.accept != undefined) {
                    this.accept = data.accept;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("nonceRanges" in data && data.nonceRanges != undefined) {
                    this.nonceRanges = data.nonceRanges;
                }
                if ("forcefulAccept" in data && data.forcefulAccept != undefined) {
                    this.forcefulAccept = data.forcefulAccept;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get accept() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set accept(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get nonceRanges() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.IdRange, 4) as dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
        }
        set nonceRanges(value: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get forcefulAccept() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set forcefulAccept(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        static fromObject(data: {
            creator?: string;
            accept?: boolean;
            badgeId?: number;
            nonceRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
            forcefulAccept?: boolean;
        }): MsgHandlePendingTransfer {
            const message = new MsgHandlePendingTransfer({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.accept != null) {
                message.accept = data.accept;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.nonceRanges != null) {
                message.nonceRanges = data.nonceRanges.map(item => dependency_1.bitbadges.bitbadgeschain.badges.IdRange.fromObject(item));
            }
            if (data.forcefulAccept != null) {
                message.forcefulAccept = data.forcefulAccept;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                accept?: boolean;
                badgeId?: number;
                nonceRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
                forcefulAccept?: boolean;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.accept != null) {
                data.accept = this.accept;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.nonceRanges != null) {
                data.nonceRanges = this.nonceRanges.map((item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.toObject());
            }
            if (this.forcefulAccept != null) {
                data.forcefulAccept = this.forcefulAccept;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.accept != false)
                writer.writeBool(2, this.accept);
            if (this.badgeId != 0)
                writer.writeUint64(3, this.badgeId);
            if (this.nonceRanges.length)
                writer.writeRepeatedMessage(4, this.nonceRanges, (item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.serialize(writer));
            if (this.forcefulAccept != false)
                writer.writeBool(5, this.forcefulAccept);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgHandlePendingTransfer {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgHandlePendingTransfer();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.accept = reader.readBool();
                        break;
                    case 3:
                        message.badgeId = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.nonceRanges, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.IdRange));
                        break;
                    case 5:
                        message.forcefulAccept = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgHandlePendingTransfer {
            return MsgHandlePendingTransfer.deserialize(bytes);
        }
    }
    export class MsgHandlePendingTransferResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgHandlePendingTransferResponse {
            const message = new MsgHandlePendingTransferResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgHandlePendingTransferResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgHandlePendingTransferResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgHandlePendingTransferResponse {
            return MsgHandlePendingTransferResponse.deserialize(bytes);
        }
    }
    export class MsgSetApproval extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            amount?: number;
            address?: number;
            badgeId?: number;
            subbadgeRanges?: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("subbadgeRanges" in data && data.subbadgeRanges != undefined) {
                    this.subbadgeRanges = data.subbadgeRanges;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set address(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get subbadgeRanges() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.IdRange, 5) as dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
        }
        set subbadgeRanges(value: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            creator?: string;
            amount?: number;
            address?: number;
            badgeId?: number;
            subbadgeRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
        }): MsgSetApproval {
            const message = new MsgSetApproval({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.subbadgeRanges != null) {
                message.subbadgeRanges = data.subbadgeRanges.map(item => dependency_1.bitbadges.bitbadgeschain.badges.IdRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                amount?: number;
                address?: number;
                badgeId?: number;
                subbadgeRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.subbadgeRanges != null) {
                data.subbadgeRanges = this.subbadgeRanges.map((item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.amount != 0)
                writer.writeUint64(2, this.amount);
            if (this.address != 0)
                writer.writeUint64(3, this.address);
            if (this.badgeId != 0)
                writer.writeUint64(4, this.badgeId);
            if (this.subbadgeRanges.length)
                writer.writeRepeatedMessage(5, this.subbadgeRanges, (item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSetApproval {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetApproval();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.amount = reader.readUint64();
                        break;
                    case 3:
                        message.address = reader.readUint64();
                        break;
                    case 4:
                        message.badgeId = reader.readUint64();
                        break;
                    case 5:
                        reader.readMessage(message.subbadgeRanges, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.IdRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSetApproval {
            return MsgSetApproval.deserialize(bytes);
        }
    }
    export class MsgSetApprovalResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgSetApprovalResponse {
            const message = new MsgSetApprovalResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSetApprovalResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetApprovalResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSetApprovalResponse {
            return MsgSetApprovalResponse.deserialize(bytes);
        }
    }
    export class MsgRevokeBadge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            addresses?: number[];
            amounts?: number[];
            badgeId?: number;
            subbadgeRanges?: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("addresses" in data && data.addresses != undefined) {
                    this.addresses = data.addresses;
                }
                if ("amounts" in data && data.amounts != undefined) {
                    this.amounts = data.amounts;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("subbadgeRanges" in data && data.subbadgeRanges != undefined) {
                    this.subbadgeRanges = data.subbadgeRanges;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addresses() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set addresses(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get amounts() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set amounts(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get subbadgeRanges() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.IdRange, 5) as dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
        }
        set subbadgeRanges(value: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            creator?: string;
            addresses?: number[];
            amounts?: number[];
            badgeId?: number;
            subbadgeRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
        }): MsgRevokeBadge {
            const message = new MsgRevokeBadge({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.addresses != null) {
                message.addresses = data.addresses;
            }
            if (data.amounts != null) {
                message.amounts = data.amounts;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.subbadgeRanges != null) {
                message.subbadgeRanges = data.subbadgeRanges.map(item => dependency_1.bitbadges.bitbadgeschain.badges.IdRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                addresses?: number[];
                amounts?: number[];
                badgeId?: number;
                subbadgeRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.addresses != null) {
                data.addresses = this.addresses;
            }
            if (this.amounts != null) {
                data.amounts = this.amounts;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.subbadgeRanges != null) {
                data.subbadgeRanges = this.subbadgeRanges.map((item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.addresses.length)
                writer.writePackedUint64(2, this.addresses);
            if (this.amounts.length)
                writer.writePackedUint64(3, this.amounts);
            if (this.badgeId != 0)
                writer.writeUint64(4, this.badgeId);
            if (this.subbadgeRanges.length)
                writer.writeRepeatedMessage(5, this.subbadgeRanges, (item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRevokeBadge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRevokeBadge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.addresses = reader.readPackedUint64();
                        break;
                    case 3:
                        message.amounts = reader.readPackedUint64();
                        break;
                    case 4:
                        message.badgeId = reader.readUint64();
                        break;
                    case 5:
                        reader.readMessage(message.subbadgeRanges, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.IdRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRevokeBadge {
            return MsgRevokeBadge.deserialize(bytes);
        }
    }
    export class MsgRevokeBadgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgRevokeBadgeResponse {
            const message = new MsgRevokeBadgeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRevokeBadgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRevokeBadgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRevokeBadgeResponse {
            return MsgRevokeBadgeResponse.deserialize(bytes);
        }
    }
    export class MsgFreezeAddress extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            addressRanges?: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
            badgeId?: number;
            add?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("addressRanges" in data && data.addressRanges != undefined) {
                    this.addressRanges = data.addressRanges;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("add" in data && data.add != undefined) {
                    this.add = data.add;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addressRanges() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.IdRange, 2) as dependency_1.bitbadges.bitbadgeschain.badges.IdRange[];
        }
        set addressRanges(value: dependency_1.bitbadges.bitbadgeschain.badges.IdRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get add() {
            return pb_1.Message.getFieldWithDefault(this, 4, false) as boolean;
        }
        set add(value: boolean) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            creator?: string;
            addressRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
            badgeId?: number;
            add?: boolean;
        }): MsgFreezeAddress {
            const message = new MsgFreezeAddress({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.addressRanges != null) {
                message.addressRanges = data.addressRanges.map(item => dependency_1.bitbadges.bitbadgeschain.badges.IdRange.fromObject(item));
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.add != null) {
                message.add = data.add;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                addressRanges?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
                badgeId?: number;
                add?: boolean;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.addressRanges != null) {
                data.addressRanges = this.addressRanges.map((item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.toObject());
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.add != null) {
                data.add = this.add;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.addressRanges.length)
                writer.writeRepeatedMessage(2, this.addressRanges, (item: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) => item.serialize(writer));
            if (this.badgeId != 0)
                writer.writeUint64(3, this.badgeId);
            if (this.add != false)
                writer.writeBool(4, this.add);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgFreezeAddress {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgFreezeAddress();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.addressRanges, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_1.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.IdRange));
                        break;
                    case 3:
                        message.badgeId = reader.readUint64();
                        break;
                    case 4:
                        message.add = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgFreezeAddress {
            return MsgFreezeAddress.deserialize(bytes);
        }
    }
    export class MsgFreezeAddressResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgFreezeAddressResponse {
            const message = new MsgFreezeAddressResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgFreezeAddressResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgFreezeAddressResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgFreezeAddressResponse {
            return MsgFreezeAddressResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateUris extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            badgeId?: number;
            uri?: dependency_2.bitbadges.bitbadgeschain.badges.UriObject;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get uri() {
            return pb_1.Message.getWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UriObject, 3) as dependency_2.bitbadges.bitbadgeschain.badges.UriObject;
        }
        set uri(value: dependency_2.bitbadges.bitbadgeschain.badges.UriObject) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_uri() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            creator?: string;
            badgeId?: number;
            uri?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UriObject.prototype.toObject>;
        }): MsgUpdateUris {
            const message = new MsgUpdateUris({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.uri != null) {
                message.uri = dependency_2.bitbadges.bitbadgeschain.badges.UriObject.fromObject(data.uri);
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                badgeId?: number;
                uri?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UriObject.prototype.toObject>;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.uri != null) {
                data.uri = this.uri.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.badgeId != 0)
                writer.writeUint64(2, this.badgeId);
            if (this.has_uri)
                writer.writeMessage(3, this.uri, () => this.uri.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateUris {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateUris();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.badgeId = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.uri, () => message.uri = dependency_2.bitbadges.bitbadgeschain.badges.UriObject.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateUris {
            return MsgUpdateUris.deserialize(bytes);
        }
    }
    export class MsgUpdateUrisResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateUrisResponse {
            const message = new MsgUpdateUrisResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateUrisResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateUrisResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateUrisResponse {
            return MsgUpdateUrisResponse.deserialize(bytes);
        }
    }
    export class MsgUpdatePermissions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            badgeId?: number;
            permissions?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("permissions" in data && data.permissions != undefined) {
                    this.permissions = data.permissions;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get permissions() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set permissions(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            badgeId?: number;
            permissions?: number;
        }): MsgUpdatePermissions {
            const message = new MsgUpdatePermissions({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.permissions != null) {
                message.permissions = data.permissions;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                badgeId?: number;
                permissions?: number;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.permissions != null) {
                data.permissions = this.permissions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.badgeId != 0)
                writer.writeUint64(2, this.badgeId);
            if (this.permissions != 0)
                writer.writeUint64(3, this.permissions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdatePermissions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdatePermissions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.badgeId = reader.readUint64();
                        break;
                    case 3:
                        message.permissions = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdatePermissions {
            return MsgUpdatePermissions.deserialize(bytes);
        }
    }
    export class MsgUpdatePermissionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdatePermissionsResponse {
            const message = new MsgUpdatePermissionsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdatePermissionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdatePermissionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdatePermissionsResponse {
            return MsgUpdatePermissionsResponse.deserialize(bytes);
        }
    }
    export class MsgTransferManager extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            badgeId?: number;
            address?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set address(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            badgeId?: number;
            address?: number;
        }): MsgTransferManager {
            const message = new MsgTransferManager({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                badgeId?: number;
                address?: number;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.badgeId != 0)
                writer.writeUint64(2, this.badgeId);
            if (this.address != 0)
                writer.writeUint64(3, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferManager {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferManager();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.badgeId = reader.readUint64();
                        break;
                    case 3:
                        message.address = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferManager {
            return MsgTransferManager.deserialize(bytes);
        }
    }
    export class MsgTransferManagerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgTransferManagerResponse {
            const message = new MsgTransferManagerResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferManagerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferManagerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferManagerResponse {
            return MsgTransferManagerResponse.deserialize(bytes);
        }
    }
    export class MsgRequestTransferManager extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            badgeId?: number;
            add?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("add" in data && data.add != undefined) {
                    this.add = data.add;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get add() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set add(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            badgeId?: number;
            add?: boolean;
        }): MsgRequestTransferManager {
            const message = new MsgRequestTransferManager({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.add != null) {
                message.add = data.add;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                badgeId?: number;
                add?: boolean;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.add != null) {
                data.add = this.add;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.badgeId != 0)
                writer.writeUint64(2, this.badgeId);
            if (this.add != false)
                writer.writeBool(3, this.add);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRequestTransferManager {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRequestTransferManager();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.badgeId = reader.readUint64();
                        break;
                    case 3:
                        message.add = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRequestTransferManager {
            return MsgRequestTransferManager.deserialize(bytes);
        }
    }
    export class MsgRequestTransferManagerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgRequestTransferManagerResponse {
            const message = new MsgRequestTransferManagerResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRequestTransferManagerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRequestTransferManagerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRequestTransferManagerResponse {
            return MsgRequestTransferManagerResponse.deserialize(bytes);
        }
    }
    export class MsgSelfDestructBadge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            badgeId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            creator?: string;
            badgeId?: number;
        }): MsgSelfDestructBadge {
            const message = new MsgSelfDestructBadge({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                badgeId?: number;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.badgeId != 0)
                writer.writeUint64(2, this.badgeId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSelfDestructBadge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSelfDestructBadge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.badgeId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSelfDestructBadge {
            return MsgSelfDestructBadge.deserialize(bytes);
        }
    }
    export class MsgSelfDestructBadgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgSelfDestructBadgeResponse {
            const message = new MsgSelfDestructBadgeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSelfDestructBadgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSelfDestructBadgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSelfDestructBadgeResponse {
            return MsgSelfDestructBadgeResponse.deserialize(bytes);
        }
    }
    export class MsgPruneBalances extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            badgeIds?: number[];
            addresses?: number[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
                if ("addresses" in data && data.addresses != undefined) {
                    this.addresses = data.addresses;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get badgeIds() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as number[];
        }
        set badgeIds(value: number[]) {
            pb_1.Message.setField(this, 2, value);
        }
        get addresses() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as number[];
        }
        set addresses(value: number[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            badgeIds?: number[];
            addresses?: number[];
        }): MsgPruneBalances {
            const message = new MsgPruneBalances({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds;
            }
            if (data.addresses != null) {
                message.addresses = data.addresses;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                badgeIds?: number[];
                addresses?: number[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds;
            }
            if (this.addresses != null) {
                data.addresses = this.addresses;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.badgeIds.length)
                writer.writePackedUint64(2, this.badgeIds);
            if (this.addresses.length)
                writer.writePackedUint64(3, this.addresses);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgPruneBalances {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgPruneBalances();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.badgeIds = reader.readPackedUint64();
                        break;
                    case 3:
                        message.addresses = reader.readPackedUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgPruneBalances {
            return MsgPruneBalances.deserialize(bytes);
        }
    }
    export class MsgPruneBalancesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgPruneBalancesResponse {
            const message = new MsgPruneBalancesResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgPruneBalancesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgPruneBalancesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgPruneBalancesResponse {
            return MsgPruneBalancesResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateBytes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            badgeId?: number;
            newBytes?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("badgeId" in data && data.badgeId != undefined) {
                    this.badgeId = data.badgeId;
                }
                if ("newBytes" in data && data.newBytes != undefined) {
                    this.newBytes = data.newBytes;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get badgeId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set badgeId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get newBytes() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
        }
        set newBytes(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            badgeId?: number;
            newBytes?: Uint8Array;
        }): MsgUpdateBytes {
            const message = new MsgUpdateBytes({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.badgeId != null) {
                message.badgeId = data.badgeId;
            }
            if (data.newBytes != null) {
                message.newBytes = data.newBytes;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                badgeId?: number;
                newBytes?: Uint8Array;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.badgeId != null) {
                data.badgeId = this.badgeId;
            }
            if (this.newBytes != null) {
                data.newBytes = this.newBytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.badgeId != 0)
                writer.writeUint64(2, this.badgeId);
            if (this.newBytes.length)
                writer.writeBytes(3, this.newBytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateBytes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateBytes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.badgeId = reader.readUint64();
                        break;
                    case 3:
                        message.newBytes = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateBytes {
            return MsgUpdateBytes.deserialize(bytes);
        }
    }
    export class MsgUpdateBytesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateBytesResponse {
            const message = new MsgUpdateBytesResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateBytesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateBytesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateBytesResponse {
            return MsgUpdateBytesResponse.deserialize(bytes);
        }
    }
    export class MsgRegisterAddresses extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            addressesToRegister?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("addressesToRegister" in data && data.addressesToRegister != undefined) {
                    this.addressesToRegister = data.addressesToRegister;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addressesToRegister() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set addressesToRegister(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            creator?: string;
            addressesToRegister?: string[];
        }): MsgRegisterAddresses {
            const message = new MsgRegisterAddresses({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.addressesToRegister != null) {
                message.addressesToRegister = data.addressesToRegister;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                addressesToRegister?: string[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.addressesToRegister != null) {
                data.addressesToRegister = this.addressesToRegister;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.addressesToRegister.length)
                writer.writeRepeatedString(2, this.addressesToRegister);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRegisterAddresses {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRegisterAddresses();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRegisterAddresses {
            return MsgRegisterAddresses.deserialize(bytes);
        }
    }
    export class MsgRegisterAddressesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            registeredAddressNumbers?: dependency_1.bitbadges.bitbadgeschain.badges.IdRange;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("registeredAddressNumbers" in data && data.registeredAddressNumbers != undefined) {
                    this.registeredAddressNumbers = data.registeredAddressNumbers;
                }
            }
        }
        get registeredAddressNumbers() {
            return pb_1.Message.getWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.IdRange, 1) as dependency_1.bitbadges.bitbadgeschain.badges.IdRange;
        }
        set registeredAddressNumbers(value: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_registeredAddressNumbers() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            registeredAddressNumbers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>;
        }): MsgRegisterAddressesResponse {
            const message = new MsgRegisterAddressesResponse({});
            if (data.registeredAddressNumbers != null) {
                message.registeredAddressNumbers = dependency_1.bitbadges.bitbadgeschain.badges.IdRange.fromObject(data.registeredAddressNumbers);
            }
            return message;
        }
        toObject() {
            const data: {
                registeredAddressNumbers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>;
            } = {};
            if (this.registeredAddressNumbers != null) {
                data.registeredAddressNumbers = this.registeredAddressNumbers.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_registeredAddressNumbers)
                writer.writeMessage(1, this.registeredAddressNumbers, () => this.registeredAddressNumbers.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRegisterAddressesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRegisterAddressesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.registeredAddressNumbers, () => message.registeredAddressNumbers = dependency_1.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRegisterAddressesResponse {
            return MsgRegisterAddressesResponse.deserialize(bytes);
        }
    }
}
