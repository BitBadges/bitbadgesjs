// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./transfers";
import * as dependency_2 from "./balances";
import * as dependency_3 from "./permissions";
import * as dependency_4 from "./metadata";
import * as dependency_5 from "./collections";
import * as dependency_6 from "./../gogoproto/gogo";
import * as dependency_7 from "./address_mappings";
import * as dependency_8 from "./timelines";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class BadgeCustomMsgType extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            createAddressMappingsMsg?: MsgCreateAddressMappings;
            updateCollectionMsg?: MsgUpdateCollection;
            deleteCollectionMsg?: MsgDeleteCollection;
            transferBadgesMsg?: MsgTransferBadges;
            updateUserApprovalsMsg?: MsgUpdateUserApprovals;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("createAddressMappingsMsg" in data && data.createAddressMappingsMsg != undefined) {
                    this.createAddressMappingsMsg = data.createAddressMappingsMsg;
                }
                if ("updateCollectionMsg" in data && data.updateCollectionMsg != undefined) {
                    this.updateCollectionMsg = data.updateCollectionMsg;
                }
                if ("deleteCollectionMsg" in data && data.deleteCollectionMsg != undefined) {
                    this.deleteCollectionMsg = data.deleteCollectionMsg;
                }
                if ("transferBadgesMsg" in data && data.transferBadgesMsg != undefined) {
                    this.transferBadgesMsg = data.transferBadgesMsg;
                }
                if ("updateUserApprovalsMsg" in data && data.updateUserApprovalsMsg != undefined) {
                    this.updateUserApprovalsMsg = data.updateUserApprovalsMsg;
                }
            }
        }
        get createAddressMappingsMsg() {
            return pb_1.Message.getWrapperField(this, MsgCreateAddressMappings, 1) as MsgCreateAddressMappings;
        }
        set createAddressMappingsMsg(value: MsgCreateAddressMappings) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_createAddressMappingsMsg() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get updateCollectionMsg() {
            return pb_1.Message.getWrapperField(this, MsgUpdateCollection, 2) as MsgUpdateCollection;
        }
        set updateCollectionMsg(value: MsgUpdateCollection) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_updateCollectionMsg() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get deleteCollectionMsg() {
            return pb_1.Message.getWrapperField(this, MsgDeleteCollection, 3) as MsgDeleteCollection;
        }
        set deleteCollectionMsg(value: MsgDeleteCollection) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_deleteCollectionMsg() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get transferBadgesMsg() {
            return pb_1.Message.getWrapperField(this, MsgTransferBadges, 4) as MsgTransferBadges;
        }
        set transferBadgesMsg(value: MsgTransferBadges) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_transferBadgesMsg() {
            return pb_1.Message.getField(this, 4) != null;
        }
        get updateUserApprovalsMsg() {
            return pb_1.Message.getWrapperField(this, MsgUpdateUserApprovals, 5) as MsgUpdateUserApprovals;
        }
        set updateUserApprovalsMsg(value: MsgUpdateUserApprovals) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_updateUserApprovalsMsg() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            createAddressMappingsMsg?: ReturnType<typeof MsgCreateAddressMappings.prototype.toObject>;
            updateCollectionMsg?: ReturnType<typeof MsgUpdateCollection.prototype.toObject>;
            deleteCollectionMsg?: ReturnType<typeof MsgDeleteCollection.prototype.toObject>;
            transferBadgesMsg?: ReturnType<typeof MsgTransferBadges.prototype.toObject>;
            updateUserApprovalsMsg?: ReturnType<typeof MsgUpdateUserApprovals.prototype.toObject>;
        }): BadgeCustomMsgType {
            const message = new BadgeCustomMsgType({});
            if (data.createAddressMappingsMsg != null) {
                message.createAddressMappingsMsg = MsgCreateAddressMappings.fromObject(data.createAddressMappingsMsg);
            }
            if (data.updateCollectionMsg != null) {
                message.updateCollectionMsg = MsgUpdateCollection.fromObject(data.updateCollectionMsg);
            }
            if (data.deleteCollectionMsg != null) {
                message.deleteCollectionMsg = MsgDeleteCollection.fromObject(data.deleteCollectionMsg);
            }
            if (data.transferBadgesMsg != null) {
                message.transferBadgesMsg = MsgTransferBadges.fromObject(data.transferBadgesMsg);
            }
            if (data.updateUserApprovalsMsg != null) {
                message.updateUserApprovalsMsg = MsgUpdateUserApprovals.fromObject(data.updateUserApprovalsMsg);
            }
            return message;
        }
        toObject() {
            const data: {
                createAddressMappingsMsg?: ReturnType<typeof MsgCreateAddressMappings.prototype.toObject>;
                updateCollectionMsg?: ReturnType<typeof MsgUpdateCollection.prototype.toObject>;
                deleteCollectionMsg?: ReturnType<typeof MsgDeleteCollection.prototype.toObject>;
                transferBadgesMsg?: ReturnType<typeof MsgTransferBadges.prototype.toObject>;
                updateUserApprovalsMsg?: ReturnType<typeof MsgUpdateUserApprovals.prototype.toObject>;
            } = {};
            if (this.createAddressMappingsMsg != null) {
                data.createAddressMappingsMsg = this.createAddressMappingsMsg.toObject();
            }
            if (this.updateCollectionMsg != null) {
                data.updateCollectionMsg = this.updateCollectionMsg.toObject();
            }
            if (this.deleteCollectionMsg != null) {
                data.deleteCollectionMsg = this.deleteCollectionMsg.toObject();
            }
            if (this.transferBadgesMsg != null) {
                data.transferBadgesMsg = this.transferBadgesMsg.toObject();
            }
            if (this.updateUserApprovalsMsg != null) {
                data.updateUserApprovalsMsg = this.updateUserApprovalsMsg.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_createAddressMappingsMsg)
                writer.writeMessage(1, this.createAddressMappingsMsg, () => this.createAddressMappingsMsg.serialize(writer));
            if (this.has_updateCollectionMsg)
                writer.writeMessage(2, this.updateCollectionMsg, () => this.updateCollectionMsg.serialize(writer));
            if (this.has_deleteCollectionMsg)
                writer.writeMessage(3, this.deleteCollectionMsg, () => this.deleteCollectionMsg.serialize(writer));
            if (this.has_transferBadgesMsg)
                writer.writeMessage(4, this.transferBadgesMsg, () => this.transferBadgesMsg.serialize(writer));
            if (this.has_updateUserApprovalsMsg)
                writer.writeMessage(5, this.updateUserApprovalsMsg, () => this.updateUserApprovalsMsg.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BadgeCustomMsgType {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BadgeCustomMsgType();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.createAddressMappingsMsg, () => message.createAddressMappingsMsg = MsgCreateAddressMappings.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.updateCollectionMsg, () => message.updateCollectionMsg = MsgUpdateCollection.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.deleteCollectionMsg, () => message.deleteCollectionMsg = MsgDeleteCollection.deserialize(reader));
                        break;
                    case 4:
                        reader.readMessage(message.transferBadgesMsg, () => message.transferBadgesMsg = MsgTransferBadges.deserialize(reader));
                        break;
                    case 5:
                        reader.readMessage(message.updateUserApprovalsMsg, () => message.updateUserApprovalsMsg = MsgUpdateUserApprovals.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BadgeCustomMsgType {
            return BadgeCustomMsgType.deserialize(bytes);
        }
    }
    export class MsgUpdateCollection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: string;
            balancesType?: string;
            defaultOutgoingApprovals?: dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval[];
            defaultIncomingApprovals?: dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval[];
            defaultAutoApproveSelfInitiatedOutgoingTransfers?: boolean;
            defaultAutoApproveSelfInitiatedIncomingTransfers?: boolean;
            defaultUserPermissions?: dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions;
            badgesToCreate?: dependency_2.bitbadges.bitbadgeschain.badges.Balance[];
            updateCollectionPermissions?: boolean;
            collectionPermissions?: dependency_3.bitbadges.bitbadgeschain.badges.CollectionPermissions;
            updateManagerTimeline?: boolean;
            managerTimeline?: dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline[];
            updateCollectionMetadataTimeline?: boolean;
            collectionMetadataTimeline?: dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline[];
            updateBadgeMetadataTimeline?: boolean;
            badgeMetadataTimeline?: dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline[];
            updateOffChainBalancesMetadataTimeline?: boolean;
            offChainBalancesMetadataTimeline?: dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline[];
            updateCustomDataTimeline?: boolean;
            customDataTimeline?: dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline[];
            updateCollectionApprovals?: boolean;
            collectionApprovals?: dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval[];
            updateStandardsTimeline?: boolean;
            standardsTimeline?: dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline[];
            updateContractAddressTimeline?: boolean;
            contractAddressTimeline?: dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline[];
            updateIsArchivedTimeline?: boolean;
            isArchivedTimeline?: dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 6, 10, 12, 14, 16, 18, 22, 24, 26, 28], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("balancesType" in data && data.balancesType != undefined) {
                    this.balancesType = data.balancesType;
                }
                if ("defaultOutgoingApprovals" in data && data.defaultOutgoingApprovals != undefined) {
                    this.defaultOutgoingApprovals = data.defaultOutgoingApprovals;
                }
                if ("defaultIncomingApprovals" in data && data.defaultIncomingApprovals != undefined) {
                    this.defaultIncomingApprovals = data.defaultIncomingApprovals;
                }
                if ("defaultAutoApproveSelfInitiatedOutgoingTransfers" in data && data.defaultAutoApproveSelfInitiatedOutgoingTransfers != undefined) {
                    this.defaultAutoApproveSelfInitiatedOutgoingTransfers = data.defaultAutoApproveSelfInitiatedOutgoingTransfers;
                }
                if ("defaultAutoApproveSelfInitiatedIncomingTransfers" in data && data.defaultAutoApproveSelfInitiatedIncomingTransfers != undefined) {
                    this.defaultAutoApproveSelfInitiatedIncomingTransfers = data.defaultAutoApproveSelfInitiatedIncomingTransfers;
                }
                if ("defaultUserPermissions" in data && data.defaultUserPermissions != undefined) {
                    this.defaultUserPermissions = data.defaultUserPermissions;
                }
                if ("badgesToCreate" in data && data.badgesToCreate != undefined) {
                    this.badgesToCreate = data.badgesToCreate;
                }
                if ("updateCollectionPermissions" in data && data.updateCollectionPermissions != undefined) {
                    this.updateCollectionPermissions = data.updateCollectionPermissions;
                }
                if ("collectionPermissions" in data && data.collectionPermissions != undefined) {
                    this.collectionPermissions = data.collectionPermissions;
                }
                if ("updateManagerTimeline" in data && data.updateManagerTimeline != undefined) {
                    this.updateManagerTimeline = data.updateManagerTimeline;
                }
                if ("managerTimeline" in data && data.managerTimeline != undefined) {
                    this.managerTimeline = data.managerTimeline;
                }
                if ("updateCollectionMetadataTimeline" in data && data.updateCollectionMetadataTimeline != undefined) {
                    this.updateCollectionMetadataTimeline = data.updateCollectionMetadataTimeline;
                }
                if ("collectionMetadataTimeline" in data && data.collectionMetadataTimeline != undefined) {
                    this.collectionMetadataTimeline = data.collectionMetadataTimeline;
                }
                if ("updateBadgeMetadataTimeline" in data && data.updateBadgeMetadataTimeline != undefined) {
                    this.updateBadgeMetadataTimeline = data.updateBadgeMetadataTimeline;
                }
                if ("badgeMetadataTimeline" in data && data.badgeMetadataTimeline != undefined) {
                    this.badgeMetadataTimeline = data.badgeMetadataTimeline;
                }
                if ("updateOffChainBalancesMetadataTimeline" in data && data.updateOffChainBalancesMetadataTimeline != undefined) {
                    this.updateOffChainBalancesMetadataTimeline = data.updateOffChainBalancesMetadataTimeline;
                }
                if ("offChainBalancesMetadataTimeline" in data && data.offChainBalancesMetadataTimeline != undefined) {
                    this.offChainBalancesMetadataTimeline = data.offChainBalancesMetadataTimeline;
                }
                if ("updateCustomDataTimeline" in data && data.updateCustomDataTimeline != undefined) {
                    this.updateCustomDataTimeline = data.updateCustomDataTimeline;
                }
                if ("customDataTimeline" in data && data.customDataTimeline != undefined) {
                    this.customDataTimeline = data.customDataTimeline;
                }
                if ("updateCollectionApprovals" in data && data.updateCollectionApprovals != undefined) {
                    this.updateCollectionApprovals = data.updateCollectionApprovals;
                }
                if ("collectionApprovals" in data && data.collectionApprovals != undefined) {
                    this.collectionApprovals = data.collectionApprovals;
                }
                if ("updateStandardsTimeline" in data && data.updateStandardsTimeline != undefined) {
                    this.updateStandardsTimeline = data.updateStandardsTimeline;
                }
                if ("standardsTimeline" in data && data.standardsTimeline != undefined) {
                    this.standardsTimeline = data.standardsTimeline;
                }
                if ("updateContractAddressTimeline" in data && data.updateContractAddressTimeline != undefined) {
                    this.updateContractAddressTimeline = data.updateContractAddressTimeline;
                }
                if ("contractAddressTimeline" in data && data.contractAddressTimeline != undefined) {
                    this.contractAddressTimeline = data.contractAddressTimeline;
                }
                if ("updateIsArchivedTimeline" in data && data.updateIsArchivedTimeline != undefined) {
                    this.updateIsArchivedTimeline = data.updateIsArchivedTimeline;
                }
                if ("isArchivedTimeline" in data && data.isArchivedTimeline != undefined) {
                    this.isArchivedTimeline = data.isArchivedTimeline;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get balancesType() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set balancesType(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get defaultOutgoingApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval, 4) as dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval[];
        }
        set defaultOutgoingApprovals(value: dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get defaultIncomingApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval, 5) as dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval[];
        }
        set defaultIncomingApprovals(value: dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get defaultAutoApproveSelfInitiatedOutgoingTransfers() {
            return pb_1.Message.getFieldWithDefault(this, 29, false) as boolean;
        }
        set defaultAutoApproveSelfInitiatedOutgoingTransfers(value: boolean) {
            pb_1.Message.setField(this, 29, value);
        }
        get defaultAutoApproveSelfInitiatedIncomingTransfers() {
            return pb_1.Message.getFieldWithDefault(this, 30, false) as boolean;
        }
        set defaultAutoApproveSelfInitiatedIncomingTransfers(value: boolean) {
            pb_1.Message.setField(this, 30, value);
        }
        get defaultUserPermissions() {
            return pb_1.Message.getWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions, 31) as dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions;
        }
        set defaultUserPermissions(value: dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions) {
            pb_1.Message.setWrapperField(this, 31, value);
        }
        get has_defaultUserPermissions() {
            return pb_1.Message.getField(this, 31) != null;
        }
        get badgesToCreate() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.Balance, 6) as dependency_2.bitbadges.bitbadgeschain.badges.Balance[];
        }
        set badgesToCreate(value: dependency_2.bitbadges.bitbadgeschain.badges.Balance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get updateCollectionPermissions() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set updateCollectionPermissions(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get collectionPermissions() {
            return pb_1.Message.getWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.CollectionPermissions, 8) as dependency_3.bitbadges.bitbadgeschain.badges.CollectionPermissions;
        }
        set collectionPermissions(value: dependency_3.bitbadges.bitbadgeschain.badges.CollectionPermissions) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_collectionPermissions() {
            return pb_1.Message.getField(this, 8) != null;
        }
        get updateManagerTimeline() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set updateManagerTimeline(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get managerTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline, 10) as dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline[];
        }
        set managerTimeline(value: dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get updateCollectionMetadataTimeline() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set updateCollectionMetadataTimeline(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get collectionMetadataTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline, 12) as dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline[];
        }
        set collectionMetadataTimeline(value: dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 12, value);
        }
        get updateBadgeMetadataTimeline() {
            return pb_1.Message.getFieldWithDefault(this, 13, false) as boolean;
        }
        set updateBadgeMetadataTimeline(value: boolean) {
            pb_1.Message.setField(this, 13, value);
        }
        get badgeMetadataTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline, 14) as dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline[];
        }
        set badgeMetadataTimeline(value: dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 14, value);
        }
        get updateOffChainBalancesMetadataTimeline() {
            return pb_1.Message.getFieldWithDefault(this, 15, false) as boolean;
        }
        set updateOffChainBalancesMetadataTimeline(value: boolean) {
            pb_1.Message.setField(this, 15, value);
        }
        get offChainBalancesMetadataTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline, 16) as dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline[];
        }
        set offChainBalancesMetadataTimeline(value: dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 16, value);
        }
        get updateCustomDataTimeline() {
            return pb_1.Message.getFieldWithDefault(this, 17, false) as boolean;
        }
        set updateCustomDataTimeline(value: boolean) {
            pb_1.Message.setField(this, 17, value);
        }
        get customDataTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline, 18) as dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline[];
        }
        set customDataTimeline(value: dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 18, value);
        }
        get updateCollectionApprovals() {
            return pb_1.Message.getFieldWithDefault(this, 21, false) as boolean;
        }
        set updateCollectionApprovals(value: boolean) {
            pb_1.Message.setField(this, 21, value);
        }
        get collectionApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval, 22) as dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval[];
        }
        set collectionApprovals(value: dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval[]) {
            pb_1.Message.setRepeatedWrapperField(this, 22, value);
        }
        get updateStandardsTimeline() {
            return pb_1.Message.getFieldWithDefault(this, 23, false) as boolean;
        }
        set updateStandardsTimeline(value: boolean) {
            pb_1.Message.setField(this, 23, value);
        }
        get standardsTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline, 24) as dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline[];
        }
        set standardsTimeline(value: dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 24, value);
        }
        get updateContractAddressTimeline() {
            return pb_1.Message.getFieldWithDefault(this, 25, false) as boolean;
        }
        set updateContractAddressTimeline(value: boolean) {
            pb_1.Message.setField(this, 25, value);
        }
        get contractAddressTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline, 26) as dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline[];
        }
        set contractAddressTimeline(value: dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 26, value);
        }
        get updateIsArchivedTimeline() {
            return pb_1.Message.getFieldWithDefault(this, 27, false) as boolean;
        }
        set updateIsArchivedTimeline(value: boolean) {
            pb_1.Message.setField(this, 27, value);
        }
        get isArchivedTimeline() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline, 28) as dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline[];
        }
        set isArchivedTimeline(value: dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline[]) {
            pb_1.Message.setRepeatedWrapperField(this, 28, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: string;
            balancesType?: string;
            defaultOutgoingApprovals?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.prototype.toObject>[];
            defaultIncomingApprovals?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval.prototype.toObject>[];
            defaultAutoApproveSelfInitiatedOutgoingTransfers?: boolean;
            defaultAutoApproveSelfInitiatedIncomingTransfers?: boolean;
            defaultUserPermissions?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions.prototype.toObject>;
            badgesToCreate?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
            updateCollectionPermissions?: boolean;
            collectionPermissions?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.CollectionPermissions.prototype.toObject>;
            updateManagerTimeline?: boolean;
            managerTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline.prototype.toObject>[];
            updateCollectionMetadataTimeline?: boolean;
            collectionMetadataTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline.prototype.toObject>[];
            updateBadgeMetadataTimeline?: boolean;
            badgeMetadataTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline.prototype.toObject>[];
            updateOffChainBalancesMetadataTimeline?: boolean;
            offChainBalancesMetadataTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline.prototype.toObject>[];
            updateCustomDataTimeline?: boolean;
            customDataTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline.prototype.toObject>[];
            updateCollectionApprovals?: boolean;
            collectionApprovals?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval.prototype.toObject>[];
            updateStandardsTimeline?: boolean;
            standardsTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline.prototype.toObject>[];
            updateContractAddressTimeline?: boolean;
            contractAddressTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline.prototype.toObject>[];
            updateIsArchivedTimeline?: boolean;
            isArchivedTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline.prototype.toObject>[];
        }): MsgUpdateCollection {
            const message = new MsgUpdateCollection({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.balancesType != null) {
                message.balancesType = data.balancesType;
            }
            if (data.defaultOutgoingApprovals != null) {
                message.defaultOutgoingApprovals = data.defaultOutgoingApprovals.map(item => dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.fromObject(item));
            }
            if (data.defaultIncomingApprovals != null) {
                message.defaultIncomingApprovals = data.defaultIncomingApprovals.map(item => dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval.fromObject(item));
            }
            if (data.defaultAutoApproveSelfInitiatedOutgoingTransfers != null) {
                message.defaultAutoApproveSelfInitiatedOutgoingTransfers = data.defaultAutoApproveSelfInitiatedOutgoingTransfers;
            }
            if (data.defaultAutoApproveSelfInitiatedIncomingTransfers != null) {
                message.defaultAutoApproveSelfInitiatedIncomingTransfers = data.defaultAutoApproveSelfInitiatedIncomingTransfers;
            }
            if (data.defaultUserPermissions != null) {
                message.defaultUserPermissions = dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions.fromObject(data.defaultUserPermissions);
            }
            if (data.badgesToCreate != null) {
                message.badgesToCreate = data.badgesToCreate.map(item => dependency_2.bitbadges.bitbadgeschain.badges.Balance.fromObject(item));
            }
            if (data.updateCollectionPermissions != null) {
                message.updateCollectionPermissions = data.updateCollectionPermissions;
            }
            if (data.collectionPermissions != null) {
                message.collectionPermissions = dependency_3.bitbadges.bitbadgeschain.badges.CollectionPermissions.fromObject(data.collectionPermissions);
            }
            if (data.updateManagerTimeline != null) {
                message.updateManagerTimeline = data.updateManagerTimeline;
            }
            if (data.managerTimeline != null) {
                message.managerTimeline = data.managerTimeline.map(item => dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline.fromObject(item));
            }
            if (data.updateCollectionMetadataTimeline != null) {
                message.updateCollectionMetadataTimeline = data.updateCollectionMetadataTimeline;
            }
            if (data.collectionMetadataTimeline != null) {
                message.collectionMetadataTimeline = data.collectionMetadataTimeline.map(item => dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline.fromObject(item));
            }
            if (data.updateBadgeMetadataTimeline != null) {
                message.updateBadgeMetadataTimeline = data.updateBadgeMetadataTimeline;
            }
            if (data.badgeMetadataTimeline != null) {
                message.badgeMetadataTimeline = data.badgeMetadataTimeline.map(item => dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline.fromObject(item));
            }
            if (data.updateOffChainBalancesMetadataTimeline != null) {
                message.updateOffChainBalancesMetadataTimeline = data.updateOffChainBalancesMetadataTimeline;
            }
            if (data.offChainBalancesMetadataTimeline != null) {
                message.offChainBalancesMetadataTimeline = data.offChainBalancesMetadataTimeline.map(item => dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline.fromObject(item));
            }
            if (data.updateCustomDataTimeline != null) {
                message.updateCustomDataTimeline = data.updateCustomDataTimeline;
            }
            if (data.customDataTimeline != null) {
                message.customDataTimeline = data.customDataTimeline.map(item => dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline.fromObject(item));
            }
            if (data.updateCollectionApprovals != null) {
                message.updateCollectionApprovals = data.updateCollectionApprovals;
            }
            if (data.collectionApprovals != null) {
                message.collectionApprovals = data.collectionApprovals.map(item => dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval.fromObject(item));
            }
            if (data.updateStandardsTimeline != null) {
                message.updateStandardsTimeline = data.updateStandardsTimeline;
            }
            if (data.standardsTimeline != null) {
                message.standardsTimeline = data.standardsTimeline.map(item => dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline.fromObject(item));
            }
            if (data.updateContractAddressTimeline != null) {
                message.updateContractAddressTimeline = data.updateContractAddressTimeline;
            }
            if (data.contractAddressTimeline != null) {
                message.contractAddressTimeline = data.contractAddressTimeline.map(item => dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline.fromObject(item));
            }
            if (data.updateIsArchivedTimeline != null) {
                message.updateIsArchivedTimeline = data.updateIsArchivedTimeline;
            }
            if (data.isArchivedTimeline != null) {
                message.isArchivedTimeline = data.isArchivedTimeline.map(item => dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: string;
                balancesType?: string;
                defaultOutgoingApprovals?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.prototype.toObject>[];
                defaultIncomingApprovals?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval.prototype.toObject>[];
                defaultAutoApproveSelfInitiatedOutgoingTransfers?: boolean;
                defaultAutoApproveSelfInitiatedIncomingTransfers?: boolean;
                defaultUserPermissions?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions.prototype.toObject>;
                badgesToCreate?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
                updateCollectionPermissions?: boolean;
                collectionPermissions?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.CollectionPermissions.prototype.toObject>;
                updateManagerTimeline?: boolean;
                managerTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline.prototype.toObject>[];
                updateCollectionMetadataTimeline?: boolean;
                collectionMetadataTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline.prototype.toObject>[];
                updateBadgeMetadataTimeline?: boolean;
                badgeMetadataTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline.prototype.toObject>[];
                updateOffChainBalancesMetadataTimeline?: boolean;
                offChainBalancesMetadataTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline.prototype.toObject>[];
                updateCustomDataTimeline?: boolean;
                customDataTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline.prototype.toObject>[];
                updateCollectionApprovals?: boolean;
                collectionApprovals?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval.prototype.toObject>[];
                updateStandardsTimeline?: boolean;
                standardsTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline.prototype.toObject>[];
                updateContractAddressTimeline?: boolean;
                contractAddressTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline.prototype.toObject>[];
                updateIsArchivedTimeline?: boolean;
                isArchivedTimeline?: ReturnType<typeof dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline.prototype.toObject>[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.balancesType != null) {
                data.balancesType = this.balancesType;
            }
            if (this.defaultOutgoingApprovals != null) {
                data.defaultOutgoingApprovals = this.defaultOutgoingApprovals.map((item: dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval) => item.toObject());
            }
            if (this.defaultIncomingApprovals != null) {
                data.defaultIncomingApprovals = this.defaultIncomingApprovals.map((item: dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval) => item.toObject());
            }
            if (this.defaultAutoApproveSelfInitiatedOutgoingTransfers != null) {
                data.defaultAutoApproveSelfInitiatedOutgoingTransfers = this.defaultAutoApproveSelfInitiatedOutgoingTransfers;
            }
            if (this.defaultAutoApproveSelfInitiatedIncomingTransfers != null) {
                data.defaultAutoApproveSelfInitiatedIncomingTransfers = this.defaultAutoApproveSelfInitiatedIncomingTransfers;
            }
            if (this.defaultUserPermissions != null) {
                data.defaultUserPermissions = this.defaultUserPermissions.toObject();
            }
            if (this.badgesToCreate != null) {
                data.badgesToCreate = this.badgesToCreate.map((item: dependency_2.bitbadges.bitbadgeschain.badges.Balance) => item.toObject());
            }
            if (this.updateCollectionPermissions != null) {
                data.updateCollectionPermissions = this.updateCollectionPermissions;
            }
            if (this.collectionPermissions != null) {
                data.collectionPermissions = this.collectionPermissions.toObject();
            }
            if (this.updateManagerTimeline != null) {
                data.updateManagerTimeline = this.updateManagerTimeline;
            }
            if (this.managerTimeline != null) {
                data.managerTimeline = this.managerTimeline.map((item: dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline) => item.toObject());
            }
            if (this.updateCollectionMetadataTimeline != null) {
                data.updateCollectionMetadataTimeline = this.updateCollectionMetadataTimeline;
            }
            if (this.collectionMetadataTimeline != null) {
                data.collectionMetadataTimeline = this.collectionMetadataTimeline.map((item: dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline) => item.toObject());
            }
            if (this.updateBadgeMetadataTimeline != null) {
                data.updateBadgeMetadataTimeline = this.updateBadgeMetadataTimeline;
            }
            if (this.badgeMetadataTimeline != null) {
                data.badgeMetadataTimeline = this.badgeMetadataTimeline.map((item: dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline) => item.toObject());
            }
            if (this.updateOffChainBalancesMetadataTimeline != null) {
                data.updateOffChainBalancesMetadataTimeline = this.updateOffChainBalancesMetadataTimeline;
            }
            if (this.offChainBalancesMetadataTimeline != null) {
                data.offChainBalancesMetadataTimeline = this.offChainBalancesMetadataTimeline.map((item: dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline) => item.toObject());
            }
            if (this.updateCustomDataTimeline != null) {
                data.updateCustomDataTimeline = this.updateCustomDataTimeline;
            }
            if (this.customDataTimeline != null) {
                data.customDataTimeline = this.customDataTimeline.map((item: dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline) => item.toObject());
            }
            if (this.updateCollectionApprovals != null) {
                data.updateCollectionApprovals = this.updateCollectionApprovals;
            }
            if (this.collectionApprovals != null) {
                data.collectionApprovals = this.collectionApprovals.map((item: dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval) => item.toObject());
            }
            if (this.updateStandardsTimeline != null) {
                data.updateStandardsTimeline = this.updateStandardsTimeline;
            }
            if (this.standardsTimeline != null) {
                data.standardsTimeline = this.standardsTimeline.map((item: dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline) => item.toObject());
            }
            if (this.updateContractAddressTimeline != null) {
                data.updateContractAddressTimeline = this.updateContractAddressTimeline;
            }
            if (this.contractAddressTimeline != null) {
                data.contractAddressTimeline = this.contractAddressTimeline.map((item: dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline) => item.toObject());
            }
            if (this.updateIsArchivedTimeline != null) {
                data.updateIsArchivedTimeline = this.updateIsArchivedTimeline;
            }
            if (this.isArchivedTimeline != null) {
                data.isArchivedTimeline = this.isArchivedTimeline.map((item: dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId.length)
                writer.writeString(2, this.collectionId);
            if (this.balancesType.length)
                writer.writeString(3, this.balancesType);
            if (this.defaultOutgoingApprovals.length)
                writer.writeRepeatedMessage(4, this.defaultOutgoingApprovals, (item: dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval) => item.serialize(writer));
            if (this.defaultIncomingApprovals.length)
                writer.writeRepeatedMessage(5, this.defaultIncomingApprovals, (item: dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval) => item.serialize(writer));
            if (this.defaultAutoApproveSelfInitiatedOutgoingTransfers != false)
                writer.writeBool(29, this.defaultAutoApproveSelfInitiatedOutgoingTransfers);
            if (this.defaultAutoApproveSelfInitiatedIncomingTransfers != false)
                writer.writeBool(30, this.defaultAutoApproveSelfInitiatedIncomingTransfers);
            if (this.has_defaultUserPermissions)
                writer.writeMessage(31, this.defaultUserPermissions, () => this.defaultUserPermissions.serialize(writer));
            if (this.badgesToCreate.length)
                writer.writeRepeatedMessage(6, this.badgesToCreate, (item: dependency_2.bitbadges.bitbadgeschain.badges.Balance) => item.serialize(writer));
            if (this.updateCollectionPermissions != false)
                writer.writeBool(7, this.updateCollectionPermissions);
            if (this.has_collectionPermissions)
                writer.writeMessage(8, this.collectionPermissions, () => this.collectionPermissions.serialize(writer));
            if (this.updateManagerTimeline != false)
                writer.writeBool(9, this.updateManagerTimeline);
            if (this.managerTimeline.length)
                writer.writeRepeatedMessage(10, this.managerTimeline, (item: dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline) => item.serialize(writer));
            if (this.updateCollectionMetadataTimeline != false)
                writer.writeBool(11, this.updateCollectionMetadataTimeline);
            if (this.collectionMetadataTimeline.length)
                writer.writeRepeatedMessage(12, this.collectionMetadataTimeline, (item: dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline) => item.serialize(writer));
            if (this.updateBadgeMetadataTimeline != false)
                writer.writeBool(13, this.updateBadgeMetadataTimeline);
            if (this.badgeMetadataTimeline.length)
                writer.writeRepeatedMessage(14, this.badgeMetadataTimeline, (item: dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline) => item.serialize(writer));
            if (this.updateOffChainBalancesMetadataTimeline != false)
                writer.writeBool(15, this.updateOffChainBalancesMetadataTimeline);
            if (this.offChainBalancesMetadataTimeline.length)
                writer.writeRepeatedMessage(16, this.offChainBalancesMetadataTimeline, (item: dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline) => item.serialize(writer));
            if (this.updateCustomDataTimeline != false)
                writer.writeBool(17, this.updateCustomDataTimeline);
            if (this.customDataTimeline.length)
                writer.writeRepeatedMessage(18, this.customDataTimeline, (item: dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline) => item.serialize(writer));
            if (this.updateCollectionApprovals != false)
                writer.writeBool(21, this.updateCollectionApprovals);
            if (this.collectionApprovals.length)
                writer.writeRepeatedMessage(22, this.collectionApprovals, (item: dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval) => item.serialize(writer));
            if (this.updateStandardsTimeline != false)
                writer.writeBool(23, this.updateStandardsTimeline);
            if (this.standardsTimeline.length)
                writer.writeRepeatedMessage(24, this.standardsTimeline, (item: dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline) => item.serialize(writer));
            if (this.updateContractAddressTimeline != false)
                writer.writeBool(25, this.updateContractAddressTimeline);
            if (this.contractAddressTimeline.length)
                writer.writeRepeatedMessage(26, this.contractAddressTimeline, (item: dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline) => item.serialize(writer));
            if (this.updateIsArchivedTimeline != false)
                writer.writeBool(27, this.updateIsArchivedTimeline);
            if (this.isArchivedTimeline.length)
                writer.writeRepeatedMessage(28, this.isArchivedTimeline, (item: dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateCollection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateCollection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readString();
                        break;
                    case 3:
                        message.balancesType = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.defaultOutgoingApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval));
                        break;
                    case 5:
                        reader.readMessage(message.defaultIncomingApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval));
                        break;
                    case 29:
                        message.defaultAutoApproveSelfInitiatedOutgoingTransfers = reader.readBool();
                        break;
                    case 30:
                        message.defaultAutoApproveSelfInitiatedIncomingTransfers = reader.readBool();
                        break;
                    case 31:
                        reader.readMessage(message.defaultUserPermissions, () => message.defaultUserPermissions = dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions.deserialize(reader));
                        break;
                    case 6:
                        reader.readMessage(message.badgesToCreate, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_2.bitbadges.bitbadgeschain.badges.Balance.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.Balance));
                        break;
                    case 7:
                        message.updateCollectionPermissions = reader.readBool();
                        break;
                    case 8:
                        reader.readMessage(message.collectionPermissions, () => message.collectionPermissions = dependency_3.bitbadges.bitbadgeschain.badges.CollectionPermissions.deserialize(reader));
                        break;
                    case 9:
                        message.updateManagerTimeline = reader.readBool();
                        break;
                    case 10:
                        reader.readMessage(message.managerTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline.deserialize(reader), dependency_8.bitbadges.bitbadgeschain.badges.ManagerTimeline));
                        break;
                    case 11:
                        message.updateCollectionMetadataTimeline = reader.readBool();
                        break;
                    case 12:
                        reader.readMessage(message.collectionMetadataTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 12, dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline.deserialize(reader), dependency_8.bitbadges.bitbadgeschain.badges.CollectionMetadataTimeline));
                        break;
                    case 13:
                        message.updateBadgeMetadataTimeline = reader.readBool();
                        break;
                    case 14:
                        reader.readMessage(message.badgeMetadataTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 14, dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline.deserialize(reader), dependency_8.bitbadges.bitbadgeschain.badges.BadgeMetadataTimeline));
                        break;
                    case 15:
                        message.updateOffChainBalancesMetadataTimeline = reader.readBool();
                        break;
                    case 16:
                        reader.readMessage(message.offChainBalancesMetadataTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 16, dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline.deserialize(reader), dependency_8.bitbadges.bitbadgeschain.badges.OffChainBalancesMetadataTimeline));
                        break;
                    case 17:
                        message.updateCustomDataTimeline = reader.readBool();
                        break;
                    case 18:
                        reader.readMessage(message.customDataTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 18, dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline.deserialize(reader), dependency_8.bitbadges.bitbadgeschain.badges.CustomDataTimeline));
                        break;
                    case 21:
                        message.updateCollectionApprovals = reader.readBool();
                        break;
                    case 22:
                        reader.readMessage(message.collectionApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 22, dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.CollectionApproval));
                        break;
                    case 23:
                        message.updateStandardsTimeline = reader.readBool();
                        break;
                    case 24:
                        reader.readMessage(message.standardsTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 24, dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline.deserialize(reader), dependency_8.bitbadges.bitbadgeschain.badges.StandardsTimeline));
                        break;
                    case 25:
                        message.updateContractAddressTimeline = reader.readBool();
                        break;
                    case 26:
                        reader.readMessage(message.contractAddressTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 26, dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline.deserialize(reader), dependency_8.bitbadges.bitbadgeschain.badges.ContractAddressTimeline));
                        break;
                    case 27:
                        message.updateIsArchivedTimeline = reader.readBool();
                        break;
                    case 28:
                        reader.readMessage(message.isArchivedTimeline, () => pb_1.Message.addToRepeatedWrapperField(message, 28, dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline.deserialize(reader), dependency_8.bitbadges.bitbadgeschain.badges.IsArchivedTimeline));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateCollection {
            return MsgUpdateCollection.deserialize(bytes);
        }
    }
    export class MsgUpdateCollectionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
            }
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            collectionId?: string;
        }): MsgUpdateCollectionResponse {
            const message = new MsgUpdateCollectionResponse({});
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            return message;
        }
        toObject() {
            const data: {
                collectionId?: string;
            } = {};
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collectionId.length)
                writer.writeString(1, this.collectionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateCollectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateCollectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collectionId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateCollectionResponse {
            return MsgUpdateCollectionResponse.deserialize(bytes);
        }
    }
    export class MsgCreateAddressMappings extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            addressMappings?: dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("addressMappings" in data && data.addressMappings != undefined) {
                    this.addressMappings = data.addressMappings;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addressMappings() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping, 2) as dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping[];
        }
        set addressMappings(value: dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            creator?: string;
            addressMappings?: ReturnType<typeof dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping.prototype.toObject>[];
        }): MsgCreateAddressMappings {
            const message = new MsgCreateAddressMappings({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.addressMappings != null) {
                message.addressMappings = data.addressMappings.map(item => dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                addressMappings?: ReturnType<typeof dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping.prototype.toObject>[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.addressMappings != null) {
                data.addressMappings = this.addressMappings.map((item: dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.addressMappings.length)
                writer.writeRepeatedMessage(2, this.addressMappings, (item: dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateAddressMappings {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateAddressMappings();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.addressMappings, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping.deserialize(reader), dependency_7.bitbadges.bitbadgeschain.badges.AddressMapping));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateAddressMappings {
            return MsgCreateAddressMappings.deserialize(bytes);
        }
    }
    export class MsgCreateAddressMappingsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgCreateAddressMappingsResponse {
            const message = new MsgCreateAddressMappingsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgCreateAddressMappingsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgCreateAddressMappingsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgCreateAddressMappingsResponse {
            return MsgCreateAddressMappingsResponse.deserialize(bytes);
        }
    }
    export class MsgTransferBadges extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: string;
            transfers?: dependency_1.bitbadges.bitbadgeschain.badges.Transfer[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("transfers" in data && data.transfers != undefined) {
                    this.transfers = data.transfers;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get transfers() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.Transfer, 3) as dependency_1.bitbadges.bitbadgeschain.badges.Transfer[];
        }
        set transfers(value: dependency_1.bitbadges.bitbadgeschain.badges.Transfer[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: string;
            transfers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.Transfer.prototype.toObject>[];
        }): MsgTransferBadges {
            const message = new MsgTransferBadges({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.transfers != null) {
                message.transfers = data.transfers.map(item => dependency_1.bitbadges.bitbadgeschain.badges.Transfer.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: string;
                transfers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.Transfer.prototype.toObject>[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.transfers != null) {
                data.transfers = this.transfers.map((item: dependency_1.bitbadges.bitbadgeschain.badges.Transfer) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId.length)
                writer.writeString(2, this.collectionId);
            if (this.transfers.length)
                writer.writeRepeatedMessage(3, this.transfers, (item: dependency_1.bitbadges.bitbadgeschain.badges.Transfer) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferBadges {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferBadges();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.transfers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.bitbadges.bitbadgeschain.badges.Transfer.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.Transfer));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferBadges {
            return MsgTransferBadges.deserialize(bytes);
        }
    }
    export class MsgTransferBadgesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgTransferBadgesResponse {
            const message = new MsgTransferBadgesResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferBadgesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferBadgesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferBadgesResponse {
            return MsgTransferBadgesResponse.deserialize(bytes);
        }
    }
    export class MsgDeleteCollection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: string;
        }): MsgDeleteCollection {
            const message = new MsgDeleteCollection({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: string;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId.length)
                writer.writeString(2, this.collectionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDeleteCollection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDeleteCollection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDeleteCollection {
            return MsgDeleteCollection.deserialize(bytes);
        }
    }
    export class MsgDeleteCollectionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgDeleteCollectionResponse {
            const message = new MsgDeleteCollectionResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgDeleteCollectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgDeleteCollectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgDeleteCollectionResponse {
            return MsgDeleteCollectionResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateUserApprovals extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: string;
            updateOutgoingApprovals?: boolean;
            outgoingApprovals?: dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval[];
            updateIncomingApprovals?: boolean;
            incomingApprovals?: dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval[];
            updateAutoApproveSelfInitiatedOutgoingTransfers?: boolean;
            autoApproveSelfInitiatedOutgoingTransfers?: boolean;
            updateAutoApproveSelfInitiatedIncomingTransfers?: boolean;
            autoApproveSelfInitiatedIncomingTransfers?: boolean;
            updateUserPermissions?: boolean;
            userPermissions?: dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("updateOutgoingApprovals" in data && data.updateOutgoingApprovals != undefined) {
                    this.updateOutgoingApprovals = data.updateOutgoingApprovals;
                }
                if ("outgoingApprovals" in data && data.outgoingApprovals != undefined) {
                    this.outgoingApprovals = data.outgoingApprovals;
                }
                if ("updateIncomingApprovals" in data && data.updateIncomingApprovals != undefined) {
                    this.updateIncomingApprovals = data.updateIncomingApprovals;
                }
                if ("incomingApprovals" in data && data.incomingApprovals != undefined) {
                    this.incomingApprovals = data.incomingApprovals;
                }
                if ("updateAutoApproveSelfInitiatedOutgoingTransfers" in data && data.updateAutoApproveSelfInitiatedOutgoingTransfers != undefined) {
                    this.updateAutoApproveSelfInitiatedOutgoingTransfers = data.updateAutoApproveSelfInitiatedOutgoingTransfers;
                }
                if ("autoApproveSelfInitiatedOutgoingTransfers" in data && data.autoApproveSelfInitiatedOutgoingTransfers != undefined) {
                    this.autoApproveSelfInitiatedOutgoingTransfers = data.autoApproveSelfInitiatedOutgoingTransfers;
                }
                if ("updateAutoApproveSelfInitiatedIncomingTransfers" in data && data.updateAutoApproveSelfInitiatedIncomingTransfers != undefined) {
                    this.updateAutoApproveSelfInitiatedIncomingTransfers = data.updateAutoApproveSelfInitiatedIncomingTransfers;
                }
                if ("autoApproveSelfInitiatedIncomingTransfers" in data && data.autoApproveSelfInitiatedIncomingTransfers != undefined) {
                    this.autoApproveSelfInitiatedIncomingTransfers = data.autoApproveSelfInitiatedIncomingTransfers;
                }
                if ("updateUserPermissions" in data && data.updateUserPermissions != undefined) {
                    this.updateUserPermissions = data.updateUserPermissions;
                }
                if ("userPermissions" in data && data.userPermissions != undefined) {
                    this.userPermissions = data.userPermissions;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get updateOutgoingApprovals() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set updateOutgoingApprovals(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        get outgoingApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval, 4) as dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval[];
        }
        set outgoingApprovals(value: dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get updateIncomingApprovals() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set updateIncomingApprovals(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get incomingApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval, 6) as dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval[];
        }
        set incomingApprovals(value: dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get updateAutoApproveSelfInitiatedOutgoingTransfers() {
            return pb_1.Message.getFieldWithDefault(this, 7, false) as boolean;
        }
        set updateAutoApproveSelfInitiatedOutgoingTransfers(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get autoApproveSelfInitiatedOutgoingTransfers() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set autoApproveSelfInitiatedOutgoingTransfers(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        get updateAutoApproveSelfInitiatedIncomingTransfers() {
            return pb_1.Message.getFieldWithDefault(this, 9, false) as boolean;
        }
        set updateAutoApproveSelfInitiatedIncomingTransfers(value: boolean) {
            pb_1.Message.setField(this, 9, value);
        }
        get autoApproveSelfInitiatedIncomingTransfers() {
            return pb_1.Message.getFieldWithDefault(this, 10, false) as boolean;
        }
        set autoApproveSelfInitiatedIncomingTransfers(value: boolean) {
            pb_1.Message.setField(this, 10, value);
        }
        get updateUserPermissions() {
            return pb_1.Message.getFieldWithDefault(this, 11, false) as boolean;
        }
        set updateUserPermissions(value: boolean) {
            pb_1.Message.setField(this, 11, value);
        }
        get userPermissions() {
            return pb_1.Message.getWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions, 12) as dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions;
        }
        set userPermissions(value: dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions) {
            pb_1.Message.setWrapperField(this, 12, value);
        }
        get has_userPermissions() {
            return pb_1.Message.getField(this, 12) != null;
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: string;
            updateOutgoingApprovals?: boolean;
            outgoingApprovals?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.prototype.toObject>[];
            updateIncomingApprovals?: boolean;
            incomingApprovals?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval.prototype.toObject>[];
            updateAutoApproveSelfInitiatedOutgoingTransfers?: boolean;
            autoApproveSelfInitiatedOutgoingTransfers?: boolean;
            updateAutoApproveSelfInitiatedIncomingTransfers?: boolean;
            autoApproveSelfInitiatedIncomingTransfers?: boolean;
            updateUserPermissions?: boolean;
            userPermissions?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions.prototype.toObject>;
        }): MsgUpdateUserApprovals {
            const message = new MsgUpdateUserApprovals({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.updateOutgoingApprovals != null) {
                message.updateOutgoingApprovals = data.updateOutgoingApprovals;
            }
            if (data.outgoingApprovals != null) {
                message.outgoingApprovals = data.outgoingApprovals.map(item => dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.fromObject(item));
            }
            if (data.updateIncomingApprovals != null) {
                message.updateIncomingApprovals = data.updateIncomingApprovals;
            }
            if (data.incomingApprovals != null) {
                message.incomingApprovals = data.incomingApprovals.map(item => dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval.fromObject(item));
            }
            if (data.updateAutoApproveSelfInitiatedOutgoingTransfers != null) {
                message.updateAutoApproveSelfInitiatedOutgoingTransfers = data.updateAutoApproveSelfInitiatedOutgoingTransfers;
            }
            if (data.autoApproveSelfInitiatedOutgoingTransfers != null) {
                message.autoApproveSelfInitiatedOutgoingTransfers = data.autoApproveSelfInitiatedOutgoingTransfers;
            }
            if (data.updateAutoApproveSelfInitiatedIncomingTransfers != null) {
                message.updateAutoApproveSelfInitiatedIncomingTransfers = data.updateAutoApproveSelfInitiatedIncomingTransfers;
            }
            if (data.autoApproveSelfInitiatedIncomingTransfers != null) {
                message.autoApproveSelfInitiatedIncomingTransfers = data.autoApproveSelfInitiatedIncomingTransfers;
            }
            if (data.updateUserPermissions != null) {
                message.updateUserPermissions = data.updateUserPermissions;
            }
            if (data.userPermissions != null) {
                message.userPermissions = dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions.fromObject(data.userPermissions);
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: string;
                updateOutgoingApprovals?: boolean;
                outgoingApprovals?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.prototype.toObject>[];
                updateIncomingApprovals?: boolean;
                incomingApprovals?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval.prototype.toObject>[];
                updateAutoApproveSelfInitiatedOutgoingTransfers?: boolean;
                autoApproveSelfInitiatedOutgoingTransfers?: boolean;
                updateAutoApproveSelfInitiatedIncomingTransfers?: boolean;
                autoApproveSelfInitiatedIncomingTransfers?: boolean;
                updateUserPermissions?: boolean;
                userPermissions?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions.prototype.toObject>;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.updateOutgoingApprovals != null) {
                data.updateOutgoingApprovals = this.updateOutgoingApprovals;
            }
            if (this.outgoingApprovals != null) {
                data.outgoingApprovals = this.outgoingApprovals.map((item: dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval) => item.toObject());
            }
            if (this.updateIncomingApprovals != null) {
                data.updateIncomingApprovals = this.updateIncomingApprovals;
            }
            if (this.incomingApprovals != null) {
                data.incomingApprovals = this.incomingApprovals.map((item: dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval) => item.toObject());
            }
            if (this.updateAutoApproveSelfInitiatedOutgoingTransfers != null) {
                data.updateAutoApproveSelfInitiatedOutgoingTransfers = this.updateAutoApproveSelfInitiatedOutgoingTransfers;
            }
            if (this.autoApproveSelfInitiatedOutgoingTransfers != null) {
                data.autoApproveSelfInitiatedOutgoingTransfers = this.autoApproveSelfInitiatedOutgoingTransfers;
            }
            if (this.updateAutoApproveSelfInitiatedIncomingTransfers != null) {
                data.updateAutoApproveSelfInitiatedIncomingTransfers = this.updateAutoApproveSelfInitiatedIncomingTransfers;
            }
            if (this.autoApproveSelfInitiatedIncomingTransfers != null) {
                data.autoApproveSelfInitiatedIncomingTransfers = this.autoApproveSelfInitiatedIncomingTransfers;
            }
            if (this.updateUserPermissions != null) {
                data.updateUserPermissions = this.updateUserPermissions;
            }
            if (this.userPermissions != null) {
                data.userPermissions = this.userPermissions.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId.length)
                writer.writeString(2, this.collectionId);
            if (this.updateOutgoingApprovals != false)
                writer.writeBool(3, this.updateOutgoingApprovals);
            if (this.outgoingApprovals.length)
                writer.writeRepeatedMessage(4, this.outgoingApprovals, (item: dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval) => item.serialize(writer));
            if (this.updateIncomingApprovals != false)
                writer.writeBool(5, this.updateIncomingApprovals);
            if (this.incomingApprovals.length)
                writer.writeRepeatedMessage(6, this.incomingApprovals, (item: dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval) => item.serialize(writer));
            if (this.updateAutoApproveSelfInitiatedOutgoingTransfers != false)
                writer.writeBool(7, this.updateAutoApproveSelfInitiatedOutgoingTransfers);
            if (this.autoApproveSelfInitiatedOutgoingTransfers != false)
                writer.writeBool(8, this.autoApproveSelfInitiatedOutgoingTransfers);
            if (this.updateAutoApproveSelfInitiatedIncomingTransfers != false)
                writer.writeBool(9, this.updateAutoApproveSelfInitiatedIncomingTransfers);
            if (this.autoApproveSelfInitiatedIncomingTransfers != false)
                writer.writeBool(10, this.autoApproveSelfInitiatedIncomingTransfers);
            if (this.updateUserPermissions != false)
                writer.writeBool(11, this.updateUserPermissions);
            if (this.has_userPermissions)
                writer.writeMessage(12, this.userPermissions, () => this.userPermissions.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateUserApprovals {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateUserApprovals();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readString();
                        break;
                    case 3:
                        message.updateOutgoingApprovals = reader.readBool();
                        break;
                    case 4:
                        reader.readMessage(message.outgoingApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.UserOutgoingApproval));
                        break;
                    case 5:
                        message.updateIncomingApprovals = reader.readBool();
                        break;
                    case 6:
                        reader.readMessage(message.incomingApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.UserIncomingApproval));
                        break;
                    case 7:
                        message.updateAutoApproveSelfInitiatedOutgoingTransfers = reader.readBool();
                        break;
                    case 8:
                        message.autoApproveSelfInitiatedOutgoingTransfers = reader.readBool();
                        break;
                    case 9:
                        message.updateAutoApproveSelfInitiatedIncomingTransfers = reader.readBool();
                        break;
                    case 10:
                        message.autoApproveSelfInitiatedIncomingTransfers = reader.readBool();
                        break;
                    case 11:
                        message.updateUserPermissions = reader.readBool();
                        break;
                    case 12:
                        reader.readMessage(message.userPermissions, () => message.userPermissions = dependency_3.bitbadges.bitbadgeschain.badges.UserPermissions.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateUserApprovals {
            return MsgUpdateUserApprovals.deserialize(bytes);
        }
    }
    export class MsgUpdateUserApprovalsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateUserApprovalsResponse {
            const message = new MsgUpdateUserApprovalsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateUserApprovalsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateUserApprovalsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateUserApprovalsResponse {
            return MsgUpdateUserApprovalsResponse.deserialize(bytes);
        }
    }
}
