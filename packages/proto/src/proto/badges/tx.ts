// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./ranges";
import * as dependency_2 from "./balances";
import * as dependency_3 from "./claims";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class BadgeSupplyAndAmount extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            supply?: number;
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("supply" in data && data.supply != undefined) {
                    this.supply = data.supply;
                }
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get supply() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set supply(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            supply?: number;
            amount?: number;
        }): BadgeSupplyAndAmount {
            const message = new BadgeSupplyAndAmount({});
            if (data.supply != null) {
                message.supply = data.supply;
            }
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                supply?: number;
                amount?: number;
            } = {};
            if (this.supply != null) {
                data.supply = this.supply;
            }
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.supply != 0)
                writer.writeUint64(1, this.supply);
            if (this.amount != 0)
                writer.writeUint64(2, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BadgeSupplyAndAmount {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BadgeSupplyAndAmount();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.supply = reader.readUint64();
                        break;
                    case 2:
                        message.amount = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BadgeSupplyAndAmount {
            return BadgeSupplyAndAmount.deserialize(bytes);
        }
    }
    export class Transfers extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            toAddresses?: number[];
            balances?: dependency_2.bitbadges.bitbadgeschain.badges.Balance[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("toAddresses" in data && data.toAddresses != undefined) {
                    this.toAddresses = data.toAddresses;
                }
                if ("balances" in data && data.balances != undefined) {
                    this.balances = data.balances;
                }
            }
        }
        get toAddresses() {
            return pb_1.Message.getFieldWithDefault(this, 1, []) as number[];
        }
        set toAddresses(value: number[]) {
            pb_1.Message.setField(this, 1, value);
        }
        get balances() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.Balance, 2) as dependency_2.bitbadges.bitbadgeschain.badges.Balance[];
        }
        set balances(value: dependency_2.bitbadges.bitbadgeschain.badges.Balance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            toAddresses?: number[];
            balances?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
        }): Transfers {
            const message = new Transfers({});
            if (data.toAddresses != null) {
                message.toAddresses = data.toAddresses;
            }
            if (data.balances != null) {
                message.balances = data.balances.map(item => dependency_2.bitbadges.bitbadgeschain.badges.Balance.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                toAddresses?: number[];
                balances?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
            } = {};
            if (this.toAddresses != null) {
                data.toAddresses = this.toAddresses;
            }
            if (this.balances != null) {
                data.balances = this.balances.map((item: dependency_2.bitbadges.bitbadgeschain.badges.Balance) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.toAddresses.length)
                writer.writePackedUint64(1, this.toAddresses);
            if (this.balances.length)
                writer.writeRepeatedMessage(2, this.balances, (item: dependency_2.bitbadges.bitbadgeschain.badges.Balance) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Transfers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Transfers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.toAddresses = reader.readPackedUint64();
                        break;
                    case 2:
                        reader.readMessage(message.balances, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.bitbadges.bitbadgeschain.badges.Balance.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.Balance));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Transfers {
            return Transfers.deserialize(bytes);
        }
    }
    export class MsgNewCollection extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionUri?: string;
            badgeUri?: string;
            permissions?: number;
            bytes?: string;
            disallowedTransfers?: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping[];
            managerApprovedTransfers?: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping[];
            standard?: number;
            badgeSupplys?: BadgeSupplyAndAmount[];
            transfers?: Transfers[];
            claims?: dependency_3.bitbadges.bitbadgeschain.badges.Claim[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6, 7, 9, 10, 11], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionUri" in data && data.collectionUri != undefined) {
                    this.collectionUri = data.collectionUri;
                }
                if ("badgeUri" in data && data.badgeUri != undefined) {
                    this.badgeUri = data.badgeUri;
                }
                if ("permissions" in data && data.permissions != undefined) {
                    this.permissions = data.permissions;
                }
                if ("bytes" in data && data.bytes != undefined) {
                    this.bytes = data.bytes;
                }
                if ("disallowedTransfers" in data && data.disallowedTransfers != undefined) {
                    this.disallowedTransfers = data.disallowedTransfers;
                }
                if ("managerApprovedTransfers" in data && data.managerApprovedTransfers != undefined) {
                    this.managerApprovedTransfers = data.managerApprovedTransfers;
                }
                if ("standard" in data && data.standard != undefined) {
                    this.standard = data.standard;
                }
                if ("badgeSupplys" in data && data.badgeSupplys != undefined) {
                    this.badgeSupplys = data.badgeSupplys;
                }
                if ("transfers" in data && data.transfers != undefined) {
                    this.transfers = data.transfers;
                }
                if ("claims" in data && data.claims != undefined) {
                    this.claims = data.claims;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionUri() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set collectionUri(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get badgeUri() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set badgeUri(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get permissions() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set permissions(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get bytes() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set bytes(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get disallowedTransfers() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping, 6) as dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping[];
        }
        set disallowedTransfers(value: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get managerApprovedTransfers() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping, 7) as dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping[];
        }
        set managerApprovedTransfers(value: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get standard() {
            return pb_1.Message.getFieldWithDefault(this, 8, 0) as number;
        }
        set standard(value: number) {
            pb_1.Message.setField(this, 8, value);
        }
        get badgeSupplys() {
            return pb_1.Message.getRepeatedWrapperField(this, BadgeSupplyAndAmount, 9) as BadgeSupplyAndAmount[];
        }
        set badgeSupplys(value: BadgeSupplyAndAmount[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get transfers() {
            return pb_1.Message.getRepeatedWrapperField(this, Transfers, 10) as Transfers[];
        }
        set transfers(value: Transfers[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        get claims() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.Claim, 11) as dependency_3.bitbadges.bitbadgeschain.badges.Claim[];
        }
        set claims(value: dependency_3.bitbadges.bitbadgeschain.badges.Claim[]) {
            pb_1.Message.setRepeatedWrapperField(this, 11, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionUri?: string;
            badgeUri?: string;
            permissions?: number;
            bytes?: string;
            disallowedTransfers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.prototype.toObject>[];
            managerApprovedTransfers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.prototype.toObject>[];
            standard?: number;
            badgeSupplys?: ReturnType<typeof BadgeSupplyAndAmount.prototype.toObject>[];
            transfers?: ReturnType<typeof Transfers.prototype.toObject>[];
            claims?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.Claim.prototype.toObject>[];
        }): MsgNewCollection {
            const message = new MsgNewCollection({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionUri != null) {
                message.collectionUri = data.collectionUri;
            }
            if (data.badgeUri != null) {
                message.badgeUri = data.badgeUri;
            }
            if (data.permissions != null) {
                message.permissions = data.permissions;
            }
            if (data.bytes != null) {
                message.bytes = data.bytes;
            }
            if (data.disallowedTransfers != null) {
                message.disallowedTransfers = data.disallowedTransfers.map(item => dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.fromObject(item));
            }
            if (data.managerApprovedTransfers != null) {
                message.managerApprovedTransfers = data.managerApprovedTransfers.map(item => dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.fromObject(item));
            }
            if (data.standard != null) {
                message.standard = data.standard;
            }
            if (data.badgeSupplys != null) {
                message.badgeSupplys = data.badgeSupplys.map(item => BadgeSupplyAndAmount.fromObject(item));
            }
            if (data.transfers != null) {
                message.transfers = data.transfers.map(item => Transfers.fromObject(item));
            }
            if (data.claims != null) {
                message.claims = data.claims.map(item => dependency_3.bitbadges.bitbadgeschain.badges.Claim.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionUri?: string;
                badgeUri?: string;
                permissions?: number;
                bytes?: string;
                disallowedTransfers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.prototype.toObject>[];
                managerApprovedTransfers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.prototype.toObject>[];
                standard?: number;
                badgeSupplys?: ReturnType<typeof BadgeSupplyAndAmount.prototype.toObject>[];
                transfers?: ReturnType<typeof Transfers.prototype.toObject>[];
                claims?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.Claim.prototype.toObject>[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionUri != null) {
                data.collectionUri = this.collectionUri;
            }
            if (this.badgeUri != null) {
                data.badgeUri = this.badgeUri;
            }
            if (this.permissions != null) {
                data.permissions = this.permissions;
            }
            if (this.bytes != null) {
                data.bytes = this.bytes;
            }
            if (this.disallowedTransfers != null) {
                data.disallowedTransfers = this.disallowedTransfers.map((item: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping) => item.toObject());
            }
            if (this.managerApprovedTransfers != null) {
                data.managerApprovedTransfers = this.managerApprovedTransfers.map((item: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping) => item.toObject());
            }
            if (this.standard != null) {
                data.standard = this.standard;
            }
            if (this.badgeSupplys != null) {
                data.badgeSupplys = this.badgeSupplys.map((item: BadgeSupplyAndAmount) => item.toObject());
            }
            if (this.transfers != null) {
                data.transfers = this.transfers.map((item: Transfers) => item.toObject());
            }
            if (this.claims != null) {
                data.claims = this.claims.map((item: dependency_3.bitbadges.bitbadgeschain.badges.Claim) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionUri.length)
                writer.writeString(2, this.collectionUri);
            if (this.badgeUri.length)
                writer.writeString(3, this.badgeUri);
            if (this.permissions != 0)
                writer.writeUint64(4, this.permissions);
            if (this.bytes.length)
                writer.writeString(5, this.bytes);
            if (this.disallowedTransfers.length)
                writer.writeRepeatedMessage(6, this.disallowedTransfers, (item: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping) => item.serialize(writer));
            if (this.managerApprovedTransfers.length)
                writer.writeRepeatedMessage(7, this.managerApprovedTransfers, (item: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping) => item.serialize(writer));
            if (this.standard != 0)
                writer.writeUint64(8, this.standard);
            if (this.badgeSupplys.length)
                writer.writeRepeatedMessage(9, this.badgeSupplys, (item: BadgeSupplyAndAmount) => item.serialize(writer));
            if (this.transfers.length)
                writer.writeRepeatedMessage(10, this.transfers, (item: Transfers) => item.serialize(writer));
            if (this.claims.length)
                writer.writeRepeatedMessage(11, this.claims, (item: dependency_3.bitbadges.bitbadgeschain.badges.Claim) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgNewCollection {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgNewCollection();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionUri = reader.readString();
                        break;
                    case 3:
                        message.badgeUri = reader.readString();
                        break;
                    case 4:
                        message.permissions = reader.readUint64();
                        break;
                    case 5:
                        message.bytes = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.disallowedTransfers, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping));
                        break;
                    case 7:
                        reader.readMessage(message.managerApprovedTransfers, () => pb_1.Message.addToRepeatedWrapperField(message, 7, dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping));
                        break;
                    case 8:
                        message.standard = reader.readUint64();
                        break;
                    case 9:
                        reader.readMessage(message.badgeSupplys, () => pb_1.Message.addToRepeatedWrapperField(message, 9, BadgeSupplyAndAmount.deserialize(reader), BadgeSupplyAndAmount));
                        break;
                    case 10:
                        reader.readMessage(message.transfers, () => pb_1.Message.addToRepeatedWrapperField(message, 10, Transfers.deserialize(reader), Transfers));
                        break;
                    case 11:
                        reader.readMessage(message.claims, () => pb_1.Message.addToRepeatedWrapperField(message, 11, dependency_3.bitbadges.bitbadgeschain.badges.Claim.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.Claim));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgNewCollection {
            return MsgNewCollection.deserialize(bytes);
        }
    }
    export class MsgNewCollectionResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
            }
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            collectionId?: number;
        }): MsgNewCollectionResponse {
            const message = new MsgNewCollectionResponse({});
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            return message;
        }
        toObject() {
            const data: {
                collectionId?: number;
            } = {};
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collectionId != 0)
                writer.writeUint64(1, this.collectionId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgNewCollectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgNewCollectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collectionId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgNewCollectionResponse {
            return MsgNewCollectionResponse.deserialize(bytes);
        }
    }
    export class MsgMintBadge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: number;
            badgeSupplys?: BadgeSupplyAndAmount[];
            transfers?: Transfers[];
            claims?: dependency_3.bitbadges.bitbadgeschain.badges.Claim[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("badgeSupplys" in data && data.badgeSupplys != undefined) {
                    this.badgeSupplys = data.badgeSupplys;
                }
                if ("transfers" in data && data.transfers != undefined) {
                    this.transfers = data.transfers;
                }
                if ("claims" in data && data.claims != undefined) {
                    this.claims = data.claims;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get badgeSupplys() {
            return pb_1.Message.getRepeatedWrapperField(this, BadgeSupplyAndAmount, 3) as BadgeSupplyAndAmount[];
        }
        set badgeSupplys(value: BadgeSupplyAndAmount[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get transfers() {
            return pb_1.Message.getRepeatedWrapperField(this, Transfers, 4) as Transfers[];
        }
        set transfers(value: Transfers[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get claims() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.Claim, 5) as dependency_3.bitbadges.bitbadgeschain.badges.Claim[];
        }
        set claims(value: dependency_3.bitbadges.bitbadgeschain.badges.Claim[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: number;
            badgeSupplys?: ReturnType<typeof BadgeSupplyAndAmount.prototype.toObject>[];
            transfers?: ReturnType<typeof Transfers.prototype.toObject>[];
            claims?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.Claim.prototype.toObject>[];
        }): MsgMintBadge {
            const message = new MsgMintBadge({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.badgeSupplys != null) {
                message.badgeSupplys = data.badgeSupplys.map(item => BadgeSupplyAndAmount.fromObject(item));
            }
            if (data.transfers != null) {
                message.transfers = data.transfers.map(item => Transfers.fromObject(item));
            }
            if (data.claims != null) {
                message.claims = data.claims.map(item => dependency_3.bitbadges.bitbadgeschain.badges.Claim.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: number;
                badgeSupplys?: ReturnType<typeof BadgeSupplyAndAmount.prototype.toObject>[];
                transfers?: ReturnType<typeof Transfers.prototype.toObject>[];
                claims?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.Claim.prototype.toObject>[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.badgeSupplys != null) {
                data.badgeSupplys = this.badgeSupplys.map((item: BadgeSupplyAndAmount) => item.toObject());
            }
            if (this.transfers != null) {
                data.transfers = this.transfers.map((item: Transfers) => item.toObject());
            }
            if (this.claims != null) {
                data.claims = this.claims.map((item: dependency_3.bitbadges.bitbadgeschain.badges.Claim) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId != 0)
                writer.writeUint64(2, this.collectionId);
            if (this.badgeSupplys.length)
                writer.writeRepeatedMessage(3, this.badgeSupplys, (item: BadgeSupplyAndAmount) => item.serialize(writer));
            if (this.transfers.length)
                writer.writeRepeatedMessage(4, this.transfers, (item: Transfers) => item.serialize(writer));
            if (this.claims.length)
                writer.writeRepeatedMessage(5, this.claims, (item: dependency_3.bitbadges.bitbadgeschain.badges.Claim) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgMintBadge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgMintBadge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.badgeSupplys, () => pb_1.Message.addToRepeatedWrapperField(message, 3, BadgeSupplyAndAmount.deserialize(reader), BadgeSupplyAndAmount));
                        break;
                    case 4:
                        reader.readMessage(message.transfers, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Transfers.deserialize(reader), Transfers));
                        break;
                    case 5:
                        reader.readMessage(message.claims, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_3.bitbadges.bitbadgeschain.badges.Claim.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.Claim));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgMintBadge {
            return MsgMintBadge.deserialize(bytes);
        }
    }
    export class MsgMintBadgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            nextBadgeId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nextBadgeId" in data && data.nextBadgeId != undefined) {
                    this.nextBadgeId = data.nextBadgeId;
                }
            }
        }
        get nextBadgeId() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set nextBadgeId(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            nextBadgeId?: number;
        }): MsgMintBadgeResponse {
            const message = new MsgMintBadgeResponse({});
            if (data.nextBadgeId != null) {
                message.nextBadgeId = data.nextBadgeId;
            }
            return message;
        }
        toObject() {
            const data: {
                nextBadgeId?: number;
            } = {};
            if (this.nextBadgeId != null) {
                data.nextBadgeId = this.nextBadgeId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nextBadgeId != 0)
                writer.writeUint64(1, this.nextBadgeId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgMintBadgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgMintBadgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.nextBadgeId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgMintBadgeResponse {
            return MsgMintBadgeResponse.deserialize(bytes);
        }
    }
    export class MsgTransferBadge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: number;
            from?: number;
            transfers?: Transfers[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("from" in data && data.from != undefined) {
                    this.from = data.from;
                }
                if ("transfers" in data && data.transfers != undefined) {
                    this.transfers = data.transfers;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get from() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set from(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get transfers() {
            return pb_1.Message.getRepeatedWrapperField(this, Transfers, 4) as Transfers[];
        }
        set transfers(value: Transfers[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: number;
            from?: number;
            transfers?: ReturnType<typeof Transfers.prototype.toObject>[];
        }): MsgTransferBadge {
            const message = new MsgTransferBadge({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.from != null) {
                message.from = data.from;
            }
            if (data.transfers != null) {
                message.transfers = data.transfers.map(item => Transfers.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: number;
                from?: number;
                transfers?: ReturnType<typeof Transfers.prototype.toObject>[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.from != null) {
                data.from = this.from;
            }
            if (this.transfers != null) {
                data.transfers = this.transfers.map((item: Transfers) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId != 0)
                writer.writeUint64(2, this.collectionId);
            if (this.from != 0)
                writer.writeUint64(3, this.from);
            if (this.transfers.length)
                writer.writeRepeatedMessage(4, this.transfers, (item: Transfers) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferBadge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferBadge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readUint64();
                        break;
                    case 3:
                        message.from = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.transfers, () => pb_1.Message.addToRepeatedWrapperField(message, 4, Transfers.deserialize(reader), Transfers));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferBadge {
            return MsgTransferBadge.deserialize(bytes);
        }
    }
    export class MsgTransferBadgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgTransferBadgeResponse {
            const message = new MsgTransferBadgeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferBadgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferBadgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferBadgeResponse {
            return MsgTransferBadgeResponse.deserialize(bytes);
        }
    }
    export class MsgSetApproval extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: number;
            address?: number;
            balances?: dependency_2.bitbadges.bitbadgeschain.badges.Balance[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("balances" in data && data.balances != undefined) {
                    this.balances = data.balances;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set address(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get balances() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.Balance, 4) as dependency_2.bitbadges.bitbadgeschain.badges.Balance[];
        }
        set balances(value: dependency_2.bitbadges.bitbadgeschain.badges.Balance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: number;
            address?: number;
            balances?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
        }): MsgSetApproval {
            const message = new MsgSetApproval({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.balances != null) {
                message.balances = data.balances.map(item => dependency_2.bitbadges.bitbadgeschain.badges.Balance.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: number;
                address?: number;
                balances?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.balances != null) {
                data.balances = this.balances.map((item: dependency_2.bitbadges.bitbadgeschain.badges.Balance) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId != 0)
                writer.writeUint64(2, this.collectionId);
            if (this.address != 0)
                writer.writeUint64(3, this.address);
            if (this.balances.length)
                writer.writeRepeatedMessage(4, this.balances, (item: dependency_2.bitbadges.bitbadgeschain.badges.Balance) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSetApproval {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetApproval();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readUint64();
                        break;
                    case 3:
                        message.address = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.balances, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.bitbadges.bitbadgeschain.badges.Balance.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.Balance));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSetApproval {
            return MsgSetApproval.deserialize(bytes);
        }
    }
    export class MsgSetApprovalResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgSetApprovalResponse {
            const message = new MsgSetApprovalResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgSetApprovalResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgSetApprovalResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgSetApprovalResponse {
            return MsgSetApprovalResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateDisallowedTransfers extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: number;
            disallowedTransfers?: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("disallowedTransfers" in data && data.disallowedTransfers != undefined) {
                    this.disallowedTransfers = data.disallowedTransfers;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get disallowedTransfers() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping, 3) as dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping[];
        }
        set disallowedTransfers(value: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: number;
            disallowedTransfers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.prototype.toObject>[];
        }): MsgUpdateDisallowedTransfers {
            const message = new MsgUpdateDisallowedTransfers({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.disallowedTransfers != null) {
                message.disallowedTransfers = data.disallowedTransfers.map(item => dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: number;
                disallowedTransfers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.prototype.toObject>[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.disallowedTransfers != null) {
                data.disallowedTransfers = this.disallowedTransfers.map((item: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId != 0)
                writer.writeUint64(2, this.collectionId);
            if (this.disallowedTransfers.length)
                writer.writeRepeatedMessage(3, this.disallowedTransfers, (item: dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateDisallowedTransfers {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateDisallowedTransfers();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.disallowedTransfers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.TransferMapping));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateDisallowedTransfers {
            return MsgUpdateDisallowedTransfers.deserialize(bytes);
        }
    }
    export class MsgUpdateDisallowedTransfersResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateDisallowedTransfersResponse {
            const message = new MsgUpdateDisallowedTransfersResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateDisallowedTransfersResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateDisallowedTransfersResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateDisallowedTransfersResponse {
            return MsgUpdateDisallowedTransfersResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateUris extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: number;
            collectionUri?: string;
            badgeUri?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("collectionUri" in data && data.collectionUri != undefined) {
                    this.collectionUri = data.collectionUri;
                }
                if ("badgeUri" in data && data.badgeUri != undefined) {
                    this.badgeUri = data.badgeUri;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get collectionUri() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set collectionUri(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get badgeUri() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set badgeUri(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: number;
            collectionUri?: string;
            badgeUri?: string;
        }): MsgUpdateUris {
            const message = new MsgUpdateUris({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.collectionUri != null) {
                message.collectionUri = data.collectionUri;
            }
            if (data.badgeUri != null) {
                message.badgeUri = data.badgeUri;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: number;
                collectionUri?: string;
                badgeUri?: string;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.collectionUri != null) {
                data.collectionUri = this.collectionUri;
            }
            if (this.badgeUri != null) {
                data.badgeUri = this.badgeUri;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId != 0)
                writer.writeUint64(2, this.collectionId);
            if (this.collectionUri.length)
                writer.writeString(3, this.collectionUri);
            if (this.badgeUri.length)
                writer.writeString(4, this.badgeUri);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateUris {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateUris();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readUint64();
                        break;
                    case 3:
                        message.collectionUri = reader.readString();
                        break;
                    case 4:
                        message.badgeUri = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateUris {
            return MsgUpdateUris.deserialize(bytes);
        }
    }
    export class MsgUpdateUrisResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateUrisResponse {
            const message = new MsgUpdateUrisResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateUrisResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateUrisResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateUrisResponse {
            return MsgUpdateUrisResponse.deserialize(bytes);
        }
    }
    export class MsgUpdatePermissions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: number;
            permissions?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("permissions" in data && data.permissions != undefined) {
                    this.permissions = data.permissions;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get permissions() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set permissions(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: number;
            permissions?: number;
        }): MsgUpdatePermissions {
            const message = new MsgUpdatePermissions({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.permissions != null) {
                message.permissions = data.permissions;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: number;
                permissions?: number;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.permissions != null) {
                data.permissions = this.permissions;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId != 0)
                writer.writeUint64(2, this.collectionId);
            if (this.permissions != 0)
                writer.writeUint64(3, this.permissions);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdatePermissions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdatePermissions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readUint64();
                        break;
                    case 3:
                        message.permissions = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdatePermissions {
            return MsgUpdatePermissions.deserialize(bytes);
        }
    }
    export class MsgUpdatePermissionsResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdatePermissionsResponse {
            const message = new MsgUpdatePermissionsResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdatePermissionsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdatePermissionsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdatePermissionsResponse {
            return MsgUpdatePermissionsResponse.deserialize(bytes);
        }
    }
    export class MsgTransferManager extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: number;
            address?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set address(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: number;
            address?: number;
        }): MsgTransferManager {
            const message = new MsgTransferManager({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: number;
                address?: number;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId != 0)
                writer.writeUint64(2, this.collectionId);
            if (this.address != 0)
                writer.writeUint64(3, this.address);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferManager {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferManager();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readUint64();
                        break;
                    case 3:
                        message.address = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferManager {
            return MsgTransferManager.deserialize(bytes);
        }
    }
    export class MsgTransferManagerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgTransferManagerResponse {
            const message = new MsgTransferManagerResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferManagerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferManagerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferManagerResponse {
            return MsgTransferManagerResponse.deserialize(bytes);
        }
    }
    export class MsgRequestTransferManager extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: number;
            addRequest?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("addRequest" in data && data.addRequest != undefined) {
                    this.addRequest = data.addRequest;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get addRequest() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set addRequest(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: number;
            addRequest?: boolean;
        }): MsgRequestTransferManager {
            const message = new MsgRequestTransferManager({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.addRequest != null) {
                message.addRequest = data.addRequest;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: number;
                addRequest?: boolean;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.addRequest != null) {
                data.addRequest = this.addRequest;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId != 0)
                writer.writeUint64(2, this.collectionId);
            if (this.addRequest != false)
                writer.writeBool(3, this.addRequest);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRequestTransferManager {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRequestTransferManager();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readUint64();
                        break;
                    case 3:
                        message.addRequest = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRequestTransferManager {
            return MsgRequestTransferManager.deserialize(bytes);
        }
    }
    export class MsgRequestTransferManagerResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgRequestTransferManagerResponse {
            const message = new MsgRequestTransferManagerResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRequestTransferManagerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRequestTransferManagerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRequestTransferManagerResponse {
            return MsgRequestTransferManagerResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateBytes extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            collectionId?: number;
            newBytes?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("newBytes" in data && data.newBytes != undefined) {
                    this.newBytes = data.newBytes;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get newBytes() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set newBytes(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            creator?: string;
            collectionId?: number;
            newBytes?: string;
        }): MsgUpdateBytes {
            const message = new MsgUpdateBytes({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.newBytes != null) {
                message.newBytes = data.newBytes;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                collectionId?: number;
                newBytes?: string;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.newBytes != null) {
                data.newBytes = this.newBytes;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.collectionId != 0)
                writer.writeUint64(2, this.collectionId);
            if (this.newBytes.length)
                writer.writeString(3, this.newBytes);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateBytes {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateBytes();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.collectionId = reader.readUint64();
                        break;
                    case 3:
                        message.newBytes = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateBytes {
            return MsgUpdateBytes.deserialize(bytes);
        }
    }
    export class MsgUpdateBytesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateBytesResponse {
            const message = new MsgUpdateBytesResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateBytesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateBytesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateBytesResponse {
            return MsgUpdateBytesResponse.deserialize(bytes);
        }
    }
    export class MsgRegisterAddresses extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            addressesToRegister?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("addressesToRegister" in data && data.addressesToRegister != undefined) {
                    this.addressesToRegister = data.addressesToRegister;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get addressesToRegister() {
            return pb_1.Message.getFieldWithDefault(this, 2, []) as string[];
        }
        set addressesToRegister(value: string[]) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            creator?: string;
            addressesToRegister?: string[];
        }): MsgRegisterAddresses {
            const message = new MsgRegisterAddresses({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.addressesToRegister != null) {
                message.addressesToRegister = data.addressesToRegister;
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                addressesToRegister?: string[];
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.addressesToRegister != null) {
                data.addressesToRegister = this.addressesToRegister;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.addressesToRegister.length)
                writer.writeRepeatedString(2, this.addressesToRegister);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRegisterAddresses {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRegisterAddresses();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        pb_1.Message.addToRepeatedField(message, 2, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRegisterAddresses {
            return MsgRegisterAddresses.deserialize(bytes);
        }
    }
    export class MsgRegisterAddressesResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            registeredAddressNumbers?: dependency_1.bitbadges.bitbadgeschain.badges.IdRange;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("registeredAddressNumbers" in data && data.registeredAddressNumbers != undefined) {
                    this.registeredAddressNumbers = data.registeredAddressNumbers;
                }
            }
        }
        get registeredAddressNumbers() {
            return pb_1.Message.getWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.IdRange, 1) as dependency_1.bitbadges.bitbadgeschain.badges.IdRange;
        }
        set registeredAddressNumbers(value: dependency_1.bitbadges.bitbadgeschain.badges.IdRange) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_registeredAddressNumbers() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            registeredAddressNumbers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>;
        }): MsgRegisterAddressesResponse {
            const message = new MsgRegisterAddressesResponse({});
            if (data.registeredAddressNumbers != null) {
                message.registeredAddressNumbers = dependency_1.bitbadges.bitbadgeschain.badges.IdRange.fromObject(data.registeredAddressNumbers);
            }
            return message;
        }
        toObject() {
            const data: {
                registeredAddressNumbers?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>;
            } = {};
            if (this.registeredAddressNumbers != null) {
                data.registeredAddressNumbers = this.registeredAddressNumbers.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_registeredAddressNumbers)
                writer.writeMessage(1, this.registeredAddressNumbers, () => this.registeredAddressNumbers.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgRegisterAddressesResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgRegisterAddressesResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.registeredAddressNumbers, () => message.registeredAddressNumbers = dependency_1.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgRegisterAddressesResponse {
            return MsgRegisterAddressesResponse.deserialize(bytes);
        }
    }
    export class ProofItem extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            aunt?: string;
            onRight?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("aunt" in data && data.aunt != undefined) {
                    this.aunt = data.aunt;
                }
                if ("onRight" in data && data.onRight != undefined) {
                    this.onRight = data.onRight;
                }
            }
        }
        get aunt() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set aunt(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get onRight() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set onRight(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            aunt?: string;
            onRight?: boolean;
        }): ProofItem {
            const message = new ProofItem({});
            if (data.aunt != null) {
                message.aunt = data.aunt;
            }
            if (data.onRight != null) {
                message.onRight = data.onRight;
            }
            return message;
        }
        toObject() {
            const data: {
                aunt?: string;
                onRight?: boolean;
            } = {};
            if (this.aunt != null) {
                data.aunt = this.aunt;
            }
            if (this.onRight != null) {
                data.onRight = this.onRight;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.aunt.length)
                writer.writeString(1, this.aunt);
            if (this.onRight != false)
                writer.writeBool(2, this.onRight);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ProofItem {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ProofItem();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.aunt = reader.readString();
                        break;
                    case 2:
                        message.onRight = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ProofItem {
            return ProofItem.deserialize(bytes);
        }
    }
    export class Proof extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            leaf?: string;
            isLeafHashed?: boolean;
            aunts?: ProofItem[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("leaf" in data && data.leaf != undefined) {
                    this.leaf = data.leaf;
                }
                if ("isLeafHashed" in data && data.isLeafHashed != undefined) {
                    this.isLeafHashed = data.isLeafHashed;
                }
                if ("aunts" in data && data.aunts != undefined) {
                    this.aunts = data.aunts;
                }
            }
        }
        get leaf() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set leaf(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get isLeafHashed() {
            return pb_1.Message.getFieldWithDefault(this, 2, false) as boolean;
        }
        set isLeafHashed(value: boolean) {
            pb_1.Message.setField(this, 2, value);
        }
        get aunts() {
            return pb_1.Message.getRepeatedWrapperField(this, ProofItem, 3) as ProofItem[];
        }
        set aunts(value: ProofItem[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            leaf?: string;
            isLeafHashed?: boolean;
            aunts?: ReturnType<typeof ProofItem.prototype.toObject>[];
        }): Proof {
            const message = new Proof({});
            if (data.leaf != null) {
                message.leaf = data.leaf;
            }
            if (data.isLeafHashed != null) {
                message.isLeafHashed = data.isLeafHashed;
            }
            if (data.aunts != null) {
                message.aunts = data.aunts.map(item => ProofItem.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                leaf?: string;
                isLeafHashed?: boolean;
                aunts?: ReturnType<typeof ProofItem.prototype.toObject>[];
            } = {};
            if (this.leaf != null) {
                data.leaf = this.leaf;
            }
            if (this.isLeafHashed != null) {
                data.isLeafHashed = this.isLeafHashed;
            }
            if (this.aunts != null) {
                data.aunts = this.aunts.map((item: ProofItem) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.leaf.length)
                writer.writeString(1, this.leaf);
            if (this.isLeafHashed != false)
                writer.writeBool(2, this.isLeafHashed);
            if (this.aunts.length)
                writer.writeRepeatedMessage(3, this.aunts, (item: ProofItem) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Proof {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Proof();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.leaf = reader.readString();
                        break;
                    case 2:
                        message.isLeafHashed = reader.readBool();
                        break;
                    case 3:
                        reader.readMessage(message.aunts, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ProofItem.deserialize(reader), ProofItem));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Proof {
            return Proof.deserialize(bytes);
        }
    }
    export class MsgClaimBadge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            creator?: string;
            claimId?: number;
            collectionId?: number;
            proof?: Proof;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("claimId" in data && data.claimId != undefined) {
                    this.claimId = data.claimId;
                }
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("proof" in data && data.proof != undefined) {
                    this.proof = data.proof;
                }
            }
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get claimId() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set claimId(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set collectionId(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get proof() {
            return pb_1.Message.getWrapperField(this, Proof, 4) as Proof;
        }
        set proof(value: Proof) {
            pb_1.Message.setWrapperField(this, 4, value);
        }
        get has_proof() {
            return pb_1.Message.getField(this, 4) != null;
        }
        static fromObject(data: {
            creator?: string;
            claimId?: number;
            collectionId?: number;
            proof?: ReturnType<typeof Proof.prototype.toObject>;
        }): MsgClaimBadge {
            const message = new MsgClaimBadge({});
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.claimId != null) {
                message.claimId = data.claimId;
            }
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.proof != null) {
                message.proof = Proof.fromObject(data.proof);
            }
            return message;
        }
        toObject() {
            const data: {
                creator?: string;
                claimId?: number;
                collectionId?: number;
                proof?: ReturnType<typeof Proof.prototype.toObject>;
            } = {};
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.claimId != null) {
                data.claimId = this.claimId;
            }
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.proof != null) {
                data.proof = this.proof.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.creator.length)
                writer.writeString(1, this.creator);
            if (this.claimId != 0)
                writer.writeUint64(2, this.claimId);
            if (this.collectionId != 0)
                writer.writeUint64(3, this.collectionId);
            if (this.has_proof)
                writer.writeMessage(4, this.proof, () => this.proof.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgClaimBadge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgClaimBadge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.creator = reader.readString();
                        break;
                    case 2:
                        message.claimId = reader.readUint64();
                        break;
                    case 3:
                        message.collectionId = reader.readUint64();
                        break;
                    case 4:
                        reader.readMessage(message.proof, () => message.proof = Proof.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgClaimBadge {
            return MsgClaimBadge.deserialize(bytes);
        }
    }
    export class MsgClaimBadgeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgClaimBadgeResponse {
            const message = new MsgClaimBadgeResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgClaimBadgeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgClaimBadgeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgClaimBadgeResponse {
            return MsgClaimBadgeResponse.deserialize(bytes);
        }
    }
}
