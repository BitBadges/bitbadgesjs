// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/genesis.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../gogoproto/gogo";
import * as dependency_2 from "./params";
import * as dependency_3 from "./badges";
import * as dependency_4 from "./balances";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class GenesisState extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            params?: dependency_2.bitbadges.bitbadgeschain.badges.Params;
            port_id?: string;
            collections?: dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection[];
            balances?: dependency_4.bitbadges.bitbadgeschain.badges.UserBalance[];
            balance_ids?: string[];
            nextCollectionId?: number;
            nextClaimId?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("params" in data && data.params != undefined) {
                    this.params = data.params;
                }
                if ("port_id" in data && data.port_id != undefined) {
                    this.port_id = data.port_id;
                }
                if ("collections" in data && data.collections != undefined) {
                    this.collections = data.collections;
                }
                if ("balances" in data && data.balances != undefined) {
                    this.balances = data.balances;
                }
                if ("balance_ids" in data && data.balance_ids != undefined) {
                    this.balance_ids = data.balance_ids;
                }
                if ("nextCollectionId" in data && data.nextCollectionId != undefined) {
                    this.nextCollectionId = data.nextCollectionId;
                }
                if ("nextClaimId" in data && data.nextClaimId != undefined) {
                    this.nextClaimId = data.nextClaimId;
                }
            }
        }
        get params() {
            return pb_1.Message.getWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.Params, 1) as dependency_2.bitbadges.bitbadgeschain.badges.Params;
        }
        set params(value: dependency_2.bitbadges.bitbadgeschain.badges.Params) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_params() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get port_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set port_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get collections() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection, 3) as dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection[];
        }
        set collections(value: dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get balances() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_4.bitbadges.bitbadgeschain.badges.UserBalance, 4) as dependency_4.bitbadges.bitbadgeschain.badges.UserBalance[];
        }
        set balances(value: dependency_4.bitbadges.bitbadgeschain.badges.UserBalance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get balance_ids() {
            return pb_1.Message.getFieldWithDefault(this, 5, []) as string[];
        }
        set balance_ids(value: string[]) {
            pb_1.Message.setField(this, 5, value);
        }
        get nextCollectionId() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set nextCollectionId(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get nextClaimId() {
            return pb_1.Message.getFieldWithDefault(this, 7, 0) as number;
        }
        set nextClaimId(value: number) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            params?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.Params.prototype.toObject>;
            port_id?: string;
            collections?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection.prototype.toObject>[];
            balances?: ReturnType<typeof dependency_4.bitbadges.bitbadgeschain.badges.UserBalance.prototype.toObject>[];
            balance_ids?: string[];
            nextCollectionId?: number;
            nextClaimId?: number;
        }): GenesisState {
            const message = new GenesisState({});
            if (data.params != null) {
                message.params = dependency_2.bitbadges.bitbadgeschain.badges.Params.fromObject(data.params);
            }
            if (data.port_id != null) {
                message.port_id = data.port_id;
            }
            if (data.collections != null) {
                message.collections = data.collections.map(item => dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection.fromObject(item));
            }
            if (data.balances != null) {
                message.balances = data.balances.map(item => dependency_4.bitbadges.bitbadgeschain.badges.UserBalance.fromObject(item));
            }
            if (data.balance_ids != null) {
                message.balance_ids = data.balance_ids;
            }
            if (data.nextCollectionId != null) {
                message.nextCollectionId = data.nextCollectionId;
            }
            if (data.nextClaimId != null) {
                message.nextClaimId = data.nextClaimId;
            }
            return message;
        }
        toObject() {
            const data: {
                params?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.Params.prototype.toObject>;
                port_id?: string;
                collections?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection.prototype.toObject>[];
                balances?: ReturnType<typeof dependency_4.bitbadges.bitbadgeschain.badges.UserBalance.prototype.toObject>[];
                balance_ids?: string[];
                nextCollectionId?: number;
                nextClaimId?: number;
            } = {};
            if (this.params != null) {
                data.params = this.params.toObject();
            }
            if (this.port_id != null) {
                data.port_id = this.port_id;
            }
            if (this.collections != null) {
                data.collections = this.collections.map((item: dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection) => item.toObject());
            }
            if (this.balances != null) {
                data.balances = this.balances.map((item: dependency_4.bitbadges.bitbadgeschain.badges.UserBalance) => item.toObject());
            }
            if (this.balance_ids != null) {
                data.balance_ids = this.balance_ids;
            }
            if (this.nextCollectionId != null) {
                data.nextCollectionId = this.nextCollectionId;
            }
            if (this.nextClaimId != null) {
                data.nextClaimId = this.nextClaimId;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_params)
                writer.writeMessage(1, this.params, () => this.params.serialize(writer));
            if (this.port_id.length)
                writer.writeString(2, this.port_id);
            if (this.collections.length)
                writer.writeRepeatedMessage(3, this.collections, (item: dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection) => item.serialize(writer));
            if (this.balances.length)
                writer.writeRepeatedMessage(4, this.balances, (item: dependency_4.bitbadges.bitbadgeschain.badges.UserBalance) => item.serialize(writer));
            if (this.balance_ids.length)
                writer.writeRepeatedString(5, this.balance_ids);
            if (this.nextCollectionId != 0)
                writer.writeUint64(6, this.nextCollectionId);
            if (this.nextClaimId != 0)
                writer.writeUint64(7, this.nextClaimId);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): GenesisState {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new GenesisState();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.params, () => message.params = dependency_2.bitbadges.bitbadgeschain.badges.Params.deserialize(reader));
                        break;
                    case 2:
                        message.port_id = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.collections, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.BadgeCollection));
                        break;
                    case 4:
                        reader.readMessage(message.balances, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_4.bitbadges.bitbadgeschain.badges.UserBalance.deserialize(reader), dependency_4.bitbadges.bitbadgeschain.badges.UserBalance));
                        break;
                    case 5:
                        pb_1.Message.addToRepeatedField(message, 5, reader.readString());
                        break;
                    case 6:
                        message.nextCollectionId = reader.readUint64();
                        break;
                    case 7:
                        message.nextClaimId = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): GenesisState {
            return GenesisState.deserialize(bytes);
        }
    }
}
