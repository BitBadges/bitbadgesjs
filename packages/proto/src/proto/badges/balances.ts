/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/balances.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../gogoproto/gogo";
import * as dependency_2 from "./params";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class UintRange extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            start?: string;
            end?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("start" in data && data.start != undefined) {
                    this.start = data.start;
                }
                if ("end" in data && data.end != undefined) {
                    this.end = data.end;
                }
            }
        }
        get start() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set start(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get end() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set end(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            start?: string;
            end?: string;
        }): UintRange {
            const message = new UintRange({});
            if (data.start != null) {
                message.start = data.start;
            }
            if (data.end != null) {
                message.end = data.end;
            }
            return message;
        }
        toObject() {
            const data: {
                start?: string;
                end?: string;
            } = {};
            if (this.start != null) {
                data.start = this.start;
            }
            if (this.end != null) {
                data.end = this.end;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.start.length)
                writer.writeString(1, this.start);
            if (this.end.length)
                writer.writeString(2, this.end);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UintRange {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UintRange();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.start = reader.readString();
                        break;
                    case 2:
                        message.end = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UintRange {
            return UintRange.deserialize(bytes);
        }
    }
    export class Balance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: string;
            ownershipTimes?: UintRange[];
            badgeIds?: UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("ownershipTimes" in data && data.ownershipTimes != undefined) {
                    this.ownershipTimes = data.ownershipTimes;
                }
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get ownershipTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, UintRange, 2) as UintRange[];
        }
        set ownershipTimes(value: UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get badgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, UintRange, 3) as UintRange[];
        }
        set badgeIds(value: UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            amount?: string;
            ownershipTimes?: ReturnType<typeof UintRange.prototype.toObject>[];
            badgeIds?: ReturnType<typeof UintRange.prototype.toObject>[];
        }): Balance {
            const message = new Balance({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.ownershipTimes != null) {
                message.ownershipTimes = data.ownershipTimes.map(item => UintRange.fromObject(item));
            }
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds.map(item => UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: string;
                ownershipTimes?: ReturnType<typeof UintRange.prototype.toObject>[];
                badgeIds?: ReturnType<typeof UintRange.prototype.toObject>[];
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.ownershipTimes != null) {
                data.ownershipTimes = this.ownershipTimes.map((item: UintRange) => item.toObject());
            }
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds.map((item: UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount.length)
                writer.writeString(1, this.amount);
            if (this.ownershipTimes.length)
                writer.writeRepeatedMessage(2, this.ownershipTimes, (item: UintRange) => item.serialize(writer));
            if (this.badgeIds.length)
                writer.writeRepeatedMessage(3, this.badgeIds, (item: UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Balance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Balance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.ownershipTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, UintRange.deserialize(reader), UintRange));
                        break;
                    case 3:
                        reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 3, UintRange.deserialize(reader), UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Balance {
            return Balance.deserialize(bytes);
        }
    }
    export class MustOwnBadges extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            collectionId?: string;
            amountRange?: UintRange;
            ownershipTimes?: UintRange[];
            badgeIds?: UintRange[];
            overrideWithCurrentTime?: boolean;
            mustOwnAll?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collectionId" in data && data.collectionId != undefined) {
                    this.collectionId = data.collectionId;
                }
                if ("amountRange" in data && data.amountRange != undefined) {
                    this.amountRange = data.amountRange;
                }
                if ("ownershipTimes" in data && data.ownershipTimes != undefined) {
                    this.ownershipTimes = data.ownershipTimes;
                }
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
                if ("overrideWithCurrentTime" in data && data.overrideWithCurrentTime != undefined) {
                    this.overrideWithCurrentTime = data.overrideWithCurrentTime;
                }
                if ("mustOwnAll" in data && data.mustOwnAll != undefined) {
                    this.mustOwnAll = data.mustOwnAll;
                }
            }
        }
        get collectionId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set collectionId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get amountRange() {
            return pb_1.Message.getWrapperField(this, UintRange, 2) as UintRange;
        }
        set amountRange(value: UintRange) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_amountRange() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get ownershipTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, UintRange, 3) as UintRange[];
        }
        set ownershipTimes(value: UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get badgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, UintRange, 4) as UintRange[];
        }
        set badgeIds(value: UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get overrideWithCurrentTime() {
            return pb_1.Message.getFieldWithDefault(this, 5, false) as boolean;
        }
        set overrideWithCurrentTime(value: boolean) {
            pb_1.Message.setField(this, 5, value);
        }
        get mustOwnAll() {
            return pb_1.Message.getFieldWithDefault(this, 6, false) as boolean;
        }
        set mustOwnAll(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        static fromObject(data: {
            collectionId?: string;
            amountRange?: ReturnType<typeof UintRange.prototype.toObject>;
            ownershipTimes?: ReturnType<typeof UintRange.prototype.toObject>[];
            badgeIds?: ReturnType<typeof UintRange.prototype.toObject>[];
            overrideWithCurrentTime?: boolean;
            mustOwnAll?: boolean;
        }): MustOwnBadges {
            const message = new MustOwnBadges({});
            if (data.collectionId != null) {
                message.collectionId = data.collectionId;
            }
            if (data.amountRange != null) {
                message.amountRange = UintRange.fromObject(data.amountRange);
            }
            if (data.ownershipTimes != null) {
                message.ownershipTimes = data.ownershipTimes.map(item => UintRange.fromObject(item));
            }
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds.map(item => UintRange.fromObject(item));
            }
            if (data.overrideWithCurrentTime != null) {
                message.overrideWithCurrentTime = data.overrideWithCurrentTime;
            }
            if (data.mustOwnAll != null) {
                message.mustOwnAll = data.mustOwnAll;
            }
            return message;
        }
        toObject() {
            const data: {
                collectionId?: string;
                amountRange?: ReturnType<typeof UintRange.prototype.toObject>;
                ownershipTimes?: ReturnType<typeof UintRange.prototype.toObject>[];
                badgeIds?: ReturnType<typeof UintRange.prototype.toObject>[];
                overrideWithCurrentTime?: boolean;
                mustOwnAll?: boolean;
            } = {};
            if (this.collectionId != null) {
                data.collectionId = this.collectionId;
            }
            if (this.amountRange != null) {
                data.amountRange = this.amountRange.toObject();
            }
            if (this.ownershipTimes != null) {
                data.ownershipTimes = this.ownershipTimes.map((item: UintRange) => item.toObject());
            }
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds.map((item: UintRange) => item.toObject());
            }
            if (this.overrideWithCurrentTime != null) {
                data.overrideWithCurrentTime = this.overrideWithCurrentTime;
            }
            if (this.mustOwnAll != null) {
                data.mustOwnAll = this.mustOwnAll;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collectionId.length)
                writer.writeString(1, this.collectionId);
            if (this.has_amountRange)
                writer.writeMessage(2, this.amountRange, () => this.amountRange.serialize(writer));
            if (this.ownershipTimes.length)
                writer.writeRepeatedMessage(3, this.ownershipTimes, (item: UintRange) => item.serialize(writer));
            if (this.badgeIds.length)
                writer.writeRepeatedMessage(4, this.badgeIds, (item: UintRange) => item.serialize(writer));
            if (this.overrideWithCurrentTime != false)
                writer.writeBool(5, this.overrideWithCurrentTime);
            if (this.mustOwnAll != false)
                writer.writeBool(6, this.mustOwnAll);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MustOwnBadges {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MustOwnBadges();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.collectionId = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.amountRange, () => message.amountRange = UintRange.deserialize(reader));
                        break;
                    case 3:
                        reader.readMessage(message.ownershipTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 3, UintRange.deserialize(reader), UintRange));
                        break;
                    case 4:
                        reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 4, UintRange.deserialize(reader), UintRange));
                        break;
                    case 5:
                        message.overrideWithCurrentTime = reader.readBool();
                        break;
                    case 6:
                        message.mustOwnAll = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MustOwnBadges {
            return MustOwnBadges.deserialize(bytes);
        }
    }
    export class InheritedBalance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            badgeIds?: UintRange[];
            parentCollectionId?: string;
            parentBadgeIds?: UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
                if ("parentCollectionId" in data && data.parentCollectionId != undefined) {
                    this.parentCollectionId = data.parentCollectionId;
                }
                if ("parentBadgeIds" in data && data.parentBadgeIds != undefined) {
                    this.parentBadgeIds = data.parentBadgeIds;
                }
            }
        }
        get badgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, UintRange, 1) as UintRange[];
        }
        set badgeIds(value: UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get parentCollectionId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set parentCollectionId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get parentBadgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, UintRange, 3) as UintRange[];
        }
        set parentBadgeIds(value: UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            badgeIds?: ReturnType<typeof UintRange.prototype.toObject>[];
            parentCollectionId?: string;
            parentBadgeIds?: ReturnType<typeof UintRange.prototype.toObject>[];
        }): InheritedBalance {
            const message = new InheritedBalance({});
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds.map(item => UintRange.fromObject(item));
            }
            if (data.parentCollectionId != null) {
                message.parentCollectionId = data.parentCollectionId;
            }
            if (data.parentBadgeIds != null) {
                message.parentBadgeIds = data.parentBadgeIds.map(item => UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                badgeIds?: ReturnType<typeof UintRange.prototype.toObject>[];
                parentCollectionId?: string;
                parentBadgeIds?: ReturnType<typeof UintRange.prototype.toObject>[];
            } = {};
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds.map((item: UintRange) => item.toObject());
            }
            if (this.parentCollectionId != null) {
                data.parentCollectionId = this.parentCollectionId;
            }
            if (this.parentBadgeIds != null) {
                data.parentBadgeIds = this.parentBadgeIds.map((item: UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.badgeIds.length)
                writer.writeRepeatedMessage(1, this.badgeIds, (item: UintRange) => item.serialize(writer));
            if (this.parentCollectionId.length)
                writer.writeString(2, this.parentCollectionId);
            if (this.parentBadgeIds.length)
                writer.writeRepeatedMessage(3, this.parentBadgeIds, (item: UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): InheritedBalance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new InheritedBalance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UintRange.deserialize(reader), UintRange));
                        break;
                    case 2:
                        message.parentCollectionId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.parentBadgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 3, UintRange.deserialize(reader), UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): InheritedBalance {
            return InheritedBalance.deserialize(bytes);
        }
    }
}
