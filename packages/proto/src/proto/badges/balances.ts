// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/balances.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../gogoproto/gogo";
import * as dependency_2 from "./params";
import * as dependency_3 from "./ranges";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class Balance extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            amount?: string;
            badgeIds?: dependency_3.bitbadges.bitbadgeschain.badges.IdRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
            }
        }
        get amount() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set amount(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get badgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.bitbadges.bitbadgeschain.badges.IdRange, 2) as dependency_3.bitbadges.bitbadgeschain.badges.IdRange[];
        }
        set badgeIds(value: dependency_3.bitbadges.bitbadgeschain.badges.IdRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            amount?: string;
            badgeIds?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
        }): Balance {
            const message = new Balance({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds.map(item => dependency_3.bitbadges.bitbadgeschain.badges.IdRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: string;
                badgeIds?: ReturnType<typeof dependency_3.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds.map((item: dependency_3.bitbadges.bitbadgeschain.badges.IdRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount.length)
                writer.writeString(1, this.amount);
            if (this.badgeIds.length)
                writer.writeRepeatedMessage(2, this.badgeIds, (item: dependency_3.bitbadges.bitbadgeschain.badges.IdRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Balance {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Balance();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_3.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader), dependency_3.bitbadges.bitbadgeschain.badges.IdRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Balance {
            return Balance.deserialize(bytes);
        }
    }
    export class UserBalanceStore extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balances?: Balance[];
            approvals?: Approval[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balances" in data && data.balances != undefined) {
                    this.balances = data.balances;
                }
                if ("approvals" in data && data.approvals != undefined) {
                    this.approvals = data.approvals;
                }
            }
        }
        get balances() {
            return pb_1.Message.getRepeatedWrapperField(this, Balance, 1) as Balance[];
        }
        set balances(value: Balance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get approvals() {
            return pb_1.Message.getRepeatedWrapperField(this, Approval, 2) as Approval[];
        }
        set approvals(value: Approval[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            balances?: ReturnType<typeof Balance.prototype.toObject>[];
            approvals?: ReturnType<typeof Approval.prototype.toObject>[];
        }): UserBalanceStore {
            const message = new UserBalanceStore({});
            if (data.balances != null) {
                message.balances = data.balances.map(item => Balance.fromObject(item));
            }
            if (data.approvals != null) {
                message.approvals = data.approvals.map(item => Approval.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                balances?: ReturnType<typeof Balance.prototype.toObject>[];
                approvals?: ReturnType<typeof Approval.prototype.toObject>[];
            } = {};
            if (this.balances != null) {
                data.balances = this.balances.map((item: Balance) => item.toObject());
            }
            if (this.approvals != null) {
                data.approvals = this.approvals.map((item: Approval) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.balances.length)
                writer.writeRepeatedMessage(1, this.balances, (item: Balance) => item.serialize(writer));
            if (this.approvals.length)
                writer.writeRepeatedMessage(2, this.approvals, (item: Approval) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserBalanceStore {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserBalanceStore();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.balances, () => pb_1.Message.addToRepeatedWrapperField(message, 1, Balance.deserialize(reader), Balance));
                        break;
                    case 2:
                        reader.readMessage(message.approvals, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Approval.deserialize(reader), Approval));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserBalanceStore {
            return UserBalanceStore.deserialize(bytes);
        }
    }
    export class Approval extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            balances?: Balance[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("balances" in data && data.balances != undefined) {
                    this.balances = data.balances;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get balances() {
            return pb_1.Message.getRepeatedWrapperField(this, Balance, 2) as Balance[];
        }
        set balances(value: Balance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            address?: string;
            balances?: ReturnType<typeof Balance.prototype.toObject>[];
        }): Approval {
            const message = new Approval({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.balances != null) {
                message.balances = data.balances.map(item => Balance.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                balances?: ReturnType<typeof Balance.prototype.toObject>[];
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.balances != null) {
                data.balances = this.balances.map((item: Balance) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.balances.length)
                writer.writeRepeatedMessage(2, this.balances, (item: Balance) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Approval {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Approval();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.balances, () => pb_1.Message.addToRepeatedWrapperField(message, 2, Balance.deserialize(reader), Balance));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Approval {
            return Approval.deserialize(bytes);
        }
    }
}
