/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/permissions.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../google/protobuf/any";
import * as dependency_2 from "./balances";
import * as dependency_3 from "./address_mappings";
import * as dependency_4 from "./../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class CollectionPermissions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            canDeleteCollection?: ActionPermission[];
            canArchiveCollection?: TimedUpdatePermission[];
            canUpdateOffChainBalancesMetadata?: TimedUpdatePermission[];
            canUpdateStandards?: TimedUpdatePermission[];
            canUpdateCustomData?: TimedUpdatePermission[];
            canUpdateManager?: TimedUpdatePermission[];
            canUpdateCollectionMetadata?: TimedUpdatePermission[];
            canCreateMoreBadges?: BalancesActionPermission[];
            canUpdateBadgeMetadata?: TimedUpdateWithBadgeIdsPermission[];
            canUpdateCollectionApprovals?: CollectionApprovalPermission[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("canDeleteCollection" in data && data.canDeleteCollection != undefined) {
                    this.canDeleteCollection = data.canDeleteCollection;
                }
                if ("canArchiveCollection" in data && data.canArchiveCollection != undefined) {
                    this.canArchiveCollection = data.canArchiveCollection;
                }
                if ("canUpdateOffChainBalancesMetadata" in data && data.canUpdateOffChainBalancesMetadata != undefined) {
                    this.canUpdateOffChainBalancesMetadata = data.canUpdateOffChainBalancesMetadata;
                }
                if ("canUpdateStandards" in data && data.canUpdateStandards != undefined) {
                    this.canUpdateStandards = data.canUpdateStandards;
                }
                if ("canUpdateCustomData" in data && data.canUpdateCustomData != undefined) {
                    this.canUpdateCustomData = data.canUpdateCustomData;
                }
                if ("canUpdateManager" in data && data.canUpdateManager != undefined) {
                    this.canUpdateManager = data.canUpdateManager;
                }
                if ("canUpdateCollectionMetadata" in data && data.canUpdateCollectionMetadata != undefined) {
                    this.canUpdateCollectionMetadata = data.canUpdateCollectionMetadata;
                }
                if ("canCreateMoreBadges" in data && data.canCreateMoreBadges != undefined) {
                    this.canCreateMoreBadges = data.canCreateMoreBadges;
                }
                if ("canUpdateBadgeMetadata" in data && data.canUpdateBadgeMetadata != undefined) {
                    this.canUpdateBadgeMetadata = data.canUpdateBadgeMetadata;
                }
                if ("canUpdateCollectionApprovals" in data && data.canUpdateCollectionApprovals != undefined) {
                    this.canUpdateCollectionApprovals = data.canUpdateCollectionApprovals;
                }
            }
        }
        get canDeleteCollection() {
            return pb_1.Message.getRepeatedWrapperField(this, ActionPermission, 1) as ActionPermission[];
        }
        set canDeleteCollection(value: ActionPermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get canArchiveCollection() {
            return pb_1.Message.getRepeatedWrapperField(this, TimedUpdatePermission, 2) as TimedUpdatePermission[];
        }
        set canArchiveCollection(value: TimedUpdatePermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get canUpdateOffChainBalancesMetadata() {
            return pb_1.Message.getRepeatedWrapperField(this, TimedUpdatePermission, 3) as TimedUpdatePermission[];
        }
        set canUpdateOffChainBalancesMetadata(value: TimedUpdatePermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get canUpdateStandards() {
            return pb_1.Message.getRepeatedWrapperField(this, TimedUpdatePermission, 4) as TimedUpdatePermission[];
        }
        set canUpdateStandards(value: TimedUpdatePermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get canUpdateCustomData() {
            return pb_1.Message.getRepeatedWrapperField(this, TimedUpdatePermission, 5) as TimedUpdatePermission[];
        }
        set canUpdateCustomData(value: TimedUpdatePermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get canUpdateManager() {
            return pb_1.Message.getRepeatedWrapperField(this, TimedUpdatePermission, 6) as TimedUpdatePermission[];
        }
        set canUpdateManager(value: TimedUpdatePermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get canUpdateCollectionMetadata() {
            return pb_1.Message.getRepeatedWrapperField(this, TimedUpdatePermission, 7) as TimedUpdatePermission[];
        }
        set canUpdateCollectionMetadata(value: TimedUpdatePermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        get canCreateMoreBadges() {
            return pb_1.Message.getRepeatedWrapperField(this, BalancesActionPermission, 8) as BalancesActionPermission[];
        }
        set canCreateMoreBadges(value: BalancesActionPermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get canUpdateBadgeMetadata() {
            return pb_1.Message.getRepeatedWrapperField(this, TimedUpdateWithBadgeIdsPermission, 9) as TimedUpdateWithBadgeIdsPermission[];
        }
        set canUpdateBadgeMetadata(value: TimedUpdateWithBadgeIdsPermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get canUpdateCollectionApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, CollectionApprovalPermission, 10) as CollectionApprovalPermission[];
        }
        set canUpdateCollectionApprovals(value: CollectionApprovalPermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            canDeleteCollection?: ReturnType<typeof ActionPermission.prototype.toObject>[];
            canArchiveCollection?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
            canUpdateOffChainBalancesMetadata?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
            canUpdateStandards?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
            canUpdateCustomData?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
            canUpdateManager?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
            canUpdateCollectionMetadata?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
            canCreateMoreBadges?: ReturnType<typeof BalancesActionPermission.prototype.toObject>[];
            canUpdateBadgeMetadata?: ReturnType<typeof TimedUpdateWithBadgeIdsPermission.prototype.toObject>[];
            canUpdateCollectionApprovals?: ReturnType<typeof CollectionApprovalPermission.prototype.toObject>[];
        }): CollectionPermissions {
            const message = new CollectionPermissions({});
            if (data.canDeleteCollection != null) {
                message.canDeleteCollection = data.canDeleteCollection.map(item => ActionPermission.fromObject(item));
            }
            if (data.canArchiveCollection != null) {
                message.canArchiveCollection = data.canArchiveCollection.map(item => TimedUpdatePermission.fromObject(item));
            }
            if (data.canUpdateOffChainBalancesMetadata != null) {
                message.canUpdateOffChainBalancesMetadata = data.canUpdateOffChainBalancesMetadata.map(item => TimedUpdatePermission.fromObject(item));
            }
            if (data.canUpdateStandards != null) {
                message.canUpdateStandards = data.canUpdateStandards.map(item => TimedUpdatePermission.fromObject(item));
            }
            if (data.canUpdateCustomData != null) {
                message.canUpdateCustomData = data.canUpdateCustomData.map(item => TimedUpdatePermission.fromObject(item));
            }
            if (data.canUpdateManager != null) {
                message.canUpdateManager = data.canUpdateManager.map(item => TimedUpdatePermission.fromObject(item));
            }
            if (data.canUpdateCollectionMetadata != null) {
                message.canUpdateCollectionMetadata = data.canUpdateCollectionMetadata.map(item => TimedUpdatePermission.fromObject(item));
            }
            if (data.canCreateMoreBadges != null) {
                message.canCreateMoreBadges = data.canCreateMoreBadges.map(item => BalancesActionPermission.fromObject(item));
            }
            if (data.canUpdateBadgeMetadata != null) {
                message.canUpdateBadgeMetadata = data.canUpdateBadgeMetadata.map(item => TimedUpdateWithBadgeIdsPermission.fromObject(item));
            }
            if (data.canUpdateCollectionApprovals != null) {
                message.canUpdateCollectionApprovals = data.canUpdateCollectionApprovals.map(item => CollectionApprovalPermission.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                canDeleteCollection?: ReturnType<typeof ActionPermission.prototype.toObject>[];
                canArchiveCollection?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
                canUpdateOffChainBalancesMetadata?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
                canUpdateStandards?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
                canUpdateCustomData?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
                canUpdateManager?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
                canUpdateCollectionMetadata?: ReturnType<typeof TimedUpdatePermission.prototype.toObject>[];
                canCreateMoreBadges?: ReturnType<typeof BalancesActionPermission.prototype.toObject>[];
                canUpdateBadgeMetadata?: ReturnType<typeof TimedUpdateWithBadgeIdsPermission.prototype.toObject>[];
                canUpdateCollectionApprovals?: ReturnType<typeof CollectionApprovalPermission.prototype.toObject>[];
            } = {};
            if (this.canDeleteCollection != null) {
                data.canDeleteCollection = this.canDeleteCollection.map((item: ActionPermission) => item.toObject());
            }
            if (this.canArchiveCollection != null) {
                data.canArchiveCollection = this.canArchiveCollection.map((item: TimedUpdatePermission) => item.toObject());
            }
            if (this.canUpdateOffChainBalancesMetadata != null) {
                data.canUpdateOffChainBalancesMetadata = this.canUpdateOffChainBalancesMetadata.map((item: TimedUpdatePermission) => item.toObject());
            }
            if (this.canUpdateStandards != null) {
                data.canUpdateStandards = this.canUpdateStandards.map((item: TimedUpdatePermission) => item.toObject());
            }
            if (this.canUpdateCustomData != null) {
                data.canUpdateCustomData = this.canUpdateCustomData.map((item: TimedUpdatePermission) => item.toObject());
            }
            if (this.canUpdateManager != null) {
                data.canUpdateManager = this.canUpdateManager.map((item: TimedUpdatePermission) => item.toObject());
            }
            if (this.canUpdateCollectionMetadata != null) {
                data.canUpdateCollectionMetadata = this.canUpdateCollectionMetadata.map((item: TimedUpdatePermission) => item.toObject());
            }
            if (this.canCreateMoreBadges != null) {
                data.canCreateMoreBadges = this.canCreateMoreBadges.map((item: BalancesActionPermission) => item.toObject());
            }
            if (this.canUpdateBadgeMetadata != null) {
                data.canUpdateBadgeMetadata = this.canUpdateBadgeMetadata.map((item: TimedUpdateWithBadgeIdsPermission) => item.toObject());
            }
            if (this.canUpdateCollectionApprovals != null) {
                data.canUpdateCollectionApprovals = this.canUpdateCollectionApprovals.map((item: CollectionApprovalPermission) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.canDeleteCollection.length)
                writer.writeRepeatedMessage(1, this.canDeleteCollection, (item: ActionPermission) => item.serialize(writer));
            if (this.canArchiveCollection.length)
                writer.writeRepeatedMessage(2, this.canArchiveCollection, (item: TimedUpdatePermission) => item.serialize(writer));
            if (this.canUpdateOffChainBalancesMetadata.length)
                writer.writeRepeatedMessage(3, this.canUpdateOffChainBalancesMetadata, (item: TimedUpdatePermission) => item.serialize(writer));
            if (this.canUpdateStandards.length)
                writer.writeRepeatedMessage(4, this.canUpdateStandards, (item: TimedUpdatePermission) => item.serialize(writer));
            if (this.canUpdateCustomData.length)
                writer.writeRepeatedMessage(5, this.canUpdateCustomData, (item: TimedUpdatePermission) => item.serialize(writer));
            if (this.canUpdateManager.length)
                writer.writeRepeatedMessage(6, this.canUpdateManager, (item: TimedUpdatePermission) => item.serialize(writer));
            if (this.canUpdateCollectionMetadata.length)
                writer.writeRepeatedMessage(7, this.canUpdateCollectionMetadata, (item: TimedUpdatePermission) => item.serialize(writer));
            if (this.canCreateMoreBadges.length)
                writer.writeRepeatedMessage(8, this.canCreateMoreBadges, (item: BalancesActionPermission) => item.serialize(writer));
            if (this.canUpdateBadgeMetadata.length)
                writer.writeRepeatedMessage(9, this.canUpdateBadgeMetadata, (item: TimedUpdateWithBadgeIdsPermission) => item.serialize(writer));
            if (this.canUpdateCollectionApprovals.length)
                writer.writeRepeatedMessage(10, this.canUpdateCollectionApprovals, (item: CollectionApprovalPermission) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionPermissions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionPermissions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.canDeleteCollection, () => pb_1.Message.addToRepeatedWrapperField(message, 1, ActionPermission.deserialize(reader), ActionPermission));
                        break;
                    case 2:
                        reader.readMessage(message.canArchiveCollection, () => pb_1.Message.addToRepeatedWrapperField(message, 2, TimedUpdatePermission.deserialize(reader), TimedUpdatePermission));
                        break;
                    case 3:
                        reader.readMessage(message.canUpdateOffChainBalancesMetadata, () => pb_1.Message.addToRepeatedWrapperField(message, 3, TimedUpdatePermission.deserialize(reader), TimedUpdatePermission));
                        break;
                    case 4:
                        reader.readMessage(message.canUpdateStandards, () => pb_1.Message.addToRepeatedWrapperField(message, 4, TimedUpdatePermission.deserialize(reader), TimedUpdatePermission));
                        break;
                    case 5:
                        reader.readMessage(message.canUpdateCustomData, () => pb_1.Message.addToRepeatedWrapperField(message, 5, TimedUpdatePermission.deserialize(reader), TimedUpdatePermission));
                        break;
                    case 6:
                        reader.readMessage(message.canUpdateManager, () => pb_1.Message.addToRepeatedWrapperField(message, 6, TimedUpdatePermission.deserialize(reader), TimedUpdatePermission));
                        break;
                    case 7:
                        reader.readMessage(message.canUpdateCollectionMetadata, () => pb_1.Message.addToRepeatedWrapperField(message, 7, TimedUpdatePermission.deserialize(reader), TimedUpdatePermission));
                        break;
                    case 8:
                        reader.readMessage(message.canCreateMoreBadges, () => pb_1.Message.addToRepeatedWrapperField(message, 8, BalancesActionPermission.deserialize(reader), BalancesActionPermission));
                        break;
                    case 9:
                        reader.readMessage(message.canUpdateBadgeMetadata, () => pb_1.Message.addToRepeatedWrapperField(message, 9, TimedUpdateWithBadgeIdsPermission.deserialize(reader), TimedUpdateWithBadgeIdsPermission));
                        break;
                    case 10:
                        reader.readMessage(message.canUpdateCollectionApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 10, CollectionApprovalPermission.deserialize(reader), CollectionApprovalPermission));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CollectionPermissions {
            return CollectionPermissions.deserialize(bytes);
        }
    }
    export class UserPermissions extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            canUpdateOutgoingApprovals?: UserOutgoingApprovalPermission[];
            canUpdateIncomingApprovals?: UserIncomingApprovalPermission[];
            canUpdateAutoApproveSelfInitiatedOutgoingTransfers?: ActionPermission[];
            canUpdateAutoApproveSelfInitiatedIncomingTransfers?: ActionPermission[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("canUpdateOutgoingApprovals" in data && data.canUpdateOutgoingApprovals != undefined) {
                    this.canUpdateOutgoingApprovals = data.canUpdateOutgoingApprovals;
                }
                if ("canUpdateIncomingApprovals" in data && data.canUpdateIncomingApprovals != undefined) {
                    this.canUpdateIncomingApprovals = data.canUpdateIncomingApprovals;
                }
                if ("canUpdateAutoApproveSelfInitiatedOutgoingTransfers" in data && data.canUpdateAutoApproveSelfInitiatedOutgoingTransfers != undefined) {
                    this.canUpdateAutoApproveSelfInitiatedOutgoingTransfers = data.canUpdateAutoApproveSelfInitiatedOutgoingTransfers;
                }
                if ("canUpdateAutoApproveSelfInitiatedIncomingTransfers" in data && data.canUpdateAutoApproveSelfInitiatedIncomingTransfers != undefined) {
                    this.canUpdateAutoApproveSelfInitiatedIncomingTransfers = data.canUpdateAutoApproveSelfInitiatedIncomingTransfers;
                }
            }
        }
        get canUpdateOutgoingApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, UserOutgoingApprovalPermission, 1) as UserOutgoingApprovalPermission[];
        }
        set canUpdateOutgoingApprovals(value: UserOutgoingApprovalPermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get canUpdateIncomingApprovals() {
            return pb_1.Message.getRepeatedWrapperField(this, UserIncomingApprovalPermission, 2) as UserIncomingApprovalPermission[];
        }
        set canUpdateIncomingApprovals(value: UserIncomingApprovalPermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get canUpdateAutoApproveSelfInitiatedOutgoingTransfers() {
            return pb_1.Message.getRepeatedWrapperField(this, ActionPermission, 3) as ActionPermission[];
        }
        set canUpdateAutoApproveSelfInitiatedOutgoingTransfers(value: ActionPermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get canUpdateAutoApproveSelfInitiatedIncomingTransfers() {
            return pb_1.Message.getRepeatedWrapperField(this, ActionPermission, 4) as ActionPermission[];
        }
        set canUpdateAutoApproveSelfInitiatedIncomingTransfers(value: ActionPermission[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            canUpdateOutgoingApprovals?: ReturnType<typeof UserOutgoingApprovalPermission.prototype.toObject>[];
            canUpdateIncomingApprovals?: ReturnType<typeof UserIncomingApprovalPermission.prototype.toObject>[];
            canUpdateAutoApproveSelfInitiatedOutgoingTransfers?: ReturnType<typeof ActionPermission.prototype.toObject>[];
            canUpdateAutoApproveSelfInitiatedIncomingTransfers?: ReturnType<typeof ActionPermission.prototype.toObject>[];
        }): UserPermissions {
            const message = new UserPermissions({});
            if (data.canUpdateOutgoingApprovals != null) {
                message.canUpdateOutgoingApprovals = data.canUpdateOutgoingApprovals.map(item => UserOutgoingApprovalPermission.fromObject(item));
            }
            if (data.canUpdateIncomingApprovals != null) {
                message.canUpdateIncomingApprovals = data.canUpdateIncomingApprovals.map(item => UserIncomingApprovalPermission.fromObject(item));
            }
            if (data.canUpdateAutoApproveSelfInitiatedOutgoingTransfers != null) {
                message.canUpdateAutoApproveSelfInitiatedOutgoingTransfers = data.canUpdateAutoApproveSelfInitiatedOutgoingTransfers.map(item => ActionPermission.fromObject(item));
            }
            if (data.canUpdateAutoApproveSelfInitiatedIncomingTransfers != null) {
                message.canUpdateAutoApproveSelfInitiatedIncomingTransfers = data.canUpdateAutoApproveSelfInitiatedIncomingTransfers.map(item => ActionPermission.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                canUpdateOutgoingApprovals?: ReturnType<typeof UserOutgoingApprovalPermission.prototype.toObject>[];
                canUpdateIncomingApprovals?: ReturnType<typeof UserIncomingApprovalPermission.prototype.toObject>[];
                canUpdateAutoApproveSelfInitiatedOutgoingTransfers?: ReturnType<typeof ActionPermission.prototype.toObject>[];
                canUpdateAutoApproveSelfInitiatedIncomingTransfers?: ReturnType<typeof ActionPermission.prototype.toObject>[];
            } = {};
            if (this.canUpdateOutgoingApprovals != null) {
                data.canUpdateOutgoingApprovals = this.canUpdateOutgoingApprovals.map((item: UserOutgoingApprovalPermission) => item.toObject());
            }
            if (this.canUpdateIncomingApprovals != null) {
                data.canUpdateIncomingApprovals = this.canUpdateIncomingApprovals.map((item: UserIncomingApprovalPermission) => item.toObject());
            }
            if (this.canUpdateAutoApproveSelfInitiatedOutgoingTransfers != null) {
                data.canUpdateAutoApproveSelfInitiatedOutgoingTransfers = this.canUpdateAutoApproveSelfInitiatedOutgoingTransfers.map((item: ActionPermission) => item.toObject());
            }
            if (this.canUpdateAutoApproveSelfInitiatedIncomingTransfers != null) {
                data.canUpdateAutoApproveSelfInitiatedIncomingTransfers = this.canUpdateAutoApproveSelfInitiatedIncomingTransfers.map((item: ActionPermission) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.canUpdateOutgoingApprovals.length)
                writer.writeRepeatedMessage(1, this.canUpdateOutgoingApprovals, (item: UserOutgoingApprovalPermission) => item.serialize(writer));
            if (this.canUpdateIncomingApprovals.length)
                writer.writeRepeatedMessage(2, this.canUpdateIncomingApprovals, (item: UserIncomingApprovalPermission) => item.serialize(writer));
            if (this.canUpdateAutoApproveSelfInitiatedOutgoingTransfers.length)
                writer.writeRepeatedMessage(3, this.canUpdateAutoApproveSelfInitiatedOutgoingTransfers, (item: ActionPermission) => item.serialize(writer));
            if (this.canUpdateAutoApproveSelfInitiatedIncomingTransfers.length)
                writer.writeRepeatedMessage(4, this.canUpdateAutoApproveSelfInitiatedIncomingTransfers, (item: ActionPermission) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserPermissions {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserPermissions();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.canUpdateOutgoingApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 1, UserOutgoingApprovalPermission.deserialize(reader), UserOutgoingApprovalPermission));
                        break;
                    case 2:
                        reader.readMessage(message.canUpdateIncomingApprovals, () => pb_1.Message.addToRepeatedWrapperField(message, 2, UserIncomingApprovalPermission.deserialize(reader), UserIncomingApprovalPermission));
                        break;
                    case 3:
                        reader.readMessage(message.canUpdateAutoApproveSelfInitiatedOutgoingTransfers, () => pb_1.Message.addToRepeatedWrapperField(message, 3, ActionPermission.deserialize(reader), ActionPermission));
                        break;
                    case 4:
                        reader.readMessage(message.canUpdateAutoApproveSelfInitiatedIncomingTransfers, () => pb_1.Message.addToRepeatedWrapperField(message, 4, ActionPermission.deserialize(reader), ActionPermission));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserPermissions {
            return UserPermissions.deserialize(bytes);
        }
    }
    export class CollectionApprovalPermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fromMappingId?: string;
            toMappingId?: string;
            initiatedByMappingId?: string;
            transferTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            badgeIds?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            ownershipTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            amountTrackerId?: string;
            challengeTrackerId?: string;
            permittedTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            forbiddenTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [4, 5, 6, 9, 10], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fromMappingId" in data && data.fromMappingId != undefined) {
                    this.fromMappingId = data.fromMappingId;
                }
                if ("toMappingId" in data && data.toMappingId != undefined) {
                    this.toMappingId = data.toMappingId;
                }
                if ("initiatedByMappingId" in data && data.initiatedByMappingId != undefined) {
                    this.initiatedByMappingId = data.initiatedByMappingId;
                }
                if ("transferTimes" in data && data.transferTimes != undefined) {
                    this.transferTimes = data.transferTimes;
                }
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
                if ("ownershipTimes" in data && data.ownershipTimes != undefined) {
                    this.ownershipTimes = data.ownershipTimes;
                }
                if ("amountTrackerId" in data && data.amountTrackerId != undefined) {
                    this.amountTrackerId = data.amountTrackerId;
                }
                if ("challengeTrackerId" in data && data.challengeTrackerId != undefined) {
                    this.challengeTrackerId = data.challengeTrackerId;
                }
                if ("permittedTimes" in data && data.permittedTimes != undefined) {
                    this.permittedTimes = data.permittedTimes;
                }
                if ("forbiddenTimes" in data && data.forbiddenTimes != undefined) {
                    this.forbiddenTimes = data.forbiddenTimes;
                }
            }
        }
        get fromMappingId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set fromMappingId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get toMappingId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set toMappingId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get initiatedByMappingId() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set initiatedByMappingId(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get transferTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 4) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set transferTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get badgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 5) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set badgeIds(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get ownershipTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 6) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set ownershipTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get amountTrackerId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set amountTrackerId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get challengeTrackerId() {
            return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
        }
        set challengeTrackerId(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get permittedTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 9) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set permittedTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        get forbiddenTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 10) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set forbiddenTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 10, value);
        }
        static fromObject(data: {
            fromMappingId?: string;
            toMappingId?: string;
            initiatedByMappingId?: string;
            transferTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            ownershipTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            amountTrackerId?: string;
            challengeTrackerId?: string;
            permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): CollectionApprovalPermission {
            const message = new CollectionApprovalPermission({});
            if (data.fromMappingId != null) {
                message.fromMappingId = data.fromMappingId;
            }
            if (data.toMappingId != null) {
                message.toMappingId = data.toMappingId;
            }
            if (data.initiatedByMappingId != null) {
                message.initiatedByMappingId = data.initiatedByMappingId;
            }
            if (data.transferTimes != null) {
                message.transferTimes = data.transferTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.ownershipTimes != null) {
                message.ownershipTimes = data.ownershipTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.amountTrackerId != null) {
                message.amountTrackerId = data.amountTrackerId;
            }
            if (data.challengeTrackerId != null) {
                message.challengeTrackerId = data.challengeTrackerId;
            }
            if (data.permittedTimes != null) {
                message.permittedTimes = data.permittedTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.forbiddenTimes != null) {
                message.forbiddenTimes = data.forbiddenTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                fromMappingId?: string;
                toMappingId?: string;
                initiatedByMappingId?: string;
                transferTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                ownershipTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                amountTrackerId?: string;
                challengeTrackerId?: string;
                permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.fromMappingId != null) {
                data.fromMappingId = this.fromMappingId;
            }
            if (this.toMappingId != null) {
                data.toMappingId = this.toMappingId;
            }
            if (this.initiatedByMappingId != null) {
                data.initiatedByMappingId = this.initiatedByMappingId;
            }
            if (this.transferTimes != null) {
                data.transferTimes = this.transferTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.ownershipTimes != null) {
                data.ownershipTimes = this.ownershipTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.amountTrackerId != null) {
                data.amountTrackerId = this.amountTrackerId;
            }
            if (this.challengeTrackerId != null) {
                data.challengeTrackerId = this.challengeTrackerId;
            }
            if (this.permittedTimes != null) {
                data.permittedTimes = this.permittedTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.forbiddenTimes != null) {
                data.forbiddenTimes = this.forbiddenTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fromMappingId.length)
                writer.writeString(1, this.fromMappingId);
            if (this.toMappingId.length)
                writer.writeString(2, this.toMappingId);
            if (this.initiatedByMappingId.length)
                writer.writeString(3, this.initiatedByMappingId);
            if (this.transferTimes.length)
                writer.writeRepeatedMessage(4, this.transferTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.badgeIds.length)
                writer.writeRepeatedMessage(5, this.badgeIds, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.ownershipTimes.length)
                writer.writeRepeatedMessage(6, this.ownershipTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.amountTrackerId.length)
                writer.writeString(7, this.amountTrackerId);
            if (this.challengeTrackerId.length)
                writer.writeString(8, this.challengeTrackerId);
            if (this.permittedTimes.length)
                writer.writeRepeatedMessage(9, this.permittedTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.forbiddenTimes.length)
                writer.writeRepeatedMessage(10, this.forbiddenTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CollectionApprovalPermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CollectionApprovalPermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fromMappingId = reader.readString();
                        break;
                    case 2:
                        message.toMappingId = reader.readString();
                        break;
                    case 3:
                        message.initiatedByMappingId = reader.readString();
                        break;
                    case 4:
                        reader.readMessage(message.transferTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 5:
                        reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 6:
                        reader.readMessage(message.ownershipTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 7:
                        message.amountTrackerId = reader.readString();
                        break;
                    case 8:
                        message.challengeTrackerId = reader.readString();
                        break;
                    case 9:
                        reader.readMessage(message.permittedTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 10:
                        reader.readMessage(message.forbiddenTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 10, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CollectionApprovalPermission {
            return CollectionApprovalPermission.deserialize(bytes);
        }
    }
    export class UserOutgoingApprovalPermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            toMappingId?: string;
            initiatedByMappingId?: string;
            transferTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            badgeIds?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            ownershipTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            amountTrackerId?: string;
            challengeTrackerId?: string;
            permittedTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            forbiddenTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5, 8, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("toMappingId" in data && data.toMappingId != undefined) {
                    this.toMappingId = data.toMappingId;
                }
                if ("initiatedByMappingId" in data && data.initiatedByMappingId != undefined) {
                    this.initiatedByMappingId = data.initiatedByMappingId;
                }
                if ("transferTimes" in data && data.transferTimes != undefined) {
                    this.transferTimes = data.transferTimes;
                }
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
                if ("ownershipTimes" in data && data.ownershipTimes != undefined) {
                    this.ownershipTimes = data.ownershipTimes;
                }
                if ("amountTrackerId" in data && data.amountTrackerId != undefined) {
                    this.amountTrackerId = data.amountTrackerId;
                }
                if ("challengeTrackerId" in data && data.challengeTrackerId != undefined) {
                    this.challengeTrackerId = data.challengeTrackerId;
                }
                if ("permittedTimes" in data && data.permittedTimes != undefined) {
                    this.permittedTimes = data.permittedTimes;
                }
                if ("forbiddenTimes" in data && data.forbiddenTimes != undefined) {
                    this.forbiddenTimes = data.forbiddenTimes;
                }
            }
        }
        get toMappingId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set toMappingId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get initiatedByMappingId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set initiatedByMappingId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get transferTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 3) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set transferTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get badgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 4) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set badgeIds(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ownershipTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 5) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set ownershipTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get amountTrackerId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set amountTrackerId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get challengeTrackerId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set challengeTrackerId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get permittedTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 8) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set permittedTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get forbiddenTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 9) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set forbiddenTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        static fromObject(data: {
            toMappingId?: string;
            initiatedByMappingId?: string;
            transferTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            ownershipTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            amountTrackerId?: string;
            challengeTrackerId?: string;
            permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): UserOutgoingApprovalPermission {
            const message = new UserOutgoingApprovalPermission({});
            if (data.toMappingId != null) {
                message.toMappingId = data.toMappingId;
            }
            if (data.initiatedByMappingId != null) {
                message.initiatedByMappingId = data.initiatedByMappingId;
            }
            if (data.transferTimes != null) {
                message.transferTimes = data.transferTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.ownershipTimes != null) {
                message.ownershipTimes = data.ownershipTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.amountTrackerId != null) {
                message.amountTrackerId = data.amountTrackerId;
            }
            if (data.challengeTrackerId != null) {
                message.challengeTrackerId = data.challengeTrackerId;
            }
            if (data.permittedTimes != null) {
                message.permittedTimes = data.permittedTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.forbiddenTimes != null) {
                message.forbiddenTimes = data.forbiddenTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                toMappingId?: string;
                initiatedByMappingId?: string;
                transferTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                ownershipTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                amountTrackerId?: string;
                challengeTrackerId?: string;
                permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.toMappingId != null) {
                data.toMappingId = this.toMappingId;
            }
            if (this.initiatedByMappingId != null) {
                data.initiatedByMappingId = this.initiatedByMappingId;
            }
            if (this.transferTimes != null) {
                data.transferTimes = this.transferTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.ownershipTimes != null) {
                data.ownershipTimes = this.ownershipTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.amountTrackerId != null) {
                data.amountTrackerId = this.amountTrackerId;
            }
            if (this.challengeTrackerId != null) {
                data.challengeTrackerId = this.challengeTrackerId;
            }
            if (this.permittedTimes != null) {
                data.permittedTimes = this.permittedTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.forbiddenTimes != null) {
                data.forbiddenTimes = this.forbiddenTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.toMappingId.length)
                writer.writeString(1, this.toMappingId);
            if (this.initiatedByMappingId.length)
                writer.writeString(2, this.initiatedByMappingId);
            if (this.transferTimes.length)
                writer.writeRepeatedMessage(3, this.transferTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.badgeIds.length)
                writer.writeRepeatedMessage(4, this.badgeIds, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.ownershipTimes.length)
                writer.writeRepeatedMessage(5, this.ownershipTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.amountTrackerId.length)
                writer.writeString(6, this.amountTrackerId);
            if (this.challengeTrackerId.length)
                writer.writeString(7, this.challengeTrackerId);
            if (this.permittedTimes.length)
                writer.writeRepeatedMessage(8, this.permittedTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.forbiddenTimes.length)
                writer.writeRepeatedMessage(9, this.forbiddenTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserOutgoingApprovalPermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserOutgoingApprovalPermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.toMappingId = reader.readString();
                        break;
                    case 2:
                        message.initiatedByMappingId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.transferTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 4:
                        reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 5:
                        reader.readMessage(message.ownershipTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 6:
                        message.amountTrackerId = reader.readString();
                        break;
                    case 7:
                        message.challengeTrackerId = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.permittedTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 9:
                        reader.readMessage(message.forbiddenTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserOutgoingApprovalPermission {
            return UserOutgoingApprovalPermission.deserialize(bytes);
        }
    }
    export class UserIncomingApprovalPermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            fromMappingId?: string;
            initiatedByMappingId?: string;
            transferTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            badgeIds?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            ownershipTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            amountTrackerId?: string;
            challengeTrackerId?: string;
            permittedTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            forbiddenTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3, 4, 5, 8, 9], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("fromMappingId" in data && data.fromMappingId != undefined) {
                    this.fromMappingId = data.fromMappingId;
                }
                if ("initiatedByMappingId" in data && data.initiatedByMappingId != undefined) {
                    this.initiatedByMappingId = data.initiatedByMappingId;
                }
                if ("transferTimes" in data && data.transferTimes != undefined) {
                    this.transferTimes = data.transferTimes;
                }
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
                if ("ownershipTimes" in data && data.ownershipTimes != undefined) {
                    this.ownershipTimes = data.ownershipTimes;
                }
                if ("amountTrackerId" in data && data.amountTrackerId != undefined) {
                    this.amountTrackerId = data.amountTrackerId;
                }
                if ("challengeTrackerId" in data && data.challengeTrackerId != undefined) {
                    this.challengeTrackerId = data.challengeTrackerId;
                }
                if ("permittedTimes" in data && data.permittedTimes != undefined) {
                    this.permittedTimes = data.permittedTimes;
                }
                if ("forbiddenTimes" in data && data.forbiddenTimes != undefined) {
                    this.forbiddenTimes = data.forbiddenTimes;
                }
            }
        }
        get fromMappingId() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set fromMappingId(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get initiatedByMappingId() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set initiatedByMappingId(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get transferTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 3) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set transferTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get badgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 4) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set badgeIds(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        get ownershipTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 5) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set ownershipTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get amountTrackerId() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set amountTrackerId(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get challengeTrackerId() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set challengeTrackerId(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get permittedTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 8) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set permittedTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 8, value);
        }
        get forbiddenTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 9) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set forbiddenTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 9, value);
        }
        static fromObject(data: {
            fromMappingId?: string;
            initiatedByMappingId?: string;
            transferTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            ownershipTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            amountTrackerId?: string;
            challengeTrackerId?: string;
            permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): UserIncomingApprovalPermission {
            const message = new UserIncomingApprovalPermission({});
            if (data.fromMappingId != null) {
                message.fromMappingId = data.fromMappingId;
            }
            if (data.initiatedByMappingId != null) {
                message.initiatedByMappingId = data.initiatedByMappingId;
            }
            if (data.transferTimes != null) {
                message.transferTimes = data.transferTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.ownershipTimes != null) {
                message.ownershipTimes = data.ownershipTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.amountTrackerId != null) {
                message.amountTrackerId = data.amountTrackerId;
            }
            if (data.challengeTrackerId != null) {
                message.challengeTrackerId = data.challengeTrackerId;
            }
            if (data.permittedTimes != null) {
                message.permittedTimes = data.permittedTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.forbiddenTimes != null) {
                message.forbiddenTimes = data.forbiddenTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                fromMappingId?: string;
                initiatedByMappingId?: string;
                transferTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                ownershipTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                amountTrackerId?: string;
                challengeTrackerId?: string;
                permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.fromMappingId != null) {
                data.fromMappingId = this.fromMappingId;
            }
            if (this.initiatedByMappingId != null) {
                data.initiatedByMappingId = this.initiatedByMappingId;
            }
            if (this.transferTimes != null) {
                data.transferTimes = this.transferTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.ownershipTimes != null) {
                data.ownershipTimes = this.ownershipTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.amountTrackerId != null) {
                data.amountTrackerId = this.amountTrackerId;
            }
            if (this.challengeTrackerId != null) {
                data.challengeTrackerId = this.challengeTrackerId;
            }
            if (this.permittedTimes != null) {
                data.permittedTimes = this.permittedTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.forbiddenTimes != null) {
                data.forbiddenTimes = this.forbiddenTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.fromMappingId.length)
                writer.writeString(1, this.fromMappingId);
            if (this.initiatedByMappingId.length)
                writer.writeString(2, this.initiatedByMappingId);
            if (this.transferTimes.length)
                writer.writeRepeatedMessage(3, this.transferTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.badgeIds.length)
                writer.writeRepeatedMessage(4, this.badgeIds, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.ownershipTimes.length)
                writer.writeRepeatedMessage(5, this.ownershipTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.amountTrackerId.length)
                writer.writeString(6, this.amountTrackerId);
            if (this.challengeTrackerId.length)
                writer.writeString(7, this.challengeTrackerId);
            if (this.permittedTimes.length)
                writer.writeRepeatedMessage(8, this.permittedTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.forbiddenTimes.length)
                writer.writeRepeatedMessage(9, this.forbiddenTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserIncomingApprovalPermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserIncomingApprovalPermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.fromMappingId = reader.readString();
                        break;
                    case 2:
                        message.initiatedByMappingId = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.transferTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 4:
                        reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 5:
                        reader.readMessage(message.ownershipTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 6:
                        message.amountTrackerId = reader.readString();
                        break;
                    case 7:
                        message.challengeTrackerId = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.permittedTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 8, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 9:
                        reader.readMessage(message.forbiddenTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 9, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserIncomingApprovalPermission {
            return UserIncomingApprovalPermission.deserialize(bytes);
        }
    }
    export class BalancesActionPermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            badgeIds?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            ownershipTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            permittedTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            forbiddenTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
                if ("ownershipTimes" in data && data.ownershipTimes != undefined) {
                    this.ownershipTimes = data.ownershipTimes;
                }
                if ("permittedTimes" in data && data.permittedTimes != undefined) {
                    this.permittedTimes = data.permittedTimes;
                }
                if ("forbiddenTimes" in data && data.forbiddenTimes != undefined) {
                    this.forbiddenTimes = data.forbiddenTimes;
                }
            }
        }
        get badgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 1) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set badgeIds(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get ownershipTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set ownershipTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get permittedTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 3) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set permittedTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get forbiddenTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 4) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set forbiddenTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            ownershipTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): BalancesActionPermission {
            const message = new BalancesActionPermission({});
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.ownershipTimes != null) {
                message.ownershipTimes = data.ownershipTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.permittedTimes != null) {
                message.permittedTimes = data.permittedTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.forbiddenTimes != null) {
                message.forbiddenTimes = data.forbiddenTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                ownershipTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.ownershipTimes != null) {
                data.ownershipTimes = this.ownershipTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.permittedTimes != null) {
                data.permittedTimes = this.permittedTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.forbiddenTimes != null) {
                data.forbiddenTimes = this.forbiddenTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.badgeIds.length)
                writer.writeRepeatedMessage(1, this.badgeIds, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.ownershipTimes.length)
                writer.writeRepeatedMessage(2, this.ownershipTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.permittedTimes.length)
                writer.writeRepeatedMessage(3, this.permittedTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.forbiddenTimes.length)
                writer.writeRepeatedMessage(4, this.forbiddenTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): BalancesActionPermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new BalancesActionPermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 2:
                        reader.readMessage(message.ownershipTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 3:
                        reader.readMessage(message.permittedTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 4:
                        reader.readMessage(message.forbiddenTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): BalancesActionPermission {
            return BalancesActionPermission.deserialize(bytes);
        }
    }
    export class ActionPermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            permittedTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            forbiddenTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("permittedTimes" in data && data.permittedTimes != undefined) {
                    this.permittedTimes = data.permittedTimes;
                }
                if ("forbiddenTimes" in data && data.forbiddenTimes != undefined) {
                    this.forbiddenTimes = data.forbiddenTimes;
                }
            }
        }
        get permittedTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 1) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set permittedTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get forbiddenTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set forbiddenTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        static fromObject(data: {
            permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): ActionPermission {
            const message = new ActionPermission({});
            if (data.permittedTimes != null) {
                message.permittedTimes = data.permittedTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.forbiddenTimes != null) {
                message.forbiddenTimes = data.forbiddenTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.permittedTimes != null) {
                data.permittedTimes = this.permittedTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.forbiddenTimes != null) {
                data.forbiddenTimes = this.forbiddenTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.permittedTimes.length)
                writer.writeRepeatedMessage(1, this.permittedTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.forbiddenTimes.length)
                writer.writeRepeatedMessage(2, this.forbiddenTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ActionPermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ActionPermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.permittedTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 2:
                        reader.readMessage(message.forbiddenTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ActionPermission {
            return ActionPermission.deserialize(bytes);
        }
    }
    export class TimedUpdatePermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            timelineTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            permittedTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            forbiddenTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
                if ("permittedTimes" in data && data.permittedTimes != undefined) {
                    this.permittedTimes = data.permittedTimes;
                }
                if ("forbiddenTimes" in data && data.forbiddenTimes != undefined) {
                    this.forbiddenTimes = data.forbiddenTimes;
                }
            }
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 1) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get permittedTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set permittedTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get forbiddenTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 3) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set forbiddenTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        static fromObject(data: {
            timelineTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): TimedUpdatePermission {
            const message = new TimedUpdatePermission({});
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.permittedTimes != null) {
                message.permittedTimes = data.permittedTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.forbiddenTimes != null) {
                message.forbiddenTimes = data.forbiddenTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                timelineTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.permittedTimes != null) {
                data.permittedTimes = this.permittedTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.forbiddenTimes != null) {
                data.forbiddenTimes = this.forbiddenTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(1, this.timelineTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.permittedTimes.length)
                writer.writeRepeatedMessage(2, this.permittedTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.forbiddenTimes.length)
                writer.writeRepeatedMessage(3, this.forbiddenTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimedUpdatePermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimedUpdatePermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 2:
                        reader.readMessage(message.permittedTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 3:
                        reader.readMessage(message.forbiddenTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimedUpdatePermission {
            return TimedUpdatePermission.deserialize(bytes);
        }
    }
    export class TimedUpdateWithBadgeIdsPermission extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            badgeIds?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            timelineTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            permittedTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
            forbiddenTimes?: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 2, 3, 4], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
                if ("timelineTimes" in data && data.timelineTimes != undefined) {
                    this.timelineTimes = data.timelineTimes;
                }
                if ("permittedTimes" in data && data.permittedTimes != undefined) {
                    this.permittedTimes = data.permittedTimes;
                }
                if ("forbiddenTimes" in data && data.forbiddenTimes != undefined) {
                    this.forbiddenTimes = data.forbiddenTimes;
                }
            }
        }
        get badgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 1) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set badgeIds(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get timelineTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 2) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set timelineTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 2, value);
        }
        get permittedTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 3) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set permittedTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 3, value);
        }
        get forbiddenTimes() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.UintRange, 4) as dependency_2.bitbadges.bitbadgeschain.badges.UintRange[];
        }
        set forbiddenTimes(value: dependency_2.bitbadges.bitbadgeschain.badges.UintRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 4, value);
        }
        static fromObject(data: {
            badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            timelineTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
        }): TimedUpdateWithBadgeIdsPermission {
            const message = new TimedUpdateWithBadgeIdsPermission({});
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.timelineTimes != null) {
                message.timelineTimes = data.timelineTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.permittedTimes != null) {
                message.permittedTimes = data.permittedTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            if (data.forbiddenTimes != null) {
                message.forbiddenTimes = data.forbiddenTimes.map(item => dependency_2.bitbadges.bitbadgeschain.badges.UintRange.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                timelineTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                permittedTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
                forbiddenTimes?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.UintRange.prototype.toObject>[];
            } = {};
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.timelineTimes != null) {
                data.timelineTimes = this.timelineTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.permittedTimes != null) {
                data.permittedTimes = this.permittedTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            if (this.forbiddenTimes != null) {
                data.forbiddenTimes = this.forbiddenTimes.map((item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.badgeIds.length)
                writer.writeRepeatedMessage(1, this.badgeIds, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.timelineTimes.length)
                writer.writeRepeatedMessage(2, this.timelineTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.permittedTimes.length)
                writer.writeRepeatedMessage(3, this.permittedTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (this.forbiddenTimes.length)
                writer.writeRepeatedMessage(4, this.forbiddenTimes, (item: dependency_2.bitbadges.bitbadgeschain.badges.UintRange) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): TimedUpdateWithBadgeIdsPermission {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new TimedUpdateWithBadgeIdsPermission();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 2:
                        reader.readMessage(message.timelineTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 2, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 3:
                        reader.readMessage(message.permittedTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 3, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    case 4:
                        reader.readMessage(message.forbiddenTimes, () => pb_1.Message.addToRepeatedWrapperField(message, 4, dependency_2.bitbadges.bitbadgeschain.badges.UintRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.UintRange));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): TimedUpdateWithBadgeIdsPermission {
            return TimedUpdateWithBadgeIdsPermission.deserialize(bytes);
        }
    }
}
