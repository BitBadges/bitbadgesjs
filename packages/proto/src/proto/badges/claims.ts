// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/claims.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./balances";
import * as dependency_2 from "./ranges";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export enum ClaimType {
        MerkleTree = 0,
        FirstCome = 1
    }
    export class Claim extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            balances?: dependency_1.bitbadges.bitbadgeschain.badges.Balance[];
            type?: number;
            data?: string;
            amountPerClaim?: number;
            badgeIds?: dependency_2.bitbadges.bitbadgeschain.badges.IdRange[];
            incrementIdsBy?: number;
            uri?: string;
            timeRange?: dependency_2.bitbadges.bitbadgeschain.badges.IdRange;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("balances" in data && data.balances != undefined) {
                    this.balances = data.balances;
                }
                if ("type" in data && data.type != undefined) {
                    this.type = data.type;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("amountPerClaim" in data && data.amountPerClaim != undefined) {
                    this.amountPerClaim = data.amountPerClaim;
                }
                if ("badgeIds" in data && data.badgeIds != undefined) {
                    this.badgeIds = data.badgeIds;
                }
                if ("incrementIdsBy" in data && data.incrementIdsBy != undefined) {
                    this.incrementIdsBy = data.incrementIdsBy;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("timeRange" in data && data.timeRange != undefined) {
                    this.timeRange = data.timeRange;
                }
            }
        }
        get balances() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.Balance, 1) as dependency_1.bitbadges.bitbadgeschain.badges.Balance[];
        }
        set balances(value: dependency_1.bitbadges.bitbadgeschain.badges.Balance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get type() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set type(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get amountPerClaim() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set amountPerClaim(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        get badgeIds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.IdRange, 5) as dependency_2.bitbadges.bitbadgeschain.badges.IdRange[];
        }
        set badgeIds(value: dependency_2.bitbadges.bitbadgeschain.badges.IdRange[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        get incrementIdsBy() {
            return pb_1.Message.getFieldWithDefault(this, 6, 0) as number;
        }
        set incrementIdsBy(value: number) {
            pb_1.Message.setField(this, 6, value);
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get timeRange() {
            return pb_1.Message.getWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.IdRange, 8) as dependency_2.bitbadges.bitbadgeschain.badges.IdRange;
        }
        set timeRange(value: dependency_2.bitbadges.bitbadgeschain.badges.IdRange) {
            pb_1.Message.setWrapperField(this, 8, value);
        }
        get has_timeRange() {
            return pb_1.Message.getField(this, 8) != null;
        }
        static fromObject(data: {
            balances?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
            type?: number;
            data?: string;
            amountPerClaim?: number;
            badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
            incrementIdsBy?: number;
            uri?: string;
            timeRange?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>;
        }): Claim {
            const message = new Claim({});
            if (data.balances != null) {
                message.balances = data.balances.map(item => dependency_1.bitbadges.bitbadgeschain.badges.Balance.fromObject(item));
            }
            if (data.type != null) {
                message.type = data.type;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.amountPerClaim != null) {
                message.amountPerClaim = data.amountPerClaim;
            }
            if (data.badgeIds != null) {
                message.badgeIds = data.badgeIds.map(item => dependency_2.bitbadges.bitbadgeschain.badges.IdRange.fromObject(item));
            }
            if (data.incrementIdsBy != null) {
                message.incrementIdsBy = data.incrementIdsBy;
            }
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.timeRange != null) {
                message.timeRange = dependency_2.bitbadges.bitbadgeschain.badges.IdRange.fromObject(data.timeRange);
            }
            return message;
        }
        toObject() {
            const data: {
                balances?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
                type?: number;
                data?: string;
                amountPerClaim?: number;
                badgeIds?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>[];
                incrementIdsBy?: number;
                uri?: string;
                timeRange?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>;
            } = {};
            if (this.balances != null) {
                data.balances = this.balances.map((item: dependency_1.bitbadges.bitbadgeschain.badges.Balance) => item.toObject());
            }
            if (this.type != null) {
                data.type = this.type;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.amountPerClaim != null) {
                data.amountPerClaim = this.amountPerClaim;
            }
            if (this.badgeIds != null) {
                data.badgeIds = this.badgeIds.map((item: dependency_2.bitbadges.bitbadgeschain.badges.IdRange) => item.toObject());
            }
            if (this.incrementIdsBy != null) {
                data.incrementIdsBy = this.incrementIdsBy;
            }
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.timeRange != null) {
                data.timeRange = this.timeRange.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.balances.length)
                writer.writeRepeatedMessage(1, this.balances, (item: dependency_1.bitbadges.bitbadgeschain.badges.Balance) => item.serialize(writer));
            if (this.type != 0)
                writer.writeUint64(2, this.type);
            if (this.data.length)
                writer.writeString(3, this.data);
            if (this.amountPerClaim != 0)
                writer.writeUint64(4, this.amountPerClaim);
            if (this.badgeIds.length)
                writer.writeRepeatedMessage(5, this.badgeIds, (item: dependency_2.bitbadges.bitbadgeschain.badges.IdRange) => item.serialize(writer));
            if (this.incrementIdsBy != 0)
                writer.writeUint64(6, this.incrementIdsBy);
            if (this.uri.length)
                writer.writeString(7, this.uri);
            if (this.has_timeRange)
                writer.writeMessage(8, this.timeRange, () => this.timeRange.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Claim {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Claim();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.balances, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.bitbadges.bitbadgeschain.badges.Balance.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.Balance));
                        break;
                    case 2:
                        message.type = reader.readUint64();
                        break;
                    case 3:
                        message.data = reader.readString();
                        break;
                    case 4:
                        message.amountPerClaim = reader.readUint64();
                        break;
                    case 5:
                        reader.readMessage(message.badgeIds, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_2.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader), dependency_2.bitbadges.bitbadgeschain.badges.IdRange));
                        break;
                    case 6:
                        message.incrementIdsBy = reader.readUint64();
                        break;
                    case 7:
                        message.uri = reader.readString();
                        break;
                    case 8:
                        reader.readMessage(message.timeRange, () => message.timeRange = dependency_2.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Claim {
            return Claim.deserialize(bytes);
        }
    }
}
