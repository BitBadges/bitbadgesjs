// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: badges/claims.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./balances";
import * as dependency_2 from "./ranges";
import * as dependency_3 from "./../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace bitbadges.bitbadgeschain.badges {
    export class Challenge extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            root?: string;
            expectedProofLength?: string;
            useCreatorAddressAsLeaf?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("root" in data && data.root != undefined) {
                    this.root = data.root;
                }
                if ("expectedProofLength" in data && data.expectedProofLength != undefined) {
                    this.expectedProofLength = data.expectedProofLength;
                }
                if ("useCreatorAddressAsLeaf" in data && data.useCreatorAddressAsLeaf != undefined) {
                    this.useCreatorAddressAsLeaf = data.useCreatorAddressAsLeaf;
                }
            }
        }
        get root() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set root(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get expectedProofLength() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set expectedProofLength(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get useCreatorAddressAsLeaf() {
            return pb_1.Message.getFieldWithDefault(this, 3, false) as boolean;
        }
        set useCreatorAddressAsLeaf(value: boolean) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            root?: string;
            expectedProofLength?: string;
            useCreatorAddressAsLeaf?: boolean;
        }): Challenge {
            const message = new Challenge({});
            if (data.root != null) {
                message.root = data.root;
            }
            if (data.expectedProofLength != null) {
                message.expectedProofLength = data.expectedProofLength;
            }
            if (data.useCreatorAddressAsLeaf != null) {
                message.useCreatorAddressAsLeaf = data.useCreatorAddressAsLeaf;
            }
            return message;
        }
        toObject() {
            const data: {
                root?: string;
                expectedProofLength?: string;
                useCreatorAddressAsLeaf?: boolean;
            } = {};
            if (this.root != null) {
                data.root = this.root;
            }
            if (this.expectedProofLength != null) {
                data.expectedProofLength = this.expectedProofLength;
            }
            if (this.useCreatorAddressAsLeaf != null) {
                data.useCreatorAddressAsLeaf = this.useCreatorAddressAsLeaf;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.root.length)
                writer.writeString(1, this.root);
            if (this.expectedProofLength.length)
                writer.writeString(2, this.expectedProofLength);
            if (this.useCreatorAddressAsLeaf != false)
                writer.writeBool(3, this.useCreatorAddressAsLeaf);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Challenge {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Challenge();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.root = reader.readString();
                        break;
                    case 2:
                        message.expectedProofLength = reader.readString();
                        break;
                    case 3:
                        message.useCreatorAddressAsLeaf = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Challenge {
            return Challenge.deserialize(bytes);
        }
    }
    export class Claim extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            undistributedBalances?: dependency_1.bitbadges.bitbadgeschain.badges.Balance[];
            timeRange?: dependency_2.bitbadges.bitbadgeschain.badges.IdRange;
            uri?: string;
            numClaimsPerAddress?: string;
            incrementIdsBy?: string;
            currentClaimAmounts?: dependency_1.bitbadges.bitbadgeschain.badges.Balance[];
            challenges?: Challenge[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1, 6, 7], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("undistributedBalances" in data && data.undistributedBalances != undefined) {
                    this.undistributedBalances = data.undistributedBalances;
                }
                if ("timeRange" in data && data.timeRange != undefined) {
                    this.timeRange = data.timeRange;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("numClaimsPerAddress" in data && data.numClaimsPerAddress != undefined) {
                    this.numClaimsPerAddress = data.numClaimsPerAddress;
                }
                if ("incrementIdsBy" in data && data.incrementIdsBy != undefined) {
                    this.incrementIdsBy = data.incrementIdsBy;
                }
                if ("currentClaimAmounts" in data && data.currentClaimAmounts != undefined) {
                    this.currentClaimAmounts = data.currentClaimAmounts;
                }
                if ("challenges" in data && data.challenges != undefined) {
                    this.challenges = data.challenges;
                }
            }
        }
        get undistributedBalances() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.Balance, 1) as dependency_1.bitbadges.bitbadgeschain.badges.Balance[];
        }
        set undistributedBalances(value: dependency_1.bitbadges.bitbadgeschain.badges.Balance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get timeRange() {
            return pb_1.Message.getWrapperField(this, dependency_2.bitbadges.bitbadgeschain.badges.IdRange, 2) as dependency_2.bitbadges.bitbadgeschain.badges.IdRange;
        }
        set timeRange(value: dependency_2.bitbadges.bitbadgeschain.badges.IdRange) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        get has_timeRange() {
            return pb_1.Message.getField(this, 2) != null;
        }
        get uri() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get numClaimsPerAddress() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set numClaimsPerAddress(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get incrementIdsBy() {
            return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
        }
        set incrementIdsBy(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get currentClaimAmounts() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.bitbadges.bitbadgeschain.badges.Balance, 6) as dependency_1.bitbadges.bitbadgeschain.badges.Balance[];
        }
        set currentClaimAmounts(value: dependency_1.bitbadges.bitbadgeschain.badges.Balance[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get challenges() {
            return pb_1.Message.getRepeatedWrapperField(this, Challenge, 7) as Challenge[];
        }
        set challenges(value: Challenge[]) {
            pb_1.Message.setRepeatedWrapperField(this, 7, value);
        }
        static fromObject(data: {
            undistributedBalances?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
            timeRange?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>;
            uri?: string;
            numClaimsPerAddress?: string;
            incrementIdsBy?: string;
            currentClaimAmounts?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
            challenges?: ReturnType<typeof Challenge.prototype.toObject>[];
        }): Claim {
            const message = new Claim({});
            if (data.undistributedBalances != null) {
                message.undistributedBalances = data.undistributedBalances.map(item => dependency_1.bitbadges.bitbadgeschain.badges.Balance.fromObject(item));
            }
            if (data.timeRange != null) {
                message.timeRange = dependency_2.bitbadges.bitbadgeschain.badges.IdRange.fromObject(data.timeRange);
            }
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.numClaimsPerAddress != null) {
                message.numClaimsPerAddress = data.numClaimsPerAddress;
            }
            if (data.incrementIdsBy != null) {
                message.incrementIdsBy = data.incrementIdsBy;
            }
            if (data.currentClaimAmounts != null) {
                message.currentClaimAmounts = data.currentClaimAmounts.map(item => dependency_1.bitbadges.bitbadgeschain.badges.Balance.fromObject(item));
            }
            if (data.challenges != null) {
                message.challenges = data.challenges.map(item => Challenge.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                undistributedBalances?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
                timeRange?: ReturnType<typeof dependency_2.bitbadges.bitbadgeschain.badges.IdRange.prototype.toObject>;
                uri?: string;
                numClaimsPerAddress?: string;
                incrementIdsBy?: string;
                currentClaimAmounts?: ReturnType<typeof dependency_1.bitbadges.bitbadgeschain.badges.Balance.prototype.toObject>[];
                challenges?: ReturnType<typeof Challenge.prototype.toObject>[];
            } = {};
            if (this.undistributedBalances != null) {
                data.undistributedBalances = this.undistributedBalances.map((item: dependency_1.bitbadges.bitbadgeschain.badges.Balance) => item.toObject());
            }
            if (this.timeRange != null) {
                data.timeRange = this.timeRange.toObject();
            }
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.numClaimsPerAddress != null) {
                data.numClaimsPerAddress = this.numClaimsPerAddress;
            }
            if (this.incrementIdsBy != null) {
                data.incrementIdsBy = this.incrementIdsBy;
            }
            if (this.currentClaimAmounts != null) {
                data.currentClaimAmounts = this.currentClaimAmounts.map((item: dependency_1.bitbadges.bitbadgeschain.badges.Balance) => item.toObject());
            }
            if (this.challenges != null) {
                data.challenges = this.challenges.map((item: Challenge) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.undistributedBalances.length)
                writer.writeRepeatedMessage(1, this.undistributedBalances, (item: dependency_1.bitbadges.bitbadgeschain.badges.Balance) => item.serialize(writer));
            if (this.has_timeRange)
                writer.writeMessage(2, this.timeRange, () => this.timeRange.serialize(writer));
            if (this.uri.length)
                writer.writeString(3, this.uri);
            if (this.numClaimsPerAddress.length)
                writer.writeString(4, this.numClaimsPerAddress);
            if (this.incrementIdsBy.length)
                writer.writeString(5, this.incrementIdsBy);
            if (this.currentClaimAmounts.length)
                writer.writeRepeatedMessage(6, this.currentClaimAmounts, (item: dependency_1.bitbadges.bitbadgeschain.badges.Balance) => item.serialize(writer));
            if (this.challenges.length)
                writer.writeRepeatedMessage(7, this.challenges, (item: Challenge) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Claim {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Claim();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.undistributedBalances, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_1.bitbadges.bitbadgeschain.badges.Balance.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.Balance));
                        break;
                    case 2:
                        reader.readMessage(message.timeRange, () => message.timeRange = dependency_2.bitbadges.bitbadgeschain.badges.IdRange.deserialize(reader));
                        break;
                    case 3:
                        message.uri = reader.readString();
                        break;
                    case 4:
                        message.numClaimsPerAddress = reader.readString();
                        break;
                    case 5:
                        message.incrementIdsBy = reader.readString();
                        break;
                    case 6:
                        reader.readMessage(message.currentClaimAmounts, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.bitbadges.bitbadgeschain.badges.Balance.deserialize(reader), dependency_1.bitbadges.bitbadgeschain.badges.Balance));
                        break;
                    case 7:
                        reader.readMessage(message.challenges, () => pb_1.Message.addToRepeatedWrapperField(message, 7, Challenge.deserialize(reader), Challenge));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Claim {
            return Claim.deserialize(bytes);
        }
    }
}
