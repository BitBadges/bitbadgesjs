// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: cosmwasm/wasm/v1/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../cosmos/base/v1beta1/coin";
import * as dependency_2 from "./../../../gogoproto/gogo";
import * as dependency_3 from "./types";
import * as pb_1 from "google-protobuf";
export namespace cosmwasm.wasm.v1 {
    export class MsgStoreCode extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            wasm_byte_code?: Uint8Array;
            instantiate_permission?: dependency_3.cosmwasm.wasm.v1.AccessConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("wasm_byte_code" in data && data.wasm_byte_code != undefined) {
                    this.wasm_byte_code = data.wasm_byte_code;
                }
                if ("instantiate_permission" in data && data.instantiate_permission != undefined) {
                    this.instantiate_permission = data.instantiate_permission;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get wasm_byte_code() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set wasm_byte_code(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        get instantiate_permission() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmwasm.wasm.v1.AccessConfig, 5) as dependency_3.cosmwasm.wasm.v1.AccessConfig;
        }
        set instantiate_permission(value: dependency_3.cosmwasm.wasm.v1.AccessConfig) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_instantiate_permission() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            sender?: string;
            wasm_byte_code?: Uint8Array;
            instantiate_permission?: ReturnType<typeof dependency_3.cosmwasm.wasm.v1.AccessConfig.prototype.toObject>;
        }): MsgStoreCode {
            const message = new MsgStoreCode({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.wasm_byte_code != null) {
                message.wasm_byte_code = data.wasm_byte_code;
            }
            if (data.instantiate_permission != null) {
                message.instantiate_permission = dependency_3.cosmwasm.wasm.v1.AccessConfig.fromObject(data.instantiate_permission);
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                wasm_byte_code?: Uint8Array;
                instantiate_permission?: ReturnType<typeof dependency_3.cosmwasm.wasm.v1.AccessConfig.prototype.toObject>;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.wasm_byte_code != null) {
                data.wasm_byte_code = this.wasm_byte_code;
            }
            if (this.instantiate_permission != null) {
                data.instantiate_permission = this.instantiate_permission.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.wasm_byte_code.length)
                writer.writeBytes(2, this.wasm_byte_code);
            if (this.has_instantiate_permission)
                writer.writeMessage(5, this.instantiate_permission, () => this.instantiate_permission.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgStoreCode {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgStoreCode();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.wasm_byte_code = reader.readBytes();
                        break;
                    case 5:
                        reader.readMessage(message.instantiate_permission, () => message.instantiate_permission = dependency_3.cosmwasm.wasm.v1.AccessConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgStoreCode {
            return MsgStoreCode.deserialize(bytes);
        }
    }
    export class MsgStoreCodeResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code_id?: number;
            checksum?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code_id" in data && data.code_id != undefined) {
                    this.code_id = data.code_id;
                }
                if ("checksum" in data && data.checksum != undefined) {
                    this.checksum = data.checksum;
                }
            }
        }
        get code_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get checksum() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set checksum(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code_id?: number;
            checksum?: Uint8Array;
        }): MsgStoreCodeResponse {
            const message = new MsgStoreCodeResponse({});
            if (data.code_id != null) {
                message.code_id = data.code_id;
            }
            if (data.checksum != null) {
                message.checksum = data.checksum;
            }
            return message;
        }
        toObject() {
            const data: {
                code_id?: number;
                checksum?: Uint8Array;
            } = {};
            if (this.code_id != null) {
                data.code_id = this.code_id;
            }
            if (this.checksum != null) {
                data.checksum = this.checksum;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code_id != 0)
                writer.writeUint64(1, this.code_id);
            if (this.checksum.length)
                writer.writeBytes(2, this.checksum);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgStoreCodeResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgStoreCodeResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code_id = reader.readUint64();
                        break;
                    case 2:
                        message.checksum = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgStoreCodeResponse {
            return MsgStoreCodeResponse.deserialize(bytes);
        }
    }
    export class MsgInstantiateContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            admin?: string;
            code_id?: number;
            label?: string;
            msg?: Uint8Array;
            funds?: dependency_1.cosmos.base.v1beta1.Coin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("code_id" in data && data.code_id != undefined) {
                    this.code_id = data.code_id;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("funds" in data && data.funds != undefined) {
                    this.funds = data.funds;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get code_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set code_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array()) as Uint8Array;
        }
        set msg(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get funds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 6) as dependency_1.cosmos.base.v1beta1.Coin[];
        }
        set funds(value: dependency_1.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        static fromObject(data: {
            sender?: string;
            admin?: string;
            code_id?: number;
            label?: string;
            msg?: Uint8Array;
            funds?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>[];
        }): MsgInstantiateContract {
            const message = new MsgInstantiateContract({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.code_id != null) {
                message.code_id = data.code_id;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            if (data.funds != null) {
                message.funds = data.funds.map(item => dependency_1.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                admin?: string;
                code_id?: number;
                label?: string;
                msg?: Uint8Array;
                funds?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.code_id != null) {
                data.code_id = this.code_id;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            if (this.funds != null) {
                data.funds = this.funds.map((item: dependency_1.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.admin.length)
                writer.writeString(2, this.admin);
            if (this.code_id != 0)
                writer.writeUint64(3, this.code_id);
            if (this.label.length)
                writer.writeString(4, this.label);
            if (this.msg.length)
                writer.writeBytes(5, this.msg);
            if (this.funds.length)
                writer.writeRepeatedMessage(6, this.funds, (item: dependency_1.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgInstantiateContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgInstantiateContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.admin = reader.readString();
                        break;
                    case 3:
                        message.code_id = reader.readUint64();
                        break;
                    case 4:
                        message.label = reader.readString();
                        break;
                    case 5:
                        message.msg = reader.readBytes();
                        break;
                    case 6:
                        reader.readMessage(message.funds, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_1.cosmos.base.v1beta1.Coin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgInstantiateContract {
            return MsgInstantiateContract.deserialize(bytes);
        }
    }
    export class MsgInstantiateContract2 extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            admin?: string;
            code_id?: number;
            label?: string;
            msg?: Uint8Array;
            funds?: dependency_1.cosmos.base.v1beta1.Coin[];
            salt?: Uint8Array;
            fix_msg?: boolean;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [6], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("code_id" in data && data.code_id != undefined) {
                    this.code_id = data.code_id;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("funds" in data && data.funds != undefined) {
                    this.funds = data.funds;
                }
                if ("salt" in data && data.salt != undefined) {
                    this.salt = data.salt;
                }
                if ("fix_msg" in data && data.fix_msg != undefined) {
                    this.fix_msg = data.fix_msg;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get code_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set code_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 5, new Uint8Array()) as Uint8Array;
        }
        set msg(value: Uint8Array) {
            pb_1.Message.setField(this, 5, value);
        }
        get funds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 6) as dependency_1.cosmos.base.v1beta1.Coin[];
        }
        set funds(value: dependency_1.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 6, value);
        }
        get salt() {
            return pb_1.Message.getFieldWithDefault(this, 7, new Uint8Array()) as Uint8Array;
        }
        set salt(value: Uint8Array) {
            pb_1.Message.setField(this, 7, value);
        }
        get fix_msg() {
            return pb_1.Message.getFieldWithDefault(this, 8, false) as boolean;
        }
        set fix_msg(value: boolean) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            sender?: string;
            admin?: string;
            code_id?: number;
            label?: string;
            msg?: Uint8Array;
            funds?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            salt?: Uint8Array;
            fix_msg?: boolean;
        }): MsgInstantiateContract2 {
            const message = new MsgInstantiateContract2({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.code_id != null) {
                message.code_id = data.code_id;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            if (data.funds != null) {
                message.funds = data.funds.map(item => dependency_1.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            if (data.salt != null) {
                message.salt = data.salt;
            }
            if (data.fix_msg != null) {
                message.fix_msg = data.fix_msg;
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                admin?: string;
                code_id?: number;
                label?: string;
                msg?: Uint8Array;
                funds?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>[];
                salt?: Uint8Array;
                fix_msg?: boolean;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.code_id != null) {
                data.code_id = this.code_id;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            if (this.funds != null) {
                data.funds = this.funds.map((item: dependency_1.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            if (this.salt != null) {
                data.salt = this.salt;
            }
            if (this.fix_msg != null) {
                data.fix_msg = this.fix_msg;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.admin.length)
                writer.writeString(2, this.admin);
            if (this.code_id != 0)
                writer.writeUint64(3, this.code_id);
            if (this.label.length)
                writer.writeString(4, this.label);
            if (this.msg.length)
                writer.writeBytes(5, this.msg);
            if (this.funds.length)
                writer.writeRepeatedMessage(6, this.funds, (item: dependency_1.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (this.salt.length)
                writer.writeBytes(7, this.salt);
            if (this.fix_msg != false)
                writer.writeBool(8, this.fix_msg);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgInstantiateContract2 {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgInstantiateContract2();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.admin = reader.readString();
                        break;
                    case 3:
                        message.code_id = reader.readUint64();
                        break;
                    case 4:
                        message.label = reader.readString();
                        break;
                    case 5:
                        message.msg = reader.readBytes();
                        break;
                    case 6:
                        reader.readMessage(message.funds, () => pb_1.Message.addToRepeatedWrapperField(message, 6, dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_1.cosmos.base.v1beta1.Coin));
                        break;
                    case 7:
                        message.salt = reader.readBytes();
                        break;
                    case 8:
                        message.fix_msg = reader.readBool();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgInstantiateContract2 {
            return MsgInstantiateContract2.deserialize(bytes);
        }
    }
    export class MsgInstantiateContractResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            address?: string;
            data?: Uint8Array;
        }): MsgInstantiateContractResponse {
            const message = new MsgInstantiateContractResponse({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                data?: Uint8Array;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.data.length)
                writer.writeBytes(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgInstantiateContractResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgInstantiateContractResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgInstantiateContractResponse {
            return MsgInstantiateContractResponse.deserialize(bytes);
        }
    }
    export class MsgInstantiateContract2Response extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            address?: string;
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            address?: string;
            data?: Uint8Array;
        }): MsgInstantiateContract2Response {
            const message = new MsgInstantiateContract2Response({});
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                address?: string;
                data?: Uint8Array;
            } = {};
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.address.length)
                writer.writeString(1, this.address);
            if (this.data.length)
                writer.writeBytes(2, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgInstantiateContract2Response {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgInstantiateContract2Response();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.address = reader.readString();
                        break;
                    case 2:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgInstantiateContract2Response {
            return MsgInstantiateContract2Response.deserialize(bytes);
        }
    }
    export class MsgExecuteContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            contract?: string;
            msg?: Uint8Array;
            funds?: dependency_1.cosmos.base.v1beta1.Coin[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [5], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("funds" in data && data.funds != undefined) {
                    this.funds = data.funds;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 3, new Uint8Array()) as Uint8Array;
        }
        set msg(value: Uint8Array) {
            pb_1.Message.setField(this, 3, value);
        }
        get funds() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_1.cosmos.base.v1beta1.Coin, 5) as dependency_1.cosmos.base.v1beta1.Coin[];
        }
        set funds(value: dependency_1.cosmos.base.v1beta1.Coin[]) {
            pb_1.Message.setRepeatedWrapperField(this, 5, value);
        }
        static fromObject(data: {
            sender?: string;
            contract?: string;
            msg?: Uint8Array;
            funds?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>[];
        }): MsgExecuteContract {
            const message = new MsgExecuteContract({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.contract != null) {
                message.contract = data.contract;
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            if (data.funds != null) {
                message.funds = data.funds.map(item => dependency_1.cosmos.base.v1beta1.Coin.fromObject(item));
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                contract?: string;
                msg?: Uint8Array;
                funds?: ReturnType<typeof dependency_1.cosmos.base.v1beta1.Coin.prototype.toObject>[];
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.contract != null) {
                data.contract = this.contract;
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            if (this.funds != null) {
                data.funds = this.funds.map((item: dependency_1.cosmos.base.v1beta1.Coin) => item.toObject());
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.contract.length)
                writer.writeString(2, this.contract);
            if (this.msg.length)
                writer.writeBytes(3, this.msg);
            if (this.funds.length)
                writer.writeRepeatedMessage(5, this.funds, (item: dependency_1.cosmos.base.v1beta1.Coin) => item.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgExecuteContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgExecuteContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.contract = reader.readString();
                        break;
                    case 3:
                        message.msg = reader.readBytes();
                        break;
                    case 5:
                        reader.readMessage(message.funds, () => pb_1.Message.addToRepeatedWrapperField(message, 5, dependency_1.cosmos.base.v1beta1.Coin.deserialize(reader), dependency_1.cosmos.base.v1beta1.Coin));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgExecuteContract {
            return MsgExecuteContract.deserialize(bytes);
        }
    }
    export class MsgExecuteContractResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }): MsgExecuteContractResponse {
            const message = new MsgExecuteContractResponse({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgExecuteContractResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgExecuteContractResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgExecuteContractResponse {
            return MsgExecuteContractResponse.deserialize(bytes);
        }
    }
    export class MsgMigrateContract extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            contract?: string;
            code_id?: number;
            msg?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
                if ("code_id" in data && data.code_id != undefined) {
                    this.code_id = data.code_id;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get code_id() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set code_id(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array()) as Uint8Array;
        }
        set msg(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            sender?: string;
            contract?: string;
            code_id?: number;
            msg?: Uint8Array;
        }): MsgMigrateContract {
            const message = new MsgMigrateContract({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.contract != null) {
                message.contract = data.contract;
            }
            if (data.code_id != null) {
                message.code_id = data.code_id;
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                contract?: string;
                code_id?: number;
                msg?: Uint8Array;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.contract != null) {
                data.contract = this.contract;
            }
            if (this.code_id != null) {
                data.code_id = this.code_id;
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.contract.length)
                writer.writeString(2, this.contract);
            if (this.code_id != 0)
                writer.writeUint64(3, this.code_id);
            if (this.msg.length)
                writer.writeBytes(4, this.msg);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgMigrateContract {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgMigrateContract();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.contract = reader.readString();
                        break;
                    case 3:
                        message.code_id = reader.readUint64();
                        break;
                    case 4:
                        message.msg = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgMigrateContract {
            return MsgMigrateContract.deserialize(bytes);
        }
    }
    export class MsgMigrateContractResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }): MsgMigrateContractResponse {
            const message = new MsgMigrateContractResponse({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgMigrateContractResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgMigrateContractResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgMigrateContractResponse {
            return MsgMigrateContractResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateAdmin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            new_admin?: string;
            contract?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("new_admin" in data && data.new_admin != undefined) {
                    this.new_admin = data.new_admin;
                }
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get new_admin() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set new_admin(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get contract() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set contract(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sender?: string;
            new_admin?: string;
            contract?: string;
        }): MsgUpdateAdmin {
            const message = new MsgUpdateAdmin({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.new_admin != null) {
                message.new_admin = data.new_admin;
            }
            if (data.contract != null) {
                message.contract = data.contract;
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                new_admin?: string;
                contract?: string;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.new_admin != null) {
                data.new_admin = this.new_admin;
            }
            if (this.contract != null) {
                data.contract = this.contract;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.new_admin.length)
                writer.writeString(2, this.new_admin);
            if (this.contract.length)
                writer.writeString(3, this.contract);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateAdmin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateAdmin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.new_admin = reader.readString();
                        break;
                    case 3:
                        message.contract = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateAdmin {
            return MsgUpdateAdmin.deserialize(bytes);
        }
    }
    export class MsgUpdateAdminResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateAdminResponse {
            const message = new MsgUpdateAdminResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateAdminResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateAdminResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateAdminResponse {
            return MsgUpdateAdminResponse.deserialize(bytes);
        }
    }
    export class MsgClearAdmin extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            contract?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set contract(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            sender?: string;
            contract?: string;
        }): MsgClearAdmin {
            const message = new MsgClearAdmin({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.contract != null) {
                message.contract = data.contract;
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                contract?: string;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.contract != null) {
                data.contract = this.contract;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.contract.length)
                writer.writeString(3, this.contract);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgClearAdmin {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgClearAdmin();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 3:
                        message.contract = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgClearAdmin {
            return MsgClearAdmin.deserialize(bytes);
        }
    }
    export class MsgClearAdminResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgClearAdminResponse {
            const message = new MsgClearAdminResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgClearAdminResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgClearAdminResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgClearAdminResponse {
            return MsgClearAdminResponse.deserialize(bytes);
        }
    }
    export class MsgUpdateInstantiateConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            code_id?: number;
            new_instantiate_permission?: dependency_3.cosmwasm.wasm.v1.AccessConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("code_id" in data && data.code_id != undefined) {
                    this.code_id = data.code_id;
                }
                if ("new_instantiate_permission" in data && data.new_instantiate_permission != undefined) {
                    this.new_instantiate_permission = data.new_instantiate_permission;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get code_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get new_instantiate_permission() {
            return pb_1.Message.getWrapperField(this, dependency_3.cosmwasm.wasm.v1.AccessConfig, 3) as dependency_3.cosmwasm.wasm.v1.AccessConfig;
        }
        set new_instantiate_permission(value: dependency_3.cosmwasm.wasm.v1.AccessConfig) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_new_instantiate_permission() {
            return pb_1.Message.getField(this, 3) != null;
        }
        static fromObject(data: {
            sender?: string;
            code_id?: number;
            new_instantiate_permission?: ReturnType<typeof dependency_3.cosmwasm.wasm.v1.AccessConfig.prototype.toObject>;
        }): MsgUpdateInstantiateConfig {
            const message = new MsgUpdateInstantiateConfig({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.code_id != null) {
                message.code_id = data.code_id;
            }
            if (data.new_instantiate_permission != null) {
                message.new_instantiate_permission = dependency_3.cosmwasm.wasm.v1.AccessConfig.fromObject(data.new_instantiate_permission);
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                code_id?: number;
                new_instantiate_permission?: ReturnType<typeof dependency_3.cosmwasm.wasm.v1.AccessConfig.prototype.toObject>;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.code_id != null) {
                data.code_id = this.code_id;
            }
            if (this.new_instantiate_permission != null) {
                data.new_instantiate_permission = this.new_instantiate_permission.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.code_id != 0)
                writer.writeUint64(2, this.code_id);
            if (this.has_new_instantiate_permission)
                writer.writeMessage(3, this.new_instantiate_permission, () => this.new_instantiate_permission.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateInstantiateConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateInstantiateConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.code_id = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.new_instantiate_permission, () => message.new_instantiate_permission = dependency_3.cosmwasm.wasm.v1.AccessConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateInstantiateConfig {
            return MsgUpdateInstantiateConfig.deserialize(bytes);
        }
    }
    export class MsgUpdateInstantiateConfigResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}): MsgUpdateInstantiateConfigResponse {
            const message = new MsgUpdateInstantiateConfigResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgUpdateInstantiateConfigResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgUpdateInstantiateConfigResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgUpdateInstantiateConfigResponse {
            return MsgUpdateInstantiateConfigResponse.deserialize(bytes);
        }
    }
}
