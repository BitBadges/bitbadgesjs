// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: cosmwasm/wasm/v1/types.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../../cosmos_proto/cosmos";
import * as dependency_2 from "./../../../gogoproto/gogo";
import * as dependency_3 from "./../../../google/protobuf/any";
import * as pb_1 from "google-protobuf";
export namespace cosmwasm.wasm.v1 {
    export enum AccessType {
        ACCESS_TYPE_UNSPECIFIED = 0,
        ACCESS_TYPE_NOBODY = 1,
        ACCESS_TYPE_ONLY_ADDRESS = 2,
        ACCESS_TYPE_EVERYBODY = 3,
        ACCESS_TYPE_ANY_OF_ADDRESSES = 4
    }
    export enum ContractCodeHistoryOperationType {
        CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED = 0,
        CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT = 1,
        CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE = 2,
        CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS = 3
    }
    export class AccessTypeParam extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            value?: AccessType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 1, AccessType.ACCESS_TYPE_UNSPECIFIED) as AccessType;
        }
        set value(value: AccessType) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            value?: AccessType;
        }): AccessTypeParam {
            const message = new AccessTypeParam({});
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                value?: AccessType;
            } = {};
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.value != AccessType.ACCESS_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccessTypeParam {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccessTypeParam();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.value = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccessTypeParam {
            return AccessTypeParam.deserialize(bytes);
        }
    }
    export class AccessConfig extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            permission?: AccessType;
            address?: string;
            addresses?: string[];
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [3], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("permission" in data && data.permission != undefined) {
                    this.permission = data.permission;
                }
                if ("address" in data && data.address != undefined) {
                    this.address = data.address;
                }
                if ("addresses" in data && data.addresses != undefined) {
                    this.addresses = data.addresses;
                }
            }
        }
        get permission() {
            return pb_1.Message.getFieldWithDefault(this, 1, AccessType.ACCESS_TYPE_UNSPECIFIED) as AccessType;
        }
        set permission(value: AccessType) {
            pb_1.Message.setField(this, 1, value);
        }
        get address() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set address(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get addresses() {
            return pb_1.Message.getFieldWithDefault(this, 3, []) as string[];
        }
        set addresses(value: string[]) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            permission?: AccessType;
            address?: string;
            addresses?: string[];
        }): AccessConfig {
            const message = new AccessConfig({});
            if (data.permission != null) {
                message.permission = data.permission;
            }
            if (data.address != null) {
                message.address = data.address;
            }
            if (data.addresses != null) {
                message.addresses = data.addresses;
            }
            return message;
        }
        toObject() {
            const data: {
                permission?: AccessType;
                address?: string;
                addresses?: string[];
            } = {};
            if (this.permission != null) {
                data.permission = this.permission;
            }
            if (this.address != null) {
                data.address = this.address;
            }
            if (this.addresses != null) {
                data.addresses = this.addresses;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.permission != AccessType.ACCESS_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.permission);
            if (this.address.length)
                writer.writeString(2, this.address);
            if (this.addresses.length)
                writer.writeRepeatedString(3, this.addresses);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AccessConfig {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AccessConfig();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.permission = reader.readEnum();
                        break;
                    case 2:
                        message.address = reader.readString();
                        break;
                    case 3:
                        pb_1.Message.addToRepeatedField(message, 3, reader.readString());
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AccessConfig {
            return AccessConfig.deserialize(bytes);
        }
    }
    export class Params extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code_upload_access?: AccessConfig;
            instantiate_default_permission?: AccessType;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code_upload_access" in data && data.code_upload_access != undefined) {
                    this.code_upload_access = data.code_upload_access;
                }
                if ("instantiate_default_permission" in data && data.instantiate_default_permission != undefined) {
                    this.instantiate_default_permission = data.instantiate_default_permission;
                }
            }
        }
        get code_upload_access() {
            return pb_1.Message.getWrapperField(this, AccessConfig, 1) as AccessConfig;
        }
        set code_upload_access(value: AccessConfig) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_code_upload_access() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get instantiate_default_permission() {
            return pb_1.Message.getFieldWithDefault(this, 2, AccessType.ACCESS_TYPE_UNSPECIFIED) as AccessType;
        }
        set instantiate_default_permission(value: AccessType) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            code_upload_access?: ReturnType<typeof AccessConfig.prototype.toObject>;
            instantiate_default_permission?: AccessType;
        }): Params {
            const message = new Params({});
            if (data.code_upload_access != null) {
                message.code_upload_access = AccessConfig.fromObject(data.code_upload_access);
            }
            if (data.instantiate_default_permission != null) {
                message.instantiate_default_permission = data.instantiate_default_permission;
            }
            return message;
        }
        toObject() {
            const data: {
                code_upload_access?: ReturnType<typeof AccessConfig.prototype.toObject>;
                instantiate_default_permission?: AccessType;
            } = {};
            if (this.code_upload_access != null) {
                data.code_upload_access = this.code_upload_access.toObject();
            }
            if (this.instantiate_default_permission != null) {
                data.instantiate_default_permission = this.instantiate_default_permission;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_code_upload_access)
                writer.writeMessage(1, this.code_upload_access, () => this.code_upload_access.serialize(writer));
            if (this.instantiate_default_permission != AccessType.ACCESS_TYPE_UNSPECIFIED)
                writer.writeEnum(2, this.instantiate_default_permission);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Params {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.code_upload_access, () => message.code_upload_access = AccessConfig.deserialize(reader));
                        break;
                    case 2:
                        message.instantiate_default_permission = reader.readEnum();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Params {
            return Params.deserialize(bytes);
        }
    }
    export class CodeInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code_hash?: Uint8Array;
            creator?: string;
            instantiate_config?: AccessConfig;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code_hash" in data && data.code_hash != undefined) {
                    this.code_hash = data.code_hash;
                }
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("instantiate_config" in data && data.instantiate_config != undefined) {
                    this.instantiate_config = data.instantiate_config;
                }
            }
        }
        get code_hash() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
        }
        set code_hash(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get instantiate_config() {
            return pb_1.Message.getWrapperField(this, AccessConfig, 5) as AccessConfig;
        }
        set instantiate_config(value: AccessConfig) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_instantiate_config() {
            return pb_1.Message.getField(this, 5) != null;
        }
        static fromObject(data: {
            code_hash?: Uint8Array;
            creator?: string;
            instantiate_config?: ReturnType<typeof AccessConfig.prototype.toObject>;
        }): CodeInfo {
            const message = new CodeInfo({});
            if (data.code_hash != null) {
                message.code_hash = data.code_hash;
            }
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.instantiate_config != null) {
                message.instantiate_config = AccessConfig.fromObject(data.instantiate_config);
            }
            return message;
        }
        toObject() {
            const data: {
                code_hash?: Uint8Array;
                creator?: string;
                instantiate_config?: ReturnType<typeof AccessConfig.prototype.toObject>;
            } = {};
            if (this.code_hash != null) {
                data.code_hash = this.code_hash;
            }
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.instantiate_config != null) {
                data.instantiate_config = this.instantiate_config.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code_hash.length)
                writer.writeBytes(1, this.code_hash);
            if (this.creator.length)
                writer.writeString(2, this.creator);
            if (this.has_instantiate_config)
                writer.writeMessage(5, this.instantiate_config, () => this.instantiate_config.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): CodeInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new CodeInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code_hash = reader.readBytes();
                        break;
                    case 2:
                        message.creator = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.instantiate_config, () => message.instantiate_config = AccessConfig.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): CodeInfo {
            return CodeInfo.deserialize(bytes);
        }
    }
    export class ContractInfo extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            code_id?: number;
            creator?: string;
            admin?: string;
            label?: string;
            created?: AbsoluteTxPosition;
            ibc_port_id?: string;
            extension?: dependency_3.google.protobuf.Any;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("code_id" in data && data.code_id != undefined) {
                    this.code_id = data.code_id;
                }
                if ("creator" in data && data.creator != undefined) {
                    this.creator = data.creator;
                }
                if ("admin" in data && data.admin != undefined) {
                    this.admin = data.admin;
                }
                if ("label" in data && data.label != undefined) {
                    this.label = data.label;
                }
                if ("created" in data && data.created != undefined) {
                    this.created = data.created;
                }
                if ("ibc_port_id" in data && data.ibc_port_id != undefined) {
                    this.ibc_port_id = data.ibc_port_id;
                }
                if ("extension" in data && data.extension != undefined) {
                    this.extension = data.extension;
                }
            }
        }
        get code_id() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set code_id(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get creator() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set creator(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get admin() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set admin(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get label() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set label(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get created() {
            return pb_1.Message.getWrapperField(this, AbsoluteTxPosition, 5) as AbsoluteTxPosition;
        }
        set created(value: AbsoluteTxPosition) {
            pb_1.Message.setWrapperField(this, 5, value);
        }
        get has_created() {
            return pb_1.Message.getField(this, 5) != null;
        }
        get ibc_port_id() {
            return pb_1.Message.getFieldWithDefault(this, 6, "") as string;
        }
        set ibc_port_id(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get extension() {
            return pb_1.Message.getWrapperField(this, dependency_3.google.protobuf.Any, 7) as dependency_3.google.protobuf.Any;
        }
        set extension(value: dependency_3.google.protobuf.Any) {
            pb_1.Message.setWrapperField(this, 7, value);
        }
        get has_extension() {
            return pb_1.Message.getField(this, 7) != null;
        }
        static fromObject(data: {
            code_id?: number;
            creator?: string;
            admin?: string;
            label?: string;
            created?: ReturnType<typeof AbsoluteTxPosition.prototype.toObject>;
            ibc_port_id?: string;
            extension?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
        }): ContractInfo {
            const message = new ContractInfo({});
            if (data.code_id != null) {
                message.code_id = data.code_id;
            }
            if (data.creator != null) {
                message.creator = data.creator;
            }
            if (data.admin != null) {
                message.admin = data.admin;
            }
            if (data.label != null) {
                message.label = data.label;
            }
            if (data.created != null) {
                message.created = AbsoluteTxPosition.fromObject(data.created);
            }
            if (data.ibc_port_id != null) {
                message.ibc_port_id = data.ibc_port_id;
            }
            if (data.extension != null) {
                message.extension = dependency_3.google.protobuf.Any.fromObject(data.extension);
            }
            return message;
        }
        toObject() {
            const data: {
                code_id?: number;
                creator?: string;
                admin?: string;
                label?: string;
                created?: ReturnType<typeof AbsoluteTxPosition.prototype.toObject>;
                ibc_port_id?: string;
                extension?: ReturnType<typeof dependency_3.google.protobuf.Any.prototype.toObject>;
            } = {};
            if (this.code_id != null) {
                data.code_id = this.code_id;
            }
            if (this.creator != null) {
                data.creator = this.creator;
            }
            if (this.admin != null) {
                data.admin = this.admin;
            }
            if (this.label != null) {
                data.label = this.label;
            }
            if (this.created != null) {
                data.created = this.created.toObject();
            }
            if (this.ibc_port_id != null) {
                data.ibc_port_id = this.ibc_port_id;
            }
            if (this.extension != null) {
                data.extension = this.extension.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.code_id != 0)
                writer.writeUint64(1, this.code_id);
            if (this.creator.length)
                writer.writeString(2, this.creator);
            if (this.admin.length)
                writer.writeString(3, this.admin);
            if (this.label.length)
                writer.writeString(4, this.label);
            if (this.has_created)
                writer.writeMessage(5, this.created, () => this.created.serialize(writer));
            if (this.ibc_port_id.length)
                writer.writeString(6, this.ibc_port_id);
            if (this.has_extension)
                writer.writeMessage(7, this.extension, () => this.extension.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractInfo {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractInfo();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.code_id = reader.readUint64();
                        break;
                    case 2:
                        message.creator = reader.readString();
                        break;
                    case 3:
                        message.admin = reader.readString();
                        break;
                    case 4:
                        message.label = reader.readString();
                        break;
                    case 5:
                        reader.readMessage(message.created, () => message.created = AbsoluteTxPosition.deserialize(reader));
                        break;
                    case 6:
                        message.ibc_port_id = reader.readString();
                        break;
                    case 7:
                        reader.readMessage(message.extension, () => message.extension = dependency_3.google.protobuf.Any.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractInfo {
            return ContractInfo.deserialize(bytes);
        }
    }
    export class ContractCodeHistoryEntry extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            operation?: ContractCodeHistoryOperationType;
            code_id?: number;
            updated?: AbsoluteTxPosition;
            msg?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("operation" in data && data.operation != undefined) {
                    this.operation = data.operation;
                }
                if ("code_id" in data && data.code_id != undefined) {
                    this.code_id = data.code_id;
                }
                if ("updated" in data && data.updated != undefined) {
                    this.updated = data.updated;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
            }
        }
        get operation() {
            return pb_1.Message.getFieldWithDefault(this, 1, ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED) as ContractCodeHistoryOperationType;
        }
        set operation(value: ContractCodeHistoryOperationType) {
            pb_1.Message.setField(this, 1, value);
        }
        get code_id() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set code_id(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get updated() {
            return pb_1.Message.getWrapperField(this, AbsoluteTxPosition, 3) as AbsoluteTxPosition;
        }
        set updated(value: AbsoluteTxPosition) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        get has_updated() {
            return pb_1.Message.getField(this, 3) != null;
        }
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 4, new Uint8Array()) as Uint8Array;
        }
        set msg(value: Uint8Array) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            operation?: ContractCodeHistoryOperationType;
            code_id?: number;
            updated?: ReturnType<typeof AbsoluteTxPosition.prototype.toObject>;
            msg?: Uint8Array;
        }): ContractCodeHistoryEntry {
            const message = new ContractCodeHistoryEntry({});
            if (data.operation != null) {
                message.operation = data.operation;
            }
            if (data.code_id != null) {
                message.code_id = data.code_id;
            }
            if (data.updated != null) {
                message.updated = AbsoluteTxPosition.fromObject(data.updated);
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            return message;
        }
        toObject() {
            const data: {
                operation?: ContractCodeHistoryOperationType;
                code_id?: number;
                updated?: ReturnType<typeof AbsoluteTxPosition.prototype.toObject>;
                msg?: Uint8Array;
            } = {};
            if (this.operation != null) {
                data.operation = this.operation;
            }
            if (this.code_id != null) {
                data.code_id = this.code_id;
            }
            if (this.updated != null) {
                data.updated = this.updated.toObject();
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.operation != ContractCodeHistoryOperationType.CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED)
                writer.writeEnum(1, this.operation);
            if (this.code_id != 0)
                writer.writeUint64(2, this.code_id);
            if (this.has_updated)
                writer.writeMessage(3, this.updated, () => this.updated.serialize(writer));
            if (this.msg.length)
                writer.writeBytes(4, this.msg);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): ContractCodeHistoryEntry {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new ContractCodeHistoryEntry();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.operation = reader.readEnum();
                        break;
                    case 2:
                        message.code_id = reader.readUint64();
                        break;
                    case 3:
                        reader.readMessage(message.updated, () => message.updated = AbsoluteTxPosition.deserialize(reader));
                        break;
                    case 4:
                        message.msg = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): ContractCodeHistoryEntry {
            return ContractCodeHistoryEntry.deserialize(bytes);
        }
    }
    export class AbsoluteTxPosition extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            block_height?: number;
            tx_index?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("block_height" in data && data.block_height != undefined) {
                    this.block_height = data.block_height;
                }
                if ("tx_index" in data && data.tx_index != undefined) {
                    this.tx_index = data.tx_index;
                }
            }
        }
        get block_height() {
            return pb_1.Message.getFieldWithDefault(this, 1, 0) as number;
        }
        set block_height(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        get tx_index() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set tx_index(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            block_height?: number;
            tx_index?: number;
        }): AbsoluteTxPosition {
            const message = new AbsoluteTxPosition({});
            if (data.block_height != null) {
                message.block_height = data.block_height;
            }
            if (data.tx_index != null) {
                message.tx_index = data.tx_index;
            }
            return message;
        }
        toObject() {
            const data: {
                block_height?: number;
                tx_index?: number;
            } = {};
            if (this.block_height != null) {
                data.block_height = this.block_height;
            }
            if (this.tx_index != null) {
                data.tx_index = this.tx_index;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.block_height != 0)
                writer.writeUint64(1, this.block_height);
            if (this.tx_index != 0)
                writer.writeUint64(2, this.tx_index);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): AbsoluteTxPosition {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new AbsoluteTxPosition();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.block_height = reader.readUint64();
                        break;
                    case 2:
                        message.tx_index = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): AbsoluteTxPosition {
            return AbsoluteTxPosition.deserialize(bytes);
        }
    }
    export class Model extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            key?: Uint8Array;
            value?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("key" in data && data.key != undefined) {
                    this.key = data.key;
                }
                if ("value" in data && data.value != undefined) {
                    this.value = data.value;
                }
            }
        }
        get key() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
        }
        set key(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        get value() {
            return pb_1.Message.getFieldWithDefault(this, 2, new Uint8Array()) as Uint8Array;
        }
        set value(value: Uint8Array) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            key?: Uint8Array;
            value?: Uint8Array;
        }): Model {
            const message = new Model({});
            if (data.key != null) {
                message.key = data.key;
            }
            if (data.value != null) {
                message.value = data.value;
            }
            return message;
        }
        toObject() {
            const data: {
                key?: Uint8Array;
                value?: Uint8Array;
            } = {};
            if (this.key != null) {
                data.key = this.key;
            }
            if (this.value != null) {
                data.value = this.value;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.key.length)
                writer.writeBytes(1, this.key);
            if (this.value.length)
                writer.writeBytes(2, this.value);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Model {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Model();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.key = reader.readBytes();
                        break;
                    case 2:
                        message.value = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Model {
            return Model.deserialize(bytes);
        }
    }
}
