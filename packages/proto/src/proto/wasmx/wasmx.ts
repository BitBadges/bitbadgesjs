// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: wasmx/wasmx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace wasmx {
    export class Params extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            is_execution_enabled?: boolean;
            max_begin_block_total_gas?: number;
            max_contract_gas_limit?: number;
            min_gas_price?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("is_execution_enabled" in data && data.is_execution_enabled != undefined) {
                    this.is_execution_enabled = data.is_execution_enabled;
                }
                if ("max_begin_block_total_gas" in data && data.max_begin_block_total_gas != undefined) {
                    this.max_begin_block_total_gas = data.max_begin_block_total_gas;
                }
                if ("max_contract_gas_limit" in data && data.max_contract_gas_limit != undefined) {
                    this.max_contract_gas_limit = data.max_contract_gas_limit;
                }
                if ("min_gas_price" in data && data.min_gas_price != undefined) {
                    this.min_gas_price = data.min_gas_price;
                }
            }
        }
        get is_execution_enabled() {
            return pb_1.Message.getFieldWithDefault(this, 1, false) as boolean;
        }
        set is_execution_enabled(value: boolean) {
            pb_1.Message.setField(this, 1, value);
        }
        get max_begin_block_total_gas() {
            return pb_1.Message.getFieldWithDefault(this, 2, 0) as number;
        }
        set max_begin_block_total_gas(value: number) {
            pb_1.Message.setField(this, 2, value);
        }
        get max_contract_gas_limit() {
            return pb_1.Message.getFieldWithDefault(this, 3, 0) as number;
        }
        set max_contract_gas_limit(value: number) {
            pb_1.Message.setField(this, 3, value);
        }
        get min_gas_price() {
            return pb_1.Message.getFieldWithDefault(this, 4, 0) as number;
        }
        set min_gas_price(value: number) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            is_execution_enabled?: boolean;
            max_begin_block_total_gas?: number;
            max_contract_gas_limit?: number;
            min_gas_price?: number;
        }): Params {
            const message = new Params({});
            if (data.is_execution_enabled != null) {
                message.is_execution_enabled = data.is_execution_enabled;
            }
            if (data.max_begin_block_total_gas != null) {
                message.max_begin_block_total_gas = data.max_begin_block_total_gas;
            }
            if (data.max_contract_gas_limit != null) {
                message.max_contract_gas_limit = data.max_contract_gas_limit;
            }
            if (data.min_gas_price != null) {
                message.min_gas_price = data.min_gas_price;
            }
            return message;
        }
        toObject() {
            const data: {
                is_execution_enabled?: boolean;
                max_begin_block_total_gas?: number;
                max_contract_gas_limit?: number;
                min_gas_price?: number;
            } = {};
            if (this.is_execution_enabled != null) {
                data.is_execution_enabled = this.is_execution_enabled;
            }
            if (this.max_begin_block_total_gas != null) {
                data.max_begin_block_total_gas = this.max_begin_block_total_gas;
            }
            if (this.max_contract_gas_limit != null) {
                data.max_contract_gas_limit = this.max_contract_gas_limit;
            }
            if (this.min_gas_price != null) {
                data.min_gas_price = this.min_gas_price;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.is_execution_enabled != false)
                writer.writeBool(1, this.is_execution_enabled);
            if (this.max_begin_block_total_gas != 0)
                writer.writeUint64(2, this.max_begin_block_total_gas);
            if (this.max_contract_gas_limit != 0)
                writer.writeUint64(3, this.max_contract_gas_limit);
            if (this.min_gas_price != 0)
                writer.writeUint64(4, this.min_gas_price);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): Params {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new Params();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.is_execution_enabled = reader.readBool();
                        break;
                    case 2:
                        message.max_begin_block_total_gas = reader.readUint64();
                        break;
                    case 3:
                        message.max_contract_gas_limit = reader.readUint64();
                        break;
                    case 4:
                        message.min_gas_price = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): Params {
            return Params.deserialize(bytes);
        }
    }
}
