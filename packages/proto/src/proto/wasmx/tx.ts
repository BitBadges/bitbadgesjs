// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: wasmx/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
export namespace wasmx {
    export class MsgExecuteContractCompat extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            sender?: string;
            contract?: string;
            msg?: string;
            funds?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("contract" in data && data.contract != undefined) {
                    this.contract = data.contract;
                }
                if ("msg" in data && data.msg != undefined) {
                    this.msg = data.msg;
                }
                if ("funds" in data && data.funds != undefined) {
                    this.funds = data.funds;
                }
            }
        }
        get sender() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get contract() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set contract(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get msg() {
            return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
        }
        set msg(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get funds() {
            return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
        }
        set funds(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        static fromObject(data: {
            sender?: string;
            contract?: string;
            msg?: string;
            funds?: string;
        }): MsgExecuteContractCompat {
            const message = new MsgExecuteContractCompat({});
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.contract != null) {
                message.contract = data.contract;
            }
            if (data.msg != null) {
                message.msg = data.msg;
            }
            if (data.funds != null) {
                message.funds = data.funds;
            }
            return message;
        }
        toObject() {
            const data: {
                sender?: string;
                contract?: string;
                msg?: string;
                funds?: string;
            } = {};
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.contract != null) {
                data.contract = this.contract;
            }
            if (this.msg != null) {
                data.msg = this.msg;
            }
            if (this.funds != null) {
                data.funds = this.funds;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.sender.length)
                writer.writeString(1, this.sender);
            if (this.contract.length)
                writer.writeString(2, this.contract);
            if (this.msg.length)
                writer.writeString(3, this.msg);
            if (this.funds.length)
                writer.writeString(4, this.funds);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgExecuteContractCompat {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgExecuteContractCompat();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.sender = reader.readString();
                        break;
                    case 2:
                        message.contract = reader.readString();
                        break;
                    case 3:
                        message.msg = reader.readString();
                        break;
                    case 4:
                        message.funds = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgExecuteContractCompat {
            return MsgExecuteContractCompat.deserialize(bytes);
        }
    }
    export class MsgExecuteContractCompatResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            data?: Uint8Array;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get data() {
            return pb_1.Message.getFieldWithDefault(this, 1, new Uint8Array()) as Uint8Array;
        }
        set data(value: Uint8Array) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            data?: Uint8Array;
        }): MsgExecuteContractCompatResponse {
            const message = new MsgExecuteContractCompatResponse({});
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                data?: Uint8Array;
            } = {};
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.data.length)
                writer.writeBytes(1, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgExecuteContractCompatResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgExecuteContractCompatResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.data = reader.readBytes();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgExecuteContractCompatResponse {
            return MsgExecuteContractCompatResponse.deserialize(bytes);
        }
    }
}
