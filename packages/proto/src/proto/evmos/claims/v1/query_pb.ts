// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file evmos/claims/v1/query.proto (package evmos.claims.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./genesis_pb.js";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { Claim, ClaimsRecordAddress } from "./claims_pb.js";

/**
 * QueryTotalUnclaimedRequest is the request type for the Query/TotalUnclaimed
 * RPC method.
 *
 * @generated from message evmos.claims.v1.QueryTotalUnclaimedRequest
 */
export class QueryTotalUnclaimedRequest extends Message<QueryTotalUnclaimedRequest> {
  constructor(data?: PartialMessage<QueryTotalUnclaimedRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.QueryTotalUnclaimedRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalUnclaimedRequest {
    return new QueryTotalUnclaimedRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalUnclaimedRequest {
    return new QueryTotalUnclaimedRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalUnclaimedRequest {
    return new QueryTotalUnclaimedRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalUnclaimedRequest | PlainMessage<QueryTotalUnclaimedRequest> | undefined, b: QueryTotalUnclaimedRequest | PlainMessage<QueryTotalUnclaimedRequest> | undefined): boolean {
    return proto3.util.equals(QueryTotalUnclaimedRequest, a, b);
  }
}

/**
 * QueryTotalUnclaimedResponse is the response type for the Query/TotalUnclaimed
 * RPC method.
 *
 * @generated from message evmos.claims.v1.QueryTotalUnclaimedResponse
 */
export class QueryTotalUnclaimedResponse extends Message<QueryTotalUnclaimedResponse> {
  /**
   * coins defines the unclaimed coins
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 1;
   */
  coins: Coin[] = [];

  constructor(data?: PartialMessage<QueryTotalUnclaimedResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.QueryTotalUnclaimedResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coins", kind: "message", T: Coin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryTotalUnclaimedResponse {
    return new QueryTotalUnclaimedResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryTotalUnclaimedResponse {
    return new QueryTotalUnclaimedResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryTotalUnclaimedResponse {
    return new QueryTotalUnclaimedResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryTotalUnclaimedResponse | PlainMessage<QueryTotalUnclaimedResponse> | undefined, b: QueryTotalUnclaimedResponse | PlainMessage<QueryTotalUnclaimedResponse> | undefined): boolean {
    return proto3.util.equals(QueryTotalUnclaimedResponse, a, b);
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message evmos.claims.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message evmos.claims.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: evmos.claims.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryClaimsRecordsRequest is the request type for the Query/ClaimsRecords RPC
 * method.
 *
 * @generated from message evmos.claims.v1.QueryClaimsRecordsRequest
 */
export class QueryClaimsRecordsRequest extends Message<QueryClaimsRecordsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryClaimsRecordsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.QueryClaimsRecordsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimsRecordsRequest {
    return new QueryClaimsRecordsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimsRecordsRequest {
    return new QueryClaimsRecordsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimsRecordsRequest {
    return new QueryClaimsRecordsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClaimsRecordsRequest | PlainMessage<QueryClaimsRecordsRequest> | undefined, b: QueryClaimsRecordsRequest | PlainMessage<QueryClaimsRecordsRequest> | undefined): boolean {
    return proto3.util.equals(QueryClaimsRecordsRequest, a, b);
  }
}

/**
 * QueryClaimsRecordsResponse is the response type for the Query/ClaimsRecords
 * RPC method.
 *
 * @generated from message evmos.claims.v1.QueryClaimsRecordsResponse
 */
export class QueryClaimsRecordsResponse extends Message<QueryClaimsRecordsResponse> {
  /**
   * claims defines all claims records
   *
   * @generated from field: repeated evmos.claims.v1.ClaimsRecordAddress claims = 1;
   */
  claims: ClaimsRecordAddress[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryClaimsRecordsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.QueryClaimsRecordsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "claims", kind: "message", T: ClaimsRecordAddress, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimsRecordsResponse {
    return new QueryClaimsRecordsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimsRecordsResponse {
    return new QueryClaimsRecordsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimsRecordsResponse {
    return new QueryClaimsRecordsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClaimsRecordsResponse | PlainMessage<QueryClaimsRecordsResponse> | undefined, b: QueryClaimsRecordsResponse | PlainMessage<QueryClaimsRecordsResponse> | undefined): boolean {
    return proto3.util.equals(QueryClaimsRecordsResponse, a, b);
  }
}

/**
 * QueryClaimsRecordRequest is the request type for the Query/ClaimsRecord RPC
 * method.
 *
 * @generated from message evmos.claims.v1.QueryClaimsRecordRequest
 */
export class QueryClaimsRecordRequest extends Message<QueryClaimsRecordRequest> {
  /**
   * address defines the user to query claims record for
   *
   * @generated from field: string address = 1;
   */
  address = "";

  constructor(data?: PartialMessage<QueryClaimsRecordRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.QueryClaimsRecordRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimsRecordRequest {
    return new QueryClaimsRecordRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimsRecordRequest {
    return new QueryClaimsRecordRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimsRecordRequest {
    return new QueryClaimsRecordRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClaimsRecordRequest | PlainMessage<QueryClaimsRecordRequest> | undefined, b: QueryClaimsRecordRequest | PlainMessage<QueryClaimsRecordRequest> | undefined): boolean {
    return proto3.util.equals(QueryClaimsRecordRequest, a, b);
  }
}

/**
 * QueryClaimsRecordResponse is the response type for the Query/ClaimsRecord RPC
 * method.
 *
 * @generated from message evmos.claims.v1.QueryClaimsRecordResponse
 */
export class QueryClaimsRecordResponse extends Message<QueryClaimsRecordResponse> {
  /**
   * total initial claimable amount for the user
   *
   * @generated from field: string initial_claimable_amount = 1;
   */
  initialClaimableAmount = "";

  /**
   * the claims of the user
   *
   * @generated from field: repeated evmos.claims.v1.Claim claims = 2;
   */
  claims: Claim[] = [];

  constructor(data?: PartialMessage<QueryClaimsRecordResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.QueryClaimsRecordResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initial_claimable_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "claims", kind: "message", T: Claim, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryClaimsRecordResponse {
    return new QueryClaimsRecordResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryClaimsRecordResponse {
    return new QueryClaimsRecordResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryClaimsRecordResponse {
    return new QueryClaimsRecordResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryClaimsRecordResponse | PlainMessage<QueryClaimsRecordResponse> | undefined, b: QueryClaimsRecordResponse | PlainMessage<QueryClaimsRecordResponse> | undefined): boolean {
    return proto3.util.equals(QueryClaimsRecordResponse, a, b);
  }
}

