// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file evmos/claims/v1/genesis.proto (package evmos.claims.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Duration, Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { ClaimsRecordAddress } from "./claims_pb.js";

/**
 * GenesisState define the claims module's genesis state.
 *
 * @generated from message evmos.claims.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of the module.
   *
   * @generated from field: evmos.claims.v1.Params params = 1;
   */
  params?: Params;

  /**
   * list of claim records with the corresponding airdrop recipient
   *
   * @generated from field: repeated evmos.claims.v1.ClaimsRecordAddress claims_records = 2;
   */
  claimsRecords: ClaimsRecordAddress[] = [];

  constructor(data?: PartialMessage<GenesisState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.GenesisState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "claims_records", kind: "message", T: ClaimsRecordAddress, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenesisState {
    return new GenesisState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options);
  }

  static equals(a: GenesisState | PlainMessage<GenesisState> | undefined, b: GenesisState | PlainMessage<GenesisState> | undefined): boolean {
    return proto3.util.equals(GenesisState, a, b);
  }
}

/**
 * Params defines the claims module's parameters.
 *
 * @generated from message evmos.claims.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * enable claiming process
   *
   * @generated from field: bool enable_claims = 1;
   */
  enableClaims = false;

  /**
   * timestamp of the airdrop start
   *
   * @generated from field: google.protobuf.Timestamp airdrop_start_time = 2;
   */
  airdropStartTime?: Timestamp;

  /**
   * duration until decay of claimable tokens begin
   *
   * @generated from field: google.protobuf.Duration duration_until_decay = 3;
   */
  durationUntilDecay?: Duration;

  /**
   * duration of the token claim decay period
   *
   * @generated from field: google.protobuf.Duration duration_of_decay = 4;
   */
  durationOfDecay?: Duration;

  /**
   * denom of claimable coin
   *
   * @generated from field: string claims_denom = 5;
   */
  claimsDenom = "";

  /**
   * list of authorized channel identifiers that can perform address
   * attestations via IBC.
   *
   * @generated from field: repeated string authorized_channels = 6;
   */
  authorizedChannels: string[] = [];

  /**
   * list of channel identifiers from EVM compatible chains
   *
   * @generated from field: repeated string evm_channels = 7;
   */
  evmChannels: string[] = [];

  constructor(data?: PartialMessage<Params>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.Params";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enable_claims", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "airdrop_start_time", kind: "message", T: Timestamp },
    { no: 3, name: "duration_until_decay", kind: "message", T: Duration },
    { no: 4, name: "duration_of_decay", kind: "message", T: Duration },
    { no: 5, name: "claims_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "authorized_channels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "evm_channels", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJsonString(jsonString, options);
  }

  static equals(a: Params | PlainMessage<Params> | undefined, b: Params | PlainMessage<Params> | undefined): boolean {
    return proto3.util.equals(Params, a, b);
  }
}

