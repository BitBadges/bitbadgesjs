// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file evmos/claims/v1/claims.proto (package evmos.claims.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Action defines the list of available actions to claim the airdrop tokens.
 *
 * @generated from enum evmos.claims.v1.Action
 */
export enum Action {
  /**
   * UNSPECIFIED defines an invalid action.
   *
   * @generated from enum value: ACTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * VOTE defines a proposal vote.
   *
   * @generated from enum value: ACTION_VOTE = 1;
   */
  VOTE = 1,

  /**
   * DELEGATE defines an staking delegation.
   *
   * @generated from enum value: ACTION_DELEGATE = 2;
   */
  DELEGATE = 2,

  /**
   * EVM defines an EVM transaction.
   *
   * @generated from enum value: ACTION_EVM = 3;
   */
  EVM = 3,

  /**
   * IBC Transfer defines a fungible token transfer transaction via IBC.
   *
   * @generated from enum value: ACTION_IBC_TRANSFER = 4;
   */
  IBC_TRANSFER = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Action)
proto3.util.setEnumType(Action, "evmos.claims.v1.Action", [
  { no: 0, name: "ACTION_UNSPECIFIED" },
  { no: 1, name: "ACTION_VOTE" },
  { no: 2, name: "ACTION_DELEGATE" },
  { no: 3, name: "ACTION_EVM" },
  { no: 4, name: "ACTION_IBC_TRANSFER" },
]);

/**
 * Claim defines the action, completed flag and the remaining claimable amount
 * for a given user. This is only used during client queries.
 *
 * @generated from message evmos.claims.v1.Claim
 */
export class Claim extends Message<Claim> {
  /**
   * action enum
   *
   * @generated from field: evmos.claims.v1.Action action = 1;
   */
  action = Action.UNSPECIFIED;

  /**
   * true if the action has been completed
   *
   * @generated from field: bool completed = 2;
   */
  completed = false;

  /**
   * claimable token amount for the action. Zero if completed
   *
   * @generated from field: string claimable_amount = 3;
   */
  claimableAmount = "";

  constructor(data?: PartialMessage<Claim>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.Claim";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "action", kind: "enum", T: proto3.getEnumType(Action) },
    { no: 2, name: "completed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "claimable_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Claim {
    return new Claim().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Claim {
    return new Claim().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Claim {
    return new Claim().fromJsonString(jsonString, options);
  }

  static equals(a: Claim | PlainMessage<Claim> | undefined, b: Claim | PlainMessage<Claim> | undefined): boolean {
    return proto3.util.equals(Claim, a, b);
  }
}

/**
 * ClaimsRecordAddress is the claims metadata per address that is used at
 * Genesis.
 *
 * @generated from message evmos.claims.v1.ClaimsRecordAddress
 */
export class ClaimsRecordAddress extends Message<ClaimsRecordAddress> {
  /**
   * bech32 or hex address of claim user
   *
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * total initial claimable amount for the user
   *
   * @generated from field: string initial_claimable_amount = 2;
   */
  initialClaimableAmount = "";

  /**
   * slice of the available actions completed
   *
   * @generated from field: repeated bool actions_completed = 3;
   */
  actionsCompleted: boolean[] = [];

  constructor(data?: PartialMessage<ClaimsRecordAddress>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.ClaimsRecordAddress";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "initial_claimable_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "actions_completed", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimsRecordAddress {
    return new ClaimsRecordAddress().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimsRecordAddress {
    return new ClaimsRecordAddress().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimsRecordAddress {
    return new ClaimsRecordAddress().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimsRecordAddress | PlainMessage<ClaimsRecordAddress> | undefined, b: ClaimsRecordAddress | PlainMessage<ClaimsRecordAddress> | undefined): boolean {
    return proto3.util.equals(ClaimsRecordAddress, a, b);
  }
}

/**
 * ClaimsRecord defines the initial claimable airdrop amount and the list of
 * completed actions to claim the tokens.
 *
 * @generated from message evmos.claims.v1.ClaimsRecord
 */
export class ClaimsRecord extends Message<ClaimsRecord> {
  /**
   * total initial claimable amount for the user
   *
   * @generated from field: string initial_claimable_amount = 1;
   */
  initialClaimableAmount = "";

  /**
   * slice of the available actions completed
   *
   * @generated from field: repeated bool actions_completed = 2;
   */
  actionsCompleted: boolean[] = [];

  constructor(data?: PartialMessage<ClaimsRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.claims.v1.ClaimsRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "initial_claimable_amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "actions_completed", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ClaimsRecord {
    return new ClaimsRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ClaimsRecord {
    return new ClaimsRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ClaimsRecord {
    return new ClaimsRecord().fromJsonString(jsonString, options);
  }

  static equals(a: ClaimsRecord | PlainMessage<ClaimsRecord> | undefined, b: ClaimsRecord | PlainMessage<ClaimsRecord> | undefined): boolean {
    return proto3.util.equals(ClaimsRecord, a, b);
  }
}

