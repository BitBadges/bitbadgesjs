// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file evmos/feesplit/v1/feesplit.proto (package evmos.feesplit.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * FeeSplit defines an instance that organizes fee distribution conditions for
 * the owner of a given smart contract
 *
 * @generated from message evmos.feesplit.v1.FeeSplit
 */
export class FeeSplit extends Message<FeeSplit> {
  /**
   * hex address of registered contract
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress = "";

  /**
   * bech32 address of contract deployer
   *
   * @generated from field: string deployer_address = 2;
   */
  deployerAddress = "";

  /**
   * bech32 address of account receiving the transaction fees it defaults to
   * deployer_address
   *
   * @generated from field: string withdrawer_address = 3;
   */
  withdrawerAddress = "";

  constructor(data?: PartialMessage<FeeSplit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.FeeSplit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployer_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "withdrawer_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FeeSplit {
    return new FeeSplit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FeeSplit {
    return new FeeSplit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FeeSplit {
    return new FeeSplit().fromJsonString(jsonString, options);
  }

  static equals(a: FeeSplit | PlainMessage<FeeSplit> | undefined, b: FeeSplit | PlainMessage<FeeSplit> | undefined): boolean {
    return proto3.util.equals(FeeSplit, a, b);
  }
}

