// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file evmos/feesplit/v1/query.proto (package evmos.feesplit.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { FeeSplit } from "./feesplit_pb.js";
import { Params } from "./genesis_pb.js";

/**
 * QueryFeeSplitsRequest is the request type for the Query/FeeSplits RPC method.
 *
 * @generated from message evmos.feesplit.v1.QueryFeeSplitsRequest
 */
export class QueryFeeSplitsRequest extends Message<QueryFeeSplitsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryFeeSplitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.QueryFeeSplitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeSplitsRequest {
    return new QueryFeeSplitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeSplitsRequest {
    return new QueryFeeSplitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeSplitsRequest {
    return new QueryFeeSplitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeSplitsRequest | PlainMessage<QueryFeeSplitsRequest> | undefined, b: QueryFeeSplitsRequest | PlainMessage<QueryFeeSplitsRequest> | undefined): boolean {
    return proto3.util.equals(QueryFeeSplitsRequest, a, b);
  }
}

/**
 * QueryFeeSplitsResponse is the response type for the Query/FeeSplits RPC method.
 *
 * @generated from message evmos.feesplit.v1.QueryFeeSplitsResponse
 */
export class QueryFeeSplitsResponse extends Message<QueryFeeSplitsResponse> {
  /**
   * @generated from field: repeated evmos.feesplit.v1.FeeSplit fee_splits = 1;
   */
  feeSplits: FeeSplit[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryFeeSplitsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.QueryFeeSplitsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_splits", kind: "message", T: FeeSplit, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeSplitsResponse {
    return new QueryFeeSplitsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeSplitsResponse {
    return new QueryFeeSplitsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeSplitsResponse {
    return new QueryFeeSplitsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeSplitsResponse | PlainMessage<QueryFeeSplitsResponse> | undefined, b: QueryFeeSplitsResponse | PlainMessage<QueryFeeSplitsResponse> | undefined): boolean {
    return proto3.util.equals(QueryFeeSplitsResponse, a, b);
  }
}

/**
 * QueryFeeSplitRequest is the request type for the Query/FeeSplit RPC method.
 *
 * @generated from message evmos.feesplit.v1.QueryFeeSplitRequest
 */
export class QueryFeeSplitRequest extends Message<QueryFeeSplitRequest> {
  /**
   * contract identifier is the hex contract address of a contract
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress = "";

  constructor(data?: PartialMessage<QueryFeeSplitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.QueryFeeSplitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeSplitRequest {
    return new QueryFeeSplitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeSplitRequest {
    return new QueryFeeSplitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeSplitRequest {
    return new QueryFeeSplitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeSplitRequest | PlainMessage<QueryFeeSplitRequest> | undefined, b: QueryFeeSplitRequest | PlainMessage<QueryFeeSplitRequest> | undefined): boolean {
    return proto3.util.equals(QueryFeeSplitRequest, a, b);
  }
}

/**
 * QueryFeeSplitResponse is the response type for the Query/FeeSplit RPC method.
 *
 * @generated from message evmos.feesplit.v1.QueryFeeSplitResponse
 */
export class QueryFeeSplitResponse extends Message<QueryFeeSplitResponse> {
  /**
   * @generated from field: evmos.feesplit.v1.FeeSplit fee_split = 1;
   */
  feeSplit?: FeeSplit;

  constructor(data?: PartialMessage<QueryFeeSplitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.QueryFeeSplitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fee_split", kind: "message", T: FeeSplit },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryFeeSplitResponse {
    return new QueryFeeSplitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryFeeSplitResponse {
    return new QueryFeeSplitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryFeeSplitResponse {
    return new QueryFeeSplitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryFeeSplitResponse | PlainMessage<QueryFeeSplitResponse> | undefined, b: QueryFeeSplitResponse | PlainMessage<QueryFeeSplitResponse> | undefined): boolean {
    return proto3.util.equals(QueryFeeSplitResponse, a, b);
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message evmos.feesplit.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message evmos.feesplit.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: evmos.feesplit.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * QueryDeployerFeeSplitsRequest is the request type for the
 * Query/DeployerFeeSplits RPC method.
 *
 * @generated from message evmos.feesplit.v1.QueryDeployerFeeSplitsRequest
 */
export class QueryDeployerFeeSplitsRequest extends Message<QueryDeployerFeeSplitsRequest> {
  /**
   * deployer bech32 address
   *
   * @generated from field: string deployer_address = 1;
   */
  deployerAddress = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryDeployerFeeSplitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.QueryDeployerFeeSplitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployer_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDeployerFeeSplitsRequest {
    return new QueryDeployerFeeSplitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDeployerFeeSplitsRequest {
    return new QueryDeployerFeeSplitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDeployerFeeSplitsRequest {
    return new QueryDeployerFeeSplitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDeployerFeeSplitsRequest | PlainMessage<QueryDeployerFeeSplitsRequest> | undefined, b: QueryDeployerFeeSplitsRequest | PlainMessage<QueryDeployerFeeSplitsRequest> | undefined): boolean {
    return proto3.util.equals(QueryDeployerFeeSplitsRequest, a, b);
  }
}

/**
 * QueryDeployerFeeSplitsResponse is the response type for the
 * Query/DeployerFeeSplits RPC method.
 *
 * @generated from message evmos.feesplit.v1.QueryDeployerFeeSplitsResponse
 */
export class QueryDeployerFeeSplitsResponse extends Message<QueryDeployerFeeSplitsResponse> {
  /**
   * @generated from field: repeated string contract_addresses = 1;
   */
  contractAddresses: string[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryDeployerFeeSplitsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.QueryDeployerFeeSplitsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryDeployerFeeSplitsResponse {
    return new QueryDeployerFeeSplitsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryDeployerFeeSplitsResponse {
    return new QueryDeployerFeeSplitsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryDeployerFeeSplitsResponse {
    return new QueryDeployerFeeSplitsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryDeployerFeeSplitsResponse | PlainMessage<QueryDeployerFeeSplitsResponse> | undefined, b: QueryDeployerFeeSplitsResponse | PlainMessage<QueryDeployerFeeSplitsResponse> | undefined): boolean {
    return proto3.util.equals(QueryDeployerFeeSplitsResponse, a, b);
  }
}

/**
 * QueryWithdrawerFeeSplitsRequest is the request type for the
 * Query/WithdrawerFeeSplits RPC method.
 *
 * @generated from message evmos.feesplit.v1.QueryWithdrawerFeeSplitsRequest
 */
export class QueryWithdrawerFeeSplitsRequest extends Message<QueryWithdrawerFeeSplitsRequest> {
  /**
   * withdrawer bech32 address
   *
   * @generated from field: string withdrawer_address = 1;
   */
  withdrawerAddress = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryWithdrawerFeeSplitsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.QueryWithdrawerFeeSplitsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "withdrawer_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWithdrawerFeeSplitsRequest {
    return new QueryWithdrawerFeeSplitsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWithdrawerFeeSplitsRequest {
    return new QueryWithdrawerFeeSplitsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWithdrawerFeeSplitsRequest {
    return new QueryWithdrawerFeeSplitsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWithdrawerFeeSplitsRequest | PlainMessage<QueryWithdrawerFeeSplitsRequest> | undefined, b: QueryWithdrawerFeeSplitsRequest | PlainMessage<QueryWithdrawerFeeSplitsRequest> | undefined): boolean {
    return proto3.util.equals(QueryWithdrawerFeeSplitsRequest, a, b);
  }
}

/**
 * QueryWithdrawerFeeSplitsResponse is the response type for the
 * Query/WithdrawerFeeSplits RPC method.
 *
 * @generated from message evmos.feesplit.v1.QueryWithdrawerFeeSplitsResponse
 */
export class QueryWithdrawerFeeSplitsResponse extends Message<QueryWithdrawerFeeSplitsResponse> {
  /**
   * @generated from field: repeated string contract_addresses = 1;
   */
  contractAddresses: string[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryWithdrawerFeeSplitsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.QueryWithdrawerFeeSplitsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWithdrawerFeeSplitsResponse {
    return new QueryWithdrawerFeeSplitsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWithdrawerFeeSplitsResponse {
    return new QueryWithdrawerFeeSplitsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWithdrawerFeeSplitsResponse {
    return new QueryWithdrawerFeeSplitsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWithdrawerFeeSplitsResponse | PlainMessage<QueryWithdrawerFeeSplitsResponse> | undefined, b: QueryWithdrawerFeeSplitsResponse | PlainMessage<QueryWithdrawerFeeSplitsResponse> | undefined): boolean {
    return proto3.util.equals(QueryWithdrawerFeeSplitsResponse, a, b);
  }
}

