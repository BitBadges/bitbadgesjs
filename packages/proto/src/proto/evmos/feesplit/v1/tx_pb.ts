// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file evmos/feesplit/v1/tx.proto (package evmos.feesplit.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * MsgRegisterFeeSplit defines a message that registers a FeeSplit
 *
 * @generated from message evmos.feesplit.v1.MsgRegisterFeeSplit
 */
export class MsgRegisterFeeSplit extends Message<MsgRegisterFeeSplit> {
  /**
   * contract hex address
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress = "";

  /**
   * bech32 address of message sender, must be the same as the origin EOA
   * sending the transaction which deploys the contract
   *
   * @generated from field: string deployer_address = 2;
   */
  deployerAddress = "";

  /**
   * bech32 address of account receiving the transaction fees
   *
   * @generated from field: string withdrawer_address = 3;
   */
  withdrawerAddress = "";

  /**
   * array of nonces from the address path, where the last nonce is the nonce
   * that determines the contract's address - it can be an EOA nonce or a
   * factory contract nonce
   *
   * @generated from field: repeated uint64 nonces = 4;
   */
  nonces: bigint[] = [];

  constructor(data?: PartialMessage<MsgRegisterFeeSplit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.MsgRegisterFeeSplit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployer_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "withdrawer_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "nonces", kind: "scalar", T: 4 /* ScalarType.UINT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterFeeSplit {
    return new MsgRegisterFeeSplit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterFeeSplit {
    return new MsgRegisterFeeSplit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterFeeSplit {
    return new MsgRegisterFeeSplit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterFeeSplit | PlainMessage<MsgRegisterFeeSplit> | undefined, b: MsgRegisterFeeSplit | PlainMessage<MsgRegisterFeeSplit> | undefined): boolean {
    return proto3.util.equals(MsgRegisterFeeSplit, a, b);
  }
}

/**
 * MsgRegisterFeeSplitResponse defines the MsgRegisterFeeSplit response type
 *
 * @generated from message evmos.feesplit.v1.MsgRegisterFeeSplitResponse
 */
export class MsgRegisterFeeSplitResponse extends Message<MsgRegisterFeeSplitResponse> {
  constructor(data?: PartialMessage<MsgRegisterFeeSplitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.MsgRegisterFeeSplitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgRegisterFeeSplitResponse {
    return new MsgRegisterFeeSplitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgRegisterFeeSplitResponse {
    return new MsgRegisterFeeSplitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgRegisterFeeSplitResponse {
    return new MsgRegisterFeeSplitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgRegisterFeeSplitResponse | PlainMessage<MsgRegisterFeeSplitResponse> | undefined, b: MsgRegisterFeeSplitResponse | PlainMessage<MsgRegisterFeeSplitResponse> | undefined): boolean {
    return proto3.util.equals(MsgRegisterFeeSplitResponse, a, b);
  }
}

/**
 * MsgUpdateFeeSplit defines a message that updates the withdrawer address for a
 * registered FeeSplit
 *
 * @generated from message evmos.feesplit.v1.MsgUpdateFeeSplit
 */
export class MsgUpdateFeeSplit extends Message<MsgUpdateFeeSplit> {
  /**
   * contract hex address
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress = "";

  /**
   * deployer bech32 address
   *
   * @generated from field: string deployer_address = 2;
   */
  deployerAddress = "";

  /**
   * new withdrawer bech32 address for receiving the transaction fees
   *
   * @generated from field: string withdrawer_address = 3;
   */
  withdrawerAddress = "";

  constructor(data?: PartialMessage<MsgUpdateFeeSplit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.MsgUpdateFeeSplit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployer_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "withdrawer_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateFeeSplit {
    return new MsgUpdateFeeSplit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateFeeSplit {
    return new MsgUpdateFeeSplit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateFeeSplit {
    return new MsgUpdateFeeSplit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateFeeSplit | PlainMessage<MsgUpdateFeeSplit> | undefined, b: MsgUpdateFeeSplit | PlainMessage<MsgUpdateFeeSplit> | undefined): boolean {
    return proto3.util.equals(MsgUpdateFeeSplit, a, b);
  }
}

/**
 * MsgUpdateFeeSplitResponse defines the MsgUpdateFeeSplit response type
 *
 * @generated from message evmos.feesplit.v1.MsgUpdateFeeSplitResponse
 */
export class MsgUpdateFeeSplitResponse extends Message<MsgUpdateFeeSplitResponse> {
  constructor(data?: PartialMessage<MsgUpdateFeeSplitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.MsgUpdateFeeSplitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateFeeSplitResponse {
    return new MsgUpdateFeeSplitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateFeeSplitResponse {
    return new MsgUpdateFeeSplitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateFeeSplitResponse {
    return new MsgUpdateFeeSplitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateFeeSplitResponse | PlainMessage<MsgUpdateFeeSplitResponse> | undefined, b: MsgUpdateFeeSplitResponse | PlainMessage<MsgUpdateFeeSplitResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateFeeSplitResponse, a, b);
  }
}

/**
 * MsgCancelFeeSplit defines a message that cancels a registered FeeSplit
 *
 * @generated from message evmos.feesplit.v1.MsgCancelFeeSplit
 */
export class MsgCancelFeeSplit extends Message<MsgCancelFeeSplit> {
  /**
   * contract hex address
   *
   * @generated from field: string contract_address = 1;
   */
  contractAddress = "";

  /**
   * deployer bech32 address
   *
   * @generated from field: string deployer_address = 2;
   */
  deployerAddress = "";

  constructor(data?: PartialMessage<MsgCancelFeeSplit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.MsgCancelFeeSplit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "deployer_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelFeeSplit {
    return new MsgCancelFeeSplit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelFeeSplit {
    return new MsgCancelFeeSplit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelFeeSplit {
    return new MsgCancelFeeSplit().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelFeeSplit | PlainMessage<MsgCancelFeeSplit> | undefined, b: MsgCancelFeeSplit | PlainMessage<MsgCancelFeeSplit> | undefined): boolean {
    return proto3.util.equals(MsgCancelFeeSplit, a, b);
  }
}

/**
 * MsgCancelFeeSplitResponse defines the MsgCancelFeeSplit response type
 *
 * @generated from message evmos.feesplit.v1.MsgCancelFeeSplitResponse
 */
export class MsgCancelFeeSplitResponse extends Message<MsgCancelFeeSplitResponse> {
  constructor(data?: PartialMessage<MsgCancelFeeSplitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.feesplit.v1.MsgCancelFeeSplitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCancelFeeSplitResponse {
    return new MsgCancelFeeSplitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCancelFeeSplitResponse {
    return new MsgCancelFeeSplitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCancelFeeSplitResponse {
    return new MsgCancelFeeSplitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCancelFeeSplitResponse | PlainMessage<MsgCancelFeeSplitResponse> | undefined, b: MsgCancelFeeSplitResponse | PlainMessage<MsgCancelFeeSplitResponse> | undefined): boolean {
    return proto3.util.equals(MsgCancelFeeSplitResponse, a, b);
  }
}

