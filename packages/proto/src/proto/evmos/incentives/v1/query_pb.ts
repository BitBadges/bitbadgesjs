// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file evmos/incentives/v1/query.proto (package evmos.incentives.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PageRequest, PageResponse } from "../../../cosmos/base/query/v1beta1/pagination_pb.js";
import { GasMeter, Incentive } from "./incentives_pb.js";
import { DecCoin } from "../../../cosmos/base/v1beta1/coin_pb.js";
import { Params } from "./genesis_pb.js";

/**
 * QueryIncentivesRequest is the request type for the Query/Incentives RPC
 * method.
 *
 * @generated from message evmos.incentives.v1.QueryIncentivesRequest
 */
export class QueryIncentivesRequest extends Message<QueryIncentivesRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryIncentivesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryIncentivesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentivesRequest {
    return new QueryIncentivesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentivesRequest {
    return new QueryIncentivesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentivesRequest {
    return new QueryIncentivesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentivesRequest | PlainMessage<QueryIncentivesRequest> | undefined, b: QueryIncentivesRequest | PlainMessage<QueryIncentivesRequest> | undefined): boolean {
    return proto3.util.equals(QueryIncentivesRequest, a, b);
  }
}

/**
 * QueryIncentivesResponse is the response type for the Query/Incentives RPC
 * method.
 *
 * @generated from message evmos.incentives.v1.QueryIncentivesResponse
 */
export class QueryIncentivesResponse extends Message<QueryIncentivesResponse> {
  /**
   * @generated from field: repeated evmos.incentives.v1.Incentive incentives = 1;
   */
  incentives: Incentive[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryIncentivesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryIncentivesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "incentives", kind: "message", T: Incentive, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentivesResponse {
    return new QueryIncentivesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentivesResponse {
    return new QueryIncentivesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentivesResponse {
    return new QueryIncentivesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentivesResponse | PlainMessage<QueryIncentivesResponse> | undefined, b: QueryIncentivesResponse | PlainMessage<QueryIncentivesResponse> | undefined): boolean {
    return proto3.util.equals(QueryIncentivesResponse, a, b);
  }
}

/**
 * QueryIncentiveRequest is the request type for the Query/Incentive RPC method.
 *
 * @generated from message evmos.incentives.v1.QueryIncentiveRequest
 */
export class QueryIncentiveRequest extends Message<QueryIncentiveRequest> {
  /**
   * contract identifier is the hex contract address of a contract
   *
   * @generated from field: string contract = 1;
   */
  contract = "";

  constructor(data?: PartialMessage<QueryIncentiveRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryIncentiveRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentiveRequest {
    return new QueryIncentiveRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentiveRequest {
    return new QueryIncentiveRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentiveRequest {
    return new QueryIncentiveRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentiveRequest | PlainMessage<QueryIncentiveRequest> | undefined, b: QueryIncentiveRequest | PlainMessage<QueryIncentiveRequest> | undefined): boolean {
    return proto3.util.equals(QueryIncentiveRequest, a, b);
  }
}

/**
 * QueryIncentiveResponse is the response type for the Query/Incentive RPC
 * method.
 *
 * @generated from message evmos.incentives.v1.QueryIncentiveResponse
 */
export class QueryIncentiveResponse extends Message<QueryIncentiveResponse> {
  /**
   * @generated from field: evmos.incentives.v1.Incentive incentive = 1;
   */
  incentive?: Incentive;

  constructor(data?: PartialMessage<QueryIncentiveResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryIncentiveResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "incentive", kind: "message", T: Incentive },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryIncentiveResponse {
    return new QueryIncentiveResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryIncentiveResponse {
    return new QueryIncentiveResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryIncentiveResponse {
    return new QueryIncentiveResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryIncentiveResponse | PlainMessage<QueryIncentiveResponse> | undefined, b: QueryIncentiveResponse | PlainMessage<QueryIncentiveResponse> | undefined): boolean {
    return proto3.util.equals(QueryIncentiveResponse, a, b);
  }
}

/**
 * QueryGasMetersRequest is the request type for the Query/Incentives RPC
 * method.
 *
 * @generated from message evmos.incentives.v1.QueryGasMetersRequest
 */
export class QueryGasMetersRequest extends Message<QueryGasMetersRequest> {
  /**
   * contract is the hex contract address of a incentivized smart contract
   *
   * @generated from field: string contract = 1;
   */
  contract = "";

  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 2;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryGasMetersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryGasMetersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGasMetersRequest {
    return new QueryGasMetersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGasMetersRequest {
    return new QueryGasMetersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGasMetersRequest {
    return new QueryGasMetersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGasMetersRequest | PlainMessage<QueryGasMetersRequest> | undefined, b: QueryGasMetersRequest | PlainMessage<QueryGasMetersRequest> | undefined): boolean {
    return proto3.util.equals(QueryGasMetersRequest, a, b);
  }
}

/**
 * QueryGasMetersResponse is the response type for the Query/Incentives RPC
 * method.
 *
 * @generated from message evmos.incentives.v1.QueryGasMetersResponse
 */
export class QueryGasMetersResponse extends Message<QueryGasMetersResponse> {
  /**
   * @generated from field: repeated evmos.incentives.v1.GasMeter gas_meters = 1;
   */
  gasMeters: GasMeter[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryGasMetersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryGasMetersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gas_meters", kind: "message", T: GasMeter, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGasMetersResponse {
    return new QueryGasMetersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGasMetersResponse {
    return new QueryGasMetersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGasMetersResponse {
    return new QueryGasMetersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGasMetersResponse | PlainMessage<QueryGasMetersResponse> | undefined, b: QueryGasMetersResponse | PlainMessage<QueryGasMetersResponse> | undefined): boolean {
    return proto3.util.equals(QueryGasMetersResponse, a, b);
  }
}

/**
 * QueryGasMeterRequest is the request type for the Query/Incentive RPC method.
 *
 * @generated from message evmos.incentives.v1.QueryGasMeterRequest
 */
export class QueryGasMeterRequest extends Message<QueryGasMeterRequest> {
  /**
   * contract identifier is the hex contract address of a contract
   *
   * @generated from field: string contract = 1;
   */
  contract = "";

  /**
   * participant identifier is the hex address of a user
   *
   * @generated from field: string participant = 2;
   */
  participant = "";

  constructor(data?: PartialMessage<QueryGasMeterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryGasMeterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "participant", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGasMeterRequest {
    return new QueryGasMeterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGasMeterRequest {
    return new QueryGasMeterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGasMeterRequest {
    return new QueryGasMeterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGasMeterRequest | PlainMessage<QueryGasMeterRequest> | undefined, b: QueryGasMeterRequest | PlainMessage<QueryGasMeterRequest> | undefined): boolean {
    return proto3.util.equals(QueryGasMeterRequest, a, b);
  }
}

/**
 * QueryGasMeterResponse is the response type for the Query/Incentive RPC
 * method.
 *
 * @generated from message evmos.incentives.v1.QueryGasMeterResponse
 */
export class QueryGasMeterResponse extends Message<QueryGasMeterResponse> {
  /**
   * @generated from field: uint64 gas_meter = 1;
   */
  gasMeter = protoInt64.zero;

  constructor(data?: PartialMessage<QueryGasMeterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryGasMeterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gas_meter", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGasMeterResponse {
    return new QueryGasMeterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGasMeterResponse {
    return new QueryGasMeterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGasMeterResponse {
    return new QueryGasMeterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGasMeterResponse | PlainMessage<QueryGasMeterResponse> | undefined, b: QueryGasMeterResponse | PlainMessage<QueryGasMeterResponse> | undefined): boolean {
    return proto3.util.equals(QueryGasMeterResponse, a, b);
  }
}

/**
 * QueryAllocationMetersRequest is the request type for the
 * Query/AllocationMeters RPC method.
 *
 * @generated from message evmos.incentives.v1.QueryAllocationMetersRequest
 */
export class QueryAllocationMetersRequest extends Message<QueryAllocationMetersRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest;

  constructor(data?: PartialMessage<QueryAllocationMetersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryAllocationMetersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllocationMetersRequest {
    return new QueryAllocationMetersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllocationMetersRequest {
    return new QueryAllocationMetersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllocationMetersRequest {
    return new QueryAllocationMetersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllocationMetersRequest | PlainMessage<QueryAllocationMetersRequest> | undefined, b: QueryAllocationMetersRequest | PlainMessage<QueryAllocationMetersRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllocationMetersRequest, a, b);
  }
}

/**
 * QueryAllocationMetersResponse is the response type for the
 * Query/AllocationMeters RPC method.
 *
 * @generated from message evmos.incentives.v1.QueryAllocationMetersResponse
 */
export class QueryAllocationMetersResponse extends Message<QueryAllocationMetersResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.DecCoin allocation_meters = 1;
   */
  allocationMeters: DecCoin[] = [];

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse;

  constructor(data?: PartialMessage<QueryAllocationMetersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryAllocationMetersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allocation_meters", kind: "message", T: DecCoin, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllocationMetersResponse {
    return new QueryAllocationMetersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllocationMetersResponse {
    return new QueryAllocationMetersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllocationMetersResponse {
    return new QueryAllocationMetersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllocationMetersResponse | PlainMessage<QueryAllocationMetersResponse> | undefined, b: QueryAllocationMetersResponse | PlainMessage<QueryAllocationMetersResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllocationMetersResponse, a, b);
  }
}

/**
 * QueryAllocationMeterRequest is the request type for the Query/AllocationMeter
 * RPC method.
 *
 * @generated from message evmos.incentives.v1.QueryAllocationMeterRequest
 */
export class QueryAllocationMeterRequest extends Message<QueryAllocationMeterRequest> {
  /**
   * denom is the coin denom to query an allocation meter for.
   *
   * @generated from field: string denom = 1;
   */
  denom = "";

  constructor(data?: PartialMessage<QueryAllocationMeterRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryAllocationMeterRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllocationMeterRequest {
    return new QueryAllocationMeterRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllocationMeterRequest {
    return new QueryAllocationMeterRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllocationMeterRequest {
    return new QueryAllocationMeterRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllocationMeterRequest | PlainMessage<QueryAllocationMeterRequest> | undefined, b: QueryAllocationMeterRequest | PlainMessage<QueryAllocationMeterRequest> | undefined): boolean {
    return proto3.util.equals(QueryAllocationMeterRequest, a, b);
  }
}

/**
 * QueryAllocationMeterResponse is the response type for the
 * Query/AllocationMeter RPC method.
 *
 * @generated from message evmos.incentives.v1.QueryAllocationMeterResponse
 */
export class QueryAllocationMeterResponse extends Message<QueryAllocationMeterResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.DecCoin allocation_meter = 1;
   */
  allocationMeter?: DecCoin;

  constructor(data?: PartialMessage<QueryAllocationMeterResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryAllocationMeterResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "allocation_meter", kind: "message", T: DecCoin },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryAllocationMeterResponse {
    return new QueryAllocationMeterResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryAllocationMeterResponse {
    return new QueryAllocationMeterResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryAllocationMeterResponse {
    return new QueryAllocationMeterResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryAllocationMeterResponse | PlainMessage<QueryAllocationMeterResponse> | undefined, b: QueryAllocationMeterResponse | PlainMessage<QueryAllocationMeterResponse> | undefined): boolean {
    return proto3.util.equals(QueryAllocationMeterResponse, a, b);
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message evmos.incentives.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC
 * method.
 *
 * @generated from message evmos.incentives.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * @generated from field: evmos.incentives.v1.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "evmos.incentives.v1.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

