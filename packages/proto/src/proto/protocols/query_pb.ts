// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file protocols/query.proto (package protocols, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Protocol } from "./tx_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message protocols.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocols.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message protocols.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: protocols.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocols.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message protocols.QueryGetProtocolRequest
 */
export class QueryGetProtocolRequest extends Message<QueryGetProtocolRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<QueryGetProtocolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocols.QueryGetProtocolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtocolRequest {
    return new QueryGetProtocolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtocolRequest {
    return new QueryGetProtocolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtocolRequest {
    return new QueryGetProtocolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtocolRequest | PlainMessage<QueryGetProtocolRequest> | undefined, b: QueryGetProtocolRequest | PlainMessage<QueryGetProtocolRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetProtocolRequest, a, b);
  }
}

/**
 * @generated from message protocols.QueryGetProtocolResponse
 */
export class QueryGetProtocolResponse extends Message<QueryGetProtocolResponse> {
  /**
   * @generated from field: protocols.Protocol protocol = 1;
   */
  protocol?: Protocol;

  constructor(data?: PartialMessage<QueryGetProtocolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocols.QueryGetProtocolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "protocol", kind: "message", T: Protocol },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetProtocolResponse {
    return new QueryGetProtocolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetProtocolResponse {
    return new QueryGetProtocolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetProtocolResponse {
    return new QueryGetProtocolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetProtocolResponse | PlainMessage<QueryGetProtocolResponse> | undefined, b: QueryGetProtocolResponse | PlainMessage<QueryGetProtocolResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetProtocolResponse, a, b);
  }
}

/**
 * @generated from message protocols.QueryGetCollectionIdForProtocolRequest
 */
export class QueryGetCollectionIdForProtocolRequest extends Message<QueryGetCollectionIdForProtocolRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<QueryGetCollectionIdForProtocolRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocols.QueryGetCollectionIdForProtocolRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetCollectionIdForProtocolRequest {
    return new QueryGetCollectionIdForProtocolRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetCollectionIdForProtocolRequest {
    return new QueryGetCollectionIdForProtocolRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetCollectionIdForProtocolRequest {
    return new QueryGetCollectionIdForProtocolRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetCollectionIdForProtocolRequest | PlainMessage<QueryGetCollectionIdForProtocolRequest> | undefined, b: QueryGetCollectionIdForProtocolRequest | PlainMessage<QueryGetCollectionIdForProtocolRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetCollectionIdForProtocolRequest, a, b);
  }
}

/**
 * @generated from message protocols.QueryGetCollectionIdForProtocolResponse
 */
export class QueryGetCollectionIdForProtocolResponse extends Message<QueryGetCollectionIdForProtocolResponse> {
  /**
   * @generated from field: string collection_id = 1;
   */
  collectionId = "";

  constructor(data?: PartialMessage<QueryGetCollectionIdForProtocolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "protocols.QueryGetCollectionIdForProtocolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetCollectionIdForProtocolResponse {
    return new QueryGetCollectionIdForProtocolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetCollectionIdForProtocolResponse {
    return new QueryGetCollectionIdForProtocolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetCollectionIdForProtocolResponse {
    return new QueryGetCollectionIdForProtocolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetCollectionIdForProtocolResponse | PlainMessage<QueryGetCollectionIdForProtocolResponse> | undefined, b: QueryGetCollectionIdForProtocolResponse | PlainMessage<QueryGetCollectionIdForProtocolResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetCollectionIdForProtocolResponse, a, b);
  }
}

