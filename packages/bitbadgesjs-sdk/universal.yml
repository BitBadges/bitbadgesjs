schemas:
  SupportedChain:
    enum:
      - Bitcoin
      - Ethereum
      - Cosmos
      - Solana
      - Unknown
    title: SupportedChain
    type: string
  AssetDetails:
    properties:
      chain:
        title: AssetDetails.chain
        type: string
      collectionId:
        title: AssetDetails.collectionId
        anyOf:
          - type: string
          - type: number
      assetIds:
        items:
          anyOf:
            - title: AssetDetails.assetIds.[]
              type: string
            - $ref: '#/components/schemas/iUintRange'
              title: AssetDetails.assetIds.[]
          title: AssetDetails.assetIds.[]
        title: AssetDetails.assetIds
        type: array
      ownershipTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: AssetDetails.ownershipTimes.[]
        title: AssetDetails.ownershipTimes
        type: array
      mustOwnAmounts:
        $ref: '#/components/schemas/iUintRange'
        title: AssetDetails.mustOwnAmounts
      additionalCriteria:
        title: AssetDetails.additionalCriteria
        type: string
    required:
      - chain
      - collectionId
      - assetIds
      - ownershipTimes
      - mustOwnAmounts
    additionalProperties: false
    title: AssetDetails
    type: object
  AndGroup:
    properties:
      $and:
        items:
          $ref: '#/components/schemas/AssetConditionGroup'
          title: AndGroup.$and.[]
        title: AndGroup.$and
        type: array
    required:
      - $and
    additionalProperties: false
    title: AndGroup
    type: object
  OrGroup:
    properties:
      $or:
        items:
          $ref: '#/components/schemas/AssetConditionGroup'
          title: OrGroup.$or.[]
        title: OrGroup.$or
        type: array
    required:
      - $or
    additionalProperties: false
    title: OrGroup
    type: object
  AssetConditionGroup:
    anyOf:
      - $ref: '#/components/schemas/AndGroup'
        title: AssetConditionGroup
      - $ref: '#/components/schemas/OrGroup'
        title: AssetConditionGroup
      - $ref: '#/components/schemas/OwnershipRequirements'
        title: AssetConditionGroup
    title: AssetConditionGroup
  OwnershipRequirements:
    properties:
      assets:
        items:
          $ref: '#/components/schemas/AssetDetails'
          title: OwnershipRequirements.assets.[]
        title: OwnershipRequirements.assets
        type: array
      options:
        properties:
          numMatchesForVerification:
            title: OwnershipRequirements.options.numMatchesForVerification
            anyOf:
              - type: string
              - type: number
        additionalProperties: false
        title: OwnershipRequirements.options
        type: object
    required:
      - assets
    additionalProperties: false
    title: OwnershipRequirements
    type: object
  ChallengeParams:
    properties:
      domain:
        title: ChallengeParams.domain
        type: string
      statement:
        title: ChallengeParams.statement
        type: string
      address:
        title: ChallengeParams.address
        type: string
      uri:
        title: ChallengeParams.uri
        type: string
      nonce:
        title: ChallengeParams.nonce
        type: string
      version:
        title: ChallengeParams.version
        type: string
      chainId:
        title: ChallengeParams.chainId
        type: string
      issuedAt:
        title: ChallengeParams.issuedAt
        type: string
      expirationDate:
        title: ChallengeParams.expirationDate
        type: string
      notBefore:
        title: ChallengeParams.notBefore
        type: string
      resources:
        items:
          title: ChallengeParams.resources.[]
          type: string
        title: ChallengeParams.resources
        type: array
      assetOwnershipRequirements:
        $ref: '#/components/schemas/AssetConditionGroup'
        title: ChallengeParams.assetOwnershipRequirements
    required:
      - domain
      - statement
      - address
      - uri
      - nonce
    additionalProperties: false
    title: ChallengeParams
    type: object
  VerifyChallengeOptions:
    properties:
      expectedChallengeParams:
        properties:
          domain:
            title: ChallengeParams.domain
            type: string
          statement:
            title: ChallengeParams.statement
            type: string
          address:
            title: ChallengeParams.address
            type: string
          uri:
            title: ChallengeParams.uri
            type: string
          nonce:
            title: ChallengeParams.nonce
            type: string
          version:
            title: ChallengeParams.version
            type: string
          chainId:
            title: ChallengeParams.chainId
            type: string
          issuedAt:
            title: ChallengeParams.issuedAt
            type: string
          expirationDate:
            title: ChallengeParams.expirationDate
            type: string
          notBefore:
            title: ChallengeParams.notBefore
            type: string
          resources:
            items:
              title: ChallengeParams.resources.[]
              type: string
            title: ChallengeParams.resources
            type: array
          assetOwnershipRequirements:
            $ref: '#/components/schemas/AssetConditionGroup'
            title: ChallengeParams.assetOwnershipRequirements
        additionalProperties: false
        title: VerifyChallengeOptions.expectedChallengeParams
        description: >-
          Optionally define the expected details to check. If the challenge
          was edited and the details

          do not match, the challenge will fail verification.
        type: object
      balancesSnapshot:
        title: VerifyChallengeOptions.balancesSnapshot
        description: >-
          For verification of assets, instead of dynamically fetching the
          assets, you can specify a snapshot of the assets.


          This is useful if you have a snapshot, balances will not change, or
          you are verifying in an offline manner.
        type: object
      skipTimestampVerification:
        title: VerifyChallengeOptions.skipTimestampVerification
        description: >-
          If true, we do not check timestamps (expirationDate / notBefore).
          This is useful if you are verifying a challenge that is expected to
          be verified at a future time.
        type: boolean
      skipAssetVerification:
        title: VerifyChallengeOptions.skipAssetVerification
        description: >-
          If true, we do not check asset ownership. This is useful if you are
          verifying a challenge that is expected to be verified at a future
          time.
        type: boolean
      earliestIssuedAt:
        title: VerifyChallengeOptions.earliestIssuedAt
        description: >-
          The earliest issued At ISO date string that is valid. For example,
          if you want to verify a challenge that was issued within the last
          minute, you can specify this to be 1 minute ago.
        type: string
      issuedAtTimeWindowMs:
        title: VerifyChallengeOptions.issuedAtTimeWindowMs
        description: >-
          If set, we will verify the issuedAt is within this amount of ms ago
          (i.e. issuedAt >= Date.now() - issuedAtTimeWindowMs)
        type: number
      skipSignatureVerification:
        title: VerifyChallengeOptions.skipSignatureVerification
        description: >-
          If true, we do not check the signature. You can pass in an undefined
          ChainDriver
        type: boolean
    additionalProperties: false
    title: VerifyChallengeOptions
    type: object
  Doc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
    required:
      - _docId
    additionalProperties: false
    title: Doc
    description: '@category Indexer'
    type: object
  ErrorResponse:
    properties:
      error:
        title: ErrorResponse.error
        description: >-
          Serialized error object for debugging purposes. Technical users can
          use this to debug issues.
        type: string
      errorMessage:
        title: ErrorResponse.errorMessage
        description: >-
          UX-friendly error message that can be displayed to the user. Always
          present if error.
        type: string
      unauthorized:
        title: ErrorResponse.unauthorized
        description: Authentication error. Present if the user is not authenticated.
        type: boolean
    required:
      - errorMessage
    additionalProperties: false
    title: ErrorResponse
    description: >-
      If an error occurs, the response will be an ErrorResponse.


      400 - Bad Request (e.g. invalid request body)

      401 - Unauthorized (e.g. invalid session cookie; must sign in with
      Blockin)

      500 - Internal Server Error

      @category API Requests / Responses
    type: object
  PaginationInfo:
    properties:
      bookmark:
        title: PaginationInfo.bookmark
        description: >-
          The bookmark for the next page of results. Obtained from previous
          response.
        type: string
      hasMore:
        title: PaginationInfo.hasMore
        description: Whether there are more results to fetch.
        type: boolean
    required:
      - bookmark
      - hasMore
    additionalProperties: false
    title: PaginationInfo
    description: |-
      Type for pagination information.
      @category Indexer
    type: object
  iUpdateHistory:
    properties:
      txHash:
        title: iUpdateHistory.txHash
        description: The transaction hash of the on-chain transaction that updated this.
        type: string
      block:
        title: iUpdateHistory.block
        description: The block number of the on-chain transaction that updated this.
        anyOf:
          - type: string
          - type: number
      blockTimestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iUpdateHistory.blockTimestamp
        description: >-
          The timestamp of the block of the on-chain transaction that updated
          this.
      timestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iUpdateHistory.timestamp
        description: >-
          The indexer's timestamp of the update. This is provided in some
          cases because the time of indexing may be inconsistent with the time
          of the block.
    required:
      - txHash
      - block
      - blockTimestamp
      - timestamp
    additionalProperties: false
    title: iUpdateHistory
    description: '@category Interfaces'
    type: object
  ErrorDoc:
    properties:
      _docId:
        title: ErrorDoc._docId
        type: string
      _id:
        title: ErrorDoc._id
        type: string
      error:
        title: ErrorDoc.error
        type: string
      function:
        title: ErrorDoc.function
        type: string
    required:
      - _docId
      - error
      - function
    additionalProperties: false
    title: ErrorDoc
    description: '@category Indexer'
    type: object
  UNIXMilliTimestamp:
    title: UNIXMilliTimestamp
    description: >-
      Numeric timestamp - value is equal to the milliseconds since the UNIX
      epoch.

      @category Interfaces
    anyOf:
      - type: string
      - type: number
  BitBadgesAddress:
    title: BitBadgesAddress
    description: >-
      All supported addresses map to a Bech32 BitBadges address which is used by
      the BitBadges blockchain behind the scenes.

      For conversion, see the BitBadges documentation. If this type is used,
      we must always convert to a BitBadges address before using it.

      @category Interfaces
    type: string
  SiwbbMessage:
    title: SiwbbMessage
    description: >-
      SiwbbMessage is the sign-in challenge strint to be signed by the user.
      It extends EIP 4361 Sign-In with Ethereum

      and adds additional fields for cross-chain compatibility and native
      asset ownership verification.


      For example, 'https://bitbadges.io wants you to sign in with your
      Ethereum address ...'

      @category Interfaces
    type: string
  NativeAddress:
    title: NativeAddress
    description: >-
      A native address is an address that is native to the user's chain. For
      example, an Ethereum address is native to Ethereum (0x...).

      If this type is used, we support any native address type. We do not
      require conversion to a BitBadges address like the BitBadgesAddress type.

      @category Interfaces
    type: string
  iSocialConnections:
    properties:
      discord:
        properties:
          username:
            title: iSocialConnections.discord.username
            type: string
          id:
            title: iSocialConnections.discord.id
            type: string
          discriminator:
            title: iSocialConnections.discord.discriminator
            type: string
          lastUpdated:
            $ref: '#/components/schemas/UNIXMilliTimestamp'
            title: iSocialConnections.discord.lastUpdated
        required:
          - username
          - id
          - lastUpdated
        additionalProperties: false
        title: iSocialConnections.discord
        type: object
      twitter:
        properties:
          username:
            title: iSocialConnections.twitter.username
            type: string
          id:
            title: iSocialConnections.twitter.id
            type: string
          lastUpdated:
            $ref: '#/components/schemas/UNIXMilliTimestamp'
            title: iSocialConnections.twitter.lastUpdated
        required:
          - username
          - id
          - lastUpdated
        additionalProperties: false
        title: iSocialConnections.twitter
        type: object
      google:
        properties:
          username:
            title: iSocialConnections.google.username
            type: string
          id:
            title: iSocialConnections.google.id
            type: string
          lastUpdated:
            $ref: '#/components/schemas/UNIXMilliTimestamp'
            title: iSocialConnections.google.lastUpdated
        required:
          - username
          - id
          - lastUpdated
        additionalProperties: false
        title: iSocialConnections.google
        type: object
      github:
        properties:
          username:
            title: iSocialConnections.github.username
            type: string
          id:
            title: iSocialConnections.github.id
            type: string
          lastUpdated:
            $ref: '#/components/schemas/UNIXMilliTimestamp'
            title: iSocialConnections.github.lastUpdated
        required:
          - username
          - id
          - lastUpdated
        additionalProperties: false
        title: iSocialConnections.github
        type: object
    additionalProperties: false
    title: iSocialConnections
    description: >-
      Social connections are tracked for each user to provide an enhanced
      experience.

      These are kept private from other users or sites using the API.

      Currently, there is no use for these, but they may be used in the
      future.

      @category Interfaces
    type: object
  iNotificationPreferences:
    properties:
      email:
        title: iNotificationPreferences.email
        description: The email to receive push notifications.
        type: string
      emailVerification:
        $ref: '#/components/schemas/iEmailVerificationStatus'
        title: iNotificationPreferences.emailVerification
        description: The verification status of the email.
      preferences:
        properties:
          listActivity:
            title: iNotificationPreferences.preferences.listActivity
            type: boolean
          transferActivity:
            title: iNotificationPreferences.preferences.transferActivity
            type: boolean
          claimAlerts:
            title: iNotificationPreferences.preferences.claimAlerts
            type: boolean
        additionalProperties: false
        title: iNotificationPreferences.preferences
        description: >-
          The preferences for the notifications. What type of notifications
          does the user want to receive?
        type: object
    additionalProperties: false
    title: iNotificationPreferences
    description: |-
      Details about the user's push notification preferences.
      @category Interfaces
    type: object
  iEmailVerificationStatus:
    properties:
      verified:
        title: iEmailVerificationStatus.verified
        description: Whether or not the email has been verified.
        type: boolean
      token:
        title: iEmailVerificationStatus.token
        description: >-
          The email verification token. This is used for verification and
          unsubscription.
        type: string
      expiry:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iEmailVerificationStatus.expiry
        description: The expiry of the token for verification purposes.
      antiPhishingCode:
        title: iEmailVerificationStatus.antiPhishingCode
        description: >-
          A unique code that we will send with all emails to verify that
          BitBadges is the one sending the email.
        type: string
    additionalProperties: false
    title: iEmailVerificationStatus
    description: |-
      The verification status of the user's email.
      @category Interfaces
    type: object
  iActivityDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      timestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iActivityDoc.timestamp
        description: The timestamp of the activity.
      block:
        title: iActivityDoc.block
        description: The block number of the activity.
        anyOf:
          - type: string
          - type: number
      _notificationsHandled:
        title: iActivityDoc._notificationsHandled
        description: >-
          Whether or not the notifications have been handled by the indexer or
          not.
        type: boolean
    required:
      - _docId
      - timestamp
      - block
    additionalProperties: false
    title: iActivityDoc, Doc
    description: |-
      The base document interface for all acitivity types.
      @category Interfaces
      @category Indexer
    type: object
  iReviewDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      timestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iActivityDoc.timestamp
        description: The timestamp of the activity.
      block:
        title: iActivityDoc.block
        description: The block number of the activity.
        anyOf:
          - type: string
          - type: number
      _notificationsHandled:
        title: iActivityDoc._notificationsHandled
        description: >-
          Whether or not the notifications have been handled by the indexer or
          not.
        type: boolean
      review:
        title: iReviewDoc.review
        description: The review text (max 2048 characters).
        type: string
      stars:
        title: iReviewDoc.stars
        description: The number of stars given (1-5).
        anyOf:
          - type: string
          - type: number
      from:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iReviewDoc.from
        description: The user who gave the review.
      collectionId:
        title: iReviewDoc.collectionId
        description: >-
          The collection ID of the collection that was reviewed. Only
          applicable to collection reviews.
        anyOf:
          - type: string
          - type: number
      reviewedAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iReviewDoc.reviewedAddress
        description: >-
          The BitBadges address of the user who the review is for. Only
          applicable to user reviews.
    required:
      - _docId
      - timestamp
      - block
      - review
      - stars
      - from
    additionalProperties: false
    title: iReviewDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iTransferActivityDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      timestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iActivityDoc.timestamp
        description: The timestamp of the activity.
      block:
        title: iActivityDoc.block
        description: The block number of the activity.
        anyOf:
          - type: string
          - type: number
      _notificationsHandled:
        title: iActivityDoc._notificationsHandled
        description: >-
          Whether or not the notifications have been handled by the indexer or
          not.
        type: boolean
      to:
        items:
          $ref: '#/components/schemas/BitBadgesAddress'
          title: iTransferActivityDoc.to.[]
        title: iTransferActivityDoc.to
        description: The list of recipients.
        type: array
      from:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iTransferActivityDoc.from
        description: The sender of the badges.
      balances:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iTransferActivityDoc.balances.[]
        title: iTransferActivityDoc.balances
        description: The list of balances and badge IDs that were transferred.
        type: array
      collectionId:
        title: iTransferActivityDoc.collectionId
        description: The collection ID for the badges that was transferred.
        anyOf:
          - type: string
          - type: number
      memo:
        title: iTransferActivityDoc.memo
        description: The memo of the transfer.
        type: string
      precalculateBalancesFromApproval:
        $ref: '#/components/schemas/iApprovalIdentifierDetails'
        title: iTransferActivityDoc.precalculateBalancesFromApproval
        description: Which approval to use to precalculate the balances?
      prioritizedApprovals:
        items:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          title: iTransferActivityDoc.prioritizedApprovals.[]
        title: iTransferActivityDoc.prioritizedApprovals
        description: >-
          The prioritized approvals of the transfer. This is used to check
          certain approvals before others to ensure intended behavior.
        type: array
      onlyCheckPrioritizedApprovals:
        title: iTransferActivityDoc.onlyCheckPrioritizedApprovals
        description: >-
          Whether or not to only check prioritized approvals? If false, we
          will still check all approvals but prioritize the prioritized
          approvals.
        type: boolean
      initiatedBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iTransferActivityDoc.initiatedBy
        description: The user who initiated the transfer transaction.
      txHash:
        title: iTransferActivityDoc.txHash
        description: The transaction hash of the activity.
        type: string
    required:
      - _docId
      - timestamp
      - block
      - to
      - from
      - balances
      - collectionId
      - initiatedBy
    additionalProperties: false
    title: iTransferActivityDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iListActivityDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      timestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iActivityDoc.timestamp
        description: The timestamp of the activity.
      block:
        title: iActivityDoc.block
        description: The block number of the activity.
        anyOf:
          - type: string
          - type: number
      _notificationsHandled:
        title: iActivityDoc._notificationsHandled
        description: >-
          Whether or not the notifications have been handled by the indexer or
          not.
        type: boolean
      listId:
        title: iListActivityDoc.listId
        description: The list ID.
        type: string
      addedToList:
        title: iListActivityDoc.addedToList
        description: Whether or not the address was added to the list or removed.
        type: boolean
      addresses:
        items:
          $ref: '#/components/schemas/BitBadgesAddress'
          title: iListActivityDoc.addresses.[]
        title: iListActivityDoc.addresses
        description: The list of addresses that were added or removed from the list.
        type: array
      txHash:
        title: iListActivityDoc.txHash
        description: The transaction hash of the activity.
        type: string
    required:
      - _docId
      - timestamp
      - block
      - listId
    additionalProperties: false
    title: iListActivityDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iClaimAlertDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      timestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iActivityDoc.timestamp
        description: The timestamp of the activity.
      block:
        title: iActivityDoc.block
        description: The block number of the activity.
        anyOf:
          - type: string
          - type: number
      _notificationsHandled:
        title: iActivityDoc._notificationsHandled
        description: >-
          Whether or not the notifications have been handled by the indexer or
          not.
        type: boolean
      from:
        title: iClaimAlertDoc.from
        description: The sender
        type: string
      bitbadgesAddresses:
        items:
          $ref: '#/components/schemas/BitBadgesAddress'
          title: iClaimAlertDoc.bitbadgesAddresses.[]
        title: iClaimAlertDoc.bitbadgesAddresses
        description: The BitBadges addresses of the users that have been alerted.
        type: array
      collectionId:
        title: iClaimAlertDoc.collectionId
        description: The collection ID of the claim alert.
        anyOf:
          - type: string
          - type: number
      message:
        title: iClaimAlertDoc.message
        description: The message of the claim alert.
        type: string
    required:
      - _docId
      - timestamp
      - block
      - from
      - bitbadgesAddresses
      - collectionId
    additionalProperties: false
    title: iClaimAlertDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iCollectionDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      collectionId:
        title: iCollectionDoc.collectionId
        description: The collection ID
        anyOf:
          - type: string
          - type: number
      collectionMetadataTimeline:
        items:
          $ref: '#/components/schemas/iCollectionMetadataTimeline'
          title: iCollectionDoc.collectionMetadataTimeline.[]
        title: iCollectionDoc.collectionMetadataTimeline
        description: The collection metadata timeline
        type: array
      badgeMetadataTimeline:
        items:
          $ref: '#/components/schemas/iBadgeMetadataTimeline'
          title: iCollectionDoc.badgeMetadataTimeline.[]
        title: iCollectionDoc.badgeMetadataTimeline
        description: The badge metadata timeline
        type: array
      balancesType:
        enum:
          - Standard
          - Off-Chain - Indexed
          - Non-Public
          - Off-Chain - Non-Indexed
        title: iCollectionDoc.balancesType
        description: >-
          The type of balances (i.e. "Standard", "Off-Chain - Indexed",
          "Non-Public, "Off-Chain - Non-Indexed")
        type: string
      offChainBalancesMetadataTimeline:
        items:
          $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          title: iCollectionDoc.offChainBalancesMetadataTimeline.[]
        title: iCollectionDoc.offChainBalancesMetadataTimeline
        description: The off-chain balances metadata timeline
        type: array
      customDataTimeline:
        items:
          $ref: '#/components/schemas/iCustomDataTimeline'
          title: iCollectionDoc.customDataTimeline.[]
        title: iCollectionDoc.customDataTimeline
        description: The custom data timeline
        type: array
      managerTimeline:
        items:
          $ref: '#/components/schemas/iManagerTimeline'
          title: iCollectionDoc.managerTimeline.[]
        title: iCollectionDoc.managerTimeline
        description: The manager timeline
        type: array
      collectionApprovals:
        items:
          $ref: '#/components/schemas/iCollectionApproval'
          title: iCollectionDoc.collectionApprovals.[]
        title: iCollectionDoc.collectionApprovals
        description: The collection approved transfers timeline
        type: array
      standardsTimeline:
        items:
          $ref: '#/components/schemas/iStandardsTimeline'
          title: iCollectionDoc.standardsTimeline.[]
        title: iCollectionDoc.standardsTimeline
        description: The standards timeline
        type: array
      isArchivedTimeline:
        items:
          $ref: '#/components/schemas/iIsArchivedTimeline'
          title: iCollectionDoc.isArchivedTimeline.[]
        title: iCollectionDoc.isArchivedTimeline
        description: The is archived timeline
        type: array
      createdBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iCollectionDoc.createdBy
        description: The BitBadges address of the user who created this collection
      createdBlock:
        title: iCollectionDoc.createdBlock
        description: The block number when this collection was created
        anyOf:
          - type: string
          - type: number
      createdTimestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iCollectionDoc.createdTimestamp
        description: >-
          The timestamp when this collection was created (milliseconds since
          epoch)
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iCollectionDoc.updateHistory.[]
        title: iCollectionDoc.updateHistory
        description: The update history of this collection
        type: array
      aliasAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iCollectionDoc.aliasAddress
        description: The alias BitBadges address for the collection
    required:
      - _docId
      - collectionId
      - collectionMetadataTimeline
      - badgeMetadataTimeline
      - balancesType
      - offChainBalancesMetadataTimeline
      - customDataTimeline
      - managerTimeline
      - collectionApprovals
      - standardsTimeline
      - isArchivedTimeline
      - createdBy
      - createdBlock
      - createdTimestamp
      - updateHistory
      - aliasAddress
    additionalProperties: false
    title: iCollectionDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iAccountDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      publicKey:
        title: iAccountDoc.publicKey
        description: The public key of the account
        type: string
      accountNumber:
        title: iAccountDoc.accountNumber
        description: The account number of the account
        anyOf:
          - type: string
          - type: number
      pubKeyType:
        title: iAccountDoc.pubKeyType
        description: The public key type of the account
        type: string
      bitbadgesAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAccountDoc.bitbadgesAddress
        description: The BitBadges address of the account
      ethAddress:
        title: iAccountDoc.ethAddress
        description: The Eth address of the account
        type: string
      solAddress:
        title: iAccountDoc.solAddress
        description: The Solana address of the account
        type: string
      btcAddress:
        title: iAccountDoc.btcAddress
        description: The Bitcoin address of the account
        type: string
      sequence:
        title: iAccountDoc.sequence
        description: The sequence of the account
        anyOf:
          - type: string
          - type: number
      balance:
        $ref: '#/components/schemas/iCosmosCoin'
        title: iAccountDoc.balance
        description: The balance of the account
    required:
      - _docId
      - publicKey
      - accountNumber
      - pubKeyType
      - bitbadgesAddress
      - ethAddress
      - solAddress
      - btcAddress
    additionalProperties: false
    title: iAccountDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iCustomLink:
    properties:
      title:
        title: iCustomLink.title
        description: Title of the link
        type: string
      url:
        title: iCustomLink.url
        description: URL of the link
        type: string
      image:
        title: iCustomLink.image
        description: Description of the link
        type: string
    required:
      - title
      - url
      - image
    additionalProperties: false
    title: iCustomLink
    description: |-
      CustomLinks are custom links that can be added to a profile.
      @category Interfaces
    type: object
  iCustomPage:
    properties:
      title:
        title: iCustomPage.title
        description: The title of the custom page
        type: string
      description:
        title: iCustomPage.description
        description: The description of the custom page
        type: string
      items:
        items:
          $ref: '#/components/schemas/iBatchBadgeDetails'
          title: iCustomPage.items.[]
        title: iCustomPage.items
        description: The badge IDs to display on the custom page
        type: array
    required:
      - title
      - description
      - items
    additionalProperties: false
    title: iCustomPage
    description: '@category Interfaces'
    type: object
  iCustomListPage:
    properties:
      title:
        title: iCustomListPage.title
        description: The title of the custom list page
        type: string
      description:
        title: iCustomListPage.description
        description: The description of the custom list page
        type: string
      items:
        items:
          title: iCustomListPage.items.[]
          type: string
        title: iCustomListPage.items
        description: The list IDs to display on the custom list page
        type: array
    required:
      - title
      - description
      - items
    additionalProperties: false
    title: iCustomListPage
    description: >-
      CustomListPage is a custom list page that can be added to a profile. The
      items are valid list IDs.

      @category Interfaces
    type: object
  iProfileDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      fetchedProfile:
        title: iProfileDoc.fetchedProfile
        description: Whether we have already fetched the profile or not
        type: boolean
      seenActivity:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iProfileDoc.seenActivity
        description: >-
          The timestamp of the last activity seen for this account
          (milliseconds since epoch)
      createdAt:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iProfileDoc.createdAt
        description: >-
          The timestamp of when this account was created (milliseconds since
          epoch)
      discord:
        title: iProfileDoc.discord
        description: The Discord username of the account
        type: string
      twitter:
        title: iProfileDoc.twitter
        description: The Twitter username of the account
        type: string
      github:
        title: iProfileDoc.github
        description: The GitHub username of the account
        type: string
      telegram:
        title: iProfileDoc.telegram
        description: The Telegram username of the account
        type: string
      readme:
        title: iProfileDoc.readme
        description: The readme of the account
        type: string
      customLinks:
        items:
          $ref: '#/components/schemas/iCustomLink'
          title: iProfileDoc.customLinks.[]
        title: iProfileDoc.customLinks
        description: The custom links of the account
        type: array
      hiddenBadges:
        items:
          $ref: '#/components/schemas/iBatchBadgeDetails'
          title: iProfileDoc.hiddenBadges.[]
        title: iProfileDoc.hiddenBadges
        description: The hidden badges of the account
        type: array
      hiddenLists:
        items:
          title: iProfileDoc.hiddenLists.[]
          type: string
        title: iProfileDoc.hiddenLists
        description: The hidden lists of the account
        type: array
      customPages:
        properties:
          badges:
            items:
              $ref: '#/components/schemas/iCustomPage'
              title: iProfileDoc.customPages.badges.[]
            title: iProfileDoc.customPages.badges
            type: array
          lists:
            items:
              $ref: '#/components/schemas/iCustomListPage'
              title: iProfileDoc.customPages.lists.[]
            title: iProfileDoc.customPages.lists
            type: array
        required:
          - badges
          - lists
        additionalProperties: false
        title: iProfileDoc.customPages
        description: The custom pages of the account
        type: object
      watchlists:
        properties:
          badges:
            items:
              $ref: '#/components/schemas/iCustomPage'
              title: iProfileDoc.watchlists.badges.[]
            title: iProfileDoc.watchlists.badges
            type: array
          lists:
            items:
              $ref: '#/components/schemas/iCustomListPage'
              title: iProfileDoc.watchlists.lists.[]
            title: iProfileDoc.watchlists.lists
            type: array
        required:
          - badges
          - lists
        additionalProperties: false
        title: iProfileDoc.watchlists
        description: The watched lists of the account's portfolio
        type: object
      profilePicUrl:
        title: iProfileDoc.profilePicUrl
        description: The profile picture URL of the account
        type: string
      username:
        title: iProfileDoc.username
        description: The username of the account
        type: string
      latestSignedInChain:
        $ref: '#/components/schemas/SupportedChain'
        title: iProfileDoc.latestSignedInChain
        description: The latest chain the user signed in with
      solAddress:
        title: iProfileDoc.solAddress
        description: >-
          The Solana address of the profile, if applicable (bc we need it to
          convert)
        type: string
      notifications:
        $ref: '#/components/schemas/iNotificationPreferences'
        title: iProfileDoc.notifications
        description: The notifications of the account
      socialConnections:
        $ref: '#/components/schemas/iSocialConnections'
        title: iProfileDoc.socialConnections
        description: Social connections stored for the account
      approvedSignInMethods:
        properties:
          discord:
            properties:
              username:
                title: iProfileDoc.approvedSignInMethods.discord.username
                type: string
              discriminator:
                title: iProfileDoc.approvedSignInMethods.discord.discriminator
                type: string
              id:
                title: iProfileDoc.approvedSignInMethods.discord.id
                type: string
            required:
              - username
              - id
            additionalProperties: false
            title: iProfileDoc.approvedSignInMethods.discord
            type: object
        additionalProperties: false
        title: iProfileDoc.approvedSignInMethods
        description: Approved ways to sign in (rather than Blockin)
        type: object
    required:
      - _docId
    additionalProperties: false
    title: iProfileDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iQueueDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      uri:
        title: iQueueDoc.uri
        description: >-
          The URI of the metadata to be fetched. If {id} is present, it will
          be replaced with each individual ID in badgeIds
        type: string
      collectionId:
        title: iQueueDoc.collectionId
        description: The collection ID of the metadata to be fetched
        anyOf:
          - type: string
          - type: number
      loadBalanceId:
        title: iQueueDoc.loadBalanceId
        description: >-
          The load balance ID of the metadata to be fetched. Only the node
          with the same load balance ID will fetch this metadata
        anyOf:
          - type: string
          - type: number
      refreshRequestTime:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iQueueDoc.refreshRequestTime
        description: >-
          The timestamp of when this metadata was requested to be refreshed
          (milliseconds since epoch)
      numRetries:
        title: iQueueDoc.numRetries
        description: >-
          The number of times this metadata has been tried to be fetched but
          failed
        anyOf:
          - type: string
          - type: number
      lastFetchedAt:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iQueueDoc.lastFetchedAt
        description: >-
          The timestamp of when this metadata was last fetched (milliseconds
          since epoch)
      error:
        title: iQueueDoc.error
        description: The error message if this metadata failed to be fetched
        type: string
      deletedAt:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iQueueDoc.deletedAt
        description: >-
          The timestamp of when this document was deleted (milliseconds since
          epoch)
      nextFetchTime:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iQueueDoc.nextFetchTime
        description: >-
          The timestamp of when this document should be fetched next
          (milliseconds since epoch)
      emailMessage:
        title: iQueueDoc.emailMessage
        type: string
      recipientAddress:
        title: iQueueDoc.recipientAddress
        type: string
      activityDocId:
        title: iQueueDoc.activityDocId
        type: string
      notificationType:
        title: iQueueDoc.notificationType
        type: string
    required:
      - _docId
      - uri
      - collectionId
      - loadBalanceId
      - refreshRequestTime
      - numRetries
    additionalProperties: false
    title: iQueueDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iIndexerStatus:
    properties:
      status:
        $ref: '#/components/schemas/iStatusDoc'
        title: iIndexerStatus.status
    required:
      - status
    additionalProperties: false
    title: iIndexerStatus
    description: '@category Interfaces'
    type: object
  iLatestBlockStatus:
    properties:
      height:
        title: iLatestBlockStatus.height
        description: The height of the latest block
        anyOf:
          - type: string
          - type: number
      txIndex:
        title: iLatestBlockStatus.txIndex
        description: The transaction index of the latest block
        anyOf:
          - type: string
          - type: number
      timestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iLatestBlockStatus.timestamp
        description: The timestamp of the latest block (milliseconds since epoch)
    required:
      - height
      - txIndex
      - timestamp
    additionalProperties: false
    title: iLatestBlockStatus
    description: '@category Interfaces'
    type: object
  iStatusDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      block:
        $ref: '#/components/schemas/iLatestBlockStatus'
        title: iStatusDoc.block
        description: The latest synced block status (i.e. height, txIndex, timestamp)
      nextCollectionId:
        title: iStatusDoc.nextCollectionId
        description: The next collection ID to be used
        anyOf:
          - type: string
          - type: number
      gasPrice:
        title: iStatusDoc.gasPrice
        description: The current gas price based on the average of the lastXGasAmounts
        type: number
      lastXGasAmounts:
        items:
          title: iStatusDoc.lastXGasAmounts.[]
          anyOf:
            - type: string
            - type: number
        title: iStatusDoc.lastXGasAmounts
        description: The last X gas prices
        type: array
      lastXGasLimits:
        items:
          title: iStatusDoc.lastXGasLimits.[]
          anyOf:
            - type: string
            - type: number
        title: iStatusDoc.lastXGasLimits
        description: The last X gas limits
        type: array
    required:
      - _docId
      - block
      - nextCollectionId
      - gasPrice
      - lastXGasAmounts
      - lastXGasLimits
    additionalProperties: false
    title: iStatusDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iAddressListEditKey:
    properties:
      key:
        title: iAddressListEditKey.key
        description: The key that can be used to edit the address list
        type: string
      expirationDate:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iAddressListEditKey.expirationDate
        description: The expiration date of the key (milliseconds since epoch)
      mustSignIn:
        title: iAddressListEditKey.mustSignIn
        description: True if the user can only add their signed in address to the list
        type: boolean
    required:
      - key
      - expirationDate
    additionalProperties: false
    title: iAddressListEditKey
    description: '@category Interfaces'
    type: object
  iAddressListDoc:
    properties:
      listId:
        title: iAddressList.listId
        description: The ID of the address list.
        type: string
      addresses:
        items:
          title: iAddressList.addresses.[]
          type: string
        title: iAddressList.addresses
        description: >-
          The addresses of the address list. If this is a tracker list, the
          addresses are the tracker IDs.
        type: array
      whitelist:
        title: iAddressList.whitelist
        description: >-
          Whether or not to include ONLY the addresses or include all EXCEPT
          the addresses.
        type: boolean
      uri:
        title: iAddressList.uri
        description: The URI where to fetch the address list metadata from.
        type: string
      customData:
        title: iAddressList.customData
        description: Arbitrary custom data that can be stored on-chain.
        type: string
      createdBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAddressList.createdBy
        description: The address that created the address list.
      aliasAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAddressList.aliasAddress
        description: The alias BitBadges address of the address list.
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iAddressListDoc.updateHistory.[]
        title: iAddressListDoc.updateHistory
        description: The update history of this list
        type: array
      createdBlock:
        title: iAddressListDoc.createdBlock
        description: The block number when this list was created
        anyOf:
          - type: string
          - type: number
      lastUpdated:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iAddressListDoc.lastUpdated
        description: >-
          The timestamp of when this list was last updated (milliseconds since
          epoch)
      nsfw:
        properties:
          reason:
            title: iAddressListDoc.nsfw.reason
            type: string
        required:
          - reason
        additionalProperties: false
        title: iAddressListDoc.nsfw
        description: The NSFW reason if this list is NSFW
        type: object
      reported:
        properties:
          reason:
            title: iAddressListDoc.reported.reason
            type: string
        required:
          - reason
        additionalProperties: false
        title: iAddressListDoc.reported
        description: The reported reason if this list is reported
        type: object
      private:
        title: iAddressListDoc.private
        description: True if this list is private and will not show up in search results
        type: boolean
      viewableWithLink:
        title: iAddressListDoc.viewableWithLink
        description: True if this list is viewable if queried by the list ID directly
        type: boolean
    required:
      - listId
      - addresses
      - whitelist
      - uri
      - customData
      - _docId
      - updateHistory
      - createdBlock
      - lastUpdated
    additionalProperties: false
    title: iAddressListDoc, iAddressList, Doc
    description: |-
      @category Interfaces
      @category Interfaces
      @category Indexer
    type: object
  iBalanceDoc:
    properties:
      balances:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iUserBalanceStore.balances.[]
        title: iUserBalanceStore.balances
        description: The user's balances.
        type: array
      incomingApprovals:
        items:
          $ref: '#/components/schemas/iUserIncomingApproval'
          title: iUserBalanceStore.incomingApprovals.[]
        title: iUserBalanceStore.incomingApprovals
        description: The user's incoming approvals.
        type: array
      outgoingApprovals:
        items:
          $ref: '#/components/schemas/iUserOutgoingApproval'
          title: iUserBalanceStore.outgoingApprovals.[]
        title: iUserBalanceStore.outgoingApprovals
        description: The user's outgoing approvals.
        type: array
      userPermissions:
        $ref: '#/components/schemas/iUserPermissions'
        title: iUserBalanceStore.userPermissions
        description: The user's permissions.
      autoApproveSelfInitiatedOutgoingTransfers:
        title: iUserBalanceStore.autoApproveSelfInitiatedOutgoingTransfers
        description: >-
          Whether the user's self-initiated outgoing transfers are
          auto-approved. If not, they must be explicitly approved using the
          outgoing approvals.
        type: boolean
      autoApproveSelfInitiatedIncomingTransfers:
        title: iUserBalanceStore.autoApproveSelfInitiatedIncomingTransfers
        description: >-
          Whether the user's self-initiated incoming transfers are
          auto-approved. If not, they must be explicitly approved using the
          incoming approvals.
        type: boolean
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      collectionId:
        title: iBalanceDoc.collectionId
        description: The collection ID
        anyOf:
          - type: string
          - type: number
      bitbadgesAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iBalanceDoc.bitbadgesAddress
        description: The BitBadges address of the user
      onChain:
        title: iBalanceDoc.onChain
        description: True if the balances are on-chain
        type: boolean
      uri:
        title: iBalanceDoc.uri
        description: The URI of the off-chain balances
        type: string
      fetchedAt:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iBalanceDoc.fetchedAt
        description: >-
          The timestamp of when the off-chain balances were fetched
          (milliseconds since epoch). For BitBadges indexer, we only populate
          this for Mint and Total docs.
      fetchedAtBlock:
        title: iBalanceDoc.fetchedAtBlock
        description: >-
          The block number of when the off-chain balances were fetched. For
          BitBadges indexer, we only populate this for Mint and Total docs.
        anyOf:
          - type: string
          - type: number
      isPermanent:
        title: iBalanceDoc.isPermanent
        description: True if the off-chain balances are using permanent storage
        type: boolean
      contentHash:
        title: iBalanceDoc.contentHash
        description: The content hash of the off-chain balances
        type: string
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iBalanceDoc.updateHistory.[]
        title: iBalanceDoc.updateHistory
        description: The update history of this balance
        type: array
    required:
      - balances
      - incomingApprovals
      - outgoingApprovals
      - userPermissions
      - autoApproveSelfInitiatedOutgoingTransfers
      - autoApproveSelfInitiatedIncomingTransfers
      - _docId
      - collectionId
      - bitbadgesAddress
      - onChain
      - updateHistory
    additionalProperties: false
    title: iBalanceDoc, iUserBalanceStore, Doc
    description: >-
      @category Interfaces

      This stores everythign about a user's balances for a specific collection
      ID.

      This includes their balances, incoming approvals, outgoing approvals,
      and permissions.

      @category Interfaces

      @category Indexer
    type: object
  ClaimIntegrationPluginType:
    enum:
      - password
      - numUses
      - discord
      - codes
      - github
      - google
      - twitter
      - transferTimes
      - requiresProofOfAddress
      - whitelist
      - mustOwnBadges
      - api
      - email
    title: ClaimIntegrationPluginType
    type: string
  iClaimBuilderDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      cid:
        title: iClaimBuilderDoc.cid
        description: The CID of the password document
        type: string
      createdBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iClaimBuilderDoc.createdBy
        description: The BitBadges address of the user who created this password
      docClaimed:
        title: iClaimBuilderDoc.docClaimed
        description: True if the password document is claimed by the collection
        type: boolean
      collectionId:
        title: iClaimBuilderDoc.collectionId
        description: The collection ID of the password document
        anyOf:
          - type: string
          - type: number
      plugins:
        items:
          title: iClaimBuilderDoc.plugins.[]
        title: iClaimBuilderDoc.plugins
        description: Dynamic checks to run in the form of plugins
        type: array
      manualDistribution:
        title: iClaimBuilderDoc.manualDistribution
        description: >-
          If true, the claim codes are to be distributed manually. This doc
          will only be used for storage purposes.
        type: boolean
      state:
        additionalProperties: {}
        title: iClaimBuilderDoc.state
        description: The current state of each plugin
        type: object
      action:
        properties:
          codes:
            items:
              title: iClaimBuilderDoc.action.codes.[]
              type: string
            title: iClaimBuilderDoc.action.codes
            type: array
          seedCode:
            title: iClaimBuilderDoc.action.seedCode
            type: string
          balancesToSet:
            $ref: '#/components/schemas/iIncrementedBalances'
            title: iClaimBuilderDoc.action.balancesToSet
          listId:
            title: iClaimBuilderDoc.action.listId
            type: string
        additionalProperties: false
        title: iClaimBuilderDoc.action
        description: Details for the action to perform if the criteria is correct
        type: object
    required:
      - _docId
      - cid
      - createdBy
      - docClaimed
      - collectionId
      - plugins
      - state
      - action
    additionalProperties: false
    title: iClaimBuilderDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iApprovalTrackerDoc:
    properties:
      collectionId:
        title: iAmountTrackerIdDetails.collectionId
        description: The collection ID for the approval.
        anyOf:
          - type: string
          - type: number
      approvalId:
        title: iAmountTrackerIdDetails.approvalId
        description: The approval ID
        type: string
      amountTrackerId:
        title: iAmountTrackerIdDetails.amountTrackerId
        description: The amount tracker ID of the approval.
        type: string
      approvalLevel:
        title: iAmountTrackerIdDetails.approvalLevel
        description: >-
          The approval level of the approval "collection", "incoming", or
          "outgoing".
        type: string
      approverAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAmountTrackerIdDetails.approverAddress
        description: The address of the approval to check.
      trackerType:
        title: iAmountTrackerIdDetails.trackerType
        description: >-
          The type of tracker to check "overall", "to", "from", or
          "initiatedBy".
        type: string
      approvedAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAmountTrackerIdDetails.approvedAddress
        description: The address to check for the approval.
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      numTransfers:
        title: iApprovalTrackerDoc.numTransfers
        description: The number of transfers. Is an incrementing tally.
        anyOf:
          - type: string
          - type: number
      amounts:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iApprovalTrackerDoc.amounts.[]
        title: iApprovalTrackerDoc.amounts
        description: A tally of the amounts transferred for this approval.
        type: array
    required:
      - collectionId
      - approvalId
      - amountTrackerId
      - approvalLevel
      - approverAddress
      - trackerType
      - approvedAddress
      - _docId
      - numTransfers
      - amounts
    additionalProperties: false
    title: iApprovalTrackerDoc, iAmountTrackerIdDetails, Doc
    description: |-
      @category Interfaces
      @category Interfaces
      @category Indexer
    type: object
  iChallengeTrackerIdDetails:
    properties:
      collectionId:
        title: iChallengeTrackerIdDetails.collectionId
        description: The collection ID
        anyOf:
          - type: string
          - type: number
      approvalId:
        title: iChallengeTrackerIdDetails.approvalId
        description: The approval ID
        type: string
      challengeTrackerId:
        title: iChallengeTrackerIdDetails.challengeTrackerId
        description: The challenge ID
        type: string
      challengeLevel:
        enum:
          - collection
          - incoming
          - outgoing
          - ''
        title: iChallengeTrackerIdDetails.challengeLevel
        description: The challenge level (i.e. "collection", "incoming", "outgoing")
        type: string
      approverAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iChallengeTrackerIdDetails.approverAddress
        description: The approver address (leave blank if challengeLevel = "collection")
    required:
      - collectionId
      - approvalId
      - challengeTrackerId
      - challengeLevel
      - approverAddress
    additionalProperties: false
    title: iChallengeTrackerIdDetails
    description: '@category Interfaces'
    type: object
  iMerkleChallengeDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      collectionId:
        title: iMerkleChallengeDoc.collectionId
        description: The collection ID
        anyOf:
          - type: string
          - type: number
      challengeTrackerId:
        title: iMerkleChallengeDoc.challengeTrackerId
        description: The challenge ID
        type: string
      approvalId:
        title: iMerkleChallengeDoc.approvalId
        description: The approval ID
        type: string
      challengeLevel:
        enum:
          - collection
          - incoming
          - outgoing
          - ''
        title: iMerkleChallengeDoc.challengeLevel
        description: The challenge level (i.e. "collection", "incoming", "outgoing")
        type: string
      approverAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iMerkleChallengeDoc.approverAddress
        description: The approver address (leave blank if challengeLevel = "collection")
      usedLeafIndices:
        items:
          title: iMerkleChallengeDoc.usedLeafIndices.[]
          anyOf:
            - type: string
            - type: number
        title: iMerkleChallengeDoc.usedLeafIndices
        description: >-
          The used leaf indices for each challenge. A leaf index is the leaf
          location in the bottommost layer of the Merkle tree
        type: array
    required:
      - _docId
      - collectionId
      - challengeTrackerId
      - approvalId
      - challengeLevel
      - approverAddress
      - usedLeafIndices
    additionalProperties: false
    title: iMerkleChallengeDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iMerklechallengeTrackerIdDetails:
    properties:
      collectionId:
        title: iMerklechallengeTrackerIdDetails.collectionId
        description: The collection ID
        anyOf:
          - type: string
          - type: number
      challengeTrackerId:
        title: iMerklechallengeTrackerIdDetails.challengeTrackerId
        description: The challenge ID
        type: string
      challengeLevel:
        enum:
          - collection
          - incoming
          - outgoing
          - ''
        title: iMerklechallengeTrackerIdDetails.challengeLevel
        description: The challenge level (i.e. "collection", "incoming", "outgoing")
        type: string
      approverAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iMerklechallengeTrackerIdDetails.approverAddress
        description: The approver address (leave blank if challengeLevel = "collection")
      usedLeafIndices:
        items:
          title: iMerklechallengeTrackerIdDetails.usedLeafIndices.[]
          anyOf:
            - type: string
            - type: number
        title: iMerklechallengeTrackerIdDetails.usedLeafIndices
        description: >-
          The used leaf indices for each challenge. A leaf index is the leaf
          location in the bottommost layer of the Merkle tree
        type: array
    required:
      - collectionId
      - challengeTrackerId
      - challengeLevel
      - approverAddress
      - usedLeafIndices
    additionalProperties: false
    title: iMerklechallengeTrackerIdDetails
    description: '@category Interfaces'
    type: object
  iFetchDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      content:
        anyOf:
          - $ref: '#/components/schemas/iMetadata'
            title: iFetchDoc.content
          - $ref: '#/components/schemas/iApprovalInfoDetails'
            title: iFetchDoc.content
          - $ref: '#/components/schemas/iOffChainBalancesMap'
            title: iFetchDoc.content
          - $ref: '#/components/schemas/iChallengeDetails'
            title: iFetchDoc.content
        title: iFetchDoc.content
        description: >-
          The content of the fetch document. Note that we store balances in
          BALANCES_DB and not here to avoid double storage.
      fetchedAt:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iFetchDoc.fetchedAt
        description: The time the document was fetched
      fetchedAtBlock:
        title: iFetchDoc.fetchedAtBlock
        description: The block the document was fetched
        anyOf:
          - type: string
          - type: number
      db:
        enum:
          - ApprovalInfo
          - Metadata
          - Balances
          - ChallengeInfo
        title: iFetchDoc.db
        description: The type of content fetched. This is used for querying purposes
        type: string
      isPermanent:
        title: iFetchDoc.isPermanent
        description: >-
          True if the document is permanent (i.e. fetched from a permanent URI
          like IPFS)
        type: boolean
    required:
      - _docId
      - fetchedAt
      - fetchedAtBlock
      - db
      - isPermanent
    additionalProperties: false
    title: iFetchDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iRefreshDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      collectionId:
        title: iRefreshDoc.collectionId
        description: The collection ID
        anyOf:
          - type: string
          - type: number
      refreshRequestTime:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iRefreshDoc.refreshRequestTime
        description: The time the refresh was requested (Unix timestamp in milliseconds)
    required:
      - _docId
      - collectionId
      - refreshRequestTime
    additionalProperties: false
    title: iRefreshDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iAirdropDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      airdropped:
        title: iAirdropDoc.airdropped
        description: True if the airdrop has been completed
        type: boolean
      timestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iAirdropDoc.timestamp
        description: >-
          The timestamp of when the airdrop was completed (milliseconds since
          epoch)
      hash:
        title: iAirdropDoc.hash
        description: The hash of the airdrop transaction
        type: string
    required:
      - _docId
      - airdropped
      - timestamp
    additionalProperties: false
    title: iAirdropDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iIPFSTotalsDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      bytesUploaded:
        title: iIPFSTotalsDoc.bytesUploaded
        description: The total bytes uploaded
        anyOf:
          - type: string
          - type: number
    required:
      - _docId
      - bytesUploaded
    additionalProperties: false
    title: iIPFSTotalsDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iComplianceDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      badges:
        properties:
          nsfw:
            items:
              $ref: '#/components/schemas/iBatchBadgeDetails'
              title: iComplianceDoc.badges.nsfw.[]
            title: iComplianceDoc.badges.nsfw
            type: array
          reported:
            items:
              $ref: '#/components/schemas/iBatchBadgeDetails'
              title: iComplianceDoc.badges.reported.[]
            title: iComplianceDoc.badges.reported
            type: array
        required:
          - nsfw
          - reported
        additionalProperties: false
        title: iComplianceDoc.badges
        type: object
      addressLists:
        properties:
          nsfw:
            items:
              properties:
                listId:
                  title: iComplianceDoc.addressLists.nsfw.[].listId
                  type: string
                reason:
                  title: iComplianceDoc.addressLists.nsfw.[].reason
                  type: string
              required:
                - listId
                - reason
              additionalProperties: false
              title: iComplianceDoc.addressLists.nsfw.[]
              type: object
            title: iComplianceDoc.addressLists.nsfw
            type: array
          reported:
            items:
              properties:
                listId:
                  title: iComplianceDoc.addressLists.reported.[].listId
                  type: string
                reason:
                  title: iComplianceDoc.addressLists.reported.[].reason
                  type: string
              required:
                - listId
                - reason
              additionalProperties: false
              title: iComplianceDoc.addressLists.reported.[]
              type: object
            title: iComplianceDoc.addressLists.reported
            type: array
        required:
          - nsfw
          - reported
        additionalProperties: false
        title: iComplianceDoc.addressLists
        type: object
      accounts:
        properties:
          nsfw:
            items:
              properties:
                bitbadgesAddress:
                  $ref: '#/components/schemas/BitBadgesAddress'
                  title: iComplianceDoc.accounts.nsfw.[].bitbadgesAddress
                reason:
                  title: iComplianceDoc.accounts.nsfw.[].reason
                  type: string
              required:
                - bitbadgesAddress
                - reason
              additionalProperties: false
              title: iComplianceDoc.accounts.nsfw.[]
              type: object
            title: iComplianceDoc.accounts.nsfw
            type: array
          reported:
            items:
              properties:
                bitbadgesAddress:
                  $ref: '#/components/schemas/BitBadgesAddress'
                  title: iComplianceDoc.accounts.reported.[].bitbadgesAddress
                reason:
                  title: iComplianceDoc.accounts.reported.[].reason
                  type: string
              required:
                - bitbadgesAddress
                - reason
              additionalProperties: false
              title: iComplianceDoc.accounts.reported.[]
              type: object
            title: iComplianceDoc.accounts.reported
            type: array
        required:
          - nsfw
          - reported
        additionalProperties: false
        title: iComplianceDoc.accounts
        type: object
    required:
      - _docId
      - badges
      - addressLists
      - accounts
    additionalProperties: false
    title: iComplianceDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iBlockinAuthSignatureDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      signature:
        title: iBlockinAuthSignatureDoc.signature
        description: >-
          The signature of the Blockin message with the Blockin params as the
          params field
        type: string
      publicKey:
        title: iBlockinAuthSignatureDoc.publicKey
        description: >-
          The public key for the signed. Only needed for certain chains
          (Cosmos).
        type: string
      name:
        title: iBlockinAuthSignatureDoc.name
        type: string
      description:
        title: iBlockinAuthSignatureDoc.description
        type: string
      image:
        title: iBlockinAuthSignatureDoc.image
        type: string
      bitbadgesAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iBlockinAuthSignatureDoc.bitbadgesAddress
        description: The BitBadges address of the signer
      params:
        $ref: '#/components/schemas/ChallengeParams'
        title: iBlockinAuthSignatureDoc.params
        description: >-
          The sign-in params. These are all the details in the message that
          was signed.
      secretsProofs:
        items:
          $ref: '#/components/schemas/iSecretsProof'
          title: iBlockinAuthSignatureDoc.secretsProofs.[]
        title: iBlockinAuthSignatureDoc.secretsProofs
        description: >-
          If required, you can additionally attach proof of secrets ot the
          auth flow. These can be used to prove sensitive information to
          verifiers.
        type: array
      createdAt:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iBlockinAuthSignatureDoc.createdAt
        description: >-
          The timestamp of when the signature was created (milliseconds since
          epoch)
      deletedAt:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iBlockinAuthSignatureDoc.deletedAt
        description: >-
          If deleted, we still store temporarily for a period of time. We use
          a deletedAt timestamp to determine when to delete.
    required:
      - _docId
      - signature
      - name
      - description
      - image
      - bitbadgesAddress
      - params
      - secretsProofs
      - createdAt
    additionalProperties: false
    title: iBlockinAuthSignatureDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iSecretDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      messageFormat:
        enum:
          - plaintext
          - json
        title: iSecret.messageFormat
        description: The message format of the secretMessages.
        type: string
      createdBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iSecret.createdBy
        description: The address of the user who created the secret.
      proofOfIssuance:
        properties:
          message:
            title: iSecret.proofOfIssuance.message
            type: string
          signature:
            title: iSecret.proofOfIssuance.signature
            type: string
          signer:
            title: iSecret.proofOfIssuance.signer
            type: string
          publicKey:
            title: iSecret.proofOfIssuance.publicKey
            type: string
        required:
          - message
          - signature
          - signer
        additionalProperties: false
        title: iSecret.proofOfIssuance
        description: >-
          Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

          BBS+ signatures are signed with a BBS+ key pair, but you would often
          want the issuer to be a native address.

          The prooofOfIssuance establishes a link saying that "I am the issuer
          of this secret signed with BBS+ key pair ___".


          Fields can be left blank for standard signatures.
        type: object
      secretId:
        title: iSecret.secretId
        description: >-
          The secret ID. This is the ID that is given to the user to query the
          secret. Anyone with the ID can query it, so keep this safe and
          secure.
        type: string
      scheme:
        enum:
          - bbs
          - standard
        title: iSecret.scheme
        description: >-
          The scheme of the secret. BBS+ signatures are supported and can be
          used where selective disclosure is a requirement.

          Otherwise, you can simply use your native blockchain's signature
          scheme.
        type: string
      type:
        title: iSecret.type
        description: The type of the secret (e.g. credential).
        type: string
      secretMessages:
        items:
          title: iSecret.secretMessages.[]
          type: string
        title: iSecret.secretMessages
        description: >-
          Thesse are the secrets that are signed.

          For BBS+ signatures, there can be >1 secretMessages, and the signer
          can selectively disclose the secrets.

          For standard signatures, there is only 1 secretMessage.
        type: array
      dataIntegrityProof:
        properties:
          signature:
            title: iSecret.dataIntegrityProof.signature
            type: string
          signer:
            title: iSecret.dataIntegrityProof.signer
            type: string
          publicKey:
            title: iSecret.dataIntegrityProof.publicKey
            type: string
        required:
          - signature
          - signer
        additionalProperties: false
        title: iSecret.dataIntegrityProof
        description: >-
          This is the signature and accompanying details of the
          secretMessages. The siganture maintains the integrity of the
          secretMessages.


          This should match the expected scheme. For example, if the scheme is
          BBS+, the signature should be a BBS+ signature and signer should be
          a BBS+ public key.
        type: object
      name:
        title: iSecret.name
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      image:
        title: iSecret.image
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      description:
        title: iSecret.description
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      viewers:
        items:
          title: iSecret.viewers.[]
          type: string
        title: iSecret.viewers
        description: >-
          Viewers for query purposes. These are the addresses that can query
          the secret.
        type: array
      anchors:
        items:
          properties:
            txHash:
              title: iSecret.anchors.[].txHash
              type: string
            message:
              title: iSecret.anchors.[].message
              type: string
          additionalProperties: false
          title: iSecret.anchors.[]
          type: object
        title: iSecret.anchors
        description: |-
          Anchors are on-chain transactions used to prove certain things
          about the secret. For example, you can anchor the secret to a
          transaction hash to prove that the secret existed at a certain time.
        type: array
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iSecretDoc.updateHistory.[]
        title: iSecretDoc.updateHistory
        type: array
    required:
      - _docId
      - messageFormat
      - createdBy
      - proofOfIssuance
      - secretId
      - scheme
      - type
      - secretMessages
      - dataIntegrityProof
      - name
      - image
      - description
      - viewers
      - anchors
      - updateHistory
    additionalProperties: false
    title: iSecretDoc, Doc, iSecret
    description: |-
      @category Interfaces
      @category Indexer
      @category Interfaces
    type: object
  iFollowDetailsDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      bitbadgesAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iFollowDetailsDoc.bitbadgesAddress
        description: The BitBadges address of the user
      followingCount:
        title: iFollowDetailsDoc.followingCount
        description: The number of users that the user is following
        anyOf:
          - type: string
          - type: number
      followersCount:
        title: iFollowDetailsDoc.followersCount
        description: The number of users that are following the user
        anyOf:
          - type: string
          - type: number
      followers:
        items:
          $ref: '#/components/schemas/BitBadgesAddress'
          title: iFollowDetailsDoc.followers.[]
        title: iFollowDetailsDoc.followers
        description: The followers of the user
        type: array
      following:
        items:
          $ref: '#/components/schemas/BitBadgesAddress'
          title: iFollowDetailsDoc.following.[]
        title: iFollowDetailsDoc.following
        description: The following of the user
        type: array
      followingCollectionId:
        title: iFollowDetailsDoc.followingCollectionId
        description: The collection ID of the following collection
        anyOf:
          - type: string
          - type: number
    required:
      - _docId
      - bitbadgesAddress
      - followingCount
      - followersCount
      - followers
      - following
      - followingCollectionId
    additionalProperties: false
    title: iFollowDetailsDoc, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iMapDoc:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      creator:
        title: iMap.creator
        type: string
      mapId:
        title: iMap.mapId
        type: string
      inheritManagerTimelineFrom:
        title: iMap.inheritManagerTimelineFrom
        anyOf:
          - type: string
          - type: number
      managerTimeline:
        items:
          $ref: '#/components/schemas/iManagerTimeline'
          title: iMap.managerTimeline.[]
        title: iMap.managerTimeline
        type: array
      updateCriteria:
        $ref: '#/components/schemas/iMapUpdateCriteria'
        title: iMap.updateCriteria
      valueOptions:
        $ref: '#/components/schemas/iValueOptions'
        title: iMap.valueOptions
      defaultValue:
        title: iMap.defaultValue
        type: string
      permissions:
        $ref: '#/components/schemas/iMapPermissions'
        title: iMap.permissions
      metadataTimeline:
        items:
          $ref: '#/components/schemas/iMapMetadataTimeline'
          title: iMap.metadataTimeline.[]
        title: iMap.metadataTimeline
        type: array
      values:
        additionalProperties:
          $ref: '#/components/schemas/iValueStore'
        title: iMapWithValues.values
        description: The (key, value) pairs for the maps that are set.
        type: object
      metadata:
        $ref: '#/components/schemas/iMetadata'
        title: iMapWithValues.metadata
        description: The fetched metadata for the map (if any).
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iMapWithValues.updateHistory.[]
        title: iMapWithValues.updateHistory
        description: >-
          The update history for the map. Maps are maintained through
          blockchain transactions.
        type: array
    required:
      - _docId
      - creator
      - mapId
      - inheritManagerTimelineFrom
      - managerTimeline
      - updateCriteria
      - valueOptions
      - defaultValue
      - permissions
      - metadataTimeline
      - values
      - updateHistory
    additionalProperties: false
    title: iMapDoc, Doc, iMap
    description: |-
      @category Interfaces
      @category Indexer
      @category Interfaces
    type: object
  iBadgeMetadataDetails:
    properties:
      metadataId:
        title: iBadgeMetadataDetails.metadataId
        description: >-
          The metadata ID for the fetched URI. Metadata IDs map an ID to each
          unique URI. See BitBadges Docs for more information.
        anyOf:
          - type: string
          - type: number
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iBadgeMetadataDetails.badgeIds.[]
        title: iBadgeMetadataDetails.badgeIds
        description: The badge IDs that correspond to the metadata
        type: array
      metadata:
        $ref: '#/components/schemas/iMetadata'
        title: iBadgeMetadataDetails.metadata
        description: The metadata fetched by the URI
      uri:
        title: iBadgeMetadataDetails.uri
        description: The URI that the metadata was fetched from
        type: string
      customData:
        title: iBadgeMetadataDetails.customData
        description: Custom data
        type: string
      toUpdate:
        title: iBadgeMetadataDetails.toUpdate
        description: >-
          Flag to denote if the metadata is new and should be updated. Used
          internally.
        type: boolean
    required:
      - badgeIds
      - metadata
    additionalProperties: false
    title: iBadgeMetadataDetails
    description: '@category Interfaces'
    type: object
  iMetadata:
    properties:
      name:
        title: iMetadata.name
        description: The name of the badge or badge collection.
        type: string
      description:
        title: iMetadata.description
        description: The description of the badge or badge collection. Supports markdown.
        type: string
      image:
        title: iMetadata.image
        description: The image of the badge or badge collection.
        type: string
      video:
        title: iMetadata.video
        description: >-
          The video of the badge or badge collection. If a standard video is
          used, this should be a link to the video. We will use image as the
          poster image. If a youtube video is used, we embed it as an iframe.
        type: string
      category:
        title: iMetadata.category
        description: >-
          The category of the badge or badge collection (e.g. "Education",
          "Attendance").
        type: string
      externalUrl:
        title: iMetadata.externalUrl
        description: The external URL of the badge or badge collection.
        type: string
      tags:
        items:
          title: iMetadata.tags.[]
          type: string
        title: iMetadata.tags
        description: The tags of the badge or badge collection
        type: array
      socials:
        additionalProperties:
          type: string
        title: iMetadata.socials
        description: The socials of the badge or badge collection
        type: object
      offChainTransferabilityInfo:
        properties:
          host:
            title: iMetadata.offChainTransferabilityInfo.host
            type: string
          assignMethod:
            title: iMetadata.offChainTransferabilityInfo.assignMethod
            type: string
        required:
          - host
          - assignMethod
        additionalProperties: false
        title: iMetadata.offChainTransferabilityInfo
        description: The off-chain transferability info of the badge or badge collection
        type: object
      attributes:
        items:
          properties:
            type:
              enum:
                - date
                - url
              title: iMetadata.attributes.[].type
              type: string
            name:
              title: iMetadata.attributes.[].name
              type: string
            value:
              title: iMetadata.attributes.[].value
              anyOf:
                - type: string
                - type: number
                - type: boolean
          required:
            - name
            - value
          additionalProperties: false
          title: iMetadata.attributes.[]
          type: object
        title: iMetadata.attributes
        description: The attributes of the badge or badge collection
        type: array
      fetchedAtBlock:
        title: iMetadata.fetchedAtBlock
        description: The block the metadata was fetched at.
        anyOf:
          - type: string
          - type: number
      fetchedAt:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iMetadata.fetchedAt
        description: The time the metadata was fetched.
      _isUpdating:
        title: iMetadata._isUpdating
        description: Whether the metadata is currently being updated.
        type: boolean
    required:
      - name
      - description
      - image
    additionalProperties: false
    title: iMetadata
    description: '@category Interfaces'
    type: object
  iBitBadgesAddressList:
    properties:
      listId:
        title: iAddressList.listId
        description: The ID of the address list.
        type: string
      addresses:
        items:
          title: iAddressList.addresses.[]
          type: string
        title: iAddressList.addresses
        description: >-
          The addresses of the address list. If this is a tracker list, the
          addresses are the tracker IDs.
        type: array
      whitelist:
        title: iAddressList.whitelist
        description: >-
          Whether or not to include ONLY the addresses or include all EXCEPT
          the addresses.
        type: boolean
      uri:
        title: iAddressList.uri
        description: The URI where to fetch the address list metadata from.
        type: string
      customData:
        title: iAddressList.customData
        description: Arbitrary custom data that can be stored on-chain.
        type: string
      createdBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAddressList.createdBy
        description: The address that created the address list.
      aliasAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAddressList.aliasAddress
        description: The alias BitBadges address of the address list.
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iAddressListDoc.updateHistory.[]
        title: iAddressListDoc.updateHistory
        description: The update history of this list
        type: array
      createdBlock:
        title: iAddressListDoc.createdBlock
        description: The block number when this list was created
        anyOf:
          - type: string
          - type: number
      lastUpdated:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iAddressListDoc.lastUpdated
        description: >-
          The timestamp of when this list was last updated (milliseconds since
          epoch)
      nsfw:
        properties:
          reason:
            title: iAddressListDoc.nsfw.reason
            type: string
        required:
          - reason
        additionalProperties: false
        title: iAddressListDoc.nsfw
        description: The NSFW reason if this list is NSFW
        type: object
      reported:
        properties:
          reason:
            title: iAddressListDoc.reported.reason
            type: string
        required:
          - reason
        additionalProperties: false
        title: iAddressListDoc.reported
        description: The reported reason if this list is reported
        type: object
      private:
        title: iAddressListDoc.private
        description: True if this list is private and will not show up in search results
        type: boolean
      viewableWithLink:
        title: iAddressListDoc.viewableWithLink
        description: True if this list is viewable if queried by the list ID directly
        type: boolean
      metadata:
        $ref: '#/components/schemas/iMetadata'
        title: iBitBadgesAddressList.metadata
        description: The metadata of the address list.
      listsActivity:
        items:
          $ref: '#/components/schemas/iListActivityDoc'
          title: iBitBadgesAddressList.listsActivity.[]
        title: iBitBadgesAddressList.listsActivity
        description: The activity of the address list.
        type: array
      views:
        additionalProperties:
          properties:
            ids:
              items:
                title: ids.[]
                type: string
              title: ids
              type: array
            type:
              title: type
              type: string
            pagination:
              $ref: '#/components/schemas/PaginationInfo'
              title: pagination
          required:
            - ids
            - type
            - pagination
          additionalProperties: false
          type: object
        title: iBitBadgesAddressList.views
        description: The views of the address list.
        type: object
      claims:
        items:
          properties:
            claimId:
              title: iBitBadgesAddressList.claims.[].claimId
              type: string
            plugins:
              items:
                title: iBitBadgesAddressList.claims.[].plugins.[]
              title: iBitBadgesAddressList.claims.[].plugins
              description: Plugins are the criteria for the claim.
              type: array
          required:
            - claimId
            - plugins
          additionalProperties: false
          title: iBitBadgesAddressList.claims.[]
          type: object
        title: iBitBadgesAddressList.claims
        description: The claims of the address list.
        type: array
    required:
      - listId
      - addresses
      - whitelist
      - uri
      - customData
      - _docId
      - updateHistory
      - createdBlock
      - lastUpdated
      - listsActivity
      - views
      - claims
    additionalProperties: false
    title: iBitBadgesAddressList, iAddressList, Doc
    description: |-
      @inheritDoc iAddressListDoc
      @category Interfaces
      @category Interfaces
      @category Indexer
    type: object
  GetAddressListsRouteRequestBody:
    properties:
      listsToFetch:
        items:
          properties:
            listId:
              title: GetAddressListsRouteRequestBody.listsToFetch.[].listId
              type: string
            viewsToFetch:
              items:
                properties:
                  viewId:
                    title: >-
                      GetAddressListsRouteRequestBody.listsToFetch.[].viewsToFetch.[].viewId
                    type: string
                  viewType:
                    title: >-
                      GetAddressListsRouteRequestBody.listsToFetch.[].viewsToFetch.[].viewType
                    enum:
                      - listActivity
                    type: string
                  bookmark:
                    title: >-
                      GetAddressListsRouteRequestBody.listsToFetch.[].viewsToFetch.[].bookmark
                    type: string
                required:
                  - viewId
                  - viewType
                  - bookmark
                additionalProperties: false
                title: >-
                  GetAddressListsRouteRequestBody.listsToFetch.[].viewsToFetch.[]
                type: object
              title: GetAddressListsRouteRequestBody.listsToFetch.[].viewsToFetch
              type: array
            fetchPrivateParams:
              title: >-
                GetAddressListsRouteRequestBody.listsToFetch.[].fetchPrivateParams
              description: >-
                Certain views and details are private. If you are the creator
                of the list, you can fetch these details. By default, we do
                not fetch them.
              type: boolean
          required:
            - listId
          additionalProperties: false
          title: GetAddressListsRouteRequestBody.listsToFetch.[]
          type: object
        title: GetAddressListsRouteRequestBody.listsToFetch
        description: >-
          The lists and accompanying details to fetch. Supports on-chain,
          off-chain, and reserved lists.
        type: array
    required:
      - listsToFetch
    additionalProperties: false
    title: GetAddressListsRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetAddressListsRouteSuccessResponse:
    properties:
      addressLists:
        items:
          $ref: '#/components/schemas/iBitBadgesAddressList'
          title: iGetAddressListsRouteSuccessResponse.addressLists.[]
        title: iGetAddressListsRouteSuccessResponse.addressLists
        type: array
    required:
      - addressLists
    additionalProperties: false
    title: iGetAddressListsRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  UpdateAddressListsRouteRequestBody:
    properties:
      addressLists:
        items:
          allOf:
            - $ref: '#/components/schemas/iAddressList'
            - properties:
                private:
                  title: private
                  description: Private lists will not show up in any search results.
                  type: boolean
                viewableWithLink:
                  title: viewableWithLink
                  description: >-
                    If the list is viewable with a link, anyone with the lisst
                    ID can view details. Only applicable if private = true as
                    well.

                    If not viewable with a link, only the creator can view the
                    list.
                  type: boolean
                claims:
                  items:
                    properties:
                      claimId:
                        title: claims.[].claimId
                        type: string
                      plugins:
                        items:
                          title: claims.[].plugins.[]
                        title: claims.[].plugins
                        type: array
                    required:
                      - claimId
                      - plugins
                    additionalProperties: false
                    title: claims.[]
                    type: object
                  title: claims
                  description: >-
                    The claims of the address list. Use resetState on updates
                    for resetting individual plugin state (if applicable).
                  type: array
              required:
                - claims
              additionalProperties: false
              type: object
        title: UpdateAddressListsRouteRequestBody.addressLists
        type: array
    required:
      - addressLists
    additionalProperties: false
    title: UpdateAddressListsRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iUpdateAddressListsRouteSuccessResponse:
    additionalProperties: false
    title: iUpdateAddressListsRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  CreateAddressListsRouteRequestBody:
    properties:
      addressLists:
        items:
          allOf:
            - $ref: '#/components/schemas/iAddressList'
            - properties:
                private:
                  title: private
                  description: Private lists will not show up in any search results.
                  type: boolean
                viewableWithLink:
                  title: viewableWithLink
                  description: >-
                    If the list is viewable with a link, anyone with the lisst
                    ID can view details. Only applicable if private = true as
                    well.

                    If not viewable with a link, only the creator can view the
                    list.
                  type: boolean
                claims:
                  items:
                    properties:
                      claimId:
                        title: claims.[].claimId
                        type: string
                      plugins:
                        items:
                          title: claims.[].plugins.[]
                        title: claims.[].plugins
                        type: array
                    required:
                      - claimId
                      - plugins
                    additionalProperties: false
                    title: claims.[]
                    type: object
                  title: claims
                  description: >-
                    The claims of the address list. Use resetState on updates
                    for resetting individual plugin state (if applicable).
                  type: array
              required:
                - claims
              additionalProperties: false
              type: object
        title: UpdateAddressListsRouteRequestBody.addressLists
        type: array
    required:
      - addressLists
    additionalProperties: false
    title: CreateAddressListsRouteRequestBody, UpdateAddressListsRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iCreateAddressListsRouteSuccessResponse:
    additionalProperties: false
    title: iCreateAddressListsRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  DeleteAddressListsRouteRequestBody:
    properties:
      listIds:
        items:
          title: DeleteAddressListsRouteRequestBody.listIds.[]
          type: string
        title: DeleteAddressListsRouteRequestBody.listIds
        description: The list IDs to delete.
        type: array
    required:
      - listIds
    additionalProperties: false
    title: DeleteAddressListsRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iDeleteAddressListsRouteSuccessResponse:
    additionalProperties: false
    title: iDeleteAddressListsRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  iBitBadgesUserInfo:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      publicKey:
        title: iBitBadgesUserInfo.publicKey
        description: The public key of the account
        type: string
      accountNumber:
        title: iBitBadgesUserInfo.accountNumber
        description: The account number of the account
        anyOf:
          - type: string
          - type: number
      pubKeyType:
        title: iBitBadgesUserInfo.pubKeyType
        description: The public key type of the account
        type: string
      bitbadgesAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iBitBadgesUserInfo.bitbadgesAddress
        description: The BitBadges address of the account
      ethAddress:
        title: iBitBadgesUserInfo.ethAddress
        description: The Eth address of the account
        type: string
      btcAddress:
        title: iBitBadgesUserInfo.btcAddress
        description: The Bitcoin address of the account
        type: string
      sequence:
        title: iBitBadgesUserInfo.sequence
        description: The sequence of the account
        anyOf:
          - type: string
          - type: number
      balance:
        $ref: '#/components/schemas/iCosmosCoin'
        title: iBitBadgesUserInfo.balance
        description: The balance of the account
      fetchedProfile:
        title: iBitBadgesUserInfo.fetchedProfile
        description: Whether we have already fetched the profile or not
        type: boolean
      seenActivity:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iBitBadgesUserInfo.seenActivity
        description: >-
          The timestamp of the last activity seen for this account
          (milliseconds since epoch)
      createdAt:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iBitBadgesUserInfo.createdAt
        description: >-
          The timestamp of when this account was created (milliseconds since
          epoch)
      discord:
        title: iBitBadgesUserInfo.discord
        description: The Discord username of the account
        type: string
      twitter:
        title: iBitBadgesUserInfo.twitter
        description: The Twitter username of the account
        type: string
      github:
        title: iBitBadgesUserInfo.github
        description: The GitHub username of the account
        type: string
      telegram:
        title: iBitBadgesUserInfo.telegram
        description: The Telegram username of the account
        type: string
      readme:
        title: iBitBadgesUserInfo.readme
        description: The readme of the account
        type: string
      customLinks:
        items:
          $ref: '#/components/schemas/iCustomLink'
          title: iBitBadgesUserInfo.customLinks.[]
        title: iBitBadgesUserInfo.customLinks
        description: The custom links of the account
        type: array
      hiddenBadges:
        items:
          $ref: '#/components/schemas/iBatchBadgeDetails'
          title: iBitBadgesUserInfo.hiddenBadges.[]
        title: iBitBadgesUserInfo.hiddenBadges
        description: The hidden badges of the account
        type: array
      hiddenLists:
        items:
          title: iBitBadgesUserInfo.hiddenLists.[]
          type: string
        title: iBitBadgesUserInfo.hiddenLists
        description: The hidden lists of the account
        type: array
      customPages:
        properties:
          badges:
            items:
              $ref: '#/components/schemas/iCustomPage'
              title: iBitBadgesUserInfo.customPages.badges.[]
            title: iBitBadgesUserInfo.customPages.badges
            type: array
          lists:
            items:
              $ref: '#/components/schemas/iCustomListPage'
              title: iBitBadgesUserInfo.customPages.lists.[]
            title: iBitBadgesUserInfo.customPages.lists
            type: array
        required:
          - badges
          - lists
        additionalProperties: false
        title: iBitBadgesUserInfo.customPages
        description: The custom pages of the account
        type: object
      watchlists:
        properties:
          badges:
            items:
              $ref: '#/components/schemas/iCustomPage'
              title: iBitBadgesUserInfo.watchlists.badges.[]
            title: iBitBadgesUserInfo.watchlists.badges
            type: array
          lists:
            items:
              $ref: '#/components/schemas/iCustomListPage'
              title: iBitBadgesUserInfo.watchlists.lists.[]
            title: iBitBadgesUserInfo.watchlists.lists
            type: array
        required:
          - badges
          - lists
        additionalProperties: false
        title: iBitBadgesUserInfo.watchlists
        description: The watched lists of the account's portfolio
        type: object
      profilePicUrl:
        title: iBitBadgesUserInfo.profilePicUrl
        description: The profile picture URL of the account
        type: string
      username:
        title: iBitBadgesUserInfo.username
        description: The username of the account
        type: string
      latestSignedInChain:
        $ref: '#/components/schemas/SupportedChain'
        title: iBitBadgesUserInfo.latestSignedInChain
        description: The latest chain the user signed in with
      notifications:
        $ref: '#/components/schemas/iNotificationPreferences'
        title: iBitBadgesUserInfo.notifications
        description: The notifications of the account
      socialConnections:
        $ref: '#/components/schemas/iSocialConnections'
        title: iBitBadgesUserInfo.socialConnections
        description: Social connections stored for the account
      approvedSignInMethods:
        properties:
          discord:
            properties:
              username:
                title: iBitBadgesUserInfo.approvedSignInMethods.discord.username
                type: string
              discriminator:
                title: >-
                  iBitBadgesUserInfo.approvedSignInMethods.discord.discriminator
                type: string
              id:
                title: iBitBadgesUserInfo.approvedSignInMethods.discord.id
                type: string
            required:
              - username
              - id
            additionalProperties: false
            title: iBitBadgesUserInfo.approvedSignInMethods.discord
            type: object
        additionalProperties: false
        title: iBitBadgesUserInfo.approvedSignInMethods
        description: Approved ways to sign in (rather than Blockin)
        type: object
      resolvedName:
        title: iBitBadgesUserInfo.resolvedName
        description: The resolved name of the account (e.g. ENS name).
        type: string
      avatar:
        title: iBitBadgesUserInfo.avatar
        description: The avatar of the account.
        type: string
      solAddress:
        title: iBitBadgesUserInfo.solAddress
        description: The Solana address of the account.
        type: string
      chain:
        $ref: '#/components/schemas/SupportedChain'
        title: iBitBadgesUserInfo.chain
        description: The chain of the account.
      airdropped:
        title: iBitBadgesUserInfo.airdropped
        description: Indicates whether the account has claimed their airdrop.
        type: boolean
      collected:
        items:
          $ref: '#/components/schemas/iBalanceDoc'
          title: iBitBadgesUserInfo.collected.[]
        title: iBitBadgesUserInfo.collected
        description: >-
          A list of badges that the account has collected. Paginated and
          fetched as needed. To be used in conjunction with views.
        type: array
      activity:
        items:
          $ref: '#/components/schemas/iTransferActivityDoc'
          title: iBitBadgesUserInfo.activity.[]
        title: iBitBadgesUserInfo.activity
        description: >-
          A list of transfer activity items for the account. Paginated and
          fetched as needed. To be used in conjunction with views.
        type: array
      listsActivity:
        items:
          $ref: '#/components/schemas/iListActivityDoc'
          title: iBitBadgesUserInfo.listsActivity.[]
        title: iBitBadgesUserInfo.listsActivity
        description: >-
          A list of list activity items for the account. Paginated and fetched
          as needed. To be used in conjunction with views.
        type: array
      reviews:
        items:
          $ref: '#/components/schemas/iReviewDoc'
          title: iBitBadgesUserInfo.reviews.[]
        title: iBitBadgesUserInfo.reviews
        description: >-
          A list of review activity items for the account. Paginated and
          fetched as needed. To be used in conjunction with views.
        type: array
      merkleChallenges:
        items:
          $ref: '#/components/schemas/iMerkleChallengeDoc'
          title: iBitBadgesUserInfo.merkleChallenges.[]
        title: iBitBadgesUserInfo.merkleChallenges
        description: >-
          A list of merkle challenge activity items for the account. Paginated
          and fetched as needed. To be used in conjunction with views.
        type: array
      approvalTrackers:
        items:
          $ref: '#/components/schemas/iApprovalTrackerDoc'
          title: iBitBadgesUserInfo.approvalTrackers.[]
        title: iBitBadgesUserInfo.approvalTrackers
        description: >-
          A list of approvals tracker activity items for the account.
          Paginated and fetched as needed. To be used in conjunction with
          views.
        type: array
      addressLists:
        items:
          $ref: '#/components/schemas/iBitBadgesAddressList'
          title: iBitBadgesUserInfo.addressLists.[]
        title: iBitBadgesUserInfo.addressLists
        description: >-
          A list of address lists for the account. Paginated and fetched as
          needed. To be used in conjunction with views.
        type: array
      claimAlerts:
        items:
          $ref: '#/components/schemas/iClaimAlertDoc'
          title: iBitBadgesUserInfo.claimAlerts.[]
        title: iBitBadgesUserInfo.claimAlerts
        description: >-
          A list of claim alerts for the account. Paginated and fetched as
          needed. To be used in conjunction with views.
        type: array
      authCodes:
        items:
          $ref: '#/components/schemas/iBlockinAuthSignatureDoc'
          title: iBitBadgesUserInfo.authCodes.[]
        title: iBitBadgesUserInfo.authCodes
        description: >-
          A list of auth codes for the account. Paginated and fetched as
          needed. To be used in conjunction with views.
        type: array
      secrets:
        items:
          $ref: '#/components/schemas/iSecretDoc'
          title: iBitBadgesUserInfo.secrets.[]
        title: iBitBadgesUserInfo.secrets
        description: >-
          A list of user secrets for the account. Paginated and fetched as
          needed. To be used in conjunction with views.
        type: array
      reservedMap:
        $ref: '#/components/schemas/iMapDoc'
        title: iBitBadgesUserInfo.reservedMap
        description: >-
          The reserved map for the account. This is created and managed
          on-chain through the x/maps module.
      address:
        $ref: '#/components/schemas/NativeAddress'
        title: iBitBadgesUserInfo.address
        description: The native address of the account
      nsfw:
        additionalProperties:
          type: string
        title: iBitBadgesUserInfo.nsfw
        description: Indicates whether the account is NSFW.
        type: object
      reported:
        additionalProperties:
          type: string
        title: iBitBadgesUserInfo.reported
        description: Indicates whether the account has been reported.
        type: object
      views:
        additionalProperties:
          properties:
            ids:
              items:
                title: ids.[]
                type: string
              title: ids
              type: array
            type:
              title: type
              type: string
            pagination:
              $ref: '#/components/schemas/PaginationInfo'
              title: pagination
          required:
            - ids
            - type
            - pagination
          additionalProperties: false
          type: object
        title: iBitBadgesUserInfo.views
        description: >-
          The views for this collection and their pagination Doc. Views will
          only include the doc _ids. Use the pagination to fetch more. To be
          used in conjunction with activity, announcements, reviews, owners,
          merkleChallenges, and approvalTrackers. For example, if you want to
          fetch the activity for a view, you would use the view's pagination
          to fetch the doc _ids, then use the corresponding activity array to
          find the matching docs.
        type: object
      alias:
        properties:
          collectionId:
            title: iBitBadgesUserInfo.alias.collectionId
            anyOf:
              - type: string
              - type: number
          listId:
            title: iBitBadgesUserInfo.alias.listId
            type: string
        additionalProperties: false
        title: iBitBadgesUserInfo.alias
        description: The alias for the account.
        type: object
    required:
      - _docId
      - publicKey
      - accountNumber
      - pubKeyType
      - bitbadgesAddress
      - ethAddress
      - btcAddress
      - solAddress
      - chain
      - collected
      - activity
      - listsActivity
      - reviews
      - merkleChallenges
      - approvalTrackers
      - addressLists
      - claimAlerts
      - authCodes
      - secrets
      - address
      - views
    additionalProperties: false
    title: iBitBadgesUserInfo, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  AccountViewKey:
    enum:
      - createdLists
      - privateLists
      - authCodes
      - transferActivity
      - reviews
      - badgesCollected
      - claimAlerts
      - allLists
      - whitelists
      - blacklists
      - createdBadges
      - managingBadges
      - listsActivity
      - createdSecrets
      - receivedSecrets
    title: AccountViewKey
    description: |-
      The supported view keys for fetching account details.
      @category API Requests / Responses
    type: string
  AccountFetchDetails:
    properties:
      address:
        title: AccountFetchDetails.address
        description: >-
          The address of the user. This can be their native address. Only one
          of address or username should be specified.
        type: string
      username:
        title: AccountFetchDetails.username
        description: >-
          The username of the user. Only one of address or username should be
          specified.
        type: string
      fetchSequence:
        title: AccountFetchDetails.fetchSequence
        description: If true, we will fetch the sequence from the blockchain.
        type: boolean
      fetchBalance:
        title: AccountFetchDetails.fetchBalance
        description: If true, we will fetch the $BADGE balance from the blockchain.
        type: boolean
      noExternalCalls:
        title: AccountFetchDetails.noExternalCalls
        description: If true, we will avoid external API calls.
        type: boolean
      viewsToFetch:
        items:
          properties:
            viewId:
              title: AccountFetchDetails.viewsToFetch.[].viewId
              description: >-
                Unique view ID. Used for pagination. All fetches w/ same ID
                should be made with same criteria.
              type: string
            viewType:
              $ref: '#/components/schemas/AccountViewKey'
              title: AccountFetchDetails.viewsToFetch.[].viewType
              description: The base view type to fetch.
            specificCollections:
              items:
                $ref: '#/components/schemas/iBatchBadgeDetails'
                title: AccountFetchDetails.viewsToFetch.[].specificCollections.[]
              title: AccountFetchDetails.viewsToFetch.[].specificCollections
              description: >-
                If defined, we will filter the view to only include the
                specified collections.
              type: array
            specificLists:
              items:
                title: AccountFetchDetails.viewsToFetch.[].specificLists.[]
                type: string
              title: AccountFetchDetails.viewsToFetch.[].specificLists
              description: >-
                If defined, we will filter the view to only include the
                specified lists.
              type: array
            oldestFirst:
              title: AccountFetchDetails.viewsToFetch.[].oldestFirst
              description: Oldest first. By default, we fetch newest
              type: boolean
            bookmark:
              title: AccountFetchDetails.viewsToFetch.[].bookmark
              description: A bookmark to pass in for pagination. "" for first request.
              type: string
          required:
            - viewId
            - viewType
            - bookmark
          additionalProperties: false
          title: AccountFetchDetails.viewsToFetch.[]
          type: object
        title: AccountFetchDetails.viewsToFetch
        description: An array of views to fetch
        type: array
    additionalProperties: false
    title: AccountFetchDetails
    description: >-
      This defines the options for fetching additional account details.


      A view is a way of fetching additional details about an account, and
      these will be queryable in the response via the `views` property.


      Each view has a bookmark that is used for pagination and must be
      supplied to get the next page.


      We support the following views:

      - `transferActivity` - Fetches the latest activity for the account.

      - `latestAnnouncements` - Fetches the latest announcements for the
      account.

      - `reviews` - Fetches the latest reviews for the account.

      - `badgesCollected` - Fetches the badges collected by the account
      sequentially in random order.

      @category API Requests / Responses
    type: object
  GetAccountsRouteRequestBody:
    properties:
      accountsToFetch:
        items:
          $ref: '#/components/schemas/AccountFetchDetails'
          title: GetAccountsRouteRequestBody.accountsToFetch.[]
        title: GetAccountsRouteRequestBody.accountsToFetch
        type: array
    required:
      - accountsToFetch
    additionalProperties: false
    title: GetAccountsRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetAccountsRouteSuccessResponse:
    properties:
      accounts:
        items:
          $ref: '#/components/schemas/iBitBadgesUserInfo'
          title: iGetAccountsRouteSuccessResponse.accounts.[]
        title: iGetAccountsRouteSuccessResponse.accounts
        type: array
    required:
      - accounts
    additionalProperties: false
    title: iGetAccountsRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetFollowDetailsRouteRequestBody:
    properties:
      bitbadgesAddress:
        title: GetFollowDetailsRouteRequestBody.bitbadgesAddress
        type: string
      followingBookmark:
        title: GetFollowDetailsRouteRequestBody.followingBookmark
        type: string
      followersBookmark:
        title: GetFollowDetailsRouteRequestBody.followersBookmark
        type: string
      protocol:
        title: GetFollowDetailsRouteRequestBody.protocol
        type: string
      activityBookmark:
        title: GetFollowDetailsRouteRequestBody.activityBookmark
        type: string
    required:
      - bitbadgesAddress
    additionalProperties: false
    title: GetFollowDetailsRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetFollowDetailsRouteSuccessResponse:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      bitbadgesAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iFollowDetailsDoc.bitbadgesAddress
        description: The BitBadges address of the user
      followingCount:
        title: iFollowDetailsDoc.followingCount
        description: The number of users that the user is following
        anyOf:
          - type: string
          - type: number
      followersCount:
        title: iFollowDetailsDoc.followersCount
        description: The number of users that are following the user
        anyOf:
          - type: string
          - type: number
      followers:
        items:
          $ref: '#/components/schemas/BitBadgesAddress'
          title: iFollowDetailsDoc.followers.[]
        title: iFollowDetailsDoc.followers
        description: The followers of the user
        type: array
      following:
        items:
          $ref: '#/components/schemas/BitBadgesAddress'
          title: iFollowDetailsDoc.following.[]
        title: iFollowDetailsDoc.following
        description: The following of the user
        type: array
      followingCollectionId:
        title: iFollowDetailsDoc.followingCollectionId
        description: The collection ID of the following collection
        anyOf:
          - type: string
          - type: number
      followersPagination:
        $ref: '#/components/schemas/PaginationInfo'
        title: iGetFollowDetailsRouteSuccessResponse.followersPagination
      followingPagination:
        $ref: '#/components/schemas/PaginationInfo'
        title: iGetFollowDetailsRouteSuccessResponse.followingPagination
      activity:
        items:
          $ref: '#/components/schemas/iTransferActivityDoc'
          title: iGetFollowDetailsRouteSuccessResponse.activity.[]
        title: iGetFollowDetailsRouteSuccessResponse.activity
        type: array
      activityPagination:
        $ref: '#/components/schemas/PaginationInfo'
        title: iGetFollowDetailsRouteSuccessResponse.activityPagination
    required:
      - _docId
      - bitbadgesAddress
      - followingCount
      - followersCount
      - followers
      - following
      - followingCollectionId
      - followersPagination
      - followingPagination
      - activity
      - activityPagination
    additionalProperties: false
    title: iGetFollowDetailsRouteSuccessResponse, Doc
    description: |-
      @category API Requests / Responses
      @category Indexer
    type: object
  FilterBadgesInCollectionRequestBody:
    properties:
      collectionId:
        title: FilterBadgesInCollectionRequestBody.collectionId
        description: The collection ID to filter
        anyOf:
          - type: string
          - type: number
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: FilterBadgesInCollectionRequestBody.badgeIds.[]
        title: FilterBadgesInCollectionRequestBody.badgeIds
        description: >-
          Limit to specific badge IDs. Leave undefined to not filter by badge
          ID.
        type: array
      categories:
        items:
          title: FilterBadgesInCollectionRequestBody.categories.[]
          type: string
        title: FilterBadgesInCollectionRequestBody.categories
        description: Limit to specific lists. Leave undefined to not filter by list.
        type: array
      tags:
        items:
          title: FilterBadgesInCollectionRequestBody.tags.[]
          type: string
        title: FilterBadgesInCollectionRequestBody.tags
        description: Limit to specific lists. Leave undefined to not filter by list.
        type: array
      mostViewed:
        enum:
          - daily
          - allTime
          - weekly
          - monthly
          - yearly
        title: FilterBadgesInCollectionRequestBody.mostViewed
        description: >-
          mostViewed is a special view that sorts by most viewed badges. May
          be incompatible with other filters.
        type: string
      bookmark:
        title: FilterBadgesInCollectionRequestBody.bookmark
        description: Pagination bookmark. Leave undefined or "" for first request.
        type: string
      attributes:
        items:
          properties:
            name:
              title: FilterBadgesInCollectionRequestBody.attributes.[].name
              type: string
            value:
              title: FilterBadgesInCollectionRequestBody.attributes.[].value
              anyOf:
                - type: string
                - type: number
                - type: boolean
          required:
            - name
            - value
          additionalProperties: false
          title: FilterBadgesInCollectionRequestBody.attributes.[]
          type: object
        title: FilterBadgesInCollectionRequestBody.attributes
        description: Attribute queries
        type: array
    required:
      - collectionId
    additionalProperties: false
    title: FilterBadgesInCollectionRequestBody
    description: '@category API Requests / Responses'
    type: object
  iFilterBadgesInCollectionSuccessResponse:
    properties:
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iFilterBadgesInCollectionSuccessResponse.badgeIds.[]
        title: iFilterBadgesInCollectionSuccessResponse.badgeIds
        type: array
      pagination:
        $ref: '#/components/schemas/PaginationInfo'
        title: iFilterBadgesInCollectionSuccessResponse.pagination
    required:
      - badgeIds
      - pagination
    additionalProperties: false
    title: iFilterBadgesInCollectionSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetOwnersForBadgeRouteRequestBody:
    properties:
      bookmark:
        title: GetOwnersForBadgeRouteRequestBody.bookmark
        description: >-
          The pagination bookmark for where to start the request. Bookmarks
          are obtained via the previous response. "" for first request.
        type: string
    additionalProperties: false
    title: GetOwnersForBadgeRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetOwnersForBadgeRouteSuccessResponse:
    properties:
      owners:
        items:
          $ref: '#/components/schemas/iBalanceDoc'
          title: iGetOwnersForBadgeRouteSuccessResponse.owners.[]
        title: iGetOwnersForBadgeRouteSuccessResponse.owners
        description: Represents a list of owners balance details.
        type: array
      pagination:
        $ref: '#/components/schemas/PaginationInfo'
        title: iGetOwnersForBadgeRouteSuccessResponse.pagination
        description: Represents pagination information.
    required:
      - owners
      - pagination
    additionalProperties: false
    title: iGetOwnersForBadgeRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetBadgeBalanceByAddressRouteRequestBody:
    additionalProperties: false
    title: GetBadgeBalanceByAddressRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetBadgeBalanceByAddressRouteSuccessResponse:
    properties:
      balances:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iUserBalanceStore.balances.[]
        title: iUserBalanceStore.balances
        description: The user's balances.
        type: array
      incomingApprovals:
        items:
          $ref: '#/components/schemas/iUserIncomingApproval'
          title: iUserBalanceStore.incomingApprovals.[]
        title: iUserBalanceStore.incomingApprovals
        description: The user's incoming approvals.
        type: array
      outgoingApprovals:
        items:
          $ref: '#/components/schemas/iUserOutgoingApproval'
          title: iUserBalanceStore.outgoingApprovals.[]
        title: iUserBalanceStore.outgoingApprovals
        description: The user's outgoing approvals.
        type: array
      userPermissions:
        $ref: '#/components/schemas/iUserPermissions'
        title: iUserBalanceStore.userPermissions
        description: The user's permissions.
      autoApproveSelfInitiatedOutgoingTransfers:
        title: iUserBalanceStore.autoApproveSelfInitiatedOutgoingTransfers
        description: >-
          Whether the user's self-initiated outgoing transfers are
          auto-approved. If not, they must be explicitly approved using the
          outgoing approvals.
        type: boolean
      autoApproveSelfInitiatedIncomingTransfers:
        title: iUserBalanceStore.autoApproveSelfInitiatedIncomingTransfers
        description: >-
          Whether the user's self-initiated incoming transfers are
          auto-approved. If not, they must be explicitly approved using the
          incoming approvals.
        type: boolean
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      collectionId:
        title: iBalanceDoc.collectionId
        description: The collection ID
        anyOf:
          - type: string
          - type: number
      bitbadgesAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iBalanceDoc.bitbadgesAddress
        description: The BitBadges address of the user
      onChain:
        title: iBalanceDoc.onChain
        description: True if the balances are on-chain
        type: boolean
      uri:
        title: iBalanceDoc.uri
        description: The URI of the off-chain balances
        type: string
      fetchedAt:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iBalanceDoc.fetchedAt
        description: >-
          The timestamp of when the off-chain balances were fetched
          (milliseconds since epoch). For BitBadges indexer, we only populate
          this for Mint and Total docs.
      fetchedAtBlock:
        title: iBalanceDoc.fetchedAtBlock
        description: >-
          The block number of when the off-chain balances were fetched. For
          BitBadges indexer, we only populate this for Mint and Total docs.
        anyOf:
          - type: string
          - type: number
      isPermanent:
        title: iBalanceDoc.isPermanent
        description: True if the off-chain balances are using permanent storage
        type: boolean
      contentHash:
        title: iBalanceDoc.contentHash
        description: The content hash of the off-chain balances
        type: string
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iBalanceDoc.updateHistory.[]
        title: iBalanceDoc.updateHistory
        description: The update history of this balance
        type: array
    required:
      - balances
      - incomingApprovals
      - outgoingApprovals
      - userPermissions
      - autoApproveSelfInitiatedOutgoingTransfers
      - autoApproveSelfInitiatedIncomingTransfers
      - _docId
      - collectionId
      - bitbadgesAddress
      - onChain
      - updateHistory
    additionalProperties: false
    title: iGetBadgeBalanceByAddressRouteSuccessResponse, iUserBalanceStore, Doc
    description: >-
      @category API Requests / Responses

      This stores everythign about a user's balances for a specific collection
      ID.

      This includes their balances, incoming approvals, outgoing approvals,
      and permissions.

      @category Interfaces

      @category Indexer
    type: object
  GetBadgeActivityRouteRequestBody:
    properties:
      bookmark:
        title: GetBadgeActivityRouteRequestBody.bookmark
        description: >-
          An optional bookmark for pagination. Bookmarks are obtained via the
          previous response. "" for first request.
        type: string
    additionalProperties: false
    title: GetBadgeActivityRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetBadgeActivityRouteSuccessResponse:
    properties:
      activity:
        items:
          $ref: '#/components/schemas/iTransferActivityDoc'
          title: iGetBadgeActivityRouteSuccessResponse.activity.[]
        title: iGetBadgeActivityRouteSuccessResponse.activity
        description: Array of transfer activity information.
        type: array
      pagination:
        $ref: '#/components/schemas/PaginationInfo'
        title: iGetBadgeActivityRouteSuccessResponse.pagination
        description: Pagination information.
    required:
      - activity
      - pagination
    additionalProperties: false
    title: iGetBadgeActivityRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  MetadataFetchOptions:
    properties:
      doNotFetchCollectionMetadata:
        title: MetadataFetchOptions.doNotFetchCollectionMetadata
        description: If true, collection metadata will not be fetched.
        type: boolean
      metadataIds:
        anyOf:
          - title: MetadataFetchOptions.metadataIds
            type: string
          - items:
              title: MetadataFetchOptions.metadataIds.[]
              type: number
            title: MetadataFetchOptions.metadataIds.[]
            type: array
          - items:
              $ref: '#/components/schemas/iUintRange'
              title: MetadataFetchOptions.metadataIds.[]
            title: MetadataFetchOptions.metadataIds.[]
            type: array
        title: MetadataFetchOptions.metadataIds
        description: >-
          If present, the metadata corresponding to the specified metadata IDs
          will be fetched.

          Metadata IDs are helpful when determining UNQIUE URIs to be fetched.


          If badges 1-10000 all share the same URI, they will have the same
          single metadata ID.

          If badge 1 has a different URI than badges 2-10000, badge 1 will
          have a different metadata ID than the rest/


          We scan in increasing order of badge IDs, so metadata ID 1 will be
          for badge 1-X, metadata ID 2 will be for badge X+1-Y, etc.


          ID 0 = Collection metadata fetch

          ID 1 = First badge metadata fetch

          ID 2 = Second badge metadata fetch (if present)

          And so on

          Learn more in documentation.
      uris:
        items:
          title: MetadataFetchOptions.uris.[]
          type: string
        title: MetadataFetchOptions.uris
        description: >-
          If present, the metadata corresponding to the specified URIs will be
          fetched.
        type: array
      badgeIds:
        anyOf:
          - title: MetadataFetchOptions.badgeIds
            type: string
          - items:
              title: MetadataFetchOptions.badgeIds.[]
              type: number
            title: MetadataFetchOptions.badgeIds.[]
            type: array
          - items:
              $ref: '#/components/schemas/iUintRange'
              title: MetadataFetchOptions.badgeIds.[]
            title: MetadataFetchOptions.badgeIds.[]
            type: array
        title: MetadataFetchOptions.badgeIds
        description: >-
          If present, the metadata corresponding to the specified badge IDs
          will be fetched.
    additionalProperties: false
    title: MetadataFetchOptions
    description: |-
      Defines the options for fetching metadata.
      @category API Requests / Responses
    type: object
  CollectionViewKey:
    enum:
      - transferActivity
      - reviews
      - owners
      - amountTrackers
      - challengeTrackers
    title: CollectionViewKey
    description: |-
      Supported view keys for fetching additional collection details.
      @category API Requests / Responses
    type: string
  GetAdditionalCollectionDetailsRequestBody:
    properties:
      viewsToFetch:
        items:
          properties:
            viewType:
              $ref: '#/components/schemas/CollectionViewKey'
              title: >-
                GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].viewType
              description: The base view type to fetch.
            viewId:
              title: >-
                GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].viewId
              description: >-
                A unique view ID. This is used for pagination. All fetches w/
                same ID should be made with same criteria.
              type: string
            bookmark:
              title: >-
                GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].bookmark
              description: A bookmark to pass in for pagination. "" for first request.
              type: string
            oldestFirst:
              title: >-
                GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].oldestFirst
              description: If defined, we will return the oldest items first.
              type: boolean
          required:
            - viewType
            - viewId
            - bookmark
          additionalProperties: false
          title: GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[]
          type: object
        title: GetAdditionalCollectionDetailsRequestBody.viewsToFetch
        description: If present, the specified views will be fetched.
        type: array
      fetchTotalBalances:
        title: GetAdditionalCollectionDetailsRequestBody.fetchTotalBalances
        description: >-
          If true, the total and mint balances will be fetched and will be put
          in owners[].


          collection.owners.find(x => x.bitbadgesAddresss === 'Mint')
        type: boolean
      challengeTrackersToFetch:
        items:
          $ref: '#/components/schemas/iChallengeTrackerIdDetails'
          title: >-
            GetAdditionalCollectionDetailsRequestBody.challengeTrackersToFetch.[]
        title: GetAdditionalCollectionDetailsRequestBody.challengeTrackersToFetch
        description: >-
          If present, the merkle challenges corresponding to the specified
          merkle challenge IDs will be fetched.
        type: array
      approvalTrackersToFetch:
        items:
          $ref: '#/components/schemas/iAmountTrackerIdDetails'
          title: >-
            GetAdditionalCollectionDetailsRequestBody.approvalTrackersToFetch.[]
        title: GetAdditionalCollectionDetailsRequestBody.approvalTrackersToFetch
        description: >-
          If present, the approvals trackers corresponding to the specified
          approvals tracker IDs will be fetched.
        type: array
      handleAllAndAppendDefaults:
        title: GetAdditionalCollectionDetailsRequestBody.handleAllAndAppendDefaults
        description: If true, we will append defaults with empty values.
        type: boolean
      fetchPrivateParams:
        title: GetAdditionalCollectionDetailsRequestBody.fetchPrivateParams
        description: >-
          Fetches private parameters for any claims in addition to public
          parameters.
        type: boolean
    additionalProperties: false
    title: GetAdditionalCollectionDetailsRequestBody
    description: >-
      Defines the options for fetching additional collection details.


      A view is a way of fetching additional details about a collection, and
      these will be queryable in the response via the `views` property.

      Each view has a bookmark that is used for pagination and must be
      supplied to get the next page.

      If the bookmark is not supplied, the first page will be returned.


      We support the following views:

      - `transferActivity` - Fetches the latest activity for the collection.

      - `latestAnnouncements` - Fetches the latest announcements for the
      collection.

      - `reviews` - Fetches the latest reviews for the collection.

      - `owners` - Fetches the owners of the collection sequentially in random
      order.

      - `merkleChallenges` - Fetches the merkle challenges for the collection
      in random order.

      - `approvalTrackers` - Fetches the approvals trackers for the collection
      in random order.

      @category API Requests / Responses
    type: object
  GetMetadataForCollectionRequestBody:
    properties:
      metadataToFetch:
        $ref: '#/components/schemas/MetadataFetchOptions'
        title: GetMetadataForCollectionRequestBody.metadataToFetch
        description: >-
          If present, we will fetch the metadata corresponding to the
          specified options.


          Consider using pruneMetadataToFetch for filtering out previously
          fetched metadata.
    additionalProperties: false
    title: GetMetadataForCollectionRequestBody
    description: '@category API Requests / Responses'
    type: object
  GetCollectionBatchRouteRequestBody:
    properties:
      collectionsToFetch:
        items:
          allOf:
            - properties:
                collectionId:
                  title: collectionId
                  description: The ID of the collection to fetch.
                  anyOf:
                    - type: string
                    - type: number
              required:
                - collectionId
              additionalProperties: false
              type: object
            - $ref: '#/components/schemas/GetMetadataForCollectionRequestBody'
            - $ref: '#/components/schemas/GetAdditionalCollectionDetailsRequestBody'
        title: GetCollectionBatchRouteRequestBody.collectionsToFetch
        type: array
    required:
      - collectionsToFetch
    additionalProperties: false
    title: GetCollectionBatchRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetCollectionBatchRouteSuccessResponse:
    properties:
      collections:
        items:
          $ref: '#/components/schemas/iBitBadgesCollection'
          title: iGetCollectionBatchRouteSuccessResponse.collections.[]
        title: iGetCollectionBatchRouteSuccessResponse.collections
        type: array
    required:
      - collections
    additionalProperties: false
    title: iGetCollectionBatchRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetCollectionByIdRouteRequestBody:
    properties:
      viewsToFetch:
        items:
          properties:
            viewType:
              $ref: '#/components/schemas/CollectionViewKey'
              title: >-
                GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].viewType
              description: The base view type to fetch.
            viewId:
              title: >-
                GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].viewId
              description: >-
                A unique view ID. This is used for pagination. All fetches w/
                same ID should be made with same criteria.
              type: string
            bookmark:
              title: >-
                GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].bookmark
              description: A bookmark to pass in for pagination. "" for first request.
              type: string
            oldestFirst:
              title: >-
                GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[].oldestFirst
              description: If defined, we will return the oldest items first.
              type: boolean
          required:
            - viewType
            - viewId
            - bookmark
          additionalProperties: false
          title: GetAdditionalCollectionDetailsRequestBody.viewsToFetch.[]
          type: object
        title: GetAdditionalCollectionDetailsRequestBody.viewsToFetch
        description: If present, the specified views will be fetched.
        type: array
      fetchTotalBalances:
        title: GetAdditionalCollectionDetailsRequestBody.fetchTotalBalances
        description: >-
          If true, the total and mint balances will be fetched and will be put
          in owners[].


          collection.owners.find(x => x.bitbadgesAddresss === 'Mint')
        type: boolean
      challengeTrackersToFetch:
        items:
          $ref: '#/components/schemas/iChallengeTrackerIdDetails'
          title: >-
            GetAdditionalCollectionDetailsRequestBody.challengeTrackersToFetch.[]
        title: GetAdditionalCollectionDetailsRequestBody.challengeTrackersToFetch
        description: >-
          If present, the merkle challenges corresponding to the specified
          merkle challenge IDs will be fetched.
        type: array
      approvalTrackersToFetch:
        items:
          $ref: '#/components/schemas/iAmountTrackerIdDetails'
          title: >-
            GetAdditionalCollectionDetailsRequestBody.approvalTrackersToFetch.[]
        title: GetAdditionalCollectionDetailsRequestBody.approvalTrackersToFetch
        description: >-
          If present, the approvals trackers corresponding to the specified
          approvals tracker IDs will be fetched.
        type: array
      handleAllAndAppendDefaults:
        title: GetAdditionalCollectionDetailsRequestBody.handleAllAndAppendDefaults
        description: If true, we will append defaults with empty values.
        type: boolean
      fetchPrivateParams:
        title: GetAdditionalCollectionDetailsRequestBody.fetchPrivateParams
        description: >-
          Fetches private parameters for any claims in addition to public
          parameters.
        type: boolean
      metadataToFetch:
        $ref: '#/components/schemas/MetadataFetchOptions'
        title: GetMetadataForCollectionRequestBody.metadataToFetch
        description: >-
          If present, we will fetch the metadata corresponding to the
          specified options.


          Consider using pruneMetadataToFetch for filtering out previously
          fetched metadata.
    additionalProperties: false
    title: >-
      GetCollectionByIdRouteRequestBody,
      GetAdditionalCollectionDetailsRequestBody,
      GetMetadataForCollectionRequestBody
    description: >-
      @category API Requests / Responses

      Defines the options for fetching additional collection details.


      A view is a way of fetching additional details about a collection, and
      these will be queryable in the response via the `views` property.

      Each view has a bookmark that is used for pagination and must be
      supplied to get the next page.

      If the bookmark is not supplied, the first page will be returned.


      We support the following views:

      - `transferActivity` - Fetches the latest activity for the collection.

      - `latestAnnouncements` - Fetches the latest announcements for the
      collection.

      - `reviews` - Fetches the latest reviews for the collection.

      - `owners` - Fetches the owners of the collection sequentially in random
      order.

      - `merkleChallenges` - Fetches the merkle challenges for the collection
      in random order.

      - `approvalTrackers` - Fetches the approvals trackers for the collection
      in random order.

      @category API Requests / Responses

      @category API Requests / Responses
    type: object
  iGetCollectionByIdRouteSuccessResponse:
    properties:
      collection:
        $ref: '#/components/schemas/iBitBadgesCollection'
        title: iGetCollectionByIdRouteSuccessResponse.collection
    required:
      - collection
    additionalProperties: false
    title: iGetCollectionByIdRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  RefreshMetadataRouteRequestBody:
    additionalProperties: false
    title: RefreshMetadataRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iRefreshMetadataRouteSuccessResponse:
    additionalProperties: false
    title: iRefreshMetadataRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  RefreshStatusRouteRequestBody:
    additionalProperties: false
    title: RefreshStatusRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iRefreshStatusRouteSuccessResponse:
    properties:
      inQueue:
        title: iRefreshStatusRouteSuccessResponse.inQueue
        description: Boolean indicating if the collection is currently in the queue.
        type: boolean
      errorDocs:
        items:
          $ref: '#/components/schemas/iQueueDoc'
          title: iRefreshStatusRouteSuccessResponse.errorDocs.[]
        title: iRefreshStatusRouteSuccessResponse.errorDocs
        description: Array of error documents corresponding to the collection.
        type: array
      refreshDoc:
        $ref: '#/components/schemas/iRefreshDoc'
        title: iRefreshStatusRouteSuccessResponse.refreshDoc
        description: The status information corresponding to the collection.
    required:
      - inQueue
      - errorDocs
      - refreshDoc
    additionalProperties: false
    title: iRefreshStatusRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  BlockinAssetConditionGroup:
    $ref: '#/components/schemas/OwnershipRequirements'
    title: BlockinAssetConditionGroup
    description: '@category Blockin'
  GetStatusRouteRequestBody:
    additionalProperties: false
    title: GetStatusRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetStatusRouteSuccessResponse:
    properties:
      status:
        $ref: '#/components/schemas/iStatusDoc'
        title: iGetStatusRouteSuccessResponse.status
        description: Status details about the indexer / blockchain.
    required:
      - status
    additionalProperties: false
    title: iGetStatusRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetSearchRouteRequestBody:
    properties:
      noCollections:
        title: GetSearchRouteRequestBody.noCollections
        description: If true, we will skip all collection queries.
        type: boolean
      noAccounts:
        title: GetSearchRouteRequestBody.noAccounts
        description: If true, we will skip all account queries.
        type: boolean
      noAddressLists:
        title: GetSearchRouteRequestBody.noAddressLists
        description: If true, we will skip all address list queries.
        type: boolean
      noBadges:
        title: GetSearchRouteRequestBody.noBadges
        description: If true, we will skip all badge queries.
        type: boolean
      specificCollectionId:
        title: GetSearchRouteRequestBody.specificCollectionId
        description: If true, we will limit collection results to a single collection.
        anyOf:
          - type: string
          - type: number
    additionalProperties: false
    title: GetSearchRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetSearchRouteSuccessResponse:
    properties:
      collections:
        items:
          $ref: '#/components/schemas/iBitBadgesCollection'
          title: iGetSearchRouteSuccessResponse.collections.[]
        title: iGetSearchRouteSuccessResponse.collections
        type: array
      accounts:
        items:
          $ref: '#/components/schemas/iBitBadgesUserInfo'
          title: iGetSearchRouteSuccessResponse.accounts.[]
        title: iGetSearchRouteSuccessResponse.accounts
        type: array
      addressLists:
        items:
          $ref: '#/components/schemas/iBitBadgesAddressList'
          title: iGetSearchRouteSuccessResponse.addressLists.[]
        title: iGetSearchRouteSuccessResponse.addressLists
        type: array
      badges:
        items:
          properties:
            collection:
              $ref: '#/components/schemas/iBitBadgesCollection'
              title: iGetSearchRouteSuccessResponse.badges.[].collection
            badgeIds:
              items:
                $ref: '#/components/schemas/iUintRange'
                title: iGetSearchRouteSuccessResponse.badges.[].badgeIds.[]
              title: iGetSearchRouteSuccessResponse.badges.[].badgeIds
              type: array
          required:
            - collection
            - badgeIds
          additionalProperties: false
          title: iGetSearchRouteSuccessResponse.badges.[]
          type: object
        title: iGetSearchRouteSuccessResponse.badges
        type: array
    required:
      - collections
      - accounts
      - addressLists
      - badges
    additionalProperties: false
    title: iGetSearchRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetClaimsRouteRequestBody:
    properties:
      claimIds:
        items:
          title: GetClaimsRouteRequestBody.claimIds.[]
          type: string
        title: GetClaimsRouteRequestBody.claimIds
        description: The claim IDs to fetch.
        type: array
      listId:
        title: GetClaimsRouteRequestBody.listId
        description: >-
          If the address list is private and viewable with the link only, you
          must also specify the address list ID to prove knowledge of the
          link.
        type: string
    required:
      - claimIds
    additionalProperties: false
    title: GetClaimsRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iClaimDetails:
    properties:
      claimId:
        title: iClaimDetails.claimId
        description: Unique claim ID.
        type: string
      balancesToSet:
        $ref: '#/components/schemas/iIncrementedBalances'
        title: iClaimDetails.balancesToSet
        description: >-
          The balances to set for the claim. Only used for claims for
          collections that have off-chain indexed balances and are assigning
          balances based on the claim.
      plugins:
        items:
          title: iClaimDetails.plugins.[]
        title: iClaimDetails.plugins
        description: >-
          Claim plugins. These are the criteria that must pass for a user to
          claim the badge.
        type: array
      manualDistribution:
        title: iClaimDetails.manualDistribution
        description: >-
          If manual distribution is enabled, we do not handle any distribution
          of claim codes. We leave that up to the claim creator.
        type: boolean
    required:
      - claimId
      - plugins
    additionalProperties: false
    title: iClaimDetails
    description: '@category Interfaces'
    type: object
  iGetClaimsRouteSuccessResponse:
    properties:
      claims:
        items:
          $ref: '#/components/schemas/iClaimDetails'
          title: iGetClaimsRouteSuccessResponse.claims.[]
        title: iGetClaimsRouteSuccessResponse.claims
        type: array
    required:
      - claims
    additionalProperties: false
    title: iGetClaimsRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  CheckAndCompleteClaimRouteRequestBody:
    properties:
      prevCodesOnly:
        title: CheckAndCompleteClaimRouteRequestBody.prevCodesOnly
        description: If true, we will only return the user's previous claim codes.
        type: boolean
    additionalProperties: {}
    title: CheckAndCompleteClaimRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iCheckAndCompleteClaimRouteSuccessResponse:
    properties:
      code:
        title: iCheckAndCompleteClaimRouteSuccessResponse.code
        description: The new claim code for the user if the claim was successful.
        type: string
      prevCodes:
        items:
          title: iCheckAndCompleteClaimRouteSuccessResponse.prevCodes.[]
          type: string
        title: iCheckAndCompleteClaimRouteSuccessResponse.prevCodes
        description: The previous claim codes for the user.
        type: array
    additionalProperties: false
    title: iCheckAndCompleteClaimRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  DeleteReviewRouteRequestBody:
    properties:
      reviewId:
        title: DeleteReviewRouteRequestBody.reviewId
        description: The review ID to delete.
        type: string
    required:
      - reviewId
    additionalProperties: false
    title: DeleteReviewRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iDeleteReviewRouteSuccessResponse:
    additionalProperties: false
    title: iDeleteReviewRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  AddReviewForCollectionRouteRequestBody:
    properties:
      review:
        title: AddReviewForCollectionRouteRequestBody.review
        description: The review text (1 to 2048 characters).
        type: string
      stars:
        title: AddReviewForCollectionRouteRequestBody.stars
        description: The star rating (1 to 5).
        anyOf:
          - type: string
          - type: number
    required:
      - review
      - stars
    additionalProperties: false
    title: AddReviewForCollectionRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iAddReviewForCollectionRouteSuccessResponse:
    additionalProperties: false
    title: iAddReviewForCollectionRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  AddReviewForUserRouteRequestBody:
    properties:
      review:
        title: AddReviewForUserRouteRequestBody.review
        description: The review text (1 to 2048 characters).
        type: string
      stars:
        title: AddReviewForUserRouteRequestBody.stars
        description: The number of stars (1 to 5) for the review.
        anyOf:
          - type: string
          - type: number
    required:
      - review
      - stars
    additionalProperties: false
    title: AddReviewForUserRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iAddReviewForUserRouteSuccessResponse:
    additionalProperties: false
    title: iAddReviewForUserRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  UpdateAccountInfoRouteRequestBody:
    properties:
      discord:
        title: UpdateAccountInfoRouteRequestBody.discord
        description: The Discord username.
        type: string
      twitter:
        title: UpdateAccountInfoRouteRequestBody.twitter
        description: The Twitter username.
        type: string
      github:
        title: UpdateAccountInfoRouteRequestBody.github
        description: The GitHub username.
        type: string
      telegram:
        title: UpdateAccountInfoRouteRequestBody.telegram
        description: The Telegram username.
        type: string
      seenActivity:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: UpdateAccountInfoRouteRequestBody.seenActivity
        description: The last seen activity timestamp.
      readme:
        title: UpdateAccountInfoRouteRequestBody.readme
        description: The README details (markdown supported).
        type: string
      hiddenBadges:
        items:
          $ref: '#/components/schemas/iBatchBadgeDetails'
          title: UpdateAccountInfoRouteRequestBody.hiddenBadges.[]
        title: UpdateAccountInfoRouteRequestBody.hiddenBadges
        description: The badges to hide and not view for this profile's portfolio
        type: array
      hiddenLists:
        items:
          title: UpdateAccountInfoRouteRequestBody.hiddenLists.[]
          type: string
        title: UpdateAccountInfoRouteRequestBody.hiddenLists
        description: The lists to hide and not view for this profile's portfolio
        type: array
      customPages:
        properties:
          badges:
            items:
              $ref: '#/components/schemas/iCustomPage'
              title: UpdateAccountInfoRouteRequestBody.customPages.badges.[]
            title: UpdateAccountInfoRouteRequestBody.customPages.badges
            type: array
          lists:
            items:
              $ref: '#/components/schemas/iCustomListPage'
              title: UpdateAccountInfoRouteRequestBody.customPages.lists.[]
            title: UpdateAccountInfoRouteRequestBody.customPages.lists
            type: array
        required:
          - badges
          - lists
        additionalProperties: false
        title: UpdateAccountInfoRouteRequestBody.customPages
        description: >-
          An array of custom pages on the user's portolio. Used to customize,
          sort, and group badges / lists into pages.
        type: object
      watchlists:
        properties:
          badges:
            items:
              $ref: '#/components/schemas/iCustomPage'
              title: UpdateAccountInfoRouteRequestBody.watchlists.badges.[]
            title: UpdateAccountInfoRouteRequestBody.watchlists.badges
            type: array
          lists:
            items:
              $ref: '#/components/schemas/iCustomListPage'
              title: UpdateAccountInfoRouteRequestBody.watchlists.lists.[]
            title: UpdateAccountInfoRouteRequestBody.watchlists.lists
            type: array
        required:
          - badges
          - lists
        additionalProperties: false
        title: UpdateAccountInfoRouteRequestBody.watchlists
        description: The watchlist of badges / lists
        type: object
      profilePicUrl:
        title: UpdateAccountInfoRouteRequestBody.profilePicUrl
        description: The profile picture URL.
        type: string
      username:
        title: UpdateAccountInfoRouteRequestBody.username
        description: The username.
        type: string
      profilePicImageFile:
        title: UpdateAccountInfoRouteRequestBody.profilePicImageFile
        description: >-
          The profile picture image file to set. We will then upload to our
          CDN.
      notifications:
        properties:
          email:
            title: UpdateAccountInfoRouteRequestBody.notifications.email
            type: string
          antiPhishingCode:
            title: UpdateAccountInfoRouteRequestBody.notifications.antiPhishingCode
            type: string
          preferences:
            additionalProperties: false
            title: UpdateAccountInfoRouteRequestBody.notifications.preferences
            type: object
        additionalProperties: false
        title: UpdateAccountInfoRouteRequestBody.notifications
        description: >-
          The notification preferences for the user. Will only be returned if
          user is authenticated with full access.
        type: object
      approvedSignInMethods:
        properties:
          discord:
            properties:
              username:
                title: >-
                  UpdateAccountInfoRouteRequestBody.approvedSignInMethods.discord.username
                type: string
              discriminator:
                title: >-
                  UpdateAccountInfoRouteRequestBody.approvedSignInMethods.discord.discriminator
                type: string
              id:
                title: >-
                  UpdateAccountInfoRouteRequestBody.approvedSignInMethods.discord.id
                type: string
            required:
              - username
              - id
            additionalProperties: false
            title: UpdateAccountInfoRouteRequestBody.approvedSignInMethods.discord
            type: object
        additionalProperties: false
        title: UpdateAccountInfoRouteRequestBody.approvedSignInMethods
        description: >-
          Approved sign in methods. Only returned if user is authenticated
          with full access.
        type: object
      socialConntections:
        $ref: '#/components/schemas/iSocialConnections'
        title: UpdateAccountInfoRouteRequestBody.socialConntections
        description: >-
          The social connections for the user. Only returned if user is
          authenticated with full access.
    additionalProperties: false
    title: UpdateAccountInfoRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iUpdateAccountInfoRouteSuccessResponse:
    additionalProperties: false
    title: iUpdateAccountInfoRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  AddBalancesToOffChainStorageRouteRequestBody:
    properties:
      balances:
        $ref: '#/components/schemas/iOffChainBalancesMap'
        title: AddBalancesToOffChainStorageRouteRequestBody.balances
        description: A map of BitBadges addresses or list IDs -> Balance[].
      claims:
        items:
          properties:
            claimId:
              title: AddBalancesToOffChainStorageRouteRequestBody.claims.[].claimId
              type: string
            plugins:
              items:
                title: >-
                  AddBalancesToOffChainStorageRouteRequestBody.claims.[].plugins.[]
              title: AddBalancesToOffChainStorageRouteRequestBody.claims.[].plugins
              type: array
            balancesToSet:
              $ref: '#/components/schemas/iIncrementedBalances'
              title: >-
                AddBalancesToOffChainStorageRouteRequestBody.claims.[].balancesToSet
          required:
            - claimId
            - plugins
          additionalProperties: false
          title: AddBalancesToOffChainStorageRouteRequestBody.claims.[]
          type: object
        title: AddBalancesToOffChainStorageRouteRequestBody.claims
        description: The claim details
        type: array
      method:
        enum:
          - ipfs
          - centralized
        title: AddBalancesToOffChainStorageRouteRequestBody.method
        description: The method for storing balances (ipfs or centralized).
        type: string
      collectionId:
        title: AddBalancesToOffChainStorageRouteRequestBody.collectionId
        description: The collection ID.
        anyOf:
          - type: string
          - type: number
    required:
      - method
      - collectionId
    additionalProperties: false
    title: AddBalancesToOffChainStorageRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iAddBalancesToOffChainStorageRouteSuccessResponse:
    properties:
      uri:
        title: iAddBalancesToOffChainStorageRouteSuccessResponse.uri
        description: The URI of the stored data.
        type: string
      result:
        properties:
          cid:
            title: iAddBalancesToOffChainStorageRouteSuccessResponse.result.cid
            type: string
        additionalProperties: false
        title: iAddBalancesToOffChainStorageRouteSuccessResponse.result
        description: The result object with CID.
        type: object
    required:
      - result
    additionalProperties: false
    title: iAddBalancesToOffChainStorageRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  AddMetadataToIpfsRouteRequestBody:
    properties:
      collectionMetadata:
        $ref: '#/components/schemas/iMetadata'
        title: AddMetadataToIpfsRouteRequestBody.collectionMetadata
        description: The collection metadata to add to IPFS
      badgeMetadata:
        anyOf:
          - items:
              $ref: '#/components/schemas/iBadgeMetadataDetails'
              title: AddMetadataToIpfsRouteRequestBody.badgeMetadata.[]
            title: AddMetadataToIpfsRouteRequestBody.badgeMetadata.[]
            type: array
          - items:
              $ref: '#/components/schemas/iMetadata'
              title: AddMetadataToIpfsRouteRequestBody.badgeMetadata.[]
            title: AddMetadataToIpfsRouteRequestBody.badgeMetadata.[]
            type: array
        title: AddMetadataToIpfsRouteRequestBody.badgeMetadata
        description: The badge metadata to add to IPFS
    additionalProperties: false
    title: AddMetadataToIpfsRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iAddMetadataToIpfsRouteSuccessResponse:
    properties:
      collectionMetadataResult:
        properties:
          cid:
            title: >-
              iAddMetadataToIpfsRouteSuccessResponse.collectionMetadataResult.cid
            type: string
        required:
          - cid
        additionalProperties: false
        title: iAddMetadataToIpfsRouteSuccessResponse.collectionMetadataResult
        description: The result for collection metadata.
        type: object
      badgeMetadataResults:
        items:
          properties:
            cid:
              title: >-
                iAddMetadataToIpfsRouteSuccessResponse.badgeMetadataResults.[].cid
              type: string
          required:
            - cid
          additionalProperties: false
          title: iAddMetadataToIpfsRouteSuccessResponse.badgeMetadataResults.[]
          type: object
        title: iAddMetadataToIpfsRouteSuccessResponse.badgeMetadataResults
        description: An array of badge metadata results, if applicable.
        type: array
    required:
      - badgeMetadataResults
    additionalProperties: false
    title: iAddMetadataToIpfsRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  AddApprovalDetailsToOffChainStorageRouteRequestBody:
    properties:
      name:
        title: AddApprovalDetailsToOffChainStorageRouteRequestBody.name
        description: The name of the approval.
        type: string
      description:
        title: AddApprovalDetailsToOffChainStorageRouteRequestBody.description
        description: The description of the approval.
        type: string
      challengeDetails:
        $ref: '#/components/schemas/iChallengeDetails'
        title: AddApprovalDetailsToOffChainStorageRouteRequestBody.challengeDetails
        description: The challenge details.
      claims:
        items:
          properties:
            plugins:
              items:
                title: >-
                  AddApprovalDetailsToOffChainStorageRouteRequestBody.claims.[].plugins.[]
              title: >-
                AddApprovalDetailsToOffChainStorageRouteRequestBody.claims.[].plugins
              description: The plugins for the approval.
              type: array
            claimId:
              title: >-
                AddApprovalDetailsToOffChainStorageRouteRequestBody.claims.[].claimId
              type: string
            manualDistribution:
              title: >-
                AddApprovalDetailsToOffChainStorageRouteRequestBody.claims.[].manualDistribution
              type: boolean
          required:
            - plugins
            - claimId
          additionalProperties: false
          title: AddApprovalDetailsToOffChainStorageRouteRequestBody.claims.[]
          type: object
        title: AddApprovalDetailsToOffChainStorageRouteRequestBody.claims
        type: array
    required:
      - name
      - description
    additionalProperties: false
    title: AddApprovalDetailsToOffChainStorageRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iAddApprovalDetailsToOffChainStorageRouteSuccessResponse:
    properties:
      result:
        properties:
          cid:
            title: >-
              iAddApprovalDetailsToOffChainStorageRouteSuccessResponse.result.cid
            type: string
        required:
          - cid
        additionalProperties: false
        title: iAddApprovalDetailsToOffChainStorageRouteSuccessResponse.result
        description: The result with CID for IPFS.
        type: object
      challengeResult:
        properties:
          cid:
            title: >-
              iAddApprovalDetailsToOffChainStorageRouteSuccessResponse.challengeResult.cid
            type: string
        required:
          - cid
        additionalProperties: false
        title: >-
          iAddApprovalDetailsToOffChainStorageRouteSuccessResponse.challengeResult
        description: The result for the approval challenge details.
        type: object
    required:
      - result
    additionalProperties: false
    title: iAddApprovalDetailsToOffChainStorageRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetSignInChallengeRouteRequestBody:
    properties:
      chain:
        $ref: '#/components/schemas/SupportedChain'
        title: GetSignInChallengeRouteRequestBody.chain
        description: The blockchain to be signed in with.
      address:
        $ref: '#/components/schemas/NativeAddress'
        title: GetSignInChallengeRouteRequestBody.address
        description: The user's blockchain address. This can be their native address.
      hours:
        title: GetSignInChallengeRouteRequestBody.hours
        description: The number of hours to be signed in for.
        anyOf:
          - type: string
          - type: number
    required:
      - chain
      - address
    additionalProperties: false
    title: GetSignInChallengeRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetSignInChallengeRouteSuccessResponse:
    properties:
      nonce:
        title: iGetSignInChallengeRouteSuccessResponse.nonce
        description: The nonce for the challenge.
        type: string
      params:
        $ref: '#/components/schemas/ChallengeParams'
        title: iGetSignInChallengeRouteSuccessResponse.params
        description: The challenge parameters.
      message:
        $ref: '#/components/schemas/SiwbbMessage'
        title: iGetSignInChallengeRouteSuccessResponse.message
        description: The Blockin challenge message to sign.
    required:
      - nonce
      - params
      - message
    additionalProperties: false
    title: iGetSignInChallengeRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  VerifySignInRouteRequestBody:
    properties:
      message:
        $ref: '#/components/schemas/SiwbbMessage'
        title: VerifySignInRouteRequestBody.message
        description: The original Blockin message that was signed.
      signature:
        title: VerifySignInRouteRequestBody.signature
        description: The signature of the Blockin message
        type: string
      publicKey:
        title: VerifySignInRouteRequestBody.publicKey
        description: >-
          Required for some chains (Cosmos) to verify signature. The public
          key of the signer.
        type: string
    required:
      - message
      - signature
    additionalProperties: false
    title: VerifySignInRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iVerifySignInRouteSuccessResponse:
    additionalProperties: false
    title: iVerifySignInRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  CheckSignInStatusRequestBody:
    additionalProperties: false
    title: CheckSignInStatusRequestBody
    description: '@category API Requests / Responses'
    type: object
  iCheckSignInStatusRequestSuccessResponse:
    properties:
      signedIn:
        title: iCheckSignInStatusRequestSuccessResponse.signedIn
        description: Indicates whether the user is signed in.
        type: boolean
      message:
        $ref: '#/components/schemas/SiwbbMessage'
        title: iCheckSignInStatusRequestSuccessResponse.message
        description: The Blockin message that was signed.
      discord:
        properties:
          username:
            title: iCheckSignInStatusRequestSuccessResponse.discord.username
            type: string
          discriminator:
            title: iCheckSignInStatusRequestSuccessResponse.discord.discriminator
            type: string
          id:
            title: iCheckSignInStatusRequestSuccessResponse.discord.id
            type: string
        required:
          - username
          - discriminator
          - id
        additionalProperties: false
        title: iCheckSignInStatusRequestSuccessResponse.discord
        description: Signed in with Discord username and discriminator?
        type: object
      twitter:
        properties:
          id:
            title: iCheckSignInStatusRequestSuccessResponse.twitter.id
            type: string
          username:
            title: iCheckSignInStatusRequestSuccessResponse.twitter.username
            type: string
        required:
          - id
          - username
        additionalProperties: false
        title: iCheckSignInStatusRequestSuccessResponse.twitter
        description: Signed in with Twitter username?
        type: object
      github:
        properties:
          id:
            title: iCheckSignInStatusRequestSuccessResponse.github.id
            type: string
          username:
            title: iCheckSignInStatusRequestSuccessResponse.github.username
            type: string
        required:
          - id
          - username
        additionalProperties: false
        title: iCheckSignInStatusRequestSuccessResponse.github
        description: Signed in with GitHub username?
        type: object
      google:
        properties:
          id:
            title: iCheckSignInStatusRequestSuccessResponse.google.id
            type: string
          username:
            title: iCheckSignInStatusRequestSuccessResponse.google.username
            type: string
        required:
          - id
          - username
        additionalProperties: false
        title: iCheckSignInStatusRequestSuccessResponse.google
        description: Signed in with Google username?
        type: object
    required:
      - signedIn
      - message
    additionalProperties: false
    title: iCheckSignInStatusRequestSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  SignOutRequestBody:
    properties:
      signOutBlockin:
        title: SignOutRequestBody.signOutBlockin
        description: Sign out of Blockin, and thus the entire API.
        type: boolean
      signOutDiscord:
        title: SignOutRequestBody.signOutDiscord
        description: Sign out of Discord.
        type: boolean
      signOutTwitter:
        title: SignOutRequestBody.signOutTwitter
        description: Sign out of Twitter.
        type: boolean
      signOutGoogle:
        title: SignOutRequestBody.signOutGoogle
        description: Sign out of Google.
        type: boolean
      signOutGithub:
        title: SignOutRequestBody.signOutGithub
        description: Sign out of GitHub.
        type: boolean
    required:
      - signOutBlockin
    additionalProperties: false
    title: SignOutRequestBody
    description: '@category API Requests / Responses'
    type: object
  iSignOutSuccessResponse:
    additionalProperties: false
    title: iSignOutSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetBrowseRouteRequestBody:
    additionalProperties: false
    title: GetBrowseRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetBrowseRouteSuccessResponse:
    properties:
      collections:
        additionalProperties:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
            title: '[]'
          title: '[]'
          type: array
        title: iGetBrowseRouteSuccessResponse.collections
        type: object
      addressLists:
        additionalProperties:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
            title: '[]'
          title: '[]'
          type: array
        title: iGetBrowseRouteSuccessResponse.addressLists
        type: object
      profiles:
        additionalProperties:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
            title: '[]'
          title: '[]'
          type: array
        title: iGetBrowseRouteSuccessResponse.profiles
        type: object
      activity:
        items:
          $ref: '#/components/schemas/iTransferActivityDoc'
          title: iGetBrowseRouteSuccessResponse.activity.[]
        title: iGetBrowseRouteSuccessResponse.activity
        type: array
      badges:
        additionalProperties:
          items:
            properties:
              collection:
                $ref: '#/components/schemas/iBitBadgesCollection'
                title: '[].collection'
              badgeIds:
                items:
                  $ref: '#/components/schemas/iUintRange'
                  title: '[].badgeIds.[]'
                title: '[].badgeIds'
                type: array
            required:
              - collection
              - badgeIds
            additionalProperties: false
            title: '[]'
            type: object
          title: '[]'
          type: array
        title: iGetBrowseRouteSuccessResponse.badges
        type: object
    required:
      - collections
      - addressLists
      - profiles
      - activity
      - badges
    additionalProperties: false
    title: iGetBrowseRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  BroadcastTxRouteRequestBody:
    $ref: '#/components/schemas/BroadcastPostBody'
    title: BroadcastTxRouteRequestBody
    description: '@category API Requests / Responses'
  iBroadcastTxRouteSuccessResponse:
    properties:
      tx_response:
        properties:
          code:
            title: iBroadcastTxRouteSuccessResponse.tx_response.code
            type: number
          codespace:
            title: iBroadcastTxRouteSuccessResponse.tx_response.codespace
            type: string
          data:
            title: iBroadcastTxRouteSuccessResponse.tx_response.data
            type: string
          events:
            items:
              properties:
                type:
                  title: >-
                    iBroadcastTxRouteSuccessResponse.tx_response.events.[].type
                  type: string
                attributes:
                  items:
                    properties:
                      key:
                        title: >-
                          iBroadcastTxRouteSuccessResponse.tx_response.events.[].attributes.[].key
                        type: string
                      value:
                        title: >-
                          iBroadcastTxRouteSuccessResponse.tx_response.events.[].attributes.[].value
                        type: string
                      index:
                        title: >-
                          iBroadcastTxRouteSuccessResponse.tx_response.events.[].attributes.[].index
                        type: boolean
                    required:
                      - key
                      - value
                      - index
                    additionalProperties: false
                    title: >-
                      iBroadcastTxRouteSuccessResponse.tx_response.events.[].attributes.[]
                    type: object
                  title: >-
                    iBroadcastTxRouteSuccessResponse.tx_response.events.[].attributes
                  type: array
              required:
                - type
                - attributes
              additionalProperties: false
              title: iBroadcastTxRouteSuccessResponse.tx_response.events.[]
              type: object
            title: iBroadcastTxRouteSuccessResponse.tx_response.events
            type: array
          gas_wanted:
            title: iBroadcastTxRouteSuccessResponse.tx_response.gas_wanted
            type: string
          gas_used:
            title: iBroadcastTxRouteSuccessResponse.tx_response.gas_used
            type: string
          height:
            title: iBroadcastTxRouteSuccessResponse.tx_response.height
            type: string
          Doc:
            title: iBroadcastTxRouteSuccessResponse.tx_response.Doc
            type: string
          logs:
            items:
              properties:
                events:
                  items:
                    properties:
                      type:
                        title: >-
                          iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].type
                        type: string
                      attributes:
                        items:
                          properties:
                            key:
                              title: >-
                                iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].attributes.[].key
                              type: string
                            value:
                              title: >-
                                iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].attributes.[].value
                              type: string
                            index:
                              title: >-
                                iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].attributes.[].index
                              type: boolean
                          required:
                            - key
                            - value
                            - index
                          additionalProperties: false
                          title: >-
                            iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].attributes.[]
                          type: object
                        title: >-
                          iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[].attributes
                        type: array
                    required:
                      - type
                      - attributes
                    additionalProperties: false
                    title: >-
                      iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events.[]
                    type: object
                  title: >-
                    iBroadcastTxRouteSuccessResponse.tx_response.logs.[].events
                  type: array
              required:
                - events
              additionalProperties: false
              title: iBroadcastTxRouteSuccessResponse.tx_response.logs.[]
              type: object
            title: iBroadcastTxRouteSuccessResponse.tx_response.logs
            type: array
          raw_log:
            title: iBroadcastTxRouteSuccessResponse.tx_response.raw_log
            type: string
          timestamp:
            title: iBroadcastTxRouteSuccessResponse.tx_response.timestamp
            type: string
          tx:
            title: iBroadcastTxRouteSuccessResponse.tx_response.tx
            nullable: true
            type: object
          txhash:
            title: iBroadcastTxRouteSuccessResponse.tx_response.txhash
            type: string
        required:
          - code
          - codespace
          - data
          - events
          - gas_wanted
          - gas_used
          - height
          - Doc
          - logs
          - raw_log
          - timestamp
          - tx
          - txhash
        additionalProperties: false
        title: iBroadcastTxRouteSuccessResponse.tx_response
        description: The response from the blockchain for the broadcasted tx.
        type: object
    required:
      - tx_response
    additionalProperties: false
    title: iBroadcastTxRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  SimulateTxRouteRequestBody:
    $ref: '#/components/schemas/BroadcastPostBody'
    title: SimulateTxRouteRequestBody
    description: '@category API Requests / Responses'
  iSimulateTxRouteSuccessResponse:
    properties:
      gas_info:
        properties:
          gas_used:
            title: iSimulateTxRouteSuccessResponse.gas_info.gas_used
            type: string
          gas_wanted:
            title: iSimulateTxRouteSuccessResponse.gas_info.gas_wanted
            type: string
        required:
          - gas_used
          - gas_wanted
        additionalProperties: false
        title: iSimulateTxRouteSuccessResponse.gas_info
        description: How much gas was used in the simulation.
        type: object
      result:
        properties:
          data:
            title: iSimulateTxRouteSuccessResponse.result.data
            type: string
          log:
            title: iSimulateTxRouteSuccessResponse.result.log
            type: string
          events:
            items:
              properties:
                type:
                  title: iSimulateTxRouteSuccessResponse.result.events.[].type
                  type: string
                attributes:
                  items:
                    properties:
                      key:
                        title: >-
                          iSimulateTxRouteSuccessResponse.result.events.[].attributes.[].key
                        type: string
                      value:
                        title: >-
                          iSimulateTxRouteSuccessResponse.result.events.[].attributes.[].value
                        type: string
                      index:
                        title: >-
                          iSimulateTxRouteSuccessResponse.result.events.[].attributes.[].index
                        type: boolean
                    required:
                      - key
                      - value
                      - index
                    additionalProperties: false
                    title: >-
                      iSimulateTxRouteSuccessResponse.result.events.[].attributes.[]
                    type: object
                  title: >-
                    iSimulateTxRouteSuccessResponse.result.events.[].attributes
                  type: array
              required:
                - type
                - attributes
              additionalProperties: false
              title: iSimulateTxRouteSuccessResponse.result.events.[]
              type: object
            title: iSimulateTxRouteSuccessResponse.result.events
            type: array
        required:
          - data
          - log
          - events
        additionalProperties: false
        title: iSimulateTxRouteSuccessResponse.result
        description: The result of the simulation.
        type: object
    required:
      - gas_info
      - result
    additionalProperties: false
    title: iSimulateTxRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  FetchMetadataDirectlyRouteRequestBody:
    properties:
      uris:
        items:
          title: FetchMetadataDirectlyRouteRequestBody.uris.[]
          type: string
        title: FetchMetadataDirectlyRouteRequestBody.uris
        type: array
    required:
      - uris
    additionalProperties: false
    title: FetchMetadataDirectlyRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iFetchMetadataDirectlyRouteSuccessResponse:
    properties:
      metadata:
        items:
          $ref: '#/components/schemas/iMetadata'
          title: iFetchMetadataDirectlyRouteSuccessResponse.metadata.[]
        title: iFetchMetadataDirectlyRouteSuccessResponse.metadata
        type: array
    required:
      - metadata
    additionalProperties: false
    title: iFetchMetadataDirectlyRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetTokensFromFaucetRouteRequestBody:
    additionalProperties: false
    title: GetTokensFromFaucetRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetTokensFromFaucetRouteSuccessResponse:
    title: iGetTokensFromFaucetRouteSuccessResponse
    description: '@category API Requests / Responses'
  SendClaimAlertsRouteRequestBody:
    properties:
      claimAlerts:
        items:
          properties:
            collectionId:
              title: SendClaimAlertsRouteRequestBody.claimAlerts.[].collectionId
              description: >-
                The collection ID to associate with the claim alert. If
                specified, you (the sender) must be the manager of the
                collection. This is typically used

                for sending claim codes. Set to 0 for unspecified.
              anyOf:
                - type: string
                - type: number
            message:
              title: SendClaimAlertsRouteRequestBody.claimAlerts.[].message
              description: The message to send to the user.
              type: string
            bitbadgesAddresses:
              items:
                $ref: '#/components/schemas/BitBadgesAddress'
                title: >-
                  SendClaimAlertsRouteRequestBody.claimAlerts.[].bitbadgesAddresses.[]
              title: SendClaimAlertsRouteRequestBody.claimAlerts.[].bitbadgesAddresses
              description: The addresses to send the claim alert to.
              type: array
          required:
            - collectionId
            - bitbadgesAddresses
          additionalProperties: false
          title: SendClaimAlertsRouteRequestBody.claimAlerts.[]
          type: object
        title: SendClaimAlertsRouteRequestBody.claimAlerts
        description: The claim alerts to send to users.
        type: array
    required:
      - claimAlerts
    additionalProperties: false
    title: SendClaimAlertsRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iSendClaimAlertsRouteSuccessResponse:
    additionalProperties: false
    title: iSendClaimAlertsRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  CosmosAccountResponse:
    properties:
      account_number:
        title: CosmosAccountResponse.account_number
        type: number
      sequence:
        title: CosmosAccountResponse.sequence
        type: number
      pub_key:
        properties:
          key:
            title: CosmosAccountResponse.pub_key.key
            type: string
        required:
          - key
        additionalProperties: false
        title: CosmosAccountResponse.pub_key
        type: object
      address:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: CosmosAccountResponse.address
    required:
      - account_number
      - sequence
      - pub_key
      - address
    additionalProperties: false
    title: CosmosAccountResponse
    description: >-
      Information returned by the REST API getAccount route.


      Note this should be converted into AccountDoc or BitBadgesUserInfo
      before being returned by the BitBadges API for consistency.

      @category API Requests / Responses
    type: object
  GenericBlockinVerifyRouteRequestBody:
    properties:
      message:
        $ref: '#/components/schemas/SiwbbMessage'
        title: VerifySignInRouteRequestBody.message
        description: The original Blockin message that was signed.
      signature:
        title: VerifySignInRouteRequestBody.signature
        description: The signature of the Blockin message
        type: string
      publicKey:
        title: VerifySignInRouteRequestBody.publicKey
        description: >-
          Required for some chains (Cosmos) to verify signature. The public
          key of the signer.
        type: string
      options:
        $ref: '#/components/schemas/VerifyChallengeOptions'
        title: GenericBlockinVerifyRouteRequestBody.options
        description: Additional options for verifying the challenge.
    required:
      - message
      - signature
    additionalProperties: false
    title: GenericBlockinVerifyRouteRequestBody, VerifySignInRouteRequestBody
    description: >-
      Generic route to verify any Blockin request. Does not sign you in with
      the API. Used for custom Blockin integrations.

      @category API Requests / Responses

      @category API Requests / Responses
    type: object
  iGenericBlockinVerifyRouteSuccessResponse:
    additionalProperties: false
    title: >-
      iGenericBlockinVerifyRouteSuccessResponse,
      iVerifySignInRouteSuccessResponse
    description: |-
      @inheritDoc iVerifySignInRouteSuccessResponse
      @category API Requests / Responses
      @category API Requests / Responses
    type: object
  CreateSecretRouteRequestBody:
    properties:
      proofOfIssuance:
        properties:
          message:
            title: CreateSecretRouteRequestBody.proofOfIssuance.message
            type: string
          signature:
            title: CreateSecretRouteRequestBody.proofOfIssuance.signature
            type: string
          signer:
            title: CreateSecretRouteRequestBody.proofOfIssuance.signer
            type: string
          publicKey:
            title: CreateSecretRouteRequestBody.proofOfIssuance.publicKey
            type: string
        required:
          - message
          - signature
          - signer
        additionalProperties: false
        title: CreateSecretRouteRequestBody.proofOfIssuance
        description: >-
          Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

          BBS+ signatures are signed with a BBS+ key pair, but you would often
          want the issuer to be a native address.

          The prooofOfIssuance establishes a link saying that "I am the issuer
          of this secret signed with BBS+ key pair ___".


          Fields can be left blank for standard signatures.
        type: object
      messageFormat:
        enum:
          - plaintext
          - json
        title: CreateSecretRouteRequestBody.messageFormat
        description: The message format of the secretMessages.
        type: string
      scheme:
        enum:
          - bbs
          - standard
        title: CreateSecretRouteRequestBody.scheme
        description: >-
          The scheme of the secret. BBS+ signatures are supported and can be
          used where selective disclosure is a requirement.

          Otherwise, you can simply use your native blockchain's signature
          scheme.
        type: string
      type:
        title: CreateSecretRouteRequestBody.type
        description: The type of the secret (e.g. credential).
        type: string
      secretMessages:
        items:
          title: CreateSecretRouteRequestBody.secretMessages.[]
          type: string
        title: CreateSecretRouteRequestBody.secretMessages
        description: >-
          Thesse are the secrets that are signed.

          For BBS+ signatures, there can be >1 secretMessages, and the signer
          can selectively disclose the secrets.

          For standard signatures, there is only 1 secretMessage.
        type: array
      dataIntegrityProof:
        properties:
          signature:
            title: CreateSecretRouteRequestBody.dataIntegrityProof.signature
            type: string
          signer:
            title: CreateSecretRouteRequestBody.dataIntegrityProof.signer
            type: string
          publicKey:
            title: CreateSecretRouteRequestBody.dataIntegrityProof.publicKey
            type: string
        required:
          - signature
          - signer
        additionalProperties: false
        title: CreateSecretRouteRequestBody.dataIntegrityProof
        description: >-
          This is the signature and accompanying details of the
          secretMessages. The siganture maintains the integrity of the
          secretMessages.


          This should match the expected scheme. For example, if the scheme is
          BBS+, the signature should be a BBS+ signature and signer should be
          a BBS+ public key.
        type: object
      name:
        title: CreateSecretRouteRequestBody.name
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      image:
        title: CreateSecretRouteRequestBody.image
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      description:
        title: CreateSecretRouteRequestBody.description
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
    required:
      - proofOfIssuance
      - messageFormat
      - scheme
      - type
      - secretMessages
      - dataIntegrityProof
      - name
      - image
      - description
    additionalProperties: false
    title: CreateSecretRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iCreateSecretRouteSuccessResponse:
    properties:
      secretId:
        title: iCreateSecretRouteSuccessResponse.secretId
        description: >-
          The secret ID. This is the ID that is given to the user to query the
          secret. Anyone with the ID can query it, so keep this safe and
          secure.
        type: string
    required:
      - secretId
    additionalProperties: false
    title: iCreateSecretRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetSecretRouteRequestBody:
    properties:
      secretId:
        title: GetSecretRouteRequestBody.secretId
        description: >-
          The secret ID. This is the ID that is given to the user to query the
          secret. Anyone with the ID can query it, so keep this safe and
          secure.
        type: string
    required:
      - secretId
    additionalProperties: false
    title: GetSecretRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetSecretRouteSuccessResponse:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      messageFormat:
        enum:
          - plaintext
          - json
        title: iSecret.messageFormat
        description: The message format of the secretMessages.
        type: string
      createdBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iSecret.createdBy
        description: The address of the user who created the secret.
      proofOfIssuance:
        properties:
          message:
            title: iSecret.proofOfIssuance.message
            type: string
          signature:
            title: iSecret.proofOfIssuance.signature
            type: string
          signer:
            title: iSecret.proofOfIssuance.signer
            type: string
          publicKey:
            title: iSecret.proofOfIssuance.publicKey
            type: string
        required:
          - message
          - signature
          - signer
        additionalProperties: false
        title: iSecret.proofOfIssuance
        description: >-
          Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

          BBS+ signatures are signed with a BBS+ key pair, but you would often
          want the issuer to be a native address.

          The prooofOfIssuance establishes a link saying that "I am the issuer
          of this secret signed with BBS+ key pair ___".


          Fields can be left blank for standard signatures.
        type: object
      secretId:
        title: iSecret.secretId
        description: >-
          The secret ID. This is the ID that is given to the user to query the
          secret. Anyone with the ID can query it, so keep this safe and
          secure.
        type: string
      scheme:
        enum:
          - bbs
          - standard
        title: iSecret.scheme
        description: >-
          The scheme of the secret. BBS+ signatures are supported and can be
          used where selective disclosure is a requirement.

          Otherwise, you can simply use your native blockchain's signature
          scheme.
        type: string
      type:
        title: iSecret.type
        description: The type of the secret (e.g. credential).
        type: string
      secretMessages:
        items:
          title: iSecret.secretMessages.[]
          type: string
        title: iSecret.secretMessages
        description: >-
          Thesse are the secrets that are signed.

          For BBS+ signatures, there can be >1 secretMessages, and the signer
          can selectively disclose the secrets.

          For standard signatures, there is only 1 secretMessage.
        type: array
      dataIntegrityProof:
        properties:
          signature:
            title: iSecret.dataIntegrityProof.signature
            type: string
          signer:
            title: iSecret.dataIntegrityProof.signer
            type: string
          publicKey:
            title: iSecret.dataIntegrityProof.publicKey
            type: string
        required:
          - signature
          - signer
        additionalProperties: false
        title: iSecret.dataIntegrityProof
        description: >-
          This is the signature and accompanying details of the
          secretMessages. The siganture maintains the integrity of the
          secretMessages.


          This should match the expected scheme. For example, if the scheme is
          BBS+, the signature should be a BBS+ signature and signer should be
          a BBS+ public key.
        type: object
      name:
        title: iSecret.name
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      image:
        title: iSecret.image
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      description:
        title: iSecret.description
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      viewers:
        items:
          title: iSecret.viewers.[]
          type: string
        title: iSecret.viewers
        description: >-
          Viewers for query purposes. These are the addresses that can query
          the secret.
        type: array
      anchors:
        items:
          properties:
            txHash:
              title: iSecret.anchors.[].txHash
              type: string
            message:
              title: iSecret.anchors.[].message
              type: string
          additionalProperties: false
          title: iSecret.anchors.[]
          type: object
        title: iSecret.anchors
        description: |-
          Anchors are on-chain transactions used to prove certain things
          about the secret. For example, you can anchor the secret to a
          transaction hash to prove that the secret existed at a certain time.
        type: array
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iSecretDoc.updateHistory.[]
        title: iSecretDoc.updateHistory
        type: array
    required:
      - _docId
      - messageFormat
      - createdBy
      - proofOfIssuance
      - secretId
      - scheme
      - type
      - secretMessages
      - dataIntegrityProof
      - name
      - image
      - description
      - viewers
      - anchors
      - updateHistory
    additionalProperties: false
    title: iGetSecretRouteSuccessResponse, Doc, iSecret
    description: |-
      @category API Requests / Responses
      @category Indexer
      @category Interfaces
    type: object
  DeleteSecretRouteRequestBody:
    properties:
      secretId:
        title: DeleteSecretRouteRequestBody.secretId
        description: >-
          The secret ID. This is the ID that is given to the user to query the
          secret. Anyone with the ID can query it, so keep this safe and
          secure.
        type: string
    required:
      - secretId
    additionalProperties: false
    title: DeleteSecretRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iDeleteSecretRouteSuccessResponse:
    additionalProperties: false
    title: iDeleteSecretRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  UpdateSecretRouteRequestBody:
    properties:
      secretId:
        title: UpdateSecretRouteRequestBody.secretId
        description: >-
          The secret ID. This is the ID that is given to the user to query the
          secret. Anyone with the ID can query it, so keep this safe and
          secure.
        type: string
      viewersToSet:
        items:
          properties:
            bitbadgesAddress:
              $ref: '#/components/schemas/BitBadgesAddress'
              title: UpdateSecretRouteRequestBody.viewersToSet.[].bitbadgesAddress
            delete:
              title: UpdateSecretRouteRequestBody.viewersToSet.[].delete
              type: boolean
          required:
            - bitbadgesAddress
          additionalProperties: false
          title: UpdateSecretRouteRequestBody.viewersToSet.[]
          type: object
        title: UpdateSecretRouteRequestBody.viewersToSet
        description: You can approve specific viewers to view the secret.
        type: array
      anchorsToAdd:
        items:
          properties:
            txHash:
              title: UpdateSecretRouteRequestBody.anchorsToAdd.[].txHash
              type: string
            message:
              title: UpdateSecretRouteRequestBody.anchorsToAdd.[].message
              type: string
          additionalProperties: false
          title: UpdateSecretRouteRequestBody.anchorsToAdd.[]
          type: object
        title: UpdateSecretRouteRequestBody.anchorsToAdd
        description: >-
          Blockchain anchors to add to the secret. These are on-chain
          transactions that can be used to prove stuff about the secret, like

          existence at a certain point in time or to maintain data integrity.
        type: array
      proofOfIssuance:
        properties:
          message:
            title: UpdateSecretRouteRequestBody.proofOfIssuance.message
            type: string
          signer:
            title: UpdateSecretRouteRequestBody.proofOfIssuance.signer
            type: string
          signature:
            title: UpdateSecretRouteRequestBody.proofOfIssuance.signature
            type: string
          publicKey:
            title: UpdateSecretRouteRequestBody.proofOfIssuance.publicKey
            type: string
        required:
          - message
          - signer
          - signature
        additionalProperties: false
        title: UpdateSecretRouteRequestBody.proofOfIssuance
        description: >-
          Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

          BBS+ signatures are signed with a BBS+ key pair, but you would often
          want the issuer to be a native address.

          The prooofOfIssuance establishes a link saying that "I am the issuer
          of this secret signed with BBS+ key pair ___".


          Fields can be left blank for standard signatures.
        type: object
      messageFormat:
        enum:
          - plaintext
          - json
        title: UpdateSecretRouteRequestBody.messageFormat
        description: The message format of the secretMessages.
        type: string
      scheme:
        enum:
          - bbs
          - standard
        title: UpdateSecretRouteRequestBody.scheme
        description: >-
          The scheme of the secret. BBS+ signatures are supported and can be
          used where selective disclosure is a requirement.

          Otherwise, you can simply use your native blockchain's signature
          scheme.
        type: string
      type:
        title: UpdateSecretRouteRequestBody.type
        description: The type of the secret (e.g. credential).
        type: string
      secretMessages:
        items:
          title: UpdateSecretRouteRequestBody.secretMessages.[]
          type: string
        title: UpdateSecretRouteRequestBody.secretMessages
        description: >-
          Thesse are the secrets that are signed.

          For BBS+ signatures, there can be >1 secretMessages, and the signer
          can selectively disclose the secrets.

          For standard signatures, there is only 1 secretMessage.
        type: array
      dataIntegrityProof:
        properties:
          signature:
            title: UpdateSecretRouteRequestBody.dataIntegrityProof.signature
            type: string
          signer:
            title: UpdateSecretRouteRequestBody.dataIntegrityProof.signer
            type: string
          publicKey:
            title: UpdateSecretRouteRequestBody.dataIntegrityProof.publicKey
            type: string
        required:
          - signature
          - signer
        additionalProperties: false
        title: UpdateSecretRouteRequestBody.dataIntegrityProof
        description: >-
          This is the signature and accompanying details of the
          secretMessages. The siganture maintains the integrity of the
          secretMessages.


          This should match the expected scheme. For example, if the scheme is
          BBS+, the signature should be a BBS+ signature and signer should be
          a BBS+ public key.
        type: object
      name:
        title: UpdateSecretRouteRequestBody.name
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      image:
        title: UpdateSecretRouteRequestBody.image
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      description:
        title: UpdateSecretRouteRequestBody.description
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
    required:
      - secretId
    additionalProperties: false
    title: UpdateSecretRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iUpdateSecretRouteSuccessResponse:
    additionalProperties: false
    title: iUpdateSecretRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  CreateBlockinAuthCodeRouteRequestBody:
    properties:
      name:
        title: CreateBlockinAuthCodeRouteRequestBody.name
        description: The name of the Blockin auth code for display purposes.
        type: string
      description:
        title: CreateBlockinAuthCodeRouteRequestBody.description
        description: The description of the Blockin auth code for display purposes.
        type: string
      image:
        title: CreateBlockinAuthCodeRouteRequestBody.image
        description: The image of the Blockin auth code for display purposes.
        type: string
      message:
        $ref: '#/components/schemas/SiwbbMessage'
        title: CreateBlockinAuthCodeRouteRequestBody.message
        description: The original Blockin message that was signed.
      signature:
        title: CreateBlockinAuthCodeRouteRequestBody.signature
        description: The signature of the Blockin message
        type: string
      publicKey:
        title: CreateBlockinAuthCodeRouteRequestBody.publicKey
        description: >-
          The public key of the signer (if needed). Only certain chains
          require this.
        type: string
      secretsProofs:
        items:
          $ref: '#/components/schemas/iSecretsProof'
          title: CreateBlockinAuthCodeRouteRequestBody.secretsProofs.[]
        title: CreateBlockinAuthCodeRouteRequestBody.secretsProofs
        description: >-
          If required, you can additionally add proof of secrets to the
          authentication flow.

          This proves sensitive information (e.g. GPAs, SAT scores, etc.)
          without revealing the information itself.
        type: array
    required:
      - name
      - description
      - image
      - message
      - signature
    additionalProperties: false
    title: CreateBlockinAuthCodeRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iCreateBlockinAuthCodeRouteSuccessResponse:
    properties:
      id:
        title: iCreateBlockinAuthCodeRouteSuccessResponse.id
        description: Secret ID only to be given to queriers
        type: string
    required:
      - id
    additionalProperties: false
    title: iCreateBlockinAuthCodeRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetBlockinAuthCodeRouteRequestBody:
    properties:
      id:
        title: GetBlockinAuthCodeRouteRequestBody.id
        description: The ID of the Blockin auth code.
        type: string
      options:
        $ref: '#/components/schemas/VerifyChallengeOptions'
        title: GetBlockinAuthCodeRouteRequestBody.options
        description: >-
          We attempt to verify the current status with each request. You can
          provide additional options for verification here.
    required:
      - id
    additionalProperties: false
    title: GetBlockinAuthCodeRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetBlockinAuthCodeRouteSuccessResponse:
    properties:
      message:
        $ref: '#/components/schemas/SiwbbMessage'
        title: iGetBlockinAuthCodeRouteSuccessResponse.message
        description: The corresponding message that was signed to obtain the signature.
      signature:
        title: iGetBlockinAuthCodeRouteSuccessResponse.signature
        description: The signature of the message.
        type: string
      params:
        $ref: '#/components/schemas/ChallengeParams'
        title: iGetBlockinAuthCodeRouteSuccessResponse.params
        description: The converted Blockin params fort the message
      bitbadgesAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iGetBlockinAuthCodeRouteSuccessResponse.bitbadgesAddress
        description: >-
          The converted BitBadges address of params.address. This can be used as
          the

          unique identifier for the user (e.g. avoid duplicate sign ins from
          equivalent 0x and bb1 addresses).
      verificationResponse:
        properties:
          success:
            title: >-
              iGetBlockinAuthCodeRouteSuccessResponse.verificationResponse.success
            description: >-
              Returns whether the current (message, signature) pair is valid
              and verified (i.e. signature is valid and any assets are owned).
            type: boolean
          errorMessage:
            title: >-
              iGetBlockinAuthCodeRouteSuccessResponse.verificationResponse.errorMessage
            description: Returns the response message returned from Blockin verification.
            type: string
        required:
          - success
        additionalProperties: false
        title: iGetBlockinAuthCodeRouteSuccessResponse.verificationResponse
        description: Verification response
        type: object
      secretsProofs:
        items:
          $ref: '#/components/schemas/iSecretsProof'
          title: iGetBlockinAuthCodeRouteSuccessResponse.secretsProofs.[]
        title: iGetBlockinAuthCodeRouteSuccessResponse.secretsProofs
        description: Derived data integrity proofs for any secrets requested.
        type: array
    required:
      - message
      - signature
      - params
      - bitbadgesAddress
      - verificationResponse
      - secretsProofs
    additionalProperties: false
    title: iGetBlockinAuthCodeRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  DeleteBlockinAuthCodeRouteRequestBody:
    properties:
      id:
        title: DeleteBlockinAuthCodeRouteRequestBody.id
        type: string
    required:
      - id
    additionalProperties: false
    title: DeleteBlockinAuthCodeRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iDeleteBlockinAuthCodeRouteSuccessResponse:
    additionalProperties: false
    title: iDeleteBlockinAuthCodeRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GenerateAppleWalletPassRouteRequestBody:
    properties:
      name:
        title: GenerateAppleWalletPassRouteRequestBody.name
        description: The name to be displayed on the pass.
        type: string
      description:
        title: GenerateAppleWalletPassRouteRequestBody.description
        description: The description to be displayed on the pass.
        type: string
      message:
        $ref: '#/components/schemas/SiwbbMessage'
        title: GenerateAppleWalletPassRouteRequestBody.message
        description: >-
          The Blockin message of the authentication code to create the pass
          for.
      signature:
        title: GenerateAppleWalletPassRouteRequestBody.signature
        description: The signature of the Blockin message.
        type: string
    required:
      - name
      - description
      - message
      - signature
    additionalProperties: false
    title: GenerateAppleWalletPassRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGenerateAppleWalletPassRouteSuccessResponse:
    properties:
      type:
        title: iGenerateAppleWalletPassRouteSuccessResponse.type
        type: string
      data:
        title: iGenerateAppleWalletPassRouteSuccessResponse.data
        type: string
    required:
      - type
      - data
    additionalProperties: false
    title: iGenerateAppleWalletPassRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetClaimAlertsForCollectionRouteRequestBody:
    properties:
      collectionId:
        title: GetClaimAlertsForCollectionRouteRequestBody.collectionId
        description: The collection ID to get claim alerts for.
        anyOf:
          - type: string
          - type: number
      bookmark:
        title: GetClaimAlertsForCollectionRouteRequestBody.bookmark
        description: >-
          The pagination bookmark obtained from the previous request. Leave
          blank for the first request.
        type: string
    required:
      - collectionId
      - bookmark
    additionalProperties: false
    title: GetClaimAlertsForCollectionRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetClaimAlertsForCollectionRouteSuccessResponse:
    properties:
      claimAlerts:
        items:
          $ref: '#/components/schemas/iClaimAlertDoc'
          title: iGetClaimAlertsForCollectionRouteSuccessResponse.claimAlerts.[]
        title: iGetClaimAlertsForCollectionRouteSuccessResponse.claimAlerts
        type: array
      pagination:
        $ref: '#/components/schemas/PaginationInfo'
        title: iGetClaimAlertsForCollectionRouteSuccessResponse.pagination
    required:
      - claimAlerts
      - pagination
    additionalProperties: false
    title: iGetClaimAlertsForCollectionRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetExternalCallRouteRequestBody:
    properties:
      uri:
        title: GetExternalCallRouteRequestBody.uri
        type: string
      key:
        title: GetExternalCallRouteRequestBody.key
        type: string
    required:
      - uri
      - key
    additionalProperties: false
    title: GetExternalCallRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iGetExternalCallRouteSuccessResponse:
    properties:
      key:
        title: iGetExternalCallRouteSuccessResponse.key
        type: string
      timestamp:
        title: iGetExternalCallRouteSuccessResponse.timestamp
        type: number
    required:
      - key
      - timestamp
    additionalProperties: false
    title: iGetExternalCallRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  GetMapsRouteRequestBody:
    properties:
      mapIds:
        items:
          title: GetMapsRouteRequestBody.mapIds.[]
          type: string
        title: GetMapsRouteRequestBody.mapIds
        description: The IDs of the maps to fetch.
        type: array
    required:
      - mapIds
    additionalProperties: false
    title: GetMapsRouteRequestBody
    description: '@category API Requests / Responses'
    type: object
  iMapWithValues:
    properties:
      creator:
        title: iMap.creator
        type: string
      mapId:
        title: iMap.mapId
        type: string
      inheritManagerTimelineFrom:
        title: iMap.inheritManagerTimelineFrom
        anyOf:
          - type: string
          - type: number
      managerTimeline:
        items:
          $ref: '#/components/schemas/iManagerTimeline'
          title: iMap.managerTimeline.[]
        title: iMap.managerTimeline
        type: array
      updateCriteria:
        $ref: '#/components/schemas/iMapUpdateCriteria'
        title: iMap.updateCriteria
      valueOptions:
        $ref: '#/components/schemas/iValueOptions'
        title: iMap.valueOptions
      defaultValue:
        title: iMap.defaultValue
        type: string
      permissions:
        $ref: '#/components/schemas/iMapPermissions'
        title: iMap.permissions
      metadataTimeline:
        items:
          $ref: '#/components/schemas/iMapMetadataTimeline'
          title: iMap.metadataTimeline.[]
        title: iMap.metadataTimeline
        type: array
      values:
        additionalProperties:
          $ref: '#/components/schemas/iValueStore'
        title: iMapWithValues.values
        description: The (key, value) pairs for the maps that are set.
        type: object
      metadata:
        $ref: '#/components/schemas/iMetadata'
        title: iMapWithValues.metadata
        description: The fetched metadata for the map (if any).
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iMapWithValues.updateHistory.[]
        title: iMapWithValues.updateHistory
        description: >-
          The update history for the map. Maps are maintained through
          blockchain transactions.
        type: array
    required:
      - creator
      - mapId
      - inheritManagerTimelineFrom
      - managerTimeline
      - updateCriteria
      - valueOptions
      - defaultValue
      - permissions
      - metadataTimeline
      - values
      - updateHistory
    additionalProperties: false
    title: iMapWithValues, iMap
    description: |-
      @inheritDoc iMap
      @category Interfaces
      @category Interfaces
    type: object
  iGetMapsRouteSuccessResponse:
    properties:
      maps:
        items:
          $ref: '#/components/schemas/iMapWithValues'
          title: iGetMapsRouteSuccessResponse.maps.[]
        title: iGetMapsRouteSuccessResponse.maps
        type: array
    required:
      - maps
    additionalProperties: false
    title: iGetMapsRouteSuccessResponse
    description: '@category API Requests / Responses'
    type: object
  iBitBadgesCollection:
    properties:
      _docId:
        title: Doc._docId
        description: A unique stringified document ID
        type: string
      _id:
        title: Doc._id
        description: A unique document ID (Mongo DB ObjectID)
        type: string
      collectionId:
        title: iCollectionDoc.collectionId
        description: The collection ID
        anyOf:
          - type: string
          - type: number
      collectionMetadataTimeline:
        items:
          $ref: '#/components/schemas/iCollectionMetadataTimeline'
          title: iCollectionDoc.collectionMetadataTimeline.[]
        title: iCollectionDoc.collectionMetadataTimeline
        description: The collection metadata timeline
        type: array
      badgeMetadataTimeline:
        items:
          $ref: '#/components/schemas/iBadgeMetadataTimeline'
          title: iCollectionDoc.badgeMetadataTimeline.[]
        title: iCollectionDoc.badgeMetadataTimeline
        description: The badge metadata timeline
        type: array
      balancesType:
        enum:
          - Standard
          - Off-Chain - Indexed
          - Non-Public
          - Off-Chain - Non-Indexed
        title: iCollectionDoc.balancesType
        description: >-
          The type of balances (i.e. "Standard", "Off-Chain - Indexed",
          "Non-Public, "Off-Chain - Non-Indexed")
        type: string
      offChainBalancesMetadataTimeline:
        items:
          $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          title: iCollectionDoc.offChainBalancesMetadataTimeline.[]
        title: iCollectionDoc.offChainBalancesMetadataTimeline
        description: The off-chain balances metadata timeline
        type: array
      customDataTimeline:
        items:
          $ref: '#/components/schemas/iCustomDataTimeline'
          title: iCollectionDoc.customDataTimeline.[]
        title: iCollectionDoc.customDataTimeline
        description: The custom data timeline
        type: array
      managerTimeline:
        items:
          $ref: '#/components/schemas/iManagerTimeline'
          title: iCollectionDoc.managerTimeline.[]
        title: iCollectionDoc.managerTimeline
        description: The manager timeline
        type: array
      collectionApprovals:
        allOf:
          - items:
              $ref: '#/components/schemas/iCollectionApproval'
              title: iCollectionDoc.collectionApprovals.[]
            title: iCollectionDoc.collectionApprovals
            description: The collection approved transfers timeline
            type: array
          - items:
              $ref: '#/components/schemas/iCollectionApproval'
              title: iBitBadgesCollection.collectionApprovals.[]
            title: iBitBadgesCollection.collectionApprovals
            description: >-
              The collection approvals for this collection, with off-chain
              metadata populated.
            type: array
      standardsTimeline:
        items:
          $ref: '#/components/schemas/iStandardsTimeline'
          title: iCollectionDoc.standardsTimeline.[]
        title: iCollectionDoc.standardsTimeline
        description: The standards timeline
        type: array
      isArchivedTimeline:
        items:
          $ref: '#/components/schemas/iIsArchivedTimeline'
          title: iCollectionDoc.isArchivedTimeline.[]
        title: iCollectionDoc.isArchivedTimeline
        description: The is archived timeline
        type: array
      createdBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iCollectionDoc.createdBy
        description: The BitBadges address of the user who created this collection
      createdBlock:
        title: iCollectionDoc.createdBlock
        description: The block number when this collection was created
        anyOf:
          - type: string
          - type: number
      createdTimestamp:
        $ref: '#/components/schemas/UNIXMilliTimestamp'
        title: iCollectionDoc.createdTimestamp
        description: >-
          The timestamp when this collection was created (milliseconds since
          epoch)
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iCollectionDoc.updateHistory.[]
        title: iCollectionDoc.updateHistory
        description: The update history of this collection
        type: array
      aliasAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iCollectionDoc.aliasAddress
        description: The alias BitBadges address for the collection
      collectionPermissions:
        $ref: '#/components/schemas/iCollectionPermissions'
        title: iBitBadgesCollection.collectionPermissions
        description: >-
          The collection permissions for this collection, with off-chain
          metadata populated.
      cachedCollectionMetadata:
        $ref: '#/components/schemas/iMetadata'
        title: iBitBadgesCollection.cachedCollectionMetadata
        description: >-
          The fetched collection metadata for this collection. Will only be
          fetched if requested. It is your responsibility to join this data.
      cachedBadgeMetadata:
        items:
          $ref: '#/components/schemas/iBadgeMetadataDetails'
          title: iBitBadgesCollection.cachedBadgeMetadata.[]
        title: iBitBadgesCollection.cachedBadgeMetadata
        description: >-
          The fetched badge metadata for this collection. Will only be fetched
          if requested. It is your responsibility to join this data.
        type: array
      defaultBalances:
        $ref: '#/components/schemas/iUserBalanceStore'
        title: iBitBadgesCollection.defaultBalances
        description: >-
          The default balances for users upon genesis, with off-chain metadata
          populated.
      activity:
        items:
          $ref: '#/components/schemas/iTransferActivityDoc'
          title: iBitBadgesCollection.activity.[]
        title: iBitBadgesCollection.activity
        description: >-
          The fetched activity for this collection. Returned collections will
          only fetch the current page. Use the pagination to fetch more. To be
          used in conjunction with views.
        type: array
      reviews:
        items:
          $ref: '#/components/schemas/iReviewDoc'
          title: iBitBadgesCollection.reviews.[]
        title: iBitBadgesCollection.reviews
        description: >-
          The fetched reviews for this collection. Returned collections will
          only fetch the current page. Use the pagination to fetch more. To be
          used in conjunction with views.
        type: array
      owners:
        items:
          $ref: '#/components/schemas/iBalanceDoc'
          title: iBitBadgesCollection.owners.[]
        title: iBitBadgesCollection.owners
        description: >-
          The fetched owners of this collection. Returned collections will
          only fetch the current page. Use the pagination to fetch more. To be
          used in conjunction with views.
        type: array
      merkleChallenges:
        items:
          $ref: '#/components/schemas/iMerkleChallengeDoc'
          title: iBitBadgesCollection.merkleChallenges.[]
        title: iBitBadgesCollection.merkleChallenges
        description: >-
          The fetched merkle challenges for this collection. Returned
          collections will only fetch the current page. Use the pagination to
          fetch more. To be used in conjunction with views.
        type: array
      approvalTrackers:
        items:
          $ref: '#/components/schemas/iApprovalTrackerDoc'
          title: iBitBadgesCollection.approvalTrackers.[]
        title: iBitBadgesCollection.approvalTrackers
        description: >-
          The fetched approval trackers for this collection. Returned
          collections will only fetch the current page. Use the pagination to
          fetch more. To be used in conjunction with views.
        type: array
      nsfw:
        properties:
          badgeIds:
            items:
              $ref: '#/components/schemas/iUintRange'
              title: iBitBadgesCollection.nsfw.badgeIds.[]
            title: iBitBadgesCollection.nsfw.badgeIds
            type: array
          reason:
            title: iBitBadgesCollection.nsfw.reason
            type: string
        required:
          - badgeIds
          - reason
        additionalProperties: false
        title: iBitBadgesCollection.nsfw
        description: The badge IDs in this collection that are marked as NSFW.
        type: object
      reported:
        properties:
          badgeIds:
            items:
              $ref: '#/components/schemas/iUintRange'
              title: iBitBadgesCollection.reported.badgeIds.[]
            title: iBitBadgesCollection.reported.badgeIds
            type: array
          reason:
            title: iBitBadgesCollection.reported.reason
            type: string
        required:
          - badgeIds
          - reason
        additionalProperties: false
        title: iBitBadgesCollection.reported
        description: The badge IDs in this collection that have been reported.
        type: object
      reservedMap:
        $ref: '#/components/schemas/iMapDoc'
        title: iBitBadgesCollection.reservedMap
        description: >-
          The reserved map for the account. This is created and managed
          on-chain through the x/maps module.
      views:
        additionalProperties:
          properties:
            ids:
              items:
                title: ids.[]
                type: string
              title: ids
              type: array
            type:
              title: type
              type: string
            pagination:
              $ref: '#/components/schemas/PaginationInfo'
              title: pagination
          required:
            - ids
            - type
            - pagination
          additionalProperties: false
          type: object
        title: iBitBadgesCollection.views
        description: >-
          The views for this collection and their pagination Doc. Views will
          only include the doc _ids. Use the pagination to fetch more. To be
          used in conjunction with activity, announcements, reviews, owners,
          merkleChallenges, and approvalTrackers. For example, if you want to
          fetch the activity for a view, you would use the view's pagination
          to fetch the doc _ids, then use the corresponding activity array to
          find the matching docs.
        type: object
      claims:
        items:
          $ref: '#/components/schemas/iClaimDetails'
          title: iBitBadgesCollection.claims.[]
        title: iBitBadgesCollection.claims
        description: >-
          Details about any off-chain claims for this collection. Only
          applicable when outsourced to BitBadges.
        type: array
    required:
      - _docId
      - collectionId
      - collectionMetadataTimeline
      - badgeMetadataTimeline
      - balancesType
      - offChainBalancesMetadataTimeline
      - customDataTimeline
      - managerTimeline
      - collectionApprovals
      - standardsTimeline
      - isArchivedTimeline
      - createdBy
      - createdBlock
      - createdTimestamp
      - updateHistory
      - aliasAddress
      - collectionPermissions
      - cachedBadgeMetadata
      - defaultBalances
      - activity
      - reviews
      - owners
      - merkleChallenges
      - approvalTrackers
      - views
      - claims
    additionalProperties: false
    title: iBitBadgesCollection, Doc
    description: |-
      @category Interfaces
      @category Indexer
    type: object
  iOffChainBalancesMap:
    additionalProperties:
      items:
        $ref: '#/components/schemas/iBalance'
        title: '[]'
      title: '[]'
      type: array
    title: iOffChainBalancesMap
    description: |-
      Used by the frontend for dynamically fetching data from the DB as needed
      @category Indexer
    type: object
  iTransferWithIncrements:
    properties:
      from:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iTransfer.from
        description: The address to transfer from.
      toAddresses:
        items:
          $ref: '#/components/schemas/BitBadgesAddress'
          title: iTransfer.toAddresses.[]
        title: iTransfer.toAddresses
        description: The addresses to transfer to.
        type: array
      balances:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iTransfer.balances.[]
        title: iTransfer.balances
        description: The balances to transfer.
        type: array
      precalculateBalancesFromApproval:
        $ref: '#/components/schemas/iApprovalIdentifierDetails'
        title: iTransfer.precalculateBalancesFromApproval
        description: >-
          If specified, we will precalculate from this approval and override
          the balances. This can only be used when the specified approval has
          predeterminedBalances set.
      merkleProofs:
        items:
          $ref: '#/components/schemas/iMerkleProof'
          title: iTransfer.merkleProofs.[]
        title: iTransfer.merkleProofs
        description: >-
          The merkle proofs that satisfy the mkerkle challenges in the
          approvals. If the transfer deducts from multiple approvals, we check
          all the merkle proofs and assert at least one is valid for every
          challenge.
        type: array
      memo:
        title: iTransfer.memo
        description: Arbitrary memo for the transfer.
        type: string
      prioritizedApprovals:
        items:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          title: iTransfer.prioritizedApprovals.[]
        title: iTransfer.prioritizedApprovals
        description: >-
          The prioritized approvals to use for the transfer. If specified, we
          will check these first.
        type: array
      onlyCheckPrioritizedApprovals:
        title: iTransfer.onlyCheckPrioritizedApprovals
        description: >-
          Whether or not to only check the prioritized approvals. If false, we
          will check all approvals with any prioritized first.
        type: boolean
      zkProofSolutions:
        items:
          $ref: '#/components/schemas/iZkProofSolution'
          title: iTransfer.zkProofSolutions.[]
        title: iTransfer.zkProofSolutions
        description: The zk proof solutions for approvals.
        type: array
      toAddressesLength:
        title: iTransferWithIncrements.toAddressesLength
        description: >-
          The number of addresses to send the badges to. This takes priority
          over toAddresses.length (used when you don't know exact addresses
          (i.e. you know number of codes)).
        anyOf:
          - type: string
          - type: number
      incrementBadgeIdsBy:
        title: iTransferWithIncrements.incrementBadgeIdsBy
        description: The number to increment the badgeIDs by for each transfer.
        anyOf:
          - type: string
          - type: number
      incrementOwnershipTimesBy:
        title: iTransferWithIncrements.incrementOwnershipTimesBy
        description: The number to increment the ownershipTimes by for each transfer.
        anyOf:
          - type: string
          - type: number
    required:
      - from
      - toAddresses
      - balances
    additionalProperties: false
    title: iTransferWithIncrements, iTransfer
    description: '@category Interfaces'
    type: object
  iBatchBadgeDetails:
    properties:
      collectionId:
        title: iBatchBadgeDetails.collectionId
        description: The collection ID of this element's badge details.
        anyOf:
          - type: string
          - type: number
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iBatchBadgeDetails.badgeIds.[]
        title: iBatchBadgeDetails.badgeIds
        description: The corresponding badge IDs for this collection ID.
        type: array
    required:
      - collectionId
      - badgeIds
    additionalProperties: false
    title: iBatchBadgeDetails
    description: '@category Interfaces'
    type: object
  iChallengeDetails:
    properties:
      leaves:
        items:
          title: iChallengeDetails.leaves.[]
          type: string
        title: iChallengeDetails.leaves
        description: >-
          The leaves of the Merkle tree. Leaves should be considered public.
          Use preimages for the secrets + isHashed. For whitelist trees, these
          can be the plaintext BitBadges addresses.
        type: array
      isHashed:
        title: iChallengeDetails.isHashed
        description: True if the leaves are hashed. Hash(preimage[i]) = leaves[i]
        type: boolean
      preimages:
        items:
          title: iChallengeDetails.preimages.[]
          type: string
        title: iChallengeDetails.preimages
        description: >-
          The preimages of the leaves (only used if isHashed = true).
          Oftentimes, this is used for secret codes so should not be present
          when user-facing.
        type: array
      seedCode:
        title: iChallengeDetails.seedCode
        description: Seed code for generating the leaves
        type: string
      tree:
        title: iChallengeDetails.tree
        description: The Merkle tree
      treeOptions:
        title: iChallengeDetails.treeOptions
        description: The Merkle tree options for how to build it
      numLeaves:
        title: iChallengeDetails.numLeaves
        description: >-
          The number of leaves in the Merkle tree. This takes priority over
          leaves.length if defined (used for buffer time between leaf
          generation and leaf length select)
        anyOf:
          - type: string
          - type: number
      currCode:
        title: iChallengeDetails.currCode
        description: >-
          The current code being used for the challenge. Used behind the
          scenes
        anyOf:
          - type: string
          - type: number
    required:
      - leaves
      - isHashed
    additionalProperties: false
    title: iChallengeDetails
    description: '@category Interfaces'
    examples:
      - >-
        Codes

        1. Generate N codes privately

        2. Hash each code

        3. Store the hashed codes publicly on IPFS via this struct

        4. When a user enters a code, we hash it and check if it matches any
        of the hashed codes. This way, the codes are never stored publicly on
        IPFS and only known by the generator of the codes.
      - >-
        Whitelist

        For storing a public whitelist of addresses (with
        useCreatorAddressAsLeaf = true), hashing complicates everything
        because the whitelist can be stored publicly.

        1. Generate N whitelist addresses

        2. Store the addresses publicly on IPFS via this struct

        3. When a user enters an address, we check if it matches any of the
        addresses.
    type: object
  iChallengeInfoDetails:
    properties:
      challengeDetails:
        $ref: '#/components/schemas/iChallengeDetails'
        title: iChallengeInfoDetails.challengeDetails
        description: The challenge details of the claim / approval
      claim:
        $ref: '#/components/schemas/iClaimDetails'
        title: iChallengeInfoDetails.claim
    required:
      - challengeDetails
    additionalProperties: false
    title: iChallengeInfoDetails
    description: '@category Interfaces'
    type: object
  iApprovalInfoDetails:
    properties:
      name:
        title: iApprovalInfoDetails.name
        description: The name of the claim
        type: string
      description:
        title: iApprovalInfoDetails.description
        description: >-
          The description of the claim. This describes how to earn and claim
          the badge.
        type: string
    required:
      - name
      - description
    additionalProperties: false
    title: iApprovalInfoDetails
    description: '@category Interfaces'
    type: object
  iCosmosCoin:
    properties:
      amount:
        title: iCosmosCoin.amount
        description: The amount of the coin.
        anyOf:
          - type: string
          - type: number
      denom:
        title: iCosmosCoin.denom
        description: The denomination of the coin (e.g. "badge").
        type: string
    required:
      - amount
      - denom
    additionalProperties: false
    title: iCosmosCoin
    description: '@category Interfaces'
    type: object
  PermissionNameString:
    enum:
      - canDeleteCollection
      - canArchiveCollection
      - canUpdateOffChainBalancesMetadata
      - canUpdateBadgeMetadata
      - canUpdateCollectionMetadata
      - canUpdateValidBadgeIds
      - canUpdateCollectionApprovals
      - canUpdateAutoApproveSelfInitiatedIncomingTransfers
      - canUpdateAutoApproveSelfInitiatedOutgoingTransfers
      - canUpdateStandards
      - canUpdateCustomData
      - canUpdateManager
    title: PermissionNameString
    description: '@category Permissions'
    type: string
  Validator:
    properties:
      commission:
        properties:
          commission_rates:
            properties:
              max_change_rate:
                title: Validator.commission.commission_rates.max_change_rate
                type: string
              max_rate:
                title: Validator.commission.commission_rates.max_rate
                type: string
              rate:
                title: Validator.commission.commission_rates.rate
                type: string
            required:
              - max_change_rate
              - max_rate
              - rate
            additionalProperties: false
            title: Validator.commission.commission_rates
            type: object
          update_time:
            title: Validator.commission.update_time
            type: string
        required:
          - commission_rates
          - update_time
        additionalProperties: false
        title: Validator.commission
        type: object
      consensus_pubkey:
        properties:
          "'@type'":
            title: Validator.consensus_pubkey.'@type'
            type: string
          key:
            title: Validator.consensus_pubkey.key
            type: string
        required:
          - "'@type'"
          - key
        additionalProperties: false
        title: Validator.consensus_pubkey
        type: object
      delegator_shares:
        title: Validator.delegator_shares
        type: string
      description:
        properties:
          details:
            title: Validator.description.details
            type: string
          identity:
            title: Validator.description.identity
            type: string
          moniker:
            title: Validator.description.moniker
            type: string
          security_contact:
            title: Validator.description.security_contact
            type: string
          website:
            title: Validator.description.website
            type: string
        required:
          - details
          - identity
          - moniker
          - security_contact
          - website
        additionalProperties: false
        title: Validator.description
        type: object
      jailed:
        title: Validator.jailed
        type: boolean
      min_self_delegation:
        title: Validator.min_self_delegation
        type: string
      operator_address:
        title: Validator.operator_address
        type: string
      status:
        title: Validator.status
        type: string
      tokens:
        title: Validator.tokens
        type: string
      unbonding_height:
        title: Validator.unbonding_height
        type: string
      unbonding_time:
        title: Validator.unbonding_time
        type: string
    required:
      - commission
      - consensus_pubkey
      - delegator_shares
      - description
      - jailed
      - min_self_delegation
      - operator_address
      - status
      - tokens
      - unbonding_height
      - unbonding_time
    additionalProperties: false
    title: Validator
    type: object
  GetValidatorsResponse:
    properties:
      validators:
        items:
          $ref: '#/components/schemas/Validator'
          title: GetValidatorsResponse.validators.[]
        title: GetValidatorsResponse.validators
        type: array
      pagination:
        properties:
          next_key:
            title: GetValidatorsResponse.pagination.next_key
            type: string
          total:
            title: GetValidatorsResponse.pagination.total
            type: number
        required:
          - next_key
          - total
        additionalProperties: false
        title: GetValidatorsResponse.pagination
        type: object
    required:
      - validators
      - pagination
    additionalProperties: false
    title: GetValidatorsResponse
    type: object
  UndelegationResponse:
    properties:
      delegator_address:
        title: UndelegationResponse.delegator_address
        type: string
      validator_address:
        title: UndelegationResponse.validator_address
        type: string
      entries:
        items:
          - properties:
              creation_height:
                title: UndelegationResponse.entries.0.creation_height
                type: string
              completion_time:
                title: UndelegationResponse.entries.0.completion_time
                type: string
              initial_balance:
                title: UndelegationResponse.entries.0.initial_balance
                type: string
              balance:
                title: UndelegationResponse.entries.0.balance
                type: string
            required:
              - creation_height
              - completion_time
              - initial_balance
              - balance
            additionalProperties: false
            title: UndelegationResponse.entries.0
            type: object
        additionalItems: false
        minItems: 1
        title: UndelegationResponse.entries
        type: array
    required:
      - delegator_address
      - validator_address
      - entries
    additionalProperties: false
    title: UndelegationResponse
    type: object
  GetUndelegationsResponse:
    properties:
      unbonding_responses:
        items:
          $ref: '#/components/schemas/UndelegationResponse'
          title: GetUndelegationsResponse.unbonding_responses.[]
        title: GetUndelegationsResponse.unbonding_responses
        type: array
      pagination:
        properties:
          next_key:
            title: GetUndelegationsResponse.pagination.next_key
            type: string
          total:
            title: GetUndelegationsResponse.pagination.total
            type: string
        required:
          - next_key
          - total
        additionalProperties: false
        title: GetUndelegationsResponse.pagination
        type: object
    required:
      - unbonding_responses
      - pagination
    additionalProperties: false
    title: GetUndelegationsResponse
    type: object
  CounterParty:
    properties:
      port_id:
        title: CounterParty.port_id
        type: string
      channel_id:
        title: CounterParty.channel_id
        type: string
    required:
      - port_id
      - channel_id
    additionalProperties: false
    title: CounterParty
    type: object
  Channel:
    properties:
      state:
        title: Channel.state
        type: string
      ordering:
        title: Channel.ordering
        type: string
      counterparty:
        $ref: '#/components/schemas/CounterParty'
        title: Channel.counterparty
      connection_hops:
        items:
          title: Channel.connection_hops.[]
          type: string
        title: Channel.connection_hops
        type: array
      version:
        title: Channel.version
        type: string
      port_id:
        title: Channel.port_id
        type: string
      channel_id:
        title: Channel.channel_id
        type: string
    required:
      - state
      - ordering
      - counterparty
      - connection_hops
      - version
      - port_id
      - channel_id
    additionalProperties: false
    title: Channel
    type: object
  ChannelsResponse:
    properties:
      channels:
        items:
          $ref: '#/components/schemas/Channel'
          title: ChannelsResponse.channels.[]
        title: ChannelsResponse.channels
        type: array
      pagination:
        properties:
          next_key:
            title: ChannelsResponse.pagination.next_key
            type: string
          total:
            title: ChannelsResponse.pagination.total
            type: string
        required:
          - total
        additionalProperties: false
        title: ChannelsResponse.pagination
        type: object
      height:
        properties:
          revision_number:
            title: ChannelsResponse.height.revision_number
            type: string
          revision_height:
            title: ChannelsResponse.height.revision_height
            type: string
        required:
          - revision_number
          - revision_height
        additionalProperties: false
        title: ChannelsResponse.height
        type: object
    required:
      - channels
      - pagination
      - height
    additionalProperties: false
    title: ChannelsResponse
    type: object
  TallyResponse:
    properties:
      tally:
        properties:
          'yes':
            title: TallyResponse.tally.yes
            type: string
          abstain:
            title: TallyResponse.tally.abstain
            type: string
          'no':
            title: TallyResponse.tally.no
            type: string
          no_with_veto:
            title: TallyResponse.tally.no_with_veto
            type: string
        required:
          - 'yes'
          - abstain
          - 'no'
          - no_with_veto
        additionalProperties: false
        title: TallyResponse.tally
        type: object
    required:
      - tally
    additionalProperties: false
    title: TallyResponse
    type: object
  AccountResponse:
    properties:
      account:
        properties:
          "'@type'":
            title: AccountResponse.account.'@type'
            type: string
          base_account:
            properties:
              address:
                title: AccountResponse.account.base_account.address
                type: string
              pub_key:
                properties:
                  "'@type'":
                    title: AccountResponse.account.base_account.pub_key.'@type'
                    type: string
                  key:
                    title: AccountResponse.account.base_account.pub_key.key
                    type: string
                required:
                  - "'@type'"
                  - key
                additionalProperties: false
                title: AccountResponse.account.base_account.pub_key
                type: object
              account_number:
                title: AccountResponse.account.base_account.account_number
                type: string
              sequence:
                title: AccountResponse.account.base_account.sequence
                type: string
            required:
              - address
              - account_number
              - sequence
            additionalProperties: false
            title: AccountResponse.account.base_account
            type: object
        required:
          - "'@type'"
          - base_account
        additionalProperties: false
        title: AccountResponse.account
        type: object
    required:
      - account
    additionalProperties: false
    title: AccountResponse
    type: object
  BroadcastPostBody:
    properties:
      tx_bytes:
        title: BroadcastPostBody.tx_bytes
      mode:
        title: BroadcastPostBody.mode
        type: string
    required:
      - tx_bytes
      - mode
    additionalProperties: false
    title: BroadcastPostBody
    type: object
  TxContext:
    properties:
      chain:
        $ref: '#/components/schemas/Chain'
        title: TxContext.chain
      sender:
        $ref: '#/components/schemas/Sender'
        title: TxContext.sender
      fee:
        $ref: '#/components/schemas/Fee'
        title: TxContext.fee
      memo:
        title: TxContext.memo
        type: string
    required:
      - chain
      - sender
      - fee
      - memo
    additionalProperties: false
    title: TxContext
    description: |-
      TxContext is the transaction context for a SignDoc that is independent
      from the transaction payload.
      @category Transactions
    type: object
  EIP712ToSign:
    properties:
      types:
        title: EIP712ToSign.types
        type: object
      primaryType:
        title: EIP712ToSign.primaryType
        type: string
      domain:
        properties:
          name:
            title: EIP712ToSign.domain.name
            type: string
          version:
            title: EIP712ToSign.domain.version
            type: string
          chainId:
            title: EIP712ToSign.domain.chainId
            type: number
          verifyingContract:
            title: EIP712ToSign.domain.verifyingContract
            type: string
          salt:
            title: EIP712ToSign.domain.salt
            type: string
        required:
          - name
          - version
          - chainId
          - verifyingContract
          - salt
        additionalProperties: false
        title: EIP712ToSign.domain
        type: object
      message:
        title: EIP712ToSign.message
        type: object
    required:
      - types
      - primaryType
      - domain
      - message
    additionalProperties: false
    title: EIP712ToSign
    description: >-
      EI712ToSign represents a signable EIP-712 payload that can be signed
      using MetaMask or Keplr.

      @category Transactions
    type: object
  Fee:
    properties:
      amount:
        title: Fee.amount
        type: string
      denom:
        title: Fee.denom
        type: string
      gas:
        title: Fee.gas
        type: string
    required:
      - amount
      - denom
      - gas
    additionalProperties: false
    title: Fee
    description: |-
      Fee represents a Cosmos SDK transaction fee object.
      @category Transactions
    type: object
  Sender:
    properties:
      accountAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: Sender.accountAddress
      sequence:
        title: Sender.sequence
        type: number
      accountNumber:
        title: Sender.accountNumber
        type: number
      pubkey:
        title: Sender.pubkey
        type: string
    required:
      - accountAddress
      - sequence
      - accountNumber
      - pubkey
    additionalProperties: false
    title: Sender
    description: >-
      Sender represents a Cosmos SDK Transaction signer.

      @remarks A sender object is used to populate the Cosmos SDK's SignerInfo
      field,

      which is used to declare transaction signers.

      @category Transactions
    type: object
  Chain:
    properties:
      chainId:
        title: Chain.chainId
        type: number
      cosmosChainId:
        title: Chain.cosmosChainId
        type: string
      chain:
        $ref: '#/components/schemas/SupportedChain'
        title: Chain.chain
    required:
      - chainId
      - cosmosChainId
      - chain
    additionalProperties: false
    title: Chain
    description: >-
      Chain represents the base chain's chainID.

      @remarks chainId corresponds to a numerical Ethereum ChainID (e.g. 9001)

      cosmosChainId corresponds to a Cosmos SDK string ChainID (e.g.
      'bitbadges_1-1')

      @category Transactions
    type: object
  iMsgInstantiateContractCompat:
    properties:
      sender:
        title: iMsgInstantiateContractCompat.sender
        description: The sender of the transaction.
        type: string
      codeId:
        title: iMsgInstantiateContractCompat.codeId
        description: The code ID of the contract to instantiate.
        type: string
      label:
        title: iMsgInstantiateContractCompat.label
        description: The human-readable label of the contract.
        type: string
      funds:
        title: iMsgInstantiateContractCompat.funds
        description: The amount of funds to send to the contract on instantiation.
        type: string
    required:
      - sender
      - codeId
      - label
      - funds
    additionalProperties: false
    title: iMsgInstantiateContractCompat
    description: '@category Interfaces'
    type: object
  iMsgStoreCodeCompat:
    properties:
      sender:
        title: iMsgStoreCodeCompat.sender
        description: The sender of the transaction.
        type: string
      hexWasmByteCode:
        title: iMsgStoreCodeCompat.hexWasmByteCode
        description: >-
          The contract byte code in hexadecimal format. See BitBadges CosmWASM
          tutorial for more details.
        type: string
    required:
      - sender
      - hexWasmByteCode
    additionalProperties: false
    title: iMsgStoreCodeCompat
    description: '@category Interfaces'
    type: object
  iMsgExecuteContractCompat:
    properties:
      sender:
        title: iMsgExecuteContractCompat.sender
        description: The sender of the transaction.
        type: string
      contract:
        title: iMsgExecuteContractCompat.contract
        description: The contract address to execute.
        type: string
      msg:
        title: iMsgExecuteContractCompat.msg
        description: The message to pass to the contract. Must be a valid JSON string.
        type: string
      funds:
        title: iMsgExecuteContractCompat.funds
        description: The funds to send to the contract. Must be a valid JSON string.
        type: string
    required:
      - sender
      - contract
      - msg
      - funds
    additionalProperties: false
    title: iMsgExecuteContractCompat
    description: '@category Interfaces'
    type: object
  iValueStore:
    properties:
      key:
        title: iValueStore.key
        type: string
      value:
        title: iValueStore.value
        type: string
      lastSetBy:
        title: iValueStore.lastSetBy
        type: string
    required:
      - key
      - value
      - lastSetBy
    additionalProperties: false
    title: iValueStore
    description: '@category Interfaces'
    type: object
  iMapUpdateCriteria:
    properties:
      managerOnly:
        title: iMapUpdateCriteria.managerOnly
        type: boolean
      collectionId:
        title: iMapUpdateCriteria.collectionId
        anyOf:
          - type: string
          - type: number
      creatorOnly:
        title: iMapUpdateCriteria.creatorOnly
        type: boolean
      firstComeFirstServe:
        title: iMapUpdateCriteria.firstComeFirstServe
        type: boolean
    required:
      - managerOnly
      - collectionId
      - creatorOnly
      - firstComeFirstServe
    additionalProperties: false
    title: iMapUpdateCriteria
    description: '@category Interfaces'
    type: object
  iValueOptions:
    properties:
      noDuplicates:
        title: iValueOptions.noDuplicates
        type: boolean
      permanentOnceSet:
        title: iValueOptions.permanentOnceSet
        type: boolean
      expectUint:
        title: iValueOptions.expectUint
        type: boolean
      expectBoolean:
        title: iValueOptions.expectBoolean
        type: boolean
      expectAddress:
        title: iValueOptions.expectAddress
        type: boolean
      expectUri:
        title: iValueOptions.expectUri
        type: boolean
    required:
      - noDuplicates
      - permanentOnceSet
      - expectUint
      - expectBoolean
      - expectAddress
      - expectUri
    additionalProperties: false
    title: iValueOptions
    description: '@category Interfaces'
    type: object
  iMapPermissions:
    properties:
      canUpdateMetadata:
        items:
          $ref: '#/components/schemas/iTimedUpdatePermission'
          title: iMapPermissions.canUpdateMetadata.[]
        title: iMapPermissions.canUpdateMetadata
        type: array
      canUpdateManager:
        items:
          $ref: '#/components/schemas/iTimedUpdatePermission'
          title: iMapPermissions.canUpdateManager.[]
        title: iMapPermissions.canUpdateManager
        type: array
      canDeleteMap:
        items:
          $ref: '#/components/schemas/iActionPermission'
          title: iMapPermissions.canDeleteMap.[]
        title: iMapPermissions.canDeleteMap
        type: array
    required:
      - canUpdateMetadata
      - canUpdateManager
      - canDeleteMap
    additionalProperties: false
    title: iMapPermissions
    description: '@category Interfaces'
    type: object
  iMap:
    properties:
      creator:
        title: iMap.creator
        type: string
      mapId:
        title: iMap.mapId
        type: string
      inheritManagerTimelineFrom:
        title: iMap.inheritManagerTimelineFrom
        anyOf:
          - type: string
          - type: number
      managerTimeline:
        items:
          $ref: '#/components/schemas/iManagerTimeline'
          title: iMap.managerTimeline.[]
        title: iMap.managerTimeline
        type: array
      updateCriteria:
        $ref: '#/components/schemas/iMapUpdateCriteria'
        title: iMap.updateCriteria
      valueOptions:
        $ref: '#/components/schemas/iValueOptions'
        title: iMap.valueOptions
      defaultValue:
        title: iMap.defaultValue
        type: string
      permissions:
        $ref: '#/components/schemas/iMapPermissions'
        title: iMap.permissions
      metadataTimeline:
        items:
          $ref: '#/components/schemas/iMapMetadataTimeline'
          title: iMap.metadataTimeline.[]
        title: iMap.metadataTimeline
        type: array
    required:
      - creator
      - mapId
      - inheritManagerTimelineFrom
      - managerTimeline
      - updateCriteria
      - valueOptions
      - defaultValue
      - permissions
      - metadataTimeline
    additionalProperties: false
    title: iMap
    description: '@category Interfaces'
    type: object
  iMapMetadataTimeline:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iMapMetadataTimeline.timelineTimes.[]
        title: iMapMetadataTimeline.timelineTimes
        type: array
      metadata:
        $ref: '#/components/schemas/iCollectionMetadata'
        title: iMapMetadataTimeline.metadata
    required:
      - timelineTimes
      - metadata
    additionalProperties: false
    title: iMapMetadataTimeline
    description: '@category Interfaces'
    type: object
  iMsgCreateMap:
    properties:
      creator:
        title: iMsgCreateMap.creator
        type: string
      mapId:
        title: iMsgCreateMap.mapId
        type: string
      inheritManagerTimelineFrom:
        title: iMsgCreateMap.inheritManagerTimelineFrom
        anyOf:
          - type: string
          - type: number
      managerTimeline:
        items:
          $ref: '#/components/schemas/iManagerTimeline'
          title: iMsgCreateMap.managerTimeline.[]
        title: iMsgCreateMap.managerTimeline
        type: array
      updateCriteria:
        $ref: '#/components/schemas/iMapUpdateCriteria'
        title: iMsgCreateMap.updateCriteria
      valueOptions:
        $ref: '#/components/schemas/iValueOptions'
        title: iMsgCreateMap.valueOptions
      defaultValue:
        title: iMsgCreateMap.defaultValue
        type: string
      metadataTimeline:
        items:
          $ref: '#/components/schemas/iMapMetadataTimeline'
          title: iMsgCreateMap.metadataTimeline.[]
        title: iMsgCreateMap.metadataTimeline
        type: array
      permissions:
        $ref: '#/components/schemas/iMapPermissions'
        title: iMsgCreateMap.permissions
    required:
      - creator
      - mapId
      - inheritManagerTimelineFrom
      - managerTimeline
      - updateCriteria
      - valueOptions
      - defaultValue
      - metadataTimeline
      - permissions
    additionalProperties: false
    title: iMsgCreateMap
    description: '@category Interfaces'
    type: object
  iMsgUpdateMap:
    properties:
      creator:
        title: iMsgUpdateMap.creator
        type: string
      mapId:
        title: iMsgUpdateMap.mapId
        type: string
      updateManagerTimeline:
        title: iMsgUpdateMap.updateManagerTimeline
        type: boolean
      managerTimeline:
        items:
          $ref: '#/components/schemas/iManagerTimeline'
          title: iMsgUpdateMap.managerTimeline.[]
        title: iMsgUpdateMap.managerTimeline
        type: array
      updateMetadataTimeline:
        title: iMsgUpdateMap.updateMetadataTimeline
        type: boolean
      metadataTimeline:
        items:
          $ref: '#/components/schemas/iMapMetadataTimeline'
          title: iMsgUpdateMap.metadataTimeline.[]
        title: iMsgUpdateMap.metadataTimeline
        type: array
      updatePermissions:
        title: iMsgUpdateMap.updatePermissions
        type: boolean
      permissions:
        $ref: '#/components/schemas/iMapPermissions'
        title: iMsgUpdateMap.permissions
    required:
      - creator
      - mapId
      - updateManagerTimeline
      - managerTimeline
      - updateMetadataTimeline
      - metadataTimeline
      - updatePermissions
      - permissions
    additionalProperties: false
    title: iMsgUpdateMap
    description: '@category Interfaces'
    type: object
  iMsgDeleteMap:
    properties:
      creator:
        title: iMsgDeleteMap.creator
        type: string
      mapId:
        title: iMsgDeleteMap.mapId
        type: string
    required:
      - creator
      - mapId
    additionalProperties: false
    title: iMsgDeleteMap
    description: '@category Interfaces'
    type: object
  iMsgSetValue:
    properties:
      creator:
        title: iMsgSetValue.creator
        type: string
      mapId:
        title: iMsgSetValue.mapId
        type: string
      key:
        title: iMsgSetValue.key
        type: string
      value:
        title: iMsgSetValue.value
        type: string
      options:
        $ref: '#/components/schemas/iSetOptions'
        title: iMsgSetValue.options
    required:
      - creator
      - mapId
      - key
      - value
      - options
    additionalProperties: false
    title: iMsgSetValue
    description: '@category Interfaces'
    type: object
  iSetOptions:
    properties:
      useMostRecentCollectionId:
        title: iSetOptions.useMostRecentCollectionId
        type: boolean
    required:
      - useMostRecentCollectionId
    additionalProperties: false
    title: iSetOptions
    description: '@category Interfaces'
    type: object
  iMsgCreateAddressLists:
    properties:
      creator:
        title: iMsgCreateAddressLists.creator
        description: The creator of the transaction.
        type: string
      addressLists:
        items:
          $ref: '#/components/schemas/iAddressList'
          title: iMsgCreateAddressLists.addressLists.[]
        title: iMsgCreateAddressLists.addressLists
        description: The address lists to create.
        type: array
    required:
      - creator
      - addressLists
    additionalProperties: false
    title: iMsgCreateAddressLists
    description: '@category Interfaces'
    type: object
  iMsgCreateCollection:
    properties:
      creator:
        title: iMsgCreateCollection.creator
        description: The creator of the transaction.
        type: string
      balancesType:
        title: iMsgCreateCollection.balancesType
        description: >-
          The balances type. Either "Standard", "Off-Chain - Indexed",
          "Off-Chain - Non-Indexed" or "Non-Public"
        type: string
      defaultBalances:
        $ref: '#/components/schemas/iUserBalanceStore'
        title: iMsgCreateCollection.defaultBalances
        description: >-
          The default balances for users who have not interacted with the
          collection yet. Only can be set on initial creation. Only used if
          collection has "Standard" balance type.
      badgesToCreate:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iMsgCreateCollection.badgesToCreate.[]
        title: iMsgCreateCollection.badgesToCreate
        description: >-
          The badges to create. Newly created badges will be sent to the
          "Mint" address. Must have necessary permissions in future
          transactions to update. However, no restrictions in this genesis
          Msg. Only used if collection has "Standard" balance type.
        type: array
      collectionPermissions:
        $ref: '#/components/schemas/iCollectionPermissions'
        title: iMsgCreateCollection.collectionPermissions
        description: >-
          The new collection permissions. Must have the necessary permissions
          in future transactions to update. However, no restrictions in this
          genesis Msg.
      managerTimeline:
        items:
          $ref: '#/components/schemas/iManagerTimeline'
          title: iMsgCreateCollection.managerTimeline.[]
        title: iMsgCreateCollection.managerTimeline
        description: >-
          The new manager timeline. Must have the necessary permissions in
          future transactions to update. However, no restrictions in this
          genesis Msg.
        type: array
      collectionMetadataTimeline:
        items:
          $ref: '#/components/schemas/iCollectionMetadataTimeline'
          title: iMsgCreateCollection.collectionMetadataTimeline.[]
        title: iMsgCreateCollection.collectionMetadataTimeline
        description: >-
          The new collection metadata timeline. Must have the necessary
          permissions in future transactions to update. However, no
          restrictions in this genesis Msg.
        type: array
      badgeMetadataTimeline:
        items:
          $ref: '#/components/schemas/iBadgeMetadataTimeline'
          title: iMsgCreateCollection.badgeMetadataTimeline.[]
        title: iMsgCreateCollection.badgeMetadataTimeline
        description: >-
          The new badge metadata timeline. Must have the necessary permissions
          in future transactions to update. However, no restrictions in this
          genesis Msg. Note we take first-match only for badge IDs, so do not
          define duplicates.
        type: array
      offChainBalancesMetadataTimeline:
        items:
          $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          title: iMsgCreateCollection.offChainBalancesMetadataTimeline.[]
        title: iMsgCreateCollection.offChainBalancesMetadataTimeline
        description: >-
          The new off-chain balances metadata timeline. Must have the
          necessary permissions in future transactions to update. However, no
          restrictions in this genesis Msg. Only used if "Off-Chain - Indexed"
          or "Off-Chain - Non-Indexed" balance type.
        type: array
      customDataTimeline:
        items:
          $ref: '#/components/schemas/iCustomDataTimeline'
          title: iMsgCreateCollection.customDataTimeline.[]
        title: iMsgCreateCollection.customDataTimeline
        description: >-
          The new custom data timeline. Must have the necessary permissions in
          future transactions to update. However, no restrictions in this
          genesis Msg.
        type: array
      collectionApprovals:
        items:
          $ref: '#/components/schemas/iCollectionApproval'
          title: iMsgCreateCollection.collectionApprovals.[]
        title: iMsgCreateCollection.collectionApprovals
        description: >-
          The new collection approved transfers timeline. Must have the
          necessary permissions in future transactions to update. However, no
          restrictions in this genesis Msg.
        type: array
      standardsTimeline:
        items:
          $ref: '#/components/schemas/iStandardsTimeline'
          title: iMsgCreateCollection.standardsTimeline.[]
        title: iMsgCreateCollection.standardsTimeline
        description: >-
          The new standards timeline. Must have the necessary permissions in
          future transactions to update. However, no restrictions in this
          genesis Msg.
        type: array
      isArchivedTimeline:
        items:
          $ref: '#/components/schemas/iIsArchivedTimeline'
          title: iMsgCreateCollection.isArchivedTimeline.[]
        title: iMsgCreateCollection.isArchivedTimeline
        description: >-
          The new is archived timeline. Must have the necessary permissions in
          future transactions to update. However, no restrictions in this
          genesis Msg.
        type: array
    required:
      - creator
    additionalProperties: false
    title: iMsgCreateCollection
    description: '@category Interfaces'
    type: object
  iMsgDeleteCollection:
    properties:
      creator:
        title: iMsgDeleteCollection.creator
        description: The creator of the transaction.
        type: string
      collectionId:
        title: iMsgDeleteCollection.collectionId
        description: The ID of the collection to delete.
        anyOf:
          - type: string
          - type: number
    required:
      - creator
      - collectionId
    additionalProperties: false
    title: iMsgDeleteCollection
    description: '@category Interfaces'
    type: object
  iMsgTransferBadges:
    properties:
      creator:
        title: iMsgTransferBadges.creator
        description: The creator of the transaction.
        type: string
      collectionId:
        title: iMsgTransferBadges.collectionId
        description: The ID of the collection to transfer badges from.
        anyOf:
          - type: string
          - type: number
      transfers:
        items:
          $ref: '#/components/schemas/iTransfer'
          title: iMsgTransferBadges.transfers.[]
        title: iMsgTransferBadges.transfers
        description: The transfers to perform.
        type: array
    required:
      - creator
      - collectionId
      - transfers
    additionalProperties: false
    title: iMsgTransferBadges
    description: '@category Interfaces'
    type: object
  iMsgUniversalUpdateCollection:
    properties:
      creator:
        title: iMsgCreateCollection.creator
        description: The creator of the transaction.
        type: string
      balancesType:
        title: iMsgCreateCollection.balancesType
        description: >-
          The balances type. Either "Standard", "Off-Chain - Indexed",
          "Off-Chain - Non-Indexed" or "Non-Public"
        type: string
      defaultBalances:
        $ref: '#/components/schemas/iUserBalanceStore'
        title: iMsgCreateCollection.defaultBalances
        description: >-
          The default balances for users who have not interacted with the
          collection yet. Only can be set on initial creation. Only used if
          collection has "Standard" balance type.
      badgesToCreate:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iMsgCreateCollection.badgesToCreate.[]
        title: iMsgCreateCollection.badgesToCreate
        description: >-
          The badges to create. Newly created badges will be sent to the
          "Mint" address. Must have necessary permissions in future
          transactions to update. However, no restrictions in this genesis
          Msg. Only used if collection has "Standard" balance type.
        type: array
      collectionPermissions:
        $ref: '#/components/schemas/iCollectionPermissions'
        title: iMsgCreateCollection.collectionPermissions
        description: >-
          The new collection permissions. Must have the necessary permissions
          in future transactions to update. However, no restrictions in this
          genesis Msg.
      managerTimeline:
        items:
          $ref: '#/components/schemas/iManagerTimeline'
          title: iMsgCreateCollection.managerTimeline.[]
        title: iMsgCreateCollection.managerTimeline
        description: >-
          The new manager timeline. Must have the necessary permissions in
          future transactions to update. However, no restrictions in this
          genesis Msg.
        type: array
      collectionMetadataTimeline:
        items:
          $ref: '#/components/schemas/iCollectionMetadataTimeline'
          title: iMsgCreateCollection.collectionMetadataTimeline.[]
        title: iMsgCreateCollection.collectionMetadataTimeline
        description: >-
          The new collection metadata timeline. Must have the necessary
          permissions in future transactions to update. However, no
          restrictions in this genesis Msg.
        type: array
      badgeMetadataTimeline:
        items:
          $ref: '#/components/schemas/iBadgeMetadataTimeline'
          title: iMsgCreateCollection.badgeMetadataTimeline.[]
        title: iMsgCreateCollection.badgeMetadataTimeline
        description: >-
          The new badge metadata timeline. Must have the necessary permissions
          in future transactions to update. However, no restrictions in this
          genesis Msg. Note we take first-match only for badge IDs, so do not
          define duplicates.
        type: array
      offChainBalancesMetadataTimeline:
        items:
          $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          title: iMsgCreateCollection.offChainBalancesMetadataTimeline.[]
        title: iMsgCreateCollection.offChainBalancesMetadataTimeline
        description: >-
          The new off-chain balances metadata timeline. Must have the
          necessary permissions in future transactions to update. However, no
          restrictions in this genesis Msg. Only used if "Off-Chain - Indexed"
          or "Off-Chain - Non-Indexed" balance type.
        type: array
      customDataTimeline:
        items:
          $ref: '#/components/schemas/iCustomDataTimeline'
          title: iMsgCreateCollection.customDataTimeline.[]
        title: iMsgCreateCollection.customDataTimeline
        description: >-
          The new custom data timeline. Must have the necessary permissions in
          future transactions to update. However, no restrictions in this
          genesis Msg.
        type: array
      collectionApprovals:
        items:
          $ref: '#/components/schemas/iCollectionApproval'
          title: iMsgCreateCollection.collectionApprovals.[]
        title: iMsgCreateCollection.collectionApprovals
        description: >-
          The new collection approved transfers timeline. Must have the
          necessary permissions in future transactions to update. However, no
          restrictions in this genesis Msg.
        type: array
      standardsTimeline:
        items:
          $ref: '#/components/schemas/iStandardsTimeline'
          title: iMsgCreateCollection.standardsTimeline.[]
        title: iMsgCreateCollection.standardsTimeline
        description: >-
          The new standards timeline. Must have the necessary permissions in
          future transactions to update. However, no restrictions in this
          genesis Msg.
        type: array
      isArchivedTimeline:
        items:
          $ref: '#/components/schemas/iIsArchivedTimeline'
          title: iMsgCreateCollection.isArchivedTimeline.[]
        title: iMsgCreateCollection.isArchivedTimeline
        description: >-
          The new is archived timeline. Must have the necessary permissions in
          future transactions to update. However, no restrictions in this
          genesis Msg.
        type: array
      collectionId:
        title: iMsgUniversalUpdateCollection.collectionId
        description: The ID of the collection to update.
        anyOf:
          - type: string
          - type: number
      updateCollectionPermissions:
        title: iMsgUniversalUpdateCollection.updateCollectionPermissions
        description: Whether or not to update the collection permissions.
        type: boolean
      updateManagerTimeline:
        title: iMsgUniversalUpdateCollection.updateManagerTimeline
        description: Whether or not to update the manager timeline.
        type: boolean
      updateCollectionMetadataTimeline:
        title: iMsgUniversalUpdateCollection.updateCollectionMetadataTimeline
        description: Whether or not to update the collection metadata timeline.
        type: boolean
      updateBadgeMetadataTimeline:
        title: iMsgUniversalUpdateCollection.updateBadgeMetadataTimeline
        description: Whether or not to update the badge metadata timeline.
        type: boolean
      updateOffChainBalancesMetadataTimeline:
        title: iMsgUniversalUpdateCollection.updateOffChainBalancesMetadataTimeline
        description: Whether or not to update the off-chain balances metadata timeline.
        type: boolean
      updateCustomDataTimeline:
        title: iMsgUniversalUpdateCollection.updateCustomDataTimeline
        description: Whether or not to update the custom data timeline.
        type: boolean
      updateCollectionApprovals:
        title: iMsgUniversalUpdateCollection.updateCollectionApprovals
        description: Whether or not to update the collection approved transfers timeline.
        type: boolean
      updateStandardsTimeline:
        title: iMsgUniversalUpdateCollection.updateStandardsTimeline
        description: Whether or not to update the standards timeline.
        type: boolean
      updateIsArchivedTimeline:
        title: iMsgUniversalUpdateCollection.updateIsArchivedTimeline
        description: Whether or not to update the is archived timeline.
        type: boolean
    required:
      - creator
      - collectionId
    additionalProperties: false
    title: iMsgUniversalUpdateCollection, iMsgCreateCollection
    description: '@category Interfaces'
    type: object
  iMsgUpdateCollection:
    additionalProperties: false
    title: iMsgUpdateCollection
    description: '@category Interfaces'
    type: object
  iMsgUpdateUserApprovals:
    properties:
      creator:
        title: iMsgUpdateUserApprovals.creator
        description: The creator of the transaction.
        type: string
      collectionId:
        title: iMsgUpdateUserApprovals.collectionId
        description: The ID of the collection to transfer badges from.
        anyOf:
          - type: string
          - type: number
      updateOutgoingApprovals:
        title: iMsgUpdateUserApprovals.updateOutgoingApprovals
        description: Whether or not to update the outgoing approvals.
        type: boolean
      outgoingApprovals:
        items:
          $ref: '#/components/schemas/iUserOutgoingApproval'
          title: iMsgUpdateUserApprovals.outgoingApprovals.[]
        title: iMsgUpdateUserApprovals.outgoingApprovals
        description: >-
          The new outgoing approvals. Must have the necessary permissions to
          update.
        type: array
      updateIncomingApprovals:
        title: iMsgUpdateUserApprovals.updateIncomingApprovals
        description: Whether or not to update the incoming approvals.
        type: boolean
      incomingApprovals:
        items:
          $ref: '#/components/schemas/iUserIncomingApproval'
          title: iMsgUpdateUserApprovals.incomingApprovals.[]
        title: iMsgUpdateUserApprovals.incomingApprovals
        description: >-
          The new incoming approvals. Must have the necessary permissions to
          update.
        type: array
      updateAutoApproveSelfInitiatedOutgoingTransfers:
        title: >-
          iMsgUpdateUserApprovals.updateAutoApproveSelfInitiatedOutgoingTransfers
        description: >-
          Whether or not to update the auto approve self initiated outgoing
          transfers (i.e. from == the user and initiator == the user).
        type: boolean
      autoApproveSelfInitiatedOutgoingTransfers:
        title: iMsgUpdateUserApprovals.autoApproveSelfInitiatedOutgoingTransfers
        description: >-
          The new auto approve self initiated outgoing transfers. Must have
          the necessary permissions to update.
        type: boolean
      updateAutoApproveSelfInitiatedIncomingTransfers:
        title: >-
          iMsgUpdateUserApprovals.updateAutoApproveSelfInitiatedIncomingTransfers
        description: >-
          Whether or not to update the auto approve self initiated incoming
          transfers (i.e. to == the user and initiator == the user).
        type: boolean
      autoApproveSelfInitiatedIncomingTransfers:
        title: iMsgUpdateUserApprovals.autoApproveSelfInitiatedIncomingTransfers
        description: >-
          The new auto approve self initiated incoming transfers. Must have
          the necessary permissions to update.
        type: boolean
      updateUserPermissions:
        title: iMsgUpdateUserApprovals.updateUserPermissions
        description: Whether or not to update the user permissions.
        type: boolean
      userPermissions:
        $ref: '#/components/schemas/iUserPermissions'
        title: iMsgUpdateUserApprovals.userPermissions
        description: >-
          The new user permissions. Must have the necessary permissions to
          update.
    required:
      - creator
      - collectionId
    additionalProperties: false
    title: iMsgUpdateUserApprovals
    description: '@category Interfaces'
    type: object
  SupportedChainType:
    enum:
      - Bitcoin
      - Ethereum
      - Cosmos
      - Solana
      - Unknown
    title: SupportedChainType
    type: string
  NumberType:
    title: NumberType
    description: >-
      NumberType is a type that can be used to represent a number in
      JavaScript in multiple ways.

      Because the blockchain supports numbers > 2^53, we need to use BigInts
      or strings to represent them.


      NumberType is a union of all the types that can be used to represent a
      number in JavaScript.

      @category Number Types
    anyOf:
      - type: number
      - type: string
  JSPrimitiveNumberType:
    title: JSPrimitiveNumberType
    description: >-
      JSPrimitiveNumberType is a type that can be used to represent a number
      in JavaScript in multiple ways.

      Because the blockchain supports numbers > 2^53, we need to use BigInts
      or strings to represent them.


      JSPrimitiveNumberType is a union of all the types that can be used to
      represent a number in JavaScript.

      This is the same as NumberType, but without BigInts because they are not
      a primitive.

      @category Number Types
    anyOf:
      - type: string
      - type: number
  iUserPermissions:
    properties:
      canUpdateOutgoingApprovals:
        items:
          $ref: '#/components/schemas/iUserOutgoingApprovalPermission'
          title: iUserPermissions.canUpdateOutgoingApprovals.[]
        title: iUserPermissions.canUpdateOutgoingApprovals
        description: The list of permissions for updating approved outgoing transfers.
        type: array
      canUpdateIncomingApprovals:
        items:
          $ref: '#/components/schemas/iUserIncomingApprovalPermission'
          title: iUserPermissions.canUpdateIncomingApprovals.[]
        title: iUserPermissions.canUpdateIncomingApprovals
        description: The list of permissions for updating approved incoming transfers.
        type: array
      canUpdateAutoApproveSelfInitiatedOutgoingTransfers:
        items:
          $ref: '#/components/schemas/iActionPermission'
          title: >-
            iUserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers.[]
        title: iUserPermissions.canUpdateAutoApproveSelfInitiatedOutgoingTransfers
        description: >-
          The permissions for updating auto-approving self-initiated outgoing
          transfers. If auto-approve is enabled, then the user will be
          approved by default for all outgoing transfers that are
          self-initiated.
        type: array
      canUpdateAutoApproveSelfInitiatedIncomingTransfers:
        items:
          $ref: '#/components/schemas/iActionPermission'
          title: >-
            iUserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers.[]
        title: iUserPermissions.canUpdateAutoApproveSelfInitiatedIncomingTransfers
        description: >-
          The permissions for updating auto-approving self-initiated incoming
          transfers. If auto-approve is enabled, then the user will be
          approved by default for all incoming transfers that are
          self-initiated.
        type: array
    required:
      - canUpdateOutgoingApprovals
      - canUpdateIncomingApprovals
      - canUpdateAutoApproveSelfInitiatedOutgoingTransfers
      - canUpdateAutoApproveSelfInitiatedIncomingTransfers
    additionalProperties: false
    title: iUserPermissions
    description: '@category Interfaces'
    type: object
  iUserOutgoingApprovalPermission:
    properties:
      toListId:
        title: iUserOutgoingApprovalPermission.toListId
        description: The list ID of the to addresses of the approved outgoing transfers.
        type: string
      toList:
        $ref: '#/components/schemas/iAddressList'
        title: iUserOutgoingApprovalPermission.toList
      initiatedByListId:
        title: iUserOutgoingApprovalPermission.initiatedByListId
        description: >-
          The list ID of the initiatedBy addresses of the approved outgoing
          transfers.
        type: string
      initiatedByList:
        $ref: '#/components/schemas/iAddressList'
        title: iUserOutgoingApprovalPermission.initiatedByList
      transferTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserOutgoingApprovalPermission.transferTimes.[]
        title: iUserOutgoingApprovalPermission.transferTimes
        description: The transfer times of the approved outgoing transfers.
        type: array
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserOutgoingApprovalPermission.badgeIds.[]
        title: iUserOutgoingApprovalPermission.badgeIds
        description: The badge IDs of the approved outgoing transfers.
        type: array
      ownershipTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserOutgoingApprovalPermission.ownershipTimes.[]
        title: iUserOutgoingApprovalPermission.ownershipTimes
        description: The owned times of the approved outgoing transfers.
        type: array
      approvalId:
        title: iUserOutgoingApprovalPermission.approvalId
        description: >-
          The approval ID of the approved outgoing transfers. Can use "All" to
          represent all IDs, "!approvalId" to represent all IDs except
          approvalId, or "approvalId" to represent only approvalId.
        type: string
      permanentlyPermittedTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserOutgoingApprovalPermission.permanentlyPermittedTimes.[]
        title: iUserOutgoingApprovalPermission.permanentlyPermittedTimes
        description: The permitted times of the approved outgoing transfers.
        type: array
      permanentlyForbiddenTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserOutgoingApprovalPermission.permanentlyForbiddenTimes.[]
        title: iUserOutgoingApprovalPermission.permanentlyForbiddenTimes
        description: The forbidden times of the approved outgoing transfers.
        type: array
    required:
      - toListId
      - toList
      - initiatedByListId
      - initiatedByList
      - transferTimes
      - badgeIds
      - ownershipTimes
      - approvalId
      - permanentlyPermittedTimes
      - permanentlyForbiddenTimes
    additionalProperties: false
    title: iUserOutgoingApprovalPermission
    description: '@category Interfaces'
    type: object
  iUserIncomingApprovalPermission:
    properties:
      fromListId:
        title: iUserIncomingApprovalPermission.fromListId
        description: >-
          The list ID of the from addresses of the approved incoming
          transfers.
        type: string
      fromList:
        $ref: '#/components/schemas/iAddressList'
        title: iUserIncomingApprovalPermission.fromList
      initiatedByListId:
        title: iUserIncomingApprovalPermission.initiatedByListId
        description: >-
          The list ID of the initiatedBy addresses of the approved incoming
          transfers.
        type: string
      initiatedByList:
        $ref: '#/components/schemas/iAddressList'
        title: iUserIncomingApprovalPermission.initiatedByList
      transferTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserIncomingApprovalPermission.transferTimes.[]
        title: iUserIncomingApprovalPermission.transferTimes
        description: The transfer times of the approved incoming transfers.
        type: array
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserIncomingApprovalPermission.badgeIds.[]
        title: iUserIncomingApprovalPermission.badgeIds
        description: The badge IDs of the approved incoming transfers.
        type: array
      ownershipTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserIncomingApprovalPermission.ownershipTimes.[]
        title: iUserIncomingApprovalPermission.ownershipTimes
        description: The owned times of the approved incoming transfers.
        type: array
      approvalId:
        title: iUserIncomingApprovalPermission.approvalId
        description: >-
          The approval ID of the approved incoming transfers. Can use "All" to
          represent all IDs, "!approvalId" to represent all IDs except
          approvalId, or "approvalId" to represent only approvalId.
        type: string
      permanentlyPermittedTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserIncomingApprovalPermission.permanentlyPermittedTimes.[]
        title: iUserIncomingApprovalPermission.permanentlyPermittedTimes
        description: The permitted times of the approved incoming transfers.
        type: array
      permanentlyForbiddenTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserIncomingApprovalPermission.permanentlyForbiddenTimes.[]
        title: iUserIncomingApprovalPermission.permanentlyForbiddenTimes
        description: The forbidden times of the approved incoming transfers.
        type: array
    required:
      - fromListId
      - fromList
      - initiatedByListId
      - initiatedByList
      - transferTimes
      - badgeIds
      - ownershipTimes
      - approvalId
      - permanentlyPermittedTimes
      - permanentlyForbiddenTimes
    additionalProperties: false
    title: iUserIncomingApprovalPermission
    description: '@category Interfaces'
    type: object
  iCollectionPermissions:
    properties:
      canDeleteCollection:
        items:
          $ref: '#/components/schemas/iActionPermission'
          title: iCollectionPermissions.canDeleteCollection.[]
        title: iCollectionPermissions.canDeleteCollection
        description: The permissions for deleting the collection.
        type: array
      canArchiveCollection:
        items:
          $ref: '#/components/schemas/iTimedUpdatePermission'
          title: iCollectionPermissions.canArchiveCollection.[]
        title: iCollectionPermissions.canArchiveCollection
        description: The permissions for archiving the collection.
        type: array
      canUpdateOffChainBalancesMetadata:
        items:
          $ref: '#/components/schemas/iTimedUpdatePermission'
          title: iCollectionPermissions.canUpdateOffChainBalancesMetadata.[]
        title: iCollectionPermissions.canUpdateOffChainBalancesMetadata
        description: The permissions for updating the off-chain balances metadata.
        type: array
      canUpdateStandards:
        items:
          $ref: '#/components/schemas/iTimedUpdatePermission'
          title: iCollectionPermissions.canUpdateStandards.[]
        title: iCollectionPermissions.canUpdateStandards
        description: The permissions for updating the standards.
        type: array
      canUpdateCustomData:
        items:
          $ref: '#/components/schemas/iTimedUpdatePermission'
          title: iCollectionPermissions.canUpdateCustomData.[]
        title: iCollectionPermissions.canUpdateCustomData
        description: The permissions for updating the custom data.
        type: array
      canUpdateManager:
        items:
          $ref: '#/components/schemas/iTimedUpdatePermission'
          title: iCollectionPermissions.canUpdateManager.[]
        title: iCollectionPermissions.canUpdateManager
        description: The permissions for updating the manager.
        type: array
      canUpdateCollectionMetadata:
        items:
          $ref: '#/components/schemas/iTimedUpdatePermission'
          title: iCollectionPermissions.canUpdateCollectionMetadata.[]
        title: iCollectionPermissions.canUpdateCollectionMetadata
        description: The permissions for updating the collection metadata.
        type: array
      canUpdateValidBadgeIds:
        items:
          $ref: '#/components/schemas/iBadgeIdsActionPermission'
          title: iCollectionPermissions.canUpdateValidBadgeIds.[]
        title: iCollectionPermissions.canUpdateValidBadgeIds
        description: The permissions for creating more badges.
        type: array
      canUpdateBadgeMetadata:
        items:
          $ref: '#/components/schemas/iTimedUpdateWithBadgeIdsPermission'
          title: iCollectionPermissions.canUpdateBadgeMetadata.[]
        title: iCollectionPermissions.canUpdateBadgeMetadata
        description: The permissions for updating the badge metadata.
        type: array
      canUpdateCollectionApprovals:
        items:
          $ref: '#/components/schemas/iCollectionApprovalPermission'
          title: iCollectionPermissions.canUpdateCollectionApprovals.[]
        title: iCollectionPermissions.canUpdateCollectionApprovals
        description: The permissions for updating the collection approved transfers.
        type: array
    required:
      - canDeleteCollection
      - canArchiveCollection
      - canUpdateOffChainBalancesMetadata
      - canUpdateStandards
      - canUpdateCustomData
      - canUpdateManager
      - canUpdateCollectionMetadata
      - canUpdateValidBadgeIds
      - canUpdateBadgeMetadata
      - canUpdateCollectionApprovals
    additionalProperties: false
    title: iCollectionPermissions
    description: '@category Interfaces'
    type: object
  iActionPermission:
    properties:
      permanentlyPermittedTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iActionPermission.permanentlyPermittedTimes.[]
        title: iActionPermission.permanentlyPermittedTimes
        description: The permitted times of the permission.
        type: array
      permanentlyForbiddenTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iActionPermission.permanentlyForbiddenTimes.[]
        title: iActionPermission.permanentlyForbiddenTimes
        description: The forbidden times of the permission.
        type: array
    required:
      - permanentlyPermittedTimes
      - permanentlyForbiddenTimes
    additionalProperties: false
    title: iActionPermission
    description: '@category Interfaces'
    type: object
  iTimedUpdatePermission:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimedUpdatePermission.timelineTimes.[]
        title: iTimedUpdatePermission.timelineTimes
        description: The timeline times that the permission applies to.
        type: array
      permanentlyPermittedTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimedUpdatePermission.permanentlyPermittedTimes.[]
        title: iTimedUpdatePermission.permanentlyPermittedTimes
        description: The permitted times of the permission.
        type: array
      permanentlyForbiddenTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimedUpdatePermission.permanentlyForbiddenTimes.[]
        title: iTimedUpdatePermission.permanentlyForbiddenTimes
        description: The forbidden times of the permission.
        type: array
    required:
      - timelineTimes
      - permanentlyPermittedTimes
      - permanentlyForbiddenTimes
    additionalProperties: false
    title: iTimedUpdatePermission
    description: '@category Interfaces'
    type: object
  iBadgeIdsActionPermission:
    properties:
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iBadgeIdsActionPermission.badgeIds.[]
        title: iBadgeIdsActionPermission.badgeIds
        description: The badge IDs that the permission applies to.
        type: array
      ownershipTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iBadgeIdsActionPermission.ownershipTimes.[]
        title: iBadgeIdsActionPermission.ownershipTimes
        description: The owned times of the permission.
        type: array
      permanentlyPermittedTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iBadgeIdsActionPermission.permanentlyPermittedTimes.[]
        title: iBadgeIdsActionPermission.permanentlyPermittedTimes
        description: The permitted times of the permission.
        type: array
      permanentlyForbiddenTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iBadgeIdsActionPermission.permanentlyForbiddenTimes.[]
        title: iBadgeIdsActionPermission.permanentlyForbiddenTimes
        description: The forbidden times of the permission.
        type: array
    required:
      - badgeIds
      - ownershipTimes
      - permanentlyPermittedTimes
      - permanentlyForbiddenTimes
    additionalProperties: false
    title: iBadgeIdsActionPermission
    description: '@category Interfaces'
    type: object
  iTimedUpdateWithBadgeIdsPermission:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimedUpdateWithBadgeIdsPermission.timelineTimes.[]
        title: iTimedUpdateWithBadgeIdsPermission.timelineTimes
        description: The timeline times that the permission applies to.
        type: array
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimedUpdateWithBadgeIdsPermission.badgeIds.[]
        title: iTimedUpdateWithBadgeIdsPermission.badgeIds
        description: The badge IDs that the permission applies to.
        type: array
      permanentlyPermittedTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes.[]
        title: iTimedUpdateWithBadgeIdsPermission.permanentlyPermittedTimes
        description: The permitted times of the permission.
        type: array
      permanentlyForbiddenTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes.[]
        title: iTimedUpdateWithBadgeIdsPermission.permanentlyForbiddenTimes
        description: The forbidden times of the permission.
        type: array
    required:
      - timelineTimes
      - badgeIds
      - permanentlyPermittedTimes
      - permanentlyForbiddenTimes
    additionalProperties: false
    title: iTimedUpdateWithBadgeIdsPermission
    description: '@category Interfaces'
    type: object
  iCollectionApprovalPermission:
    properties:
      fromListId:
        title: iCollectionApprovalPermission.fromListId
        description: The list ID of the from addresses of the approved transfers.
        type: string
      fromList:
        $ref: '#/components/schemas/iAddressList'
        title: iCollectionApprovalPermission.fromList
      toListId:
        title: iCollectionApprovalPermission.toListId
        description: The list ID of the to addresses of the approved transfers.
        type: string
      toList:
        $ref: '#/components/schemas/iAddressList'
        title: iCollectionApprovalPermission.toList
      initiatedByListId:
        title: iCollectionApprovalPermission.initiatedByListId
        description: The list ID of the initiatedBy addresses of the approved transfers.
        type: string
      initiatedByList:
        $ref: '#/components/schemas/iAddressList'
        title: iCollectionApprovalPermission.initiatedByList
      transferTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iCollectionApprovalPermission.transferTimes.[]
        title: iCollectionApprovalPermission.transferTimes
        description: The transfer times of the approved transfers.
        type: array
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iCollectionApprovalPermission.badgeIds.[]
        title: iCollectionApprovalPermission.badgeIds
        description: The badge IDs of the approved transfers.
        type: array
      ownershipTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iCollectionApprovalPermission.ownershipTimes.[]
        title: iCollectionApprovalPermission.ownershipTimes
        description: The owned times of the approved transfers.
        type: array
      approvalId:
        title: iCollectionApprovalPermission.approvalId
        description: >-
          The approval ID of the approved transfers. Can use "All" to
          represent all IDs, "!approvalId" to represent all IDs except
          approvalId, or "approvalId" to represent only approvalId.
        type: string
      permanentlyPermittedTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iCollectionApprovalPermission.permanentlyPermittedTimes.[]
        title: iCollectionApprovalPermission.permanentlyPermittedTimes
        description: The permitted times of this permission.
        type: array
      permanentlyForbiddenTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iCollectionApprovalPermission.permanentlyForbiddenTimes.[]
        title: iCollectionApprovalPermission.permanentlyForbiddenTimes
        description: The forbidden times of this permission.
        type: array
    required:
      - fromListId
      - fromList
      - toListId
      - toList
      - initiatedByListId
      - initiatedByList
      - transferTimes
      - badgeIds
      - ownershipTimes
      - approvalId
      - permanentlyPermittedTimes
      - permanentlyForbiddenTimes
    additionalProperties: false
    title: iCollectionApprovalPermission
    description: '@category Interfaces'
    type: object
  iUintRange:
    properties:
      start:
        title: iUintRange.start
        description: The start of the range.
        anyOf:
          - type: string
          - type: number
      end:
        title: iUintRange.end
        description: The end of the range, inclusive.
        anyOf:
          - type: string
          - type: number
    required:
      - start
      - end
    additionalProperties: false
    title: iUintRange
    description: '@category Interfaces'
    type: object
  iBadgeMetadata:
    properties:
      uri:
        title: iBadgeMetadata.uri
        description: The URI where to fetch the badge metadata from.
        type: string
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iBadgeMetadata.badgeIds.[]
        title: iBadgeMetadata.badgeIds
        description: The badge IDs corresponding to the URI.
        type: array
      customData:
        title: iBadgeMetadata.customData
        description: Arbitrary custom data that can be stored on-chain
        type: string
    required:
      - uri
      - badgeIds
      - customData
    additionalProperties: false
    title: iBadgeMetadata
    description: '@category Interfaces'
    type: object
  iCollectionMetadata:
    properties:
      uri:
        title: iCollectionMetadata.uri
        description: The URI where to fetch the collection metadata from.
        type: string
      customData:
        title: iCollectionMetadata.customData
        description: Arbitrary custom data that can be stored on-chain
        type: string
    required:
      - uri
      - customData
    additionalProperties: false
    title: iCollectionMetadata
    description: '@category Interfaces'
    type: object
  iOffChainBalancesMetadata:
    properties:
      uri:
        title: iOffChainBalancesMetadata.uri
        description: The URI where to fetch the off-chain balances metadata from.
        type: string
      customData:
        title: iOffChainBalancesMetadata.customData
        description: Arbitrary custom data that can be stored on-chain
        type: string
    required:
      - uri
      - customData
    additionalProperties: false
    title: iOffChainBalancesMetadata
    description: '@category Interfaces'
    type: object
  iSecretsProof:
    properties:
      entropies:
        items:
          title: iSecretsProof.entropies.[]
          type: string
        title: iSecretsProof.entropies
        description: >-
          Entropies used for certain data integrity proofs on-chain (e.g.
          HASH(message + entropy) = on-chain value)
        type: array
      updateHistory:
        items:
          $ref: '#/components/schemas/iUpdateHistory'
          title: iSecretsProof.updateHistory.[]
        title: iSecretsProof.updateHistory
        type: array
      messageFormat:
        enum:
          - plaintext
          - json
        title: iSecretsProof.messageFormat
        description: The message format of the secretMessages.
        type: string
      createdBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iSecretsProof.createdBy
        description: The address of the user who created the secret.
      proofOfIssuance:
        properties:
          message:
            title: iSecretsProof.proofOfIssuance.message
            type: string
          signature:
            title: iSecretsProof.proofOfIssuance.signature
            type: string
          signer:
            title: iSecretsProof.proofOfIssuance.signer
            type: string
          publicKey:
            title: iSecretsProof.proofOfIssuance.publicKey
            type: string
        required:
          - message
          - signature
          - signer
        additionalProperties: false
        title: iSecretsProof.proofOfIssuance
        description: >-
          Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

          BBS+ signatures are signed with a BBS+ key pair, but you would often
          want the issuer to be a native address.

          The prooofOfIssuance establishes a link saying that "I am the issuer
          of this secret signed with BBS+ key pair ___".


          Fields can be left blank for standard signatures.
        type: object
      scheme:
        enum:
          - bbs
          - standard
        title: iSecretsProof.scheme
        description: >-
          The scheme of the secret. BBS+ signatures are supported and can be
          used where selective disclosure is a requirement.

          Otherwise, you can simply use your native blockchain's signature
          scheme.
        type: string
      secretMessages:
        items:
          title: iSecretsProof.secretMessages.[]
          type: string
        title: iSecretsProof.secretMessages
        description: >-
          Thesse are the secrets that are signed.

          For BBS+ signatures, there can be >1 secretMessages, and the signer
          can selectively disclose the secrets.

          For standard signatures, there is only 1 secretMessage.
        type: array
      dataIntegrityProof:
        properties:
          signature:
            title: iSecretsProof.dataIntegrityProof.signature
            type: string
          signer:
            title: iSecretsProof.dataIntegrityProof.signer
            type: string
          publicKey:
            title: iSecretsProof.dataIntegrityProof.publicKey
            type: string
        required:
          - signature
          - signer
        additionalProperties: false
        title: iSecretsProof.dataIntegrityProof
        description: >-
          This is the signature and accompanying details of the
          secretMessages. The siganture maintains the integrity of the
          secretMessages.


          This should match the expected scheme. For example, if the scheme is
          BBS+, the signature should be a BBS+ signature and signer should be
          a BBS+ public key.
        type: object
      name:
        title: iSecretsProof.name
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      image:
        title: iSecretsProof.image
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      description:
        title: iSecretsProof.description
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      anchors:
        items:
          properties:
            txHash:
              title: iSecretsProof.anchors.[].txHash
              type: string
            message:
              title: iSecretsProof.anchors.[].message
              type: string
          additionalProperties: false
          title: iSecretsProof.anchors.[]
          type: object
        title: iSecretsProof.anchors
        description: |-
          Anchors are on-chain transactions used to prove certain things
          about the secret. For example, you can anchor the secret to a
          transaction hash to prove that the secret existed at a certain time.
        type: array
    required:
      - messageFormat
      - createdBy
      - proofOfIssuance
      - scheme
      - secretMessages
      - dataIntegrityProof
      - name
      - image
      - description
    additionalProperties: false
    title: iSecretsProof
    description: '@category Interfaces'
    type: object
  iSecret:
    properties:
      messageFormat:
        enum:
          - plaintext
          - json
        title: iSecret.messageFormat
        description: The message format of the secretMessages.
        type: string
      createdBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iSecret.createdBy
        description: The address of the user who created the secret.
      proofOfIssuance:
        properties:
          message:
            title: iSecret.proofOfIssuance.message
            type: string
          signature:
            title: iSecret.proofOfIssuance.signature
            type: string
          signer:
            title: iSecret.proofOfIssuance.signer
            type: string
          publicKey:
            title: iSecret.proofOfIssuance.publicKey
            type: string
        required:
          - message
          - signature
          - signer
        additionalProperties: false
        title: iSecret.proofOfIssuance
        description: >-
          Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

          BBS+ signatures are signed with a BBS+ key pair, but you would often
          want the issuer to be a native address.

          The prooofOfIssuance establishes a link saying that "I am the issuer
          of this secret signed with BBS+ key pair ___".


          Fields can be left blank for standard signatures.
        type: object
      secretId:
        title: iSecret.secretId
        description: >-
          The secret ID. This is the ID that is given to the user to query the
          secret. Anyone with the ID can query it, so keep this safe and
          secure.
        type: string
      scheme:
        enum:
          - bbs
          - standard
        title: iSecret.scheme
        description: >-
          The scheme of the secret. BBS+ signatures are supported and can be
          used where selective disclosure is a requirement.

          Otherwise, you can simply use your native blockchain's signature
          scheme.
        type: string
      type:
        title: iSecret.type
        description: The type of the secret (e.g. credential).
        type: string
      secretMessages:
        items:
          title: iSecret.secretMessages.[]
          type: string
        title: iSecret.secretMessages
        description: >-
          Thesse are the secrets that are signed.

          For BBS+ signatures, there can be >1 secretMessages, and the signer
          can selectively disclose the secrets.

          For standard signatures, there is only 1 secretMessage.
        type: array
      dataIntegrityProof:
        properties:
          signature:
            title: iSecret.dataIntegrityProof.signature
            type: string
          signer:
            title: iSecret.dataIntegrityProof.signer
            type: string
          publicKey:
            title: iSecret.dataIntegrityProof.publicKey
            type: string
        required:
          - signature
          - signer
        additionalProperties: false
        title: iSecret.dataIntegrityProof
        description: >-
          This is the signature and accompanying details of the
          secretMessages. The siganture maintains the integrity of the
          secretMessages.


          This should match the expected scheme. For example, if the scheme is
          BBS+, the signature should be a BBS+ signature and signer should be
          a BBS+ public key.
        type: object
      name:
        title: iSecret.name
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      image:
        title: iSecret.image
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      description:
        title: iSecret.description
        description: >-
          Metadata for the secret for display purposes. Note this should not
          contain anything sensitive. It may be displayed to verifiers.
        type: string
      viewers:
        items:
          title: iSecret.viewers.[]
          type: string
        title: iSecret.viewers
        description: >-
          Viewers for query purposes. These are the addresses that can query
          the secret.
        type: array
      anchors:
        items:
          properties:
            txHash:
              title: iSecret.anchors.[].txHash
              type: string
            message:
              title: iSecret.anchors.[].message
              type: string
          additionalProperties: false
          title: iSecret.anchors.[]
          type: object
        title: iSecret.anchors
        description: |-
          Anchors are on-chain transactions used to prove certain things
          about the secret. For example, you can anchor the secret to a
          transaction hash to prove that the secret existed at a certain time.
        type: array
    required:
      - messageFormat
      - createdBy
      - proofOfIssuance
      - secretId
      - scheme
      - type
      - secretMessages
      - dataIntegrityProof
      - name
      - image
      - description
      - viewers
      - anchors
    additionalProperties: false
    title: iSecret
    description: '@category Interfaces'
    type: object
  iZkProof:
    properties:
      verificationKey:
        title: iZkProof.verificationKey
        description: The verification key of the zkProof.
        type: string
      uri:
        title: iZkProof.uri
        description: The URI where to fetch the zkProof metadata from.
        type: string
      customData:
        title: iZkProof.customData
        description: Arbitrary custom data that can be stored on-chain.
        type: string
      zkpTrackerId:
        title: iZkProof.zkpTrackerId
        description: ZKP tracker ID.
        type: string
    required:
      - verificationKey
      - uri
      - customData
      - zkpTrackerId
    additionalProperties: false
    title: iZkProof
    description: '@category Interfaces'
    type: object
  iZkProofSolution:
    properties:
      proof:
        title: iZkProofSolution.proof
        description: The proof of the zkProof.
        type: string
      publicInputs:
        title: iZkProofSolution.publicInputs
        description: The public inputs of the zkProof.
        type: string
    required:
      - proof
      - publicInputs
    additionalProperties: false
    title: iZkProofSolution
    description: '@category Interfaces'
    type: object
  iMustOwnBadges:
    properties:
      collectionId:
        title: iMustOwnBadges.collectionId
        description: The collection ID of the badges to own.
        anyOf:
          - type: string
          - type: number
      amountRange:
        $ref: '#/components/schemas/iUintRange'
        title: iMustOwnBadges.amountRange
        description: >-
          The min/max acceptable amount of badges that must be owned (can be
          any values, including 0-0).
      ownershipTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iMustOwnBadges.ownershipTimes.[]
        title: iMustOwnBadges.ownershipTimes
        description: The range of the times that the badges must be owned.
        type: array
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iMustOwnBadges.badgeIds.[]
        title: iMustOwnBadges.badgeIds
        description: The range of the badge IDs that must be owned.
        type: array
      overrideWithCurrentTime:
        title: iMustOwnBadges.overrideWithCurrentTime
        description: Whether or not to override the ownershipTimes with the current time.
        type: boolean
      mustSatisfyForAllAssets:
        title: iMustOwnBadges.mustSatisfyForAllAssets
        description: >-
          Whether or not the user must own all the specified badges. If false,
          we will accept if they meet criteria for at least one badge.
        type: boolean
    required:
      - collectionId
      - amountRange
      - ownershipTimes
      - badgeIds
      - overrideWithCurrentTime
      - mustSatisfyForAllAssets
    additionalProperties: false
    title: iMustOwnBadges
    description: '@category Interfaces'
    type: object
  iBalance:
    properties:
      amount:
        title: iBalance.amount
        description: The amount or balance of the owned badge.
        anyOf:
          - type: string
          - type: number
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iBalance.badgeIds.[]
        title: iBalance.badgeIds
        description: The badge IDs corresponding to the balance.
        type: array
      ownershipTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iBalance.ownershipTimes.[]
        title: iBalance.ownershipTimes
        description: The times that the badge is owned from.
        type: array
    required:
      - amount
      - badgeIds
      - ownershipTimes
    additionalProperties: false
    title: iBalance
    description: '@category Interfaces'
    type: object
  iAddressList:
    properties:
      listId:
        title: iAddressList.listId
        description: The ID of the address list.
        type: string
      addresses:
        items:
          title: iAddressList.addresses.[]
          type: string
        title: iAddressList.addresses
        description: >-
          The addresses of the address list. If this is a tracker list, the
          addresses are the tracker IDs.
        type: array
      whitelist:
        title: iAddressList.whitelist
        description: >-
          Whether or not to include ONLY the addresses or include all EXCEPT
          the addresses.
        type: boolean
      uri:
        title: iAddressList.uri
        description: The URI where to fetch the address list metadata from.
        type: string
      customData:
        title: iAddressList.customData
        description: Arbitrary custom data that can be stored on-chain.
        type: string
      createdBy:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAddressList.createdBy
        description: The address that created the address list.
      aliasAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAddressList.aliasAddress
        description: The alias BitBadges address of the address list.
    required:
      - listId
      - addresses
      - whitelist
      - uri
      - customData
    additionalProperties: false
    title: iAddressList
    description: '@category Interfaces'
    type: object
  iTransfer:
    properties:
      from:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iTransfer.from
        description: The address to transfer from.
      toAddresses:
        items:
          $ref: '#/components/schemas/BitBadgesAddress'
          title: iTransfer.toAddresses.[]
        title: iTransfer.toAddresses
        description: The addresses to transfer to.
        type: array
      balances:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iTransfer.balances.[]
        title: iTransfer.balances
        description: The balances to transfer.
        type: array
      precalculateBalancesFromApproval:
        $ref: '#/components/schemas/iApprovalIdentifierDetails'
        title: iTransfer.precalculateBalancesFromApproval
        description: >-
          If specified, we will precalculate from this approval and override
          the balances. This can only be used when the specified approval has
          predeterminedBalances set.
      merkleProofs:
        items:
          $ref: '#/components/schemas/iMerkleProof'
          title: iTransfer.merkleProofs.[]
        title: iTransfer.merkleProofs
        description: >-
          The merkle proofs that satisfy the mkerkle challenges in the
          approvals. If the transfer deducts from multiple approvals, we check
          all the merkle proofs and assert at least one is valid for every
          challenge.
        type: array
      memo:
        title: iTransfer.memo
        description: Arbitrary memo for the transfer.
        type: string
      prioritizedApprovals:
        items:
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
          title: iTransfer.prioritizedApprovals.[]
        title: iTransfer.prioritizedApprovals
        description: >-
          The prioritized approvals to use for the transfer. If specified, we
          will check these first.
        type: array
      onlyCheckPrioritizedApprovals:
        title: iTransfer.onlyCheckPrioritizedApprovals
        description: >-
          Whether or not to only check the prioritized approvals. If false, we
          will check all approvals with any prioritized first.
        type: boolean
      zkProofSolutions:
        items:
          $ref: '#/components/schemas/iZkProofSolution'
          title: iTransfer.zkProofSolutions.[]
        title: iTransfer.zkProofSolutions
        description: The zk proof solutions for approvals.
        type: array
    required:
      - from
      - toAddresses
      - balances
    additionalProperties: false
    title: iTransfer
    description: '@category Interfaces'
    type: object
  iApprovalIdentifierDetails:
    properties:
      approvalId:
        title: iApprovalIdentifierDetails.approvalId
        description: The approval ID of the approval.
        type: string
      approvalLevel:
        title: iApprovalIdentifierDetails.approvalLevel
        description: >-
          The approval level of the approval "collection", "incoming", or
          "outgoing".
        type: string
      approverAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iApprovalIdentifierDetails.approverAddress
        description: >-
          The address of the approval to check. If approvalLevel is
          "collection", this is blank "".
    required:
      - approvalId
      - approvalLevel
      - approverAddress
    additionalProperties: false
    title: iApprovalIdentifierDetails
    description: '@category Interfaces'
    type: object
  iCoinTransfer:
    properties:
      to:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iCoinTransfer.to
        description: >-
          The recipient of the coin transfer. This should be a Bech32 Cosmos
          address.
      coins:
        items:
          $ref: '#/components/schemas/iCosmosCoin'
          title: iCoinTransfer.coins.[]
        title: iCoinTransfer.coins
        description: The coins
        type: array
    required:
      - to
      - coins
    additionalProperties: false
    title: iCoinTransfer
    description: '@category Interfaces'
    type: object
  iAmountTrackerIdDetails:
    properties:
      collectionId:
        title: iAmountTrackerIdDetails.collectionId
        description: The collection ID for the approval.
        anyOf:
          - type: string
          - type: number
      approvalId:
        title: iAmountTrackerIdDetails.approvalId
        description: The approval ID
        type: string
      amountTrackerId:
        title: iAmountTrackerIdDetails.amountTrackerId
        description: The amount tracker ID of the approval.
        type: string
      approvalLevel:
        title: iAmountTrackerIdDetails.approvalLevel
        description: >-
          The approval level of the approval "collection", "incoming", or
          "outgoing".
        type: string
      approverAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAmountTrackerIdDetails.approverAddress
        description: The address of the approval to check.
      trackerType:
        title: iAmountTrackerIdDetails.trackerType
        description: >-
          The type of tracker to check "overall", "to", "from", or
          "initiatedBy".
        type: string
      approvedAddress:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iAmountTrackerIdDetails.approvedAddress
        description: The address to check for the approval.
    required:
      - collectionId
      - approvalId
      - amountTrackerId
      - approvalLevel
      - approverAddress
      - trackerType
      - approvedAddress
    additionalProperties: false
    title: iAmountTrackerIdDetails
    description: '@category Interfaces'
    type: object
  iMerkleChallenge:
    properties:
      root:
        title: iMerkleChallenge.root
        description: The root of the merkle tree.
        type: string
      expectedProofLength:
        title: iMerkleChallenge.expectedProofLength
        description: The expected proof length of the merkle proof.
        anyOf:
          - type: string
          - type: number
      useCreatorAddressAsLeaf:
        title: iMerkleChallenge.useCreatorAddressAsLeaf
        description: >-
          Whether or not to override any leaf value and use the creator
          address as the leaf. Used for whitelist trees.
        type: boolean
      maxUsesPerLeaf:
        title: iMerkleChallenge.maxUsesPerLeaf
        description: >-
          Whether or not to enforce max uses per leaf. Used to prevent replay
          attacks.
        anyOf:
          - type: string
          - type: number
      uri:
        title: iMerkleChallenge.uri
        description: The URI where to fetch the merkle challenge metadata from.
        type: string
      customData:
        title: iMerkleChallenge.customData
        description: Arbitrary custom data that can be stored on-chain.
        type: string
      challengeTrackerId:
        title: iMerkleChallenge.challengeTrackerId
        description: Tracker ID details for the merkle challenge.
        type: string
    required:
      - root
      - expectedProofLength
      - useCreatorAddressAsLeaf
      - maxUsesPerLeaf
      - uri
      - customData
      - challengeTrackerId
    additionalProperties: false
    title: iMerkleChallenge
    description: '@category Interfaces'
    type: object
  iMerklePathItem:
    properties:
      aunt:
        title: iMerklePathItem.aunt
        description: The aunt of the merkle path item.
        type: string
      onRight:
        title: iMerklePathItem.onRight
        description: Indicates whether the aunt node is on the right side of the path.
        type: boolean
    required:
      - aunt
      - onRight
    additionalProperties: false
    title: iMerklePathItem
    description: '@category Interfaces'
    type: object
  iMerkleProof:
    properties:
      aunts:
        items:
          $ref: '#/components/schemas/iMerklePathItem'
          title: iMerkleProof.aunts.[]
        title: iMerkleProof.aunts
        description: The aunts of the merkle proof.
        type: array
      leaf:
        title: iMerkleProof.leaf
        description: >-
          The leaf of the merkle proof. If useCreatorAddressAsLeaf is true,
          this will be populated with the creator BitBadges address.
        type: string
    required:
      - aunts
      - leaf
    additionalProperties: false
    title: iMerkleProof
    description: '@category Interfaces'
    type: object
  iTimelineItem:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimelineItem.timelineTimes.[]
        title: iTimelineItem.timelineTimes
        description: The times of the timeline item. Times in a timeline cannot overlap.
        type: array
    required:
      - timelineTimes
    additionalProperties: false
    title: iTimelineItem
    description: '@category Interfaces'
    type: object
  iManagerTimeline:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimelineItem.timelineTimes.[]
        title: iTimelineItem.timelineTimes
        description: The times of the timeline item. Times in a timeline cannot overlap.
        type: array
      manager:
        $ref: '#/components/schemas/BitBadgesAddress'
        title: iManagerTimeline.manager
        description: The manager of the collection.
    required:
      - timelineTimes
      - manager
    additionalProperties: false
    title: iManagerTimeline, iTimelineItem
    description: '@category Interfaces'
    type: object
  iCollectionMetadataTimeline:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimelineItem.timelineTimes.[]
        title: iTimelineItem.timelineTimes
        description: The times of the timeline item. Times in a timeline cannot overlap.
        type: array
      collectionMetadata:
        $ref: '#/components/schemas/iCollectionMetadata'
        title: iCollectionMetadataTimeline.collectionMetadata
        description: The collection metadata.
    required:
      - timelineTimes
      - collectionMetadata
    additionalProperties: false
    title: iCollectionMetadataTimeline, iTimelineItem
    description: '@category Interfaces'
    type: object
  iBadgeMetadataTimeline:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimelineItem.timelineTimes.[]
        title: iTimelineItem.timelineTimes
        description: The times of the timeline item. Times in a timeline cannot overlap.
        type: array
      badgeMetadata:
        items:
          $ref: '#/components/schemas/iBadgeMetadata'
          title: iBadgeMetadataTimeline.badgeMetadata.[]
        title: iBadgeMetadataTimeline.badgeMetadata
        description: The badge metadata.
        type: array
    required:
      - timelineTimes
      - badgeMetadata
    additionalProperties: false
    title: iBadgeMetadataTimeline, iTimelineItem
    description: '@category Interfaces'
    type: object
  iOffChainBalancesMetadataTimeline:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimelineItem.timelineTimes.[]
        title: iTimelineItem.timelineTimes
        description: The times of the timeline item. Times in a timeline cannot overlap.
        type: array
      offChainBalancesMetadata:
        $ref: '#/components/schemas/iOffChainBalancesMetadata'
        title: iOffChainBalancesMetadataTimeline.offChainBalancesMetadata
        description: The off-chain balances metadata.
    required:
      - timelineTimes
      - offChainBalancesMetadata
    additionalProperties: false
    title: iOffChainBalancesMetadataTimeline, iTimelineItem
    description: '@category Interfaces'
    type: object
  iCustomDataTimeline:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimelineItem.timelineTimes.[]
        title: iTimelineItem.timelineTimes
        description: The times of the timeline item. Times in a timeline cannot overlap.
        type: array
      customData:
        title: iCustomDataTimeline.customData
        description: Arbitrary custom data.
        type: string
    required:
      - timelineTimes
      - customData
    additionalProperties: false
    title: iCustomDataTimeline, iTimelineItem
    description: '@category Interfaces'
    type: object
  iStandardsTimeline:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimelineItem.timelineTimes.[]
        title: iTimelineItem.timelineTimes
        description: The times of the timeline item. Times in a timeline cannot overlap.
        type: array
      standards:
        items:
          title: iStandardsTimeline.standards.[]
          type: string
        title: iStandardsTimeline.standards
        description: The standards.
        type: array
    required:
      - timelineTimes
      - standards
    additionalProperties: false
    title: iStandardsTimeline, iTimelineItem
    description: '@category Interfaces'
    type: object
  iIsArchivedTimeline:
    properties:
      timelineTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iTimelineItem.timelineTimes.[]
        title: iTimelineItem.timelineTimes
        description: The times of the timeline item. Times in a timeline cannot overlap.
        type: array
      isArchived:
        title: iIsArchivedTimeline.isArchived
        description: Whether the collection is archived.
        type: boolean
    required:
      - timelineTimes
      - isArchived
    additionalProperties: false
    title: iIsArchivedTimeline, iTimelineItem
    description: '@category Interfaces'
    type: object
  iUserOutgoingApproval:
    properties:
      toListId:
        title: iUserOutgoingApproval.toListId
        type: string
      toList:
        $ref: '#/components/schemas/iAddressList'
        title: iUserOutgoingApproval.toList
      initiatedByListId:
        title: iUserOutgoingApproval.initiatedByListId
        type: string
      initiatedByList:
        $ref: '#/components/schemas/iAddressList'
        title: iUserOutgoingApproval.initiatedByList
      transferTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserOutgoingApproval.transferTimes.[]
        title: iUserOutgoingApproval.transferTimes
        type: array
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserOutgoingApproval.badgeIds.[]
        title: iUserOutgoingApproval.badgeIds
        type: array
      ownershipTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserOutgoingApproval.ownershipTimes.[]
        title: iUserOutgoingApproval.ownershipTimes
        type: array
      approvalId:
        title: iUserOutgoingApproval.approvalId
        type: string
      uri:
        title: iUserOutgoingApproval.uri
        type: string
      customData:
        title: iUserOutgoingApproval.customData
        type: string
      approvalCriteria:
        $ref: '#/components/schemas/iOutgoingApprovalCriteria'
        title: iUserOutgoingApproval.approvalCriteria
    required:
      - toListId
      - toList
      - initiatedByListId
      - initiatedByList
      - transferTimes
      - badgeIds
      - ownershipTimes
      - approvalId
    additionalProperties: false
    title: iUserOutgoingApproval
    description: '@category Interfaces'
    type: object
  iOutgoingApprovalCriteria:
    properties:
      mustOwnBadges:
        items:
          $ref: '#/components/schemas/iMustOwnBadges'
          title: iOutgoingApprovalCriteria.mustOwnBadges.[]
        title: iOutgoingApprovalCriteria.mustOwnBadges
        description: The list of must own badges to be approved.
        type: array
      zkProofs:
        items:
          $ref: '#/components/schemas/iZkProof'
          title: iOutgoingApprovalCriteria.zkProofs.[]
        title: iOutgoingApprovalCriteria.zkProofs
        description: >-
          The list of ZK proofs that need to be satisfied. One use per proof
          solution.
        type: array
      coinTransfers:
        items:
          $ref: '#/components/schemas/iCoinTransfer'
          title: iOutgoingApprovalCriteria.coinTransfers.[]
        title: iOutgoingApprovalCriteria.coinTransfers
        description: The $BADGE transfers to be executed upon every approval.
        type: array
      merkleChallenges:
        items:
          $ref: '#/components/schemas/iMerkleChallenge'
          title: iOutgoingApprovalCriteria.merkleChallenges.[]
        title: iOutgoingApprovalCriteria.merkleChallenges
        description: The list of merkle challenges that need valid proofs to be approved.
        type: array
      predeterminedBalances:
        $ref: '#/components/schemas/iPredeterminedBalances'
        title: iOutgoingApprovalCriteria.predeterminedBalances
        description: The predetermined balances for each transfer.
      approvalAmounts:
        $ref: '#/components/schemas/iApprovalAmounts'
        title: iOutgoingApprovalCriteria.approvalAmounts
        description: The maximum approved amounts for this approval.
      maxNumTransfers:
        $ref: '#/components/schemas/iMaxNumTransfers'
        title: iOutgoingApprovalCriteria.maxNumTransfers
        description: The max num transfers for this approval.
      requireToEqualsInitiatedBy:
        title: iOutgoingApprovalCriteria.requireToEqualsInitiatedBy
        description: Whether the to address must equal the initiatedBy address.
        type: boolean
      requireToDoesNotEqualInitiatedBy:
        title: iOutgoingApprovalCriteria.requireToDoesNotEqualInitiatedBy
        description: Whether the to address must not equal the initiatedBy address.
        type: boolean
    additionalProperties: false
    title: iOutgoingApprovalCriteria
    description: '@category Interfaces'
    type: object
  iPredeterminedBalances:
    properties:
      manualBalances:
        items:
          $ref: '#/components/schemas/iManualBalances'
          title: iPredeterminedBalances.manualBalances.[]
        title: iPredeterminedBalances.manualBalances
        description: >-
          Manually define the balances for each transfer. Cannot be used with
          incrementedBalances. Order number corresponds to the index of the
          balance in the array.
        type: array
      incrementedBalances:
        $ref: '#/components/schemas/iIncrementedBalances'
        title: iPredeterminedBalances.incrementedBalances
        description: >-
          Define a starting balance and increment the badge IDs and owned
          times by a certain amount after each transfer. Cannot be used with
          manualBalances. Order number corresponds to number of times we
          increment.
      orderCalculationMethod:
        $ref: '#/components/schemas/iPredeterminedOrderCalculationMethod'
        title: iPredeterminedBalances.orderCalculationMethod
        description: The order calculation method.
    required:
      - manualBalances
      - incrementedBalances
      - orderCalculationMethod
    additionalProperties: false
    title: iPredeterminedBalances
    description: '@category Interfaces'
    type: object
  iManualBalances:
    properties:
      balances:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iManualBalances.balances.[]
        title: iManualBalances.balances
        description: >-
          The list of balances for each transfer. Order number corresponds to
          the index of the balance in the array.
        type: array
    required:
      - balances
    additionalProperties: false
    title: iManualBalances
    description: '@category Interfaces'
    type: object
  iIncrementedBalances:
    properties:
      startBalances:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iIncrementedBalances.startBalances.[]
        title: iIncrementedBalances.startBalances
        description: >-
          The starting balances for each transfer. Order number corresponds to
          the number of times we increment.
        type: array
      incrementBadgeIdsBy:
        title: iIncrementedBalances.incrementBadgeIdsBy
        description: The amount to increment the badge IDs by after each transfer.
        anyOf:
          - type: string
          - type: number
      incrementOwnershipTimesBy:
        title: iIncrementedBalances.incrementOwnershipTimesBy
        description: The amount to increment the owned times by after each transfer.
        anyOf:
          - type: string
          - type: number
    required:
      - startBalances
      - incrementBadgeIdsBy
      - incrementOwnershipTimesBy
    additionalProperties: false
    title: iIncrementedBalances
    description: '@category Interfaces'
    type: object
  iPredeterminedOrderCalculationMethod:
    properties:
      useOverallNumTransfers:
        title: iPredeterminedOrderCalculationMethod.useOverallNumTransfers
        description: >-
          Use the overall number of transfers this approval has been used with
          as the order number. Ex: If this approval has been used 2 times by
          ANY address, then the order number for the next transfer will be 3.
        type: boolean
      usePerToAddressNumTransfers:
        title: iPredeterminedOrderCalculationMethod.usePerToAddressNumTransfers
        description: >-
          Use the number of times this approval has been used by each to
          address as the order number. Ex: If this approval has been used 2
          times by to address A, then the order number for the next transfer
          by to address A will be 3.
        type: boolean
      usePerFromAddressNumTransfers:
        title: iPredeterminedOrderCalculationMethod.usePerFromAddressNumTransfers
        description: >-
          Use the number of times this approval has been used by each from
          address as the order number. Ex: If this approval has been used 2
          times by from address A, then the order number for the next transfer
          by from address A will be 3.
        type: boolean
      usePerInitiatedByAddressNumTransfers:
        title: >-
          iPredeterminedOrderCalculationMethod.usePerInitiatedByAddressNumTransfers
        description: >-
          Use the number of times this approval has been used by each
          initiated by address as the order number. Ex: If this approval has
          been used 2 times by initiated by address A, then the order number
          for the next transfer by initiated by address A will be 3.
        type: boolean
      useMerkleChallengeLeafIndex:
        title: iPredeterminedOrderCalculationMethod.useMerkleChallengeLeafIndex
        description: >-
          Use the merkle challenge leaf index as the order number. Must
          specify ONE merkle challenge with the useLeafIndexForTransferOrder
          flag set to true. If so, we will use the leaf index of each merkle
          proof to calculate the order number. This is used to reserve
          specific balances for specific leaves (such as codes or whitelist
          address leafs)
        type: boolean
      challengeTrackerId:
        title: iPredeterminedOrderCalculationMethod.challengeTrackerId
        description: >-
          Use the merkle challenge leaf index as the order number. Must
          specify ONE merkle challenge with the useLeafIndexForTransferOrder
          flag set to true. If so, we will use the leaf index of each merkle
          proof to calculate the order number. This is used to reserve
          specific balances for specific leaves (such as codes or whitelist
          address leafs)
        type: string
    required:
      - useOverallNumTransfers
      - usePerToAddressNumTransfers
      - usePerFromAddressNumTransfers
      - usePerInitiatedByAddressNumTransfers
      - useMerkleChallengeLeafIndex
      - challengeTrackerId
    additionalProperties: false
    title: iPredeterminedOrderCalculationMethod
    description: '@category Interfaces'
    type: object
  iApprovalAmounts:
    properties:
      overallApprovalAmount:
        title: iApprovalAmounts.overallApprovalAmount
        description: >-
          The overall maximum amount approved for the badgeIDs and
          ownershipTimes. Running tally that includes all transfers that match
          this approval.
        anyOf:
          - type: string
          - type: number
      perToAddressApprovalAmount:
        title: iApprovalAmounts.perToAddressApprovalAmount
        description: >-
          The maximum amount approved for the badgeIDs and ownershipTimes for
          each to address. Running tally that includes all transfers from each
          unique to address that match this approval.
        anyOf:
          - type: string
          - type: number
      perFromAddressApprovalAmount:
        title: iApprovalAmounts.perFromAddressApprovalAmount
        description: >-
          The maximum amount approved for the badgeIDs and ownershipTimes for
          each from address. Running tally that includes all transfers from
          each unique from address that match this approval.
        anyOf:
          - type: string
          - type: number
      perInitiatedByAddressApprovalAmount:
        title: iApprovalAmounts.perInitiatedByAddressApprovalAmount
        description: >-
          The maximum amount approved for the badgeIDs and ownershipTimes for
          each initiated by address. Running tally that includes all transfers
          from each unique initiated by address that match this approval.
        anyOf:
          - type: string
          - type: number
      amountTrackerId:
        title: iApprovalAmounts.amountTrackerId
        description: >-
          The ID of the approval tracker. This is the key used to track
          tallies.
        type: string
    required:
      - overallApprovalAmount
      - perToAddressApprovalAmount
      - perFromAddressApprovalAmount
      - perInitiatedByAddressApprovalAmount
      - amountTrackerId
    additionalProperties: false
    title: iApprovalAmounts
    description: '@category Interfaces'
    type: object
  iMaxNumTransfers:
    properties:
      overallMaxNumTransfers:
        title: iMaxNumTransfers.overallMaxNumTransfers
        description: >-
          The overall maximum number of transfers for the badgeIDs and
          ownershipTimes. Running tally that includes all transfers that match
          this approval.
        anyOf:
          - type: string
          - type: number
      perToAddressMaxNumTransfers:
        title: iMaxNumTransfers.perToAddressMaxNumTransfers
        description: >-
          The maximum number of transfers for the badgeIDs and ownershipTimes
          for each to address. Running tally that includes all transfers from
          each unique to address that match this approval.
        anyOf:
          - type: string
          - type: number
      perFromAddressMaxNumTransfers:
        title: iMaxNumTransfers.perFromAddressMaxNumTransfers
        description: >-
          The maximum number of transfers for the badgeIDs and ownershipTimes
          for each from address. Running tally that includes all transfers
          from each unique from address that match this approval.
        anyOf:
          - type: string
          - type: number
      perInitiatedByAddressMaxNumTransfers:
        title: iMaxNumTransfers.perInitiatedByAddressMaxNumTransfers
        description: >-
          The maximum number of transfers for the badgeIDs and ownershipTimes
          for each initiated by address. Running tally that includes all
          transfers from each unique initiated by address that match this
          approval.
        anyOf:
          - type: string
          - type: number
      amountTrackerId:
        title: iMaxNumTransfers.amountTrackerId
        description: >-
          The ID of the approval tracker. This is the key used to track
          tallies.
        type: string
    required:
      - overallMaxNumTransfers
      - perToAddressMaxNumTransfers
      - perFromAddressMaxNumTransfers
      - perInitiatedByAddressMaxNumTransfers
      - amountTrackerId
    additionalProperties: false
    title: iMaxNumTransfers
    description: '@category Interfaces'
    type: object
  iUserIncomingApproval:
    properties:
      fromListId:
        title: iUserIncomingApproval.fromListId
        description: The list ID for the user(s) who is sending the badges.
        type: string
      fromList:
        $ref: '#/components/schemas/iAddressList'
        title: iUserIncomingApproval.fromList
      initiatedByListId:
        title: iUserIncomingApproval.initiatedByListId
        description: The list ID for the user(s) who initiate the transfer.
        type: string
      initiatedByList:
        $ref: '#/components/schemas/iAddressList'
        title: iUserIncomingApproval.initiatedByList
      transferTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserIncomingApproval.transferTimes.[]
        title: iUserIncomingApproval.transferTimes
        description: The times of the transfer transaction.
        type: array
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserIncomingApproval.badgeIds.[]
        title: iUserIncomingApproval.badgeIds
        description: The badge IDs to be transferred.
        type: array
      ownershipTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iUserIncomingApproval.ownershipTimes.[]
        title: iUserIncomingApproval.ownershipTimes
        description: The ownership times of the badges being transferred.
        type: array
      approvalId:
        title: iUserIncomingApproval.approvalId
        description: >-
          The ID of the approval. Must not be a duplicate of another approval
          ID in the same timeline.
        type: string
      uri:
        title: iUserIncomingApproval.uri
        description: The URI of the approval.
        type: string
      customData:
        title: iUserIncomingApproval.customData
        description: Arbitrary custom data of the approval
        type: string
      approvalCriteria:
        $ref: '#/components/schemas/iIncomingApprovalCriteria'
        title: iUserIncomingApproval.approvalCriteria
        description: >-
          For allowed combinations, we also must check the details of the
          approval. These represent the restrictions that must be obeyed such
          as the total amount approved, max num transfers, merkle challenges,
          must own badges, etc.
    required:
      - fromListId
      - fromList
      - initiatedByListId
      - initiatedByList
      - transferTimes
      - badgeIds
      - ownershipTimes
      - approvalId
    additionalProperties: false
    title: iUserIncomingApproval
    description: '@category Interfaces'
    type: object
  iIncomingApprovalCriteria:
    properties:
      mustOwnBadges:
        items:
          $ref: '#/components/schemas/iMustOwnBadges'
          title: iIncomingApprovalCriteria.mustOwnBadges.[]
        title: iIncomingApprovalCriteria.mustOwnBadges
        description: The list of must own badges to be approved.
        type: array
      zkProofs:
        items:
          $ref: '#/components/schemas/iZkProof'
          title: iIncomingApprovalCriteria.zkProofs.[]
        title: iIncomingApprovalCriteria.zkProofs
        description: >-
          The list of ZK proofs that need to be satisfied. One use per proof
          solution.
        type: array
      coinTransfers:
        items:
          $ref: '#/components/schemas/iCoinTransfer'
          title: iIncomingApprovalCriteria.coinTransfers.[]
        title: iIncomingApprovalCriteria.coinTransfers
        description: The $BADGE transfers to be executed upon every approval.
        type: array
      merkleChallenges:
        items:
          $ref: '#/components/schemas/iMerkleChallenge'
          title: iIncomingApprovalCriteria.merkleChallenges.[]
        title: iIncomingApprovalCriteria.merkleChallenges
        description: The list of merkle challenges that need valid proofs to be approved.
        type: array
      predeterminedBalances:
        $ref: '#/components/schemas/iPredeterminedBalances'
        title: iIncomingApprovalCriteria.predeterminedBalances
        description: The predetermined balances for each transfer using this approval.
      approvalAmounts:
        $ref: '#/components/schemas/iApprovalAmounts'
        title: iIncomingApprovalCriteria.approvalAmounts
        description: The maximum approved amounts for this approval.
      maxNumTransfers:
        $ref: '#/components/schemas/iMaxNumTransfers'
        title: iIncomingApprovalCriteria.maxNumTransfers
        description: The max num transfers for this approval.
      requireFromEqualsInitiatedBy:
        title: iIncomingApprovalCriteria.requireFromEqualsInitiatedBy
        description: Whether the from address must equal the initiatedBy address.
        type: boolean
      requireFromDoesNotEqualInitiatedBy:
        title: iIncomingApprovalCriteria.requireFromDoesNotEqualInitiatedBy
        description: Whether the from address must not equal the initiatedBy address.
        type: boolean
    additionalProperties: false
    title: iIncomingApprovalCriteria
    description: '@category Interfaces'
    type: object
  iCollectionApproval:
    properties:
      toListId:
        title: iCollectionApproval.toListId
        description: The list ID for the user(s) who is receiving the badges.
        type: string
      toList:
        $ref: '#/components/schemas/iAddressList'
        title: iCollectionApproval.toList
      fromListId:
        title: iCollectionApproval.fromListId
        description: The list ID for the user(s) who is sending the badges.
        type: string
      fromList:
        $ref: '#/components/schemas/iAddressList'
        title: iCollectionApproval.fromList
      initiatedByListId:
        title: iCollectionApproval.initiatedByListId
        description: The list ID for the user(s) who initiate the transfer.
        type: string
      initiatedByList:
        $ref: '#/components/schemas/iAddressList'
        title: iCollectionApproval.initiatedByList
      transferTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iCollectionApproval.transferTimes.[]
        title: iCollectionApproval.transferTimes
        description: The times of the transfer transaction.
        type: array
      badgeIds:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iCollectionApproval.badgeIds.[]
        title: iCollectionApproval.badgeIds
        description: The badge IDs to be transferred.
        type: array
      ownershipTimes:
        items:
          $ref: '#/components/schemas/iUintRange'
          title: iCollectionApproval.ownershipTimes.[]
        title: iCollectionApproval.ownershipTimes
        description: The ownership times of the badges being transferred.
        type: array
      approvalId:
        title: iCollectionApproval.approvalId
        description: >-
          The ID of the approval. Must not be a duplicate of another approval
          ID in the same timeline.
        type: string
      uri:
        title: iCollectionApproval.uri
        description: The URI of the approval.
        type: string
      customData:
        title: iCollectionApproval.customData
        description: Arbitrary custom data of the approval
        type: string
      approvalCriteria:
        $ref: '#/components/schemas/iApprovalCriteria'
        title: iCollectionApproval.approvalCriteria
        description: >-
          For allowed combinations, we also must check the details of the
          approval. These represent the restrictions that must be obeyed such
          as the total amount approved, max num transfers, merkle challenges,
          must own badges, etc.
    required:
      - toListId
      - toList
      - fromListId
      - fromList
      - initiatedByListId
      - initiatedByList
      - transferTimes
      - badgeIds
      - ownershipTimes
      - approvalId
    additionalProperties: false
    title: iCollectionApproval
    description: '@category Interfaces'
    type: object
  iApprovalCriteria:
    properties:
      mustOwnBadges:
        items:
          $ref: '#/components/schemas/iMustOwnBadges'
          title: iApprovalCriteria.mustOwnBadges.[]
        title: iApprovalCriteria.mustOwnBadges
        description: The list of must own badges to be approved.
        type: array
      zkProofs:
        items:
          $ref: '#/components/schemas/iZkProof'
          title: iApprovalCriteria.zkProofs.[]
        title: iApprovalCriteria.zkProofs
        description: >-
          The list of ZK proofs that need to be satisfied. One use per proof
          solution.
        type: array
      coinTransfers:
        items:
          $ref: '#/components/schemas/iCoinTransfer'
          title: iApprovalCriteria.coinTransfers.[]
        title: iApprovalCriteria.coinTransfers
        description: The $BADGE transfers to be executed upon every approval.
        type: array
      merkleChallenges:
        items:
          $ref: '#/components/schemas/iMerkleChallenge'
          title: iApprovalCriteria.merkleChallenges.[]
        title: iApprovalCriteria.merkleChallenges
        description: The list of merkle challenges that need valid proofs to be approved.
        type: array
      predeterminedBalances:
        $ref: '#/components/schemas/iPredeterminedBalances'
        title: iApprovalCriteria.predeterminedBalances
        description: The predetermined balances for each transfer.
      approvalAmounts:
        $ref: '#/components/schemas/iApprovalAmounts'
        title: iApprovalCriteria.approvalAmounts
        description: The maximum approved amounts for this approval.
      maxNumTransfers:
        $ref: '#/components/schemas/iMaxNumTransfers'
        title: iApprovalCriteria.maxNumTransfers
        description: The max num transfers for this approval.
      requireToEqualsInitiatedBy:
        title: iApprovalCriteria.requireToEqualsInitiatedBy
        description: Whether the to address must equal the initiatedBy address.
        type: boolean
      requireFromEqualsInitiatedBy:
        title: iApprovalCriteria.requireFromEqualsInitiatedBy
        description: Whether the from address must equal the initiatedBy address.
        type: boolean
      requireToDoesNotEqualInitiatedBy:
        title: iApprovalCriteria.requireToDoesNotEqualInitiatedBy
        description: Whether the to address must not equal the initiatedBy address.
        type: boolean
      requireFromDoesNotEqualInitiatedBy:
        title: iApprovalCriteria.requireFromDoesNotEqualInitiatedBy
        description: Whether the from address must not equal the initiatedBy address.
        type: boolean
      overridesFromOutgoingApprovals:
        title: iApprovalCriteria.overridesFromOutgoingApprovals
        description: >-
          Whether this approval overrides the from address's approved outgoing
          transfers.
        type: boolean
      overridesToIncomingApprovals:
        title: iApprovalCriteria.overridesToIncomingApprovals
        description: >-
          Whether this approval overrides the to address's approved incoming
          transfers.
        type: boolean
    additionalProperties: false
    title: iApprovalCriteria
    description: '@category Interfaces'
    type: object
  iUserBalanceStore:
    properties:
      balances:
        items:
          $ref: '#/components/schemas/iBalance'
          title: iUserBalanceStore.balances.[]
        title: iUserBalanceStore.balances
        description: The user's balances.
        type: array
      incomingApprovals:
        items:
          $ref: '#/components/schemas/iUserIncomingApproval'
          title: iUserBalanceStore.incomingApprovals.[]
        title: iUserBalanceStore.incomingApprovals
        description: The user's incoming approvals.
        type: array
      outgoingApprovals:
        items:
          $ref: '#/components/schemas/iUserOutgoingApproval'
          title: iUserBalanceStore.outgoingApprovals.[]
        title: iUserBalanceStore.outgoingApprovals
        description: The user's outgoing approvals.
        type: array
      userPermissions:
        $ref: '#/components/schemas/iUserPermissions'
        title: iUserBalanceStore.userPermissions
        description: The user's permissions.
      autoApproveSelfInitiatedOutgoingTransfers:
        title: iUserBalanceStore.autoApproveSelfInitiatedOutgoingTransfers
        description: >-
          Whether the user's self-initiated outgoing transfers are
          auto-approved. If not, they must be explicitly approved using the
          outgoing approvals.
        type: boolean
      autoApproveSelfInitiatedIncomingTransfers:
        title: iUserBalanceStore.autoApproveSelfInitiatedIncomingTransfers
        description: >-
          Whether the user's self-initiated incoming transfers are
          auto-approved. If not, they must be explicitly approved using the
          incoming approvals.
        type: boolean
    required:
      - balances
      - incomingApprovals
      - outgoingApprovals
      - userPermissions
      - autoApproveSelfInitiatedOutgoingTransfers
      - autoApproveSelfInitiatedIncomingTransfers
    additionalProperties: false
    title: iUserBalanceStore
    description: >-
      This stores everythign about a user's balances for a specific collection
      ID.

      This includes their balances, incoming approvals, outgoing approvals,
      and permissions.

      @category Interfaces
    type: object
