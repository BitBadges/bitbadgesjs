openapi: 3.1.0
info:
  title: BitBadges API
  description: |-
    # Introduction
    The BitBadges API is a RESTful API that enables developers to interact with the BitBadges blockchain and indexer. This API provides comprehensive access to the BitBadges ecosystem, allowing you to query and interact with digital badges, collections, accounts, blockchain data, and more.
    For complete documentation, see the [BitBadges Documentation](https://docs.bitbadges.io/for-developers/bitbadges-api/api)
    and use along with this reference.

    # Getting Started

    ## Authentication
    All API requests require an API key for authentication. You can obtain your API key from the [BitBadges Developer Portal](https://bitbadges.io/developer).

    ### API Key Authentication
    Include your API key in the `x-api-key` header:
    ```
    x-api-key: your-api-key-here
    ```

    <br />

    ## User Authentication
    Most read-only applications can function with just an API key. However, if you need to access private user data or perform actions on behalf of users, you have two options:

    ### OAuth 2.0 (Sign In with BitBadges)
    For performing actions on behalf of other users, use the standard OAuth 2.0 flow via Sign In with BitBadges.
    See the [Sign In with BitBadges documentation](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges) for details.

    You will pass the access token in the Authorization header:
    ```
    Authorization: Bearer your-access-token-here
    ```

    ### Password Self-Approve Method
    For automating actions for your own account:
    1. Set up an approved password sign in in your account settings tab on https://bitbadges.io with desired scopes (e.g. `completeClaims`)
    2. Sign in using:
    ```typescript
    const { message } = await BitBadgesApi.getSignInChallenge(...);
    const verificationRes = await BitBadgesApi.verifySignIn({
        message,
        signature: '', //Empty string
        password: '...'
    })
    ```

    Note: This method uses HTTP session cookies. Ensure your requests support credentials (e.g. axios: { withCredentials: true }).

    ### Scopes
    Note that for proper authentication, you must have the proper scopes set.

    See [https://bitbadges.io/auth/linkgen](https://bitbadges.io/auth/linkgen) for a helper URL generation tool. The scopes will be included in
    the `scope` parameter of the SIWBB URL or set in your approved sign in settings.

    ### Available Scopes

    - **Report** (`report`)
      Report users or collections.

    - **Read Profile** (`readProfile`)
      Read your private profile information. This includes your email, approved sign-in methods, connections, and other private information.

    - **Read Address Lists** (`readAddressLists`)
      Read private address lists on behalf of the user.

    - **Manage Address Lists** (`manageAddressLists`)
      Create, update, and delete address lists on behalf of the user (private or public).

    - **Manage Applications** (`manageApplications`)
      Create, update, and delete applications on behalf of the user.

    - **Manage Utility Listings** (`manageUtilityListings`)
      Create, update, and delete utility listings on behalf of the user.

    - **Approve Sign In with BitBadges Requests** (`approveSiwbbRequests`)
      Sign In with BitBadges on behalf of the user.

    - **Read Authentication Codes** (`readAuthCodes`)
      Read Authentication Codes on behalf of the user.

    - **Delete Authentication Codes** (`deleteAuthCodes`)
      Delete Authentication Codes on behalf of the user.

    - **Send Claim Alerts** (`sendClaimAlerts`)
      Send claim alerts on behalf of the user.

    - **Read Claim Alerts** (`readClaimAlerts`)
      Read claim alerts on behalf of the user. Note that claim alerts may contain sensitive information like claim codes, attestation IDs, etc.

    - **Manage Attestations** (`manageAttestations`)
      Manage attestations on behalf of the user. This includes creating, updating, and deleting attestations.

    - **Read Attestations** (`readAttestations`)
      Read attestations on behalf of the user.

    - **Read Private Claim Data** (`readPrivateClaimData`)
      Read private claim data on behalf of the user (e.g. codes, passwords, private user lists, etc.).

    - **Complete Claims** (`completeClaims`)
      Complete claims on behalf of the user.

    - **Manage Off-Chain Balances** (`manageOffChainBalances`)
      Manage off-chain balances on behalf of the user.

    - **Embedded Wallet** (`embeddedWallet`)
      Sign transactions on behalf of the user with their embedded wallet.

    <br />

    ## SDK Integration
    The recommended way to interact with the API is through our TypeScript/JavaScript SDK:

    ```typescript
    import { BigIntify, BitBadgesAPI } from "bitbadgesjs-sdk";

    // Initialize the API client
    const api = new BitBadgesAPI({
      convertFunction: BigIntify,
      apiKey: 'your-api-key-here'
    });

    // Example: Fetch collections
    const collections = await api.getCollections({
      collectionsToFetch: [{
        collectionId: 1n,
        metadataToFetch: {
          badgeIds: [{ start: 1n, end: 10n }]
        }
      }]
    });
    ```

    <br />

    # Tiers
    There are 3 tiers of API keys, each with different rate limits and permissions. See the pricing page for more details: https://bitbadges.io/pricing
    - Free tier
    - Premium tier
    - Enterprise tier

    Rate limit headers included in responses:
    - `X-RateLimit-Limit`: Total requests allowed per window
    - `X-RateLimit-Remaining`: Remaining requests in current window
    - `X-RateLimit-Reset`: Time until rate limit resets (UTC timestamp)

    # Response Formats

    ## Error Response

    All API errors follow a consistent format:

    ```typescript
    {
      // Serialized error object for debugging purposes
      // Advanced users can use this to debug issues
      error?: any;

      // UX-friendly error message that can be displayed to the user
      // Always present if error occurs
      errorMessage: string;

      // Authentication error flag
      // Present if the user is not authenticated
      unauthorized?: boolean;
    }
    ```

    <br />

    ## Pagination
    Cursor-based pagination is used for list endpoints:
    ```typescript
    {
      items: T[],
      bookmark: string, // Use this for the next page
      hasMore: boolean
    }
    ```

    <br />

    # Best Practices
    1. **Rate Limiting**: Implement proper rate limit handling
    2. **Caching**: Cache responses when appropriate
    3. **Error Handling**: Handle API errors gracefully
    4. **Batch Operations**: Use batch endpoints when possible

    # Additional Resources
    - [Official Documentation](https://docs.bitbadges.io/for-developers/bitbadges-api/api)
    - [SDK Documentation](https://docs.bitbadges.io/for-developers/bitbadges-sdk/overview)
    - [Developer Portal](https://bitbadges.io/developer)
    - [GitHub SDK Repository](https://github.com/bitbadges/bitbadgesjs)
    - [Quickstarter Repository](https://github.com/bitbadges/bitbadges-quickstart)

    # Support
    - [Contact Page](https://bitbadges.io/contact)
  version: '0.1'
  license:
    name: MIT
    url: https://github.com/bitbadges/bitbadgesjs/blob/main/LICENSE
  termsOfService: https://bitbadges.io/policies
servers:
  - url: 'https://api.bitbadges.io/api/v0'
    description: Production API Server
  - url: 'https://api.bitbadges.io/testnet/api/v0'
    description: Testnet API Server
security:
  - apiKey: []
tags:
  - name: Accounts
    description: Endpoints for managing user accounts and profiles
  - name: Badges
    description: Endpoints for badge and collection operations
  - name: Claims
    description: Endpoints for managing claims
  - name: Address Lists
    description: Endpoints for managing address lists
  - name: Transactions
    description: Endpoints for submitting and simulating blockchain transactions
  - name: Applications
    description: Endpoints for managing applications (points, tiers, quests)
  - name: Plugins
    description: Endpoints for the plugins for claims
  - name: Dynamic Stores
    description: Endpoints for managing dynamic data stores
  - name: Utility Listings
    description: Endpoints for managing utility listings
  - name: Sign In with BitBadges
    description: Authentication and authorization endpoints for Sign In with BitBadges
  - name: Miscellaneous
paths:
  /users:
    post:
      operationId: getAccounts
      summary: Get Accounts
      description: |
        Retrieves accounts and accompanying details. This route is all-inclusive and uses a view-based approach to fetch specific data about the account. See more in the tutorial below.

        ```tsx
        const accountsRes = await BitBadgesApi.getAccounts({
          accountsToFetch: [
            {
              //example
              address: 'bb1...',
              viewsToFetch: [
                {
                  viewType: 'badgesCollected',
                  viewId: 'badgesCollected',
                  bookmark: '',
                },
              ],
            },
          ],
        })
        const account = accountsRes.accounts[0]
        ```

        ## Authentication Details
        - **Public Data**: Available with API key only
          - Basic profile information
          - Public badge balances
          - Public activity
          - Etc

        - **Private Data** (requires user authentication):
          - Notification preferences
          - Private Attestations
          - Private activity, etc
          - Etc

        Documentation References / Tutorials:
        - **[Fetching Accounts](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/fetching-accounts)**
        - **[Managing Views](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-views)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAccountsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAccountsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getAccounts)**
      tags:
        - Accounts
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAccountsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetAccountsPayload'
  /collections:
    post:
      operationId: getCollectionsBatch
      summary: Get Collections
      tags:
        - Badges
      description: |
        Retrieves badge collections and associated details. This route is all-inclusive and uses a view-based approach to fetch specific data about collections, including metadata, balances, owners, and more.

        ```tsx
        const res = await BitBadgesApi.getCollections({
          collectionsToFetch: [
            {
              collectionId: 1n,
              metadataToFetch: {
                badgeIds: [{ start: 1n, end: 10n }],
              },
              fetchTotalAndMintBalances: true,
              viewsToFetch: [
                {
                  viewType: 'owners',
                  viewId: 'owners',
                  bookmark: '',
                },
              ],
            },
          ],
        })

        const collection = res.collections[0]
        ```

        Documentation References / Tutorials:
        - **[Fetching Collections](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/fetching-collections)**
        - **[Managing Views](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-views)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getCollections)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetCollectionsPayload'
  '/collection/{collectionId}/balance/{address}':
    get:
      operationId: getBadgeBalanceByAddress
      summary: Get Badge Balances
      description: |
        Retrieves the balance of a specific address for a collection.

        ```tsx
        const res = await BitBadgesApi.getBadgeBalanceByAddress(collectionId, address, { ...options });
        console.log(res);
        ```

        Documentation References / Tutorials:
        - **[Fetching Balances](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/fetching-balances)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBadgeBalanceByAddressPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBadgeBalanceByAddressSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getBadgeBalanceByAddress)**
    tags:
      - Badges
    parameters:
      - name: collectionId
        in: path
        description: The ID of the collection containing the badge.
        required: true
        schema:
          type: integer
      - name: address
        in: path
        description: The address for which the badge balance is to be retrieved.
        required: true
        schema:
          type: string
      - name: x-api-key
        in: header
        description: BitBadges API Key for authentication
        required: true
        schema:
          type: string
      - in: query
        name: payload
        style: form
        explode: true
        schema:
          $ref: '#/components/schemas/iGetBadgeBalanceByAddressPayload'
    responses:
      '200':
        description: Success response
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetBadgeBalanceByAddressSuccessResponse'
      '400':
        $ref: '#/components/responses/BadRequestResponse'
      '401':
        $ref: '#/components/responses/UnauthorizedResponse'
      '500':
        $ref: '#/components/responses/InternalServerErrorResponse'
    security:
      - apiKey: []
  /status:
    post:
      operationId: getStatus
      summary: Get Status
      description: |
        Gets the current status details about the blockchain / indexer (gas, block height, etc).
        ```tsx
        const res = await BitBadgesApi.getStatus();
        ```

        Documentation References / Tutorials:
        - **[BitBadges Documentation](https://docs.bitbadges.io)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetStatusPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetStatusSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getStatus)**
      tags:
        - Miscellanous
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetStatusSuccessResponse'
          description: Returns the current status of the blockchain / indexer
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetStatusPayload'
  '/search/{searchValue}':
    post:
      operationId: searchByValue
      summary: Search
      description: |
        Searches for collections, badges, accounts, applications, maps, and address lists based on the provided search value.
        This endpoint provides a unified search across multiple BitBadges resources.

        ```tsx
        const res = await BitBadgesApi.getSearchResults(searchValue, { ...options });
        ```

        Documentation References / Tutorials:
        - **[BitBadges Documentation](https://docs.bitbadges.io)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSearchPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSearchSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getSearchResults)**
      tags:
        - Miscellanous
      parameters:
        - name: searchValue
          in: path
          description: The value to search for.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetSearchPayload'
  '/collection/{collectionId}/{badgeId}/owners':
    post:
      operationId: getOwnersForBadge
      summary: Get Badge Owners
      tags:
        - Badges
      description: |
        Retrieves the owners in a paginated format for a specific badge in a collection.
        Returns a list of addresses and their corresponding balances for the specified badge ID.

        ```tsx
        const res = await BitBadgesApi.getOwnersForBadge(
          collectionId,
          badgeId,
          {
            bookmark: '...'
          }
        );
        ```

        Documentation References / Tutorials:
        - **[Fetching Balances](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/fetching-balances)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetOwnersForBadgePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetOwnersForBadgeSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getOwnersForBadge)**
      parameters:
        - name: collectionId
          in: path
          description: The numeric collection ID.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The numeric badge ID to retrieve owners for.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetOwnersForBadgeSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetOwnersForBadgePayload'
  '/collection/{collectionId}/{badgeId}/activity':
    post:
      operationId: getBadgeActivity
      summary: Get Badge Activity
      description: |
        Retrieves the activity in a paginated format for a specific badge in a collection.

        ```tsx
        const res = await BitBadgesApi.getBadgeActivity(
          collectionId,
          badgeId,
          {
            bookmark: '...'
          }
        );
        ```

        Documentation References / Tutorials:
        - **[BitBadges Documentation](https://docs.bitbadges.io)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBadgeActivityPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBadgeActivitySuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getBadgeActivity)**
      tags:
        - Badges
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The ID of the badge for which activity is to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetBadgeActivityPayload'
  '/collection/{collectionId}/refresh':
    post:
      operationId: refreshMetadata
      summary: Refresh Metadata
      tags:
        - Badges
      description: |
        Triggers a metadata refresh for a specific collection. BitBadges API uses a refresh queue system for fetching anything off-chain.
        This will refetch any details for the collection (such as metadata, balances if applicable, approval details, etc).

        Note it will reject if recently refreshed to prevent abuse.

        ```tsx
        const res = await BitBadgesApi.refreshMetadata(collectionId, { ...options });
        ```

        Documentation References / Tutorials:
        - **[BitBadges Documentation](https://docs.bitbadges.io)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRefreshMetadataPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRefreshMetadataSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#refreshMetadata)**
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection to trigger metadata refresh.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iRefreshMetadataPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshMetadataSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: true
  '/claims/complete/{claimId}/{address}':
    post:
      operationId: completeClaim
      summary: Complete Claim
      tags:
        - Claims
      description: |
        Completes a claim for a specific address. This triggers a complete claim request to be sent to the queue.
        Note, this route returning a success code does not mean the claim has been completed. You will need to
        fetch its status via the attempt ID.

        If you want to simulate the claim first, you can use the simulate claim endpoint.

        _expectedVersion is required and must match the version of the claim. If you want to override this check,
        specify -1.

        The rest of the body should look like:
        ```typescript
        {
          _expectedVersion: 1,
          [pluginInstanceId1]: { ..bodyForPluginInstanceId1 },
          [pluginInstanceId2]: { ..bodyForPluginInstanceId2 },
        }
        ```

        ```tsx
        const res = await BitBadgesApi.completeClaim(claimId, address, { _expectedVersion: 1, ...body });
        console.log(res.claimAttemptId);

        //Sleep 2 seconds

        const res = await BitBadgesApi.getClaimAttemptStatus(res.claimAttemptId);
        console.log(res) // { success: true }
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCompleteClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCompleteClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#completeClaim)**
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: The address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCompleteClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCompleteClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  '/claims/simulate/{claimId}/{address}':
    post:
      operationId: simulateClaim
      summary: Simulate Claim
      tags:
        - Claims
      description: |-
        Simulates a claim for a user. This will check if the claim is valid and that all criteria is satisfied. This returns a fake ID for compatibility with certain integrations.
        A successful response means simulation passed. This is instant and does not use the queue.

        Note: There may be cases where the simulation passes but the claim fails. This may happen if state changes
        between the simulation and the claim. It is always best practice to simulate first, but do not rely on the simulation
        response for the final result.

        ```tsx
        const res = await BitBadgesApi.simulateClaim(claimId, address, { ...body });
        ```

        _expectedVersion is required and must match the version of the claim. If you want to override this check,
        specify -1.

        The rest of the body should look like:
        ```typescript
        {
          _expectedVersion: 1,
          _specificInstanceIds: [pluginInstanceId1, pluginInstanceId2], //Optional: simulate only specific instances
          [pluginInstanceId1]: { ..bodyForPluginInstanceId1 },
          [pluginInstanceId2]: { ..bodyForPluginInstanceId2 },
        }
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSimulateClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSimulateClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#simulateClaim)**
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: The address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSimulateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  '/claims/reserved/{claimId}/{address}':
    post:
      operationId: getReservedCodes
      summary: Get Reserved Claim Codes
      tags:
        - Claims
      description: |-
        Retrieves the reserved codes for a claim.

        For on-chain claims / approvals, we use a code reservation system where the claim code is to be used in the eventual blockchain transaction.
        This is used to bridge the gap between the off-chain claim and on-chain approval / transfer.

        ```tsx
        const res = await BitBadgesApi.getReservedCodes(claimId, address);
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetReservedClaimCodesPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetReservedClaimCodesSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getReservedCodes)**
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: The address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetReservedClaimCodesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetReservedClaimCodesPayload'
  '/claims/status/{claimAttemptId}':
    post:
      operationId: getClaimAttemptStatus
      tags:
        - Claims
      summary: Get Claim Attempt Status
      description: |-
        Retrieves the status of a claim attempt by the ID received when submitting.

        ```tsx
        const res = await BitBadgesApi.getClaimAttemptStatus(claimAttemptId);
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptStatusPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptStatusSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getClaimAttemptStatus)**
      parameters:
        - name: claimAttemptId
          in: path
          description: The transaction ID of the claim attempt.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAttemptStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetClaimAttemptStatusPayload'
  /user/updateAccount:
    post:
      operationId: updateAccountInfo
      summary: Update Profile
      tags:
        - Accounts
      description: |-
        Updates the profile/account information for a user. Only the provided fields will be updated.

        This is what is used in the account settings tab.

        ```tsx
        const res = await BitBadgesApi.updateAccountInfo(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAccountInfoPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAccountInfoSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateAccountInfo)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateAccountInfoPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAccountInfoSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      x-internal: true
  /browse:
    post:
      operationId: GetBrowse
      summary: Get Browse Collections
      tags:
        - Miscellanous
      description: |-
        Gets results for the Explore page.

        ```tsx
        const res = await BitBadgesApi.getBrowse(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBrowsePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBrowseSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getBrowse)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBrowseSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetBrowsePayload'
  /broadcast:
    post:
      operationId: broadcastTx
      tags:
        - Transactions
      summary: Broadcast Transaction
      description: |-
        Broadcasts a transaction to the blockchain. This will broadcast the transaction to the blockchain
        via the BitBadges blockchain node.

        ```tsx
        const res = await BitBadgesApi.broadcastTx(...);
        ```

        Documentation References / Tutorials:
        - **[Create, Generate, and Sign Txs](https://docs.bitbadges.io/for-developers/create-and-broadcast-txs)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/types/iBroadcastTxPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iBroadcastTxSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#broadcastTx)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/iBroadcastTxPayload'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBroadcastTxSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /simulate:
    post:
      operationId: simulateTx
      summary: Simulate Transaction
      description: |-
        Simulates a transaction on the blockchain. This will simulate the transaction on the blockchain
        via the BitBadges blockchain node.

        ```tsx
        const res = await BitBadgesApi.simulateTx(...);
        ```

        Documentation References / Tutorials:
        - **[Create, Generate, and Sign Txs](https://docs.bitbadges.io/for-developers/create-and-broadcast-txs)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/types/iSimulateTxPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSimulateTxSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#simulateTx)**
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/iSimulateTxPayload'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateTxSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /addressLists:
    put:
      operationId: updateAddressLists
      tags:
        - Address Lists
      summary: Update Address Lists
      description: |-
        Updates address lists for the user.

        ```tsx
        const res = await BitBadgesApi.updateAddressLists(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateAddressLists)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateAddressListsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
    post:
      operationId: createAddressLists
      summary: Creates Address Lists
      tags:
        - Address Lists
      description: |-
        Creates address lists stored by BitBadges centralized servers.

        ```tsx
        const res = await BitBadgesApi.createAddressLists(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateAddressLists)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateAddressListsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
    delete:
      operationId: deleteAddressLists
      summary: Delete Address Lists
      tags:
        - Address Lists
      description: |-
        Deletes address lists. Must be created off-chain.

        ```tsx
        const res = await BitBadgesApi.deleteAddressLists(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteAddressListsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteAddressListsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteAddressLists)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteAddressListsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
  /addressLists/fetch:
    post:
      operationId: getAddressLists
      summary: Get Address Lists
      tags:
        - Address Lists
      description: |-
        Gets address lists. Can be on-chain or off-chain. This uses an all-in-one approach with views and paginations
        to fetch details about the list all in one place.

        ```tsx
        const listsRes = await BitBadgesApi.getAddressLists([{
            //example
            listId: "...",
            viewsToFetch: [{
                viewType: 'listActivity',
                viewId: 'listActivity',
                bookmark: ''
            }]
        }])

        const list = listsRes[0];
        ```

        Documentation References / Tutorials:
        - **[Fetching Lists](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/fetching-lists)**
        - **[Managing Views](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-views)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getAddressLists)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetAddressListsPayload'
  /siwbbRequest/rotate:
    post:
      operationId: rotateSIWBBRequest
      summary: Rotate SIWBB Request
      tags:
        - Sign In with BitBadges
      description: |-
        Rotates a Sign In with BitBadges request. This is typically used to rotate a QR code to a new value.

        ```tsx
        const res = await BitBadgesApi.rotateSIWBBRequest(...);
        ```

        Documentation References / Tutorials:
        - **[Sign In with BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRotateSIWBBRequestPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRotateSIWBBRequestSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#rotateSIWBBRequest)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iRotateSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRotateSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /siwbbRequest:
    delete:
      operationId: deleteSIWBBRequest
      summary: Delete SIWBB Request
      tags:
        - Sign In with BitBadges
      description: |-
        Deletes an authentication code from the user's account.

        ```tsx
        const res = await BitBadgesApi.deleteSIWBBRequest(...);
        ```

        Documentation References / Tutorials:
        - **[Sign In with BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteSIWBBRequestPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteSIWBBRequestSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteSIWBBRequest)**
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    post:
      operationId: createSIWBBRequest
      summary: Create SIWBB Request
      tags:
        - Sign In with BitBadges
      description: |-
        Creates an authentication code. This is used for the Sign In wtih BitBadges flow.

        ```tsx
        const res = await BitBadgesApi.createSIWBBRequest(...);
        ```

        Documentation References / Tutorials:
        - **[Sign In with BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateSIWBBRequestPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateSIWBBRequestSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createSIWBBRequest)**
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /developerApps/siwbbRequests:
    post:
      operationId: getSIWBBRequestsForDeveloperApp
      summary: Get SIWBB Requests For Developer App
      tags:
        - Sign In with BitBadges
      description: |-
        Gets all saved docs for the Sign In with BitBadges flow for a specific app. This is useful, for example,
        if you are authenticating in-person and want to pre-fetch all authentication details
        to avoid doing it at verification time.

        This will return the actual authentication details, not just the codes. You will still have to exchange
        the code for the access token / confirmations.

        ```tsx
        const res = await BitBadgesApi.getSIWBBRequestsForDeveloperApp(...);
        ```

        Documentation References / Tutorials:
        - **[Sign In with BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSIWBBRequestsForDeveloperAppPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSIWBBRequestsForDeveloperAppSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getSIWBBRequestsForDeveloperApp)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSIWBBRequestsForDeveloperAppSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetSIWBBRequestsForDeveloperAppPayload'
  /siwbbRequest/verify:
    post:
      operationId: verifySIWBBRequest
      summary: Verify SIWBB Request
      tags:
        - Sign In with BitBadges
        - API Authentication
      description: |-
        A generic route for verifying sign-in requests. This is just a helper route
        that will handle verification + checking asset ownership requirements for you.
        Note that you can also implement this yourself or use the getAndVerifySIWBBRequest route.

        ```tsx
        const res = await BitBadgesApi.verifySIWBBRequest(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenericBlockinVerifyPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenericBlockinVerifySuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#verifySIWBB**Request)

        Documentation References / Tutorials:
        - **[Sign In with BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenericBlockinVerifySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGenericBlockinVerifyPayload'
  /verifyOwnershipRequirements:
    post:
      operationId: verifyOwnershipRequirements
      summary: Verify Ownership Requirements
      tags:
        - Badges
      description: |-
        A generic route for verifying a custom set of asset ownership requirements. This supports badges, address lists, and Ethereum / Polygon NFTs.

        ```tsx
        const res = await BitBadgesApi.verifyOwnershipRequirements(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenericVerifyAssetsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenericVerifyAssetsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#verifyOwnershipRequi**rements)

        Documentation References / Tutorials:
        - **[Sign In with BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenericVerifyAssetsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGenericVerifyAssetsPayload'
  /claimAlerts/send:
    post:
      operationId: sendClaimAlert
      summary: Sends Claim Alert
      tags:
        - Claim Alerts
      description: |-
        Sends claim alert notifications out. Claim alerts are in-app notifications to alert a user.

        ```tsx
        const res = await BitBadgesApi.sendClaimAlert(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSendClaimAlertsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSendClaimAlertsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#sendClaimAlert)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSendClaimAlertsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSendClaimAlertsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /claimAlerts:
    post:
      operationId: getClaimAlerts
      summary: Get Claim Alerts
      tags:
        - Claim Alerts
      description: |-
        Gets claim alerts for a collection. Must be the manager of the collection to get alerts.

        ```tsx
        const res = await BitBadgesApi.getClaimAlerts(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAlertsForCollectionPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAlertsForCollectionSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getClaimAlerts)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAlertsForCollectionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userSignedIn: []
          userIsManager: []
      x-internal: true
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetClaimAlertsForCollectionPayload'
  '/collection/{collectionId}/refreshStatus':
    post:
      operationId: getRefreshStatus
      summary: Get Refresh Status
      tags:
        - Badges
      description: |-
        Gets the refresh status for a collection. Used to track if any errors occur during a refresh, or if it is in the queue or not.

        ```tsx
        const res = await BitBadgesApi.getRefreshStatus(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetRefreshStatusPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetRefreshStatusSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getRefreshStatus)**
      parameters:
        - name: collectionId
          in: path
          description: The collection ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userIsManager: []
  /maps:
    post:
      operationId: getMaps
      summary: Get Maps
      tags:
        - Maps and Protocols
      description: |-
        Gets map data. Maps are created and stored on-chain. They are key-value objects which can have certain properties
        like restricting who sets which values, expected formatting, and more.

        For getting actual values, use the getMapValues endpoint.

        ```tsx
        const res = await BitBadgesApi.getMaps(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getMaps)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: true
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetMapsPayload'
  /mapValues:
    post:
      operationId: getMapValues
      summary: Get Map Values
      tags:
        - Maps and Protocols
      description: |-
        Gets map values for a collection.

        ```tsx
        const res = await BitBadgesApi.getMapValues(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapValuesPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapValuesSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getMapValues)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetMapValuesPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapValuesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /attestations:
    get:
      operationId: getAttestation
      summary: Get Attestations
      tags:
        - Attestations
      description: |-
        Gets verifiable attestation. Attestations are private-by-default credentials that can be used to verify
        anything. If you are a provider, you can request attestations via the Sign In with BitBadges flow, claim flow,
        or directly.

        Attestations are private by default but can be showcased on profiles or selectively revealed to others.

        ```tsx
        const res = await BitBadgesApi.getAttestations(...);
        ```

        Documentation References / Tutorials:
        - **[Attestations](https://docs.bitbadges.io/for-developers/core-concepts/verifiable-attestations)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttestationsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttestationsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getAttestations)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAttestationsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetAttestationsPayload'
    post:
      operationId: createAttestation
      tags:
        - Attestations
      summary: Create Attestation
      description: |-
        Creates an attestation.

        ```tsx
        const res = await BitBadgesApi.createAttestation(...);
        ```

        Documentation References / Tutorials:
        - **[Attestations](https://docs.bitbadges.io/for-developers/core-concepts/verifiable-attestations)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateAttestationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateAttestationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createAttestation)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateAttestationPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateAttestationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userIsOwner: []
    put:
      operationId: updateAttestation
      tags:
        - Attestations
      summary: Update Attestation
      description: |-
        Updates an attestation.

        ```tsx
        const res = await BitBadgesApi.updateAttestation(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAttestationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAttestationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateAttestation)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateAttestationPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAttestationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userIsOwner: []
    delete:
      tags:
        - Attestations
      operationId: deleteAttestation
      summary: Delete Attestation
      description: |-
        Deletes an attestation.

        ```tsx
        const res = await BitBadgesApi.deleteAttestation(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteAttestationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteAttestationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteAttestation)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteAttestationPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteAttestationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userIsOwner: []
  '/collection/{collectionId}/filter':
    post:
      tags:
        - Badges
      operationId: filterBadgesInCollection
      summary: Custom Filter Badges
      description: |-
        Filter badges in a collection.

        ```tsx
        const res = await BitBadgesApi.filterBadgesInCollection(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iFilterBadgesInCollectionPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iFilterBadgesInCollectionSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#filterBadgesInCollection)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iFilterBadgesInCollectionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: true
      parameters:
        - name: collectionId
          in: path
          schema:
            description: The collection ID to filter.
            $ref: '#/components/schemas/NumberType'
          required: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iFilterBadgesInCollectionPayload'
  /claims/search:
    post:
      operationId: searchClaims
      summary: Search Claims
      tags:
        - Claims
      description: |-
        Search through your claims you are currently managing. This is what is used in the developer portal. For
        public searches, use the main search endpoint.

        ```tsx
        const res = await BitBadgesApi.searchClaims(...);
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchClaimsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchClaimsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchClaims)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSearchClaimsPayload'
  /claims/fetch:
    post:
      operationId: getClaims
      summary: Get Claims
      tags:
        - Claims
      description: |-
        Retrieve claims by ID(s). Certain state is not made available by default for scalability reasons and must
        be requested explicitly.

        To fetch private parameters and state, you must be the manager of the claim, signed in, and request it.

        ```tsx
        const res = await BitBadgesApi.getClaims({
          claimsToFetch: [
            {
              claimId: '123',
              fetchPrivateParams: true,
              privateStatesToFetch: [instanceId1, instanceId2],
            },
          ],
        });
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimsPayloadV1)
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getClaims)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetClaimsPayloadV1'
  /claims:
    post:
      operationId: createClaim
      summary: Create Claim
      tags:
        - Claims
      description: |-
        Creates a new claim. Creating and maintaining claims are typically recommended
        to be done through the site, not the API, because they require special configuration.

        ```tsx
        const res = await BitBadgesApi.createClaim(...);
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createClaim)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    put:
      operationId: updateClaim
      summary: Update Claim
      tags:
        - Claims
      description: |-
        Updates an existing claim. Creating and maintaining claims are typically recommended
        to be done through the site, not the API, because they require special configuration.

        ```tsx
        const res = await BitBadgesApi.updateClaim(...);
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateClaim)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    delete:
      operationId: deleteClaim
      summary: Delete Claim
      tags:
        - Claims
      description: |-
        Deletes a claim. Creating and maintaining claims are typically recommended
        to be done through the site, not the API, because they require special configuration.
        Claim deletion is a soft delete (i.e. the claim will become inactive and not displayed but can be reinstated with same ID later on).

        ```tsx
        const res = await BitBadgesApi.deleteClaim(...);
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteClaim)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /siwbbRequest/appleWalletPass:
    post:
      operationId: generateAppleWalletPass
      summary: Generate Apple Wallet Pass
      tags:
        - Sign In with BitBadges
      description: |
        Generate an Apple Wallet pass based on the provided request body.
        ```tsx
          <a
              onClick={async () => {
                const res = await BitBadgesApi.generateAppleWalletPass({
                  ...
                });
                const pass = Buffer.from(res.data);

                const blob = new Blob([pass], { type: 'application/vnd.apple.pkpass' });
                const url = window.URL.createObjectURL(blob);
                if (url) {
                  const link = document.createElement('a');
                  link.href = url;
                  link.download = 'bitbadges.pkpass';
                  link.click();
                }
              }}>
              <img src="/images/add_to_apple_wallet.svg" style={{ width: 150 }} />
            </a>
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenerateAppleWalletPassPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenerateAppleWalletPassSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#generateAppleWalletPass)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenerateAppleWalletPassSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGenerateAppleWalletPassPayload'
  /siwbbRequest/googleWalletPass:
    post:
      operationId: generateGoogleWalletPass
      summary: Generate Google Wallet Pass
      tags:
        - Sign In with BitBadges
      description: |
        Generate a Google Wallet pass based on the provided request body.

        ```tsx
        const res = await BitBadgesApi.generateGoogleWalletPass(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenerateGoogleWalletPassPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenerateGoogleWalletPassSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#generateGoogleWalletPass)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenerateGoogleWalletSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGenerateGoogleWalletPayload'
  /siwbb/token:
    post:
      operationId: exchangeSIWBBAuthorizationCode
      summary: Exchange SIWBB Code
      tags:
        - Sign In with BitBadges
      description: |-
        Exchange either a refresh token or OAuth authorization code for an access token.

        IMPORTANT: Keep your client secret safe and secure.

        Documentation References / Tutorials:
        - **[API Authorization](https://docs.bitbadges.io/for-developers/sign-in-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iExchangeSIWBBAuthorizationCodePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iExchangeSIWBBAuthorizationCodeSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#exchangeSIWBBAuthorizationCode)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iExchangeSIWBBAuthorizationCodeSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iExchangeSIWBBAuthorizationCodePayload'
  /siwbb/token/revoke:
    post:
      operationId: revokeOauthAuthorization
      summary: Revoke Authorization
      tags:
        - Sign In with BitBadges
      description: |-
        Revokes the authorization. The token can either be an access token or a refresh token.
        This endpoint revokes all tokens associated with the procided token (thus revoking the entire authorization).
        This can be called by the user or the authorized application.

        ```tsx
        await BitBadgesApi.revokeOauthAuthorization({ token });
        ```


        Documentation References / Tutorials:
        - **[API Authorization](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/authentication)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iOauthRevokePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iOauthRevokeSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#revokeOauthAuthorization)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iOauthRevokePayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iOauthRevokeSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userSignedIn: []
  /codes:
    post:
      operationId: generateCode
      summary: Generate Code
      description: |
        Generates a unique code based on a seed and a zero-based index. This is used for the Codes plugin with claims.

        ```typescript
        const response = await fetch('https://api.bitbadges.io/api/codes', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            seedCode: 'mysecretcode',
            idx: 5
          }),
        });
        const data = await response.json();
        console.log(data.code); // The generated code
        ```

        Documentation References / Tutorials:
        - **[Codes Plugin](https://docs.bitbadges.io/for-developers/claim-builder/universal-approach-claim-codes)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenerateCodePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenerateCodeSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#generateCode)**
      tags:
        - Claims
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: The generated code
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - seedCode
                - idx
              properties:
                seedCode:
                  type: string
                  description: The seed used to generate the code
                idx:
                  type: integer
                  minimum: 0
                  description: A non-negative integer index
  /claims/{claimId}/attempts:
    get:
      operationId: getClaimAttempts
      summary: Get Claim Attempts
      tags:
        - Claims
      description: |-
        Retrieves the attempts for a claim in a paginated format. If you are the manager and authenticated, you
        can also request failed attempts and view the errors.

        ```tsx
        const res = await BitBadgesApi.getClaimAttempts({
          claimId: "...",
          bookmark: "",
          includeErrors: true
        });
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getClaimAttempts)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAttemptsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          name: payload
          required: true
          schema:
            $ref: '#/components/schemas/iGetClaimAttemptsPayload'
          style: form
          explode: true
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /claims/gatedContent/{claimId}:
    post:
      operationId: getGatedContentForClaim
      summary: Get Gated Content for Claim
      tags:
        - Claims
      description: |-
        If claims implement the rewards tab with in-site delivery, there may be gated URLs or content that is only
        accessible to users who have completed the claim. This endpoint allows you to retrieve the gated content for a claim
        if you are authenticated and meet the claim's gated content requirements.

        ```typescript
        const res = await BitBadgesApi.getGatedContentForClaim(claimId);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetGatedContentForClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetGatedContentForClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getGatedContentForClaim)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetGatedContentForClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: claimId
          in: path
          description: The ID of the claim
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetGatedContentForClaimPayload'
  /attestations/verify:
    post:
      operationId: verifyAttestation
      summary: Verify Attestation
      tags:
        - Attestations
      description: |
        Verifies the attestation proofs well-formedness and signatures.

        This is a helper route for the verifyAttestation SDK function to outsource the verification logic
        to the server. Only supports BitBadges native schemes (bbs, standard).

        NOTE: This is a helper route but should not be used as the final verification logic. This will check
        cryptographic signatures, but you are responsible for checking the attestation's content, issuer, or
        anything else.

        ```tsx
        const res = await BitBadgesApi.verifyAttestation(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iVerifyAttestationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iVerifyAttestationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#verifyAttestation)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iVerifyAttestationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iVerifyAttestationPayload'
      security:
        - apiKey: []
  /storeActions/{actionName}/{dynamicDataId}/{dynamicDataSecret}:
    post:
      operationId: performStoreActionSingle
      summary: Perform Single Store Action (URL Auth)
      tags:
        - Dynamic Stores
      description: |-
        Performs a single action on a dynamic store using URL authentication.

        ```tsx
        await BitBadgesApi.performStoreAction(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#performStoreAction)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iPerformStoreActionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: actionName
          in: path
          description: The name of the action to perform
          required: true
          schema:
            type: string
        - name: dynamicDataId
          in: path
          description: The ID of the dynamic store
          required: true
          schema:
            type: string
        - name: dynamicDataSecret
          in: path
          description: The secret key for the dynamic store
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iPerformStoreActionPayload'
  /storeActions/single:
    post:
      operationId: performStoreActionSingleWithBodyAuth
      summary: Perform Single Store Action (Body Auth)
      tags:
        - Dynamic Stores
      description: |-
        Performs a single action on a dynamic store using body authentication.

        ```tsx
        await BitBadgesApi.performStoreAction(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#performStoreAction)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iPerformStoreActionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iPerformStoreActionSingleWithBodyAuthPayload'
  /storeActions/batch/{dynamicDataId}/{dynamicDataSecret}:
    post:
      operationId: performStoreActionBatch
      summary: Perform Batch Store Actions (URL Auth)
      tags:
        - Dynamic Stores
      description: |-
        Performs multiple actions on a dynamic store using URL authentication.


        ```tsx
        await BitBadgesApi.performBatchStoreAction(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#performStoreAction)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBatchStoreActionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: dynamicDataId
          in: path
          description: The ID of the dynamic store
          required: true
          schema:
            type: string
        - name: dynamicDataSecret
          in: path
          description: The secret key for the dynamic store
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iBatchStoreActionPayload'
  /storeActions/batch:
    post:
      operationId: performStoreActionBatchWithBodyAuth
      summary: Perform Batch Store Actions (Body Auth)
      tags:
        - Dynamic Stores
      description: |-
        Performs multiple actions on a dynamic store using body authentication.


        ```tsx
        await BitBadgesApi.performBatchStoreAction(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#performStoreAction)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBatchStoreActionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iPerformStoreActionBatchWithBodyAuthPayload'
  /dynamicStores/fetch:
    post:
      operationId: getDynamicDataStores
      summary: Fetch Dynamic Data Stores
      tags:
        - Dynamic Stores
      description: |-
        Fetches dynamic stores by ID(s).

        ```tsx
        await BitBadgesApi.getDynamicDataStores(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoresPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoresSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getDynamicDataStores)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataStoresSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetDynamicDataStoresPayload'
  /dynamicStores/search:
    post:
      operationId: searchDynamicDataStores
      summary: Search Dynamic Data Stores
      tags:
        - Dynamic Stores
      description: |-
        Searches for dynamic stores based on the provided criteria.


        ```tsx
        await BitBadgesApi.searchDynamicDataStores(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchDynamicDataStoresPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchDynamicDataStoresSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchDynamicDataStores)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchDynamicDataStoresSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSearchDynamicDataStoresPayload'
  /dynamicStores/activity:
    post:
      operationId: getDynamicDataActivity
      summary: Get Dynamic Data Activity
      tags:
        - Dynamic Stores
      description: |-
        Fetches activity history for dynamic stores.


        ```tsx
        await BitBadgesApi.getDynamicDataActivity(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataActivityPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataActivitySuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getDynamicDataActivity)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetDynamicDataActivityPayload'
  /applications/search:
    post:
      operationId: searchApplications
      summary: Search Applications
      tags:
        - Applications
      description: |-
        Searches for applications based on the provided criteria.
        This is to search user-created applications. For a public search, use
        the search endpoint.


        ```tsx
        await BitBadgesApi.searchApplications(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchApplicationsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchApplicationsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchApplications)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchApplicationsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSearchApplicationsPayload'
  /applications/fetch:
    post:
      operationId: getApplications
      summary: Get Applications
      tags:
        - Applications
      description: |-
        Fetches applications based on the provided criteria.

        ```tsx
        await BitBadgesApi.getApplications(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetApplicationsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetApplicationsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getApplications)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetApplicationsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetApplicationsPayload'
  /applications:
    post:
      operationId: createApplication
      summary: Create Application
      tags:
        - Applications
      description: |-
        Creates an application.

        ```tsx
        await BitBadgesApi.createApplication(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateApplicationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateApplicationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createApplication)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateApplicationPayload'
    put:
      operationId: updateApplication
      summary: Update Application
      tags:
        - Applications
      description: |-
        Updates an application.

        ```tsx
        await BitBadgesApi.updateApplication(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateApplicationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateApplicationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateApplication)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateApplicationPayload'
    delete:
      operationId: deleteApplication
      summary: Delete Application
      tags:
        - Applications
      description: |-
        Deletes an application.

        ```tsx
        await BitBadgesApi.deleteApplication(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteApplicationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteApplicationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteApplication)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteApplicationPayload'
  /applications/points:
    post:
      operationId: calculatePoints
      summary: Calculate Points
      tags:
        - Applications
      description: |-
        Calculates points for an application, page, and user.

        Note: We use a heavy caching system, so you may not see the results immediately and may be rejected if
        recently calculated.

        ```tsx
        await BitBadgesApi.calculatePoints(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCalculatePointsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCalculatePointsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#calculatePoints)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCalculatePointsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCalculatePointsPayload'
  /applications/points/activity:
    post:
      operationId: getPointsActivity
      summary: Get Points Activity
      tags:
        - Applications
      description: |-
        Fetches points activity for an application.

        ```tsx
        await BitBadgesApi.getPointsActivity(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPointsActivityPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPointsActivitySuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getPointsActivity)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPointsActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetPointsActivityPayload'
  /plugins/fetch:
    post:
      operationId: getPlugins
      summary: Get Plugins
      tags:
        - Plugins
      description: |-
        Fetches plugins based on the provided criteria.

        ```tsx
        await BitBadgesApi.getPlugins(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPluginsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPluginSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getPlugins)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPluginSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetPluginsPayload'
  /plugins/search:
    post:
      operationId: searchPlugins
      summary: Search Plugins
      tags:
        - Plugins
      description: |-
        Searches for plugins based on the provided criteria.

        ```tsx
        await BitBadgesApi.searchPlugins(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchPluginsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchPluginsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchPlugins)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchPluginsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSearchPluginsPayload'
  /utilityListings/fetch:
    post:
      operationId: getUtilityListings
      summary: Get Utility Listings
      tags:
        - Utility Listings
      description: |-
        Fetches utility listings based on the provided criteria.

        Requires authentication for private listings.

        ```tsx
        await BitBadgesApi.getUtilityListings(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetUtilityListingsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetUtilityListingsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getUtilityListings)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetUtilityListingsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetUtilityListingsPayload'
  /utilityListings/search:
    post:
      operationId: searchUtilityListings
      summary: Search Utility Listings
      tags:
        - Utility Listings
      description: |-
        Searches for utility listings based on the provided criteria. Note this is for
        searching utility listings created by the signed in user.

        ```tsx
          await BitBadgesApi.searchUtilityListings(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchUtilityListingsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchUtilityListingsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchUtilityListings)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchUtilityListingsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSearchUtilityListingsPayload'
  /utilityListings:
    post:
      operationId: createUtilityListing
      summary: Create Utility Listing
      tags:
        - Utility Listings
      description: |-
        Creates a new utility listing. This is also available in the developer portal.

        ```tsx
        await BitBadgesApi.createUtilityListing(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateUtilityListingPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateUtilityListingSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createUtilityListing)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateUtilityListingSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateUtilityListingPayload'
    put:
      operationId: updateUtilityListing
      summary: Update Utility Listing
      tags:
        - Utility Listings
      description: |-
        Updates an existing utility listing. This is also available in the developer portal.

        ```tsx
        await BitBadgesApi.updateUtilityListing(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateUtilityListingPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateUtilityListingSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateUtilityListing)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateUtilityListingSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateUtilityListingPayload'

    delete:
      operationId: deleteUtilityListing
      summary: Delete Utility Listing
      tags:
        - Utility Listings
      description: |-
        Deletes a utility listing. This is also available in the developer portal.

        ```tsx
        await BitBadgesApi.deleteUtilityListing(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteUtilityListingPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteUtilityListingSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteUtilityListing)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteUtilityListingSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteUtilityListingPayload'
  /auth/status:
    post:
      operationId: checkSignInStatus
      summary: Check Sign In Status
      description: |
        Checks if a user is currently signed in and returns their authentication status.

        ```tsx
        const res = await BitBadgesApi.checkIfSignedIn(...);
        console.log(res.signedIn);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckSignInStatusPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckSignInStatusSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#checkIfSignedIn)**
      tags:
        - Sign In with BitBadges
      responses:
        '200':
          description: Successfully retrieved authentication status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckSignInStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCheckSignInStatusPayload'
      security:
        - userMaybeSignedIn: []
      x-internal: false
  /claims/success/{claimId}/{address}:
    get:
      operationId: checkClaimSuccess
      summary: Check Claim Success
      description: |
        Checks if a claim has been successfully completed.

        This returns a success count based on how many times the user has completed the claim.

        For on-demand claims, this will return 1 if the user has completed the claim. For indexed claims, this will return the number of times the user has completed the claim.

        Note that this will not work if the claim hides its state.

        ```tsx
        const res = await BitBadgesApi.checkClaimSuccess(claimId, address);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckClaimSuccessPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckClaimSuccessSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#checkClaimSuccess)**
      tags:
        - Claims
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckClaimSuccessSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: claimId
          in: path
          required: true
          schema:
            type: string
        - name: address
          in: path
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
components:
  responses:
    ErrorResponse:
      description: An error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestResponse:
      description: Bad Request - Invalid configuration or request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedResponse:
      description: 'Unauthorized - Does not meet authentication requirements. This can be due to an invalid API key, CORS origin, or session cookie.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
      description: Requires a BitBadges API key. This is true for all requests.
      x-type: string
    frontendOnly:
      type: apiKey
      in: header
      name: Origin
      description: Can only be called by the official BitBadges frontend. Not for developer use.
    userSignedIn:
      type: http
      scheme: cookie
      description: User must be signed in with correct scopes with a valid session and correct scopes. This can be done with OAuth 2.0 or an approved sign in.
    userMaybeSignedIn:
      type: http
      scheme: cookie
      description: 'User must be signed in with correct scopes for certain requests that fetch sensitive information, but certain requests can be made without being signed in. This can be done with OAuth 2.0 or an approved sign in.'
    userIsManager:
      type: http
      scheme: cookie
      description: User must be signed in with correct scopes and be the manager of the requested collection.
    userIsOwner:
      type: http
      scheme: cookie
      description: User must be signed in with correct scopes and must be the owner of the requested object.
