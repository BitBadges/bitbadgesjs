openapi: 3.1.0
info:
  title: BitBadges API
  description: |-
    # Introduction
    The BitBadges API is a RESTful API that enables developers to interact with the BitBadges blockchain and indexer. This API provides comprehensive access to the BitBadges ecosystem, allowing you to query and interact with digital tokens, collections, accounts, blockchain data, and more.
    For complete documentation, see the [BitBadges Documentation](https://docs.bitbadges.io/for-developers/bitbadges-api/api)
    and use along with this reference.

    Note: The API + documentation is new and may contain bugs. If you find any issues, please let us know via Discord or another contact method (https://bitbadges.io/contact).

    # Getting Started

    ## Authentication
    All API requests require an API key for authentication. You can obtain your API key from the [BitBadges Developer Portal](https://bitbadges.io/developer).

    ### API Key Authentication
    Include your API key in the `x-api-key` header:
    ```
    x-api-key: your-api-key-here
    ```

    <br />

    ## User Authentication
    Most read-only applications can function with just an API key. However, if you need to access private user data or perform actions on behalf of users, you have two options:

    ### OAuth 2.0 (Sign In with BitBadges)
    For performing actions on behalf of other users, use the standard OAuth 2.0 flow via Sign In with BitBadges.
    See the [Sign In with BitBadges documentation](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges) for details.

    You will pass the access token in the Authorization header:
    ```
    Authorization: Bearer your-access-token-here
    ```

    ### Password Self-Approve Method
    For automating actions for your own account:
    1. Set up an approved password sign in in your account settings tab on https://bitbadges.io with desired scopes (e.g. `completeClaims`)
    2. Sign in using:
    ```typescript
    const { message } = await BitBadgesApi.getSignInChallenge(...);
    const verificationRes = await BitBadgesApi.verifySignIn({
        message,
        signature: '', //Empty string
        password: '...'
    })
    ```

    Note: This method uses HTTP session cookies. Ensure your requests support credentials (e.g. axios: { withCredentials: true }).

    ### Scopes
    Note that for proper authentication, you must have the proper scopes set.

    See [https://bitbadges.io/auth/linkgen](https://bitbadges.io/auth/linkgen) for a helper URL generation tool. The scopes will be included in
    the `scope` parameter of the SIWBB URL or set in your approved sign in settings.

    Note that stuff marked as Full Access is typically reserved for the official site. If you think you may need this,
    contact us.

    ### Available Scopes

    - **Report** (`report`)
      Report users or collections.

    - **Read Profile** (`readProfile`)
      Read your private profile information. This includes your email, approved sign-in methods, connections, and other private information.

    - **Read Address Lists** (`readAddressLists`)
      Read private address lists on behalf of the user.

    - **Manage Address Lists** (`manageAddressLists`)
      Create, update, and delete address lists on behalf of the user (private or public).

    - **Manage Applications** (`manageApplications`)
      Create, update, and delete applications on behalf of the user.

    - **Manage Claims** (`manageClaims`)
      Create, update, and delete claims on behalf of the user.

    - **Manage Developer Apps** (`manageDeveloperApps`)
      Create, update, and delete developer apps on behalf of the user.

    - **Manage Dynamic Stores** (`manageDynamicStores`)
      Create, update, and delete dynamic stores on behalf of the user.

    - **Manage Utility Pages** (`manageUtilityPages`)
      Create, update, and delete utility pages on behalf of the user.

    - **Approve Sign In With BitBadges Requests** (`approveSignInWithBitBadgesRequests`)
      Sign In with BitBadges on behalf of the user.

    - **Read Authentication Codes** (`readAuthenticationCodes`)
      Read Authentication Codes on behalf of the user.

    - **Delete Authentication Codes** (`deleteAuthenticationCodes`)
      Delete Authentication Codes on behalf of the user.

    - **Send Claim Alerts** (`sendClaimAlerts`)
      Send claim alerts on behalf of the user.

    - **Read Claim Alerts** (`readClaimAlerts`)
      Read claim alerts on behalf of the user. Note that claim alerts may contain sensitive information like claim codes, attestation IDs, etc.

    - **Read Private Claim Data** (`readPrivateClaimData`)
      Read private claim data on behalf of the user (e.g. codes, passwords, private user lists, etc.).

    - **Complete Claims** (`completeClaims`)
      Complete claims on behalf of the user.

    <br />

    ## SDK Integration
    The recommended way to interact with the API is through our TypeScript/JavaScript SDK:

    ```typescript
    import { BigIntify, BitBadgesAPI } from "bitbadgesjs-sdk";

    // Initialize the API client
    const api = new BitBadgesAPI({
      convertFunction: BigIntify,
      apiKey: 'your-api-key-here'
    });

    // Example: Fetch collections
    const collections = await api.getCollections({
      collectionsToFetch: [{
        collectionId: 1n,
        metadataToFetch: {
          badgeIds: [{ start: 1n, end: 10n }]
        }
      }]
    });
    ```

    <br />

    # Tiers
    There are 3 tiers of API keys, each with different rate limits and permissions. See the pricing page for more details: https://bitbadges.io/pricing
    - Free tier
    - Premium tier
    - Enterprise tier

    Rate limit headers included in responses:
    - `X-RateLimit-Limit`: Total requests allowed per window
    - `X-RateLimit-Remaining`: Remaining requests in current window
    - `X-RateLimit-Reset`: Time until rate limit resets (UTC timestamp)

    # Response Formats

    ## Error Response

    All API errors follow a consistent format:

    ```typescript
    {
      // Serialized error object for debugging purposes
      // Advanced users can use this to debug issues
      error?: any;

      // UX-friendly error message that can be displayed to the user
      // Always present if error occurs
      errorMessage: string;

      // Authentication error flag
      // Present if the user is not authenticated
      unauthorized?: boolean;
    }
    ```

    <br />

    ## Pagination
    Cursor-based pagination is used for list endpoints:
    ```typescript
    {
      items: T[],
      bookmark: string, // Use this for the next page
      hasMore: boolean
    }
    ```

    <br />

    # Best Practices
    1. **Rate Limiting**: Implement proper rate limit handling
    2. **Caching**: Cache responses when appropriate
    3. **Error Handling**: Handle API errors gracefully
    4. **Batch Operations**: Use batch endpoints when possible

    # Additional Resources
    - [Official Documentation](https://docs.bitbadges.io/for-developers/bitbadges-api/api)
    - [SDK Documentation](https://docs.bitbadges.io/for-developers/bitbadges-sdk/overview)
    - [Developer Portal](https://bitbadges.io/developer)
    - [GitHub SDK Repository](https://github.com/bitbadges/bitbadgesjs)
    - [Quickstarter Repository](https://github.com/bitbadges/bitbadges-quickstart)

    # Support
    - [Contact Page](https://bitbadges.io/contact)
  version: '0.1'
  license:
    name: MIT
    url: https://github.com/bitbadges/bitbadgesjs/blob/main/LICENSE
  termsOfService: https://bitbadges.io/policies
servers:
  - url: 'https://api.bitbadges.io/api/v0'
    description: Production API Server
  - url: 'https://api.bitbadges.io/testnet/api/v0'
    description: Testnet API Server
security:
  - apiKey: []
tags:
  - name: Accounts
    description: Endpoints for managing user accounts and profiles
  - name: Tokens
    description: Endpoints for token and collection operations
  - name: Claims
    description: Endpoints for managing claims
  - name: Sign In with BitBadges
    description: Authentication and authorization endpoints for Sign In with BitBadges
  - name: Address Lists
    description: Endpoints for managing address lists
  - name: Transactions
    description: Endpoints for submitting and simulating blockchain transactions
  - name: Applications
    description: Endpoints for managing applications (points, tiers, quests)
  - name: Plugins
    description: Endpoints for the plugins for claims
  - name: Dynamic Stores
    description: Endpoints for managing dynamic data stores
  - name: Utility Pages
    description: Endpoints for managing utility pages
  - name: Miscellaneous
  - name: Assets
    description: Endpoints for asset pair operations, liquidity pools, and swap analytics
paths:
  /user:
    get:
      operationId: getAccount
      summary: Get Account
      description: |
        Retrieves an account by address or username.

        ```tsx
        const res = await BitBadgesApi.getAccount({ address: '...', username: '...' });
        console.log(res);
        ```

        For more specific views, you can use the other routes.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAccountPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAccountSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaccount)**

        ## Authentication Details
        - **Public Data**: Available with API key only
          - Basic profile information
          - Etc

        - **Private Data** (requires user authentication):
          - Notification preferences
          - Stored Social connections
          - Etc

        Scopes
        - `readProfile` - Required for private profile information like notification preferences, social connections, etc.

        Couple Notes:
        - **[Native Chain Algorithm](https://docs.bitbadges.io/for-developers/bitbadges-api/concepts/native-chain-algorithm)**

        Note: The `views` and corresponding fields like `tokensCollected`, `claimAlerts`, etc will be blank with this simple
        GET but are provided in the response for compatibility with the SDK. To actually fetch these views, use the POST
        batch route or the individual view routes.
      tags:
        - Accounts
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAccountSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAccountPayload'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /users:
    post:
      operationId: getAccounts
      summary: Get Accounts - Batch
      description: |
        Retrieves accounts and accompanying details. This route is all-inclusive and uses a view-based approach to fetch specific data about the account. See more in the tutorial below.

        ```tsx
        const accountsRes = await BitBadgesApi.getAccounts({
          accountsToFetch: [
            {
              //example
              address: 'bb1...',
              viewsToFetch: [
                {
                  viewType: 'tokensCollected',
                  viewId: 'tokensCollected',
                  bookmark: '',
                },
              ],
            },
          ],
        })
        const account = accountsRes.accounts[0]
        ```

        ## Authentication Details
        - **Public Data**: Available with API key only
          - Basic profile information
          - Public balances
          - Public activity
          - Etc

        - **Private Data** (requires user authentication):
          - Notification preferences
          - Private Attestations
          - Private activity, etc
          - Etc

        Scopes
        - `readProfile` - Required for private profile information like notification preferences, social connections, etc.
        - `readClaimAlerts` - Required if fetching private claim alerts
        - `readAuthenticationCodes` - Required if fetching private authentication codes

        Documentation References / Tutorials:
        - **[Managing Views](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-views)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAccountsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAccountsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaccounts)**
      tags:
        - Accounts
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAccountsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetAccountsPayload'

  /collection/{collectionId}:
    get:
      operationId: getCollection
      summary: Get Collection
      tags:
        - Tokens
      description: |-
        Gets a specific collection.

        ```tsx
        await BitBadgesApi.getCollection("123", { ... });
        ```

        SDK Links:
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollection)**

        Note: The `views` and corresponding fields like `owners`, `approvalTrackers`, etc will be blank with this simple
        GET but are provided in the response for compatibility with the SDK. To actually fetch these views, use the POST
        batch route or the individual view routes.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false

  /collection/{collectionId}/{badgeId}/metadata:
    get:
      operationId: getBadgeMetadata
      summary: Get Token Metadata
      tags:
        - Tokens
      description: |-
        Gets current metadata for a specific token in a collection.

        ```tsx
        await BitBadgesApi.getBadgeMetadata("123", "1");
        ```

        SDK Links:
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBadgeMetadataSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getbadgeMetadata)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeMetadataSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - name: badgeId
          in: path
          description: Token ID
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
  /collections:
    post:
      operationId: getCollectionsBatch
      summary: Get Collections - Batch
      tags:
        - Tokens
      description: |
        Retrieves collections and associated details. This route is all-inclusive and uses a view-based approach to fetch specific data about collections, including metadata, balances, owners, and more.

        ```tsx
        const res = await BitBadgesApi.getCollections({
          collectionsToFetch: [
            {
              collectionId: 1n,
              metadataToFetch: {
                badgeIds: [{ start: 1n, end: 10n }],
              },
              fetchTotalAndMintBalances: true,
              viewsToFetch: [
                {
                  viewType: 'owners',
                  viewId: 'owners',
                  bookmark: '',
                },
              ],
            },
          ],
        })

        const collection = res.collections[0]
        ```

        Scopes:
        - `readPrivateClaimData` - Required if fetching private claim data (must also be the manager)

        Documentation References / Tutorials:
        - **[Managing Views](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-views)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollections)**

        Note: This route has lots of legacy features that are planned to be deprecated. For any views, we recommend
        using the other GET routes.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetCollectionsPayload'
  '/collection/{collectionId}/balance/{address}/{badgeId}':
    get:
      operationId: getBalanceByAddressSpecificToken
      summary: Get Balance By Address - Specific Token
      description: |
        Retrieves the balance of a specific token for a specific address at the current time.

        For more advanced queries returning the whole balance document, please use the POST `/collection/{collectionId}/balance/{address}` endpoint.

        ```tsx
        const res = await BitBadgesApi.getBalanceByAddressSpecificToken(collectionId, address, badgeId);
        console.log(res);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBalanceByAddressSpecificTokenPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBalanceByAddressSpecificTokenSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getbalancebyaddressspecificbadge)**

        Alternative Flow: Note that you can also set up a claim that checks token ownership and check the success per user of that claim as well
      tags:
        - Tokens
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection.
          required: true
          schema:
            type: integer
        - name: address
          in: path
          description: The address for which the balance is to be retrieved. Can be "Total" for the circulating supply.
          required: true
          schema:
            type: string
        - name: badgeId
          in: path
          description: The ID for which the balance is to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBalanceByAddressSpecificTokenSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  '/collection/{collectionId}/balance/{address}':
    get:
      operationId: getBalanceByAddress
      tags:
        - Tokens
      summary: Get Balances By Address
      description: |
        Retrieves the balances of a specific address for a collection.

        ```tsx
        const res = await BitBadgesApi.getBalanceByAddress(collectionId, address, { ...options });
        console.log(res);
        ```


        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBalanceByAddressPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBalanceByAddressSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getbalancebyaddress)**

        Scopes:
        - `readPrivateClaimData` - Required if fetching private claim data (user-level approvals)

        Alternative Flow: Note that you can also set up a claim that checks token ownership and check the success per user of that claim as well
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection.
          required: true
          schema:
            type: integer
        - name: address
          in: path
          description: The address for which the balance is to be retrieved. Can be "Total" for the circulating supply.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetBalanceByAddressPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBalanceByAddressSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /claim/{claimId}:
    get:
      operationId: getClaim
      summary: Get Claim
      tags:
        - Claims
      description: |-
        Gets a claim by specific ID.

        ```tsx
        await BitBadgesApi.getClaim("claim123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaim)**

        Scopes:
          - `readPrivateClaimData` - Required if fetching private claim data (also must be manager of claim)
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: claimId
          in: path
          description: Claim ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetClaimPayload'
      security:
        - apiKey: []
      x-internal: false
  /claims/success/{claimId}/{address}:
    get:
      operationId: checkClaimSuccess
      summary: Check Claim Successes By User
      description: |
        Checks if a claim has been successfully completed.

        This returns a success count based on how many times the user has completed the claim.

        For on-demand claims, this will return 1 if the user has completed the claim. For indexed claims, this will return the number of times the user has completed the claim.

        Note that this will not work if the claim hides its state.

        ```tsx
        const res = await BitBadgesApi.checkClaimSuccess(claimId, address);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckClaimSuccessPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckClaimSuccessSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#checkclaimsuccess)**
      tags:
        - Claims
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckClaimSuccessSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: claimId
          in: path
          required: true
          schema:
            type: string
        - name: address
          in: path
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
  /developerApp/{clientId}:
    get:
      operationId: getDeveloperApp
      summary: Get OAuth App
      tags:
        - Sign In with BitBadges
      description: |-
        Gets a developer app by specific ID.

        ```tsx
        await BitBadgesApi.getDeveloperApp("clientId123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDeveloperAppPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDeveloperAppSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdeveloperapp)**

        Scopes:
          - `manageDeveloperApps` - Required to return the client secret (plus being owner). Else, it will just be the app metadata
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDeveloperAppSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: clientId
          in: path
          description: Client ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetDeveloperAppPayload'
      security:
        - apiKey: []
      x-internal: false
  /developerApps:
    post:
      operationId: createDeveloperApp
      summary: Create OAuth App
      tags:
        - Sign In with BitBadges
      description: |-
        Creates a new OAuth app.

        ```tsx
        await BitBadgesApi.createDeveloperApp(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateDeveloperAppPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateDeveloperAppSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createdeveloperapp)**

        Scopes:
          - `manageDeveloperApps` - Required to create a new app

      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateDeveloperAppSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
            $ref: '#/components/schemas/iCreateDeveloperAppPayload'
      security:
        - apiKey: []
      x-internal: false
    put:
      operationId: updateDeveloperApp
      summary: Update OAuth App
      tags:
        - Sign In with BitBadges
      description: |-
        Updates an existing OAuth app.

        ```tsx
        await BitBadgesApi.updateDeveloperApp(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateDeveloperAppPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateDeveloperAppSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updatedeveloperapp)**

        Scopes:
          - `manageDeveloperApps` - Required to update an app

      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateDeveloperAppSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: clientId
          in: path
          description: Client ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
            $ref: '#/components/schemas/iUpdateDeveloperAppPayload'
      security:
        - apiKey: []
      x-internal: false
    delete:
      operationId: deleteDeveloperApp
      summary: Delete OAuth App
      tags:
        - Sign In with BitBadges
      description: |-
        Deletes an existing OAuth app.

        ```tsx
        await BitBadgesApi.deleteDeveloperApp(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteDeveloperAppPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteDeveloperAppSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deletedeveloperapp)**

        Scopes:
          - `manageDeveloperApps` - Required to delete an app

      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteDeveloperAppSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: clientId
          in: path
          description: Client ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
            $ref: '#/components/schemas/iDeleteDeveloperAppPayload'
      security:
        - apiKey: []
      x-internal: false
  /plugin/{pluginId}:
    get:
      operationId: getPlugin
      summary: Get Plugin
      tags:
        - Plugins
      description: |-
        Gets a plugin by specific ID.

        ```tsx
        await BitBadgesApi.getPlugin("plugin123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPluginPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPluginSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getplugin)**

        Scopes:
        - Full Access: Required for private plugins
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPluginSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: pluginId
          in: path
          description: Plugin ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetPluginPayload'
      security:
        - apiKey: []
      x-internal: false
  /utilityPage/{utilityPageId}:
    get:
      operationId: getUtilityPage
      summary: Get Utility Page
      tags:
        - Utility Pages
      description: |-
        Gets a utility page by specific ID.

        ```tsx
        await BitBadgesApi.getUtilityPage("utilityPage123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetUtilityPagePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetUtilityPageSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getutilitylisting)**

        Scopes:
          - `manageUtilityPages` - Required and must have view permissions for private listings
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetUtilityPageSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: utilityPageId
          in: path
          description: Utility listing ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetUtilityPagePayload'
      security:
        - apiKey: []
      x-internal: false
  /dynamicStore/{dynamicStoreId}:
    get:
      operationId: getDynamicDataStore
      summary: Get Dynamic Data Store
      tags:
        - Dynamic Stores
      description: |-
        Gets a dynamic data store by specific ID.

        ```tsx
        await BitBadgesApi.getDynamicDataStore("dynamicStore123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStorePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoreSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdynamicDataStore)**

        Scopes:
          - `manageDynamicDataStores` - Required and must be owner. Alternatively, you can specify the dataSecret.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataStoreSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: dynamicStoreId
          in: path
          description: Dynamic data store ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetDynamicDataStorePayload'
      security:
        - apiKey: []
      x-internal: false
  /dynamicStore/{dynamicStoreId}/value:
    get:
      operationId: getDynamicDataStoreValue
      summary: Get Dynamic Data Store Value
      tags:
        - Dynamic Stores
      description: |-
        Gets a value from a dynamic data store by specific ID and key.

        ```tsx
        await BitBadgesApi.getDynamicDataStoreValue("dynamicStore123", { key: "key123", ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoreValuePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoreValueSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdynamicDataStoreValue)**

        Scopes:
          - `manageDynamicDataStores` - Required and must be owner. You can also specify the dataSecret.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataStoreValueSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: dynamicStoreId
          in: path
          description: Dynamic data store ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetDynamicDataStoreValuePayload'
      security:
        - apiKey: []
      x-internal: false
  /dynamicStore/{dynamicStoreId}/values:
    get:
      operationId: getDynamicDataStoreValuesPaginated
      summary: Get Dynamic Data Store Values Paginated
      tags:
        - Dynamic Stores
      description: |-
        Gets a paginated list of values from a dynamic data store by specific ID.

        ```tsx
        await BitBadgesApi.getDynamicDataStoreValuesPaginated("dynamicStore123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoreValuesPaginatedPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoreValuesPaginatedSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdynamicDataStoreValuesPaginated)**

        Scopes:
          - `manageDynamicDataStores` - Required and must be owner.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataStoreValuesPaginatedSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: dynamicStoreId
          in: path
          description: Dynamic data store ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetDynamicDataStoreValuesPaginatedPayload'
      security:
        - apiKey: []
      x-internal: false
  /dynamicStores:
    post:
      operationId: createDynamicDataStore
      summary: Create Dynamic Data Store
      tags:
        - Dynamic Stores
      description: |-
        Creates a new dynamic data store.

        ```tsx
        await BitBadgesApi.createDynamicDataStore(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateDynamicDataStorePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateDynamicDataStoreSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createdynamicDataStore)**

        Scopes:
          - `manageDynamicDataStores` - Required and must be owner.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateDynamicDataStoreSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateDynamicDataStorePayload'
      security:
        - apiKey: []
      x-internal: false
    put:
      operationId: updateDynamicDataStore
      summary: Update Dynamic Data Store
      tags:
        - Dynamic Stores
      description: |-
        Updates a dynamic data store.

        ```tsx
        await BitBadgesApi.updateDynamicDataStore(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateDynamicDataStorePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateDynamicDataStoreSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updatedynamicDataStore)**

        Scopes:
          - `manageDynamicDataStores` - Required and must be owner.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateDynamicDataStoreSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: dynamicStoreId
          in: path
          description: Dynamic data store ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateDynamicDataStorePayload'
      security:
        - apiKey: []
      x-internal: false
    delete:
      operationId: deleteDynamicDataStore
      summary: Delete Dynamic Data Store
      tags:
        - Dynamic Stores
      description: |-
        Deletes a dynamic data store.

        ```tsx
        await BitBadgesApi.deleteDynamicDataStore(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteDynamicDataStorePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteDynamicDataStoreSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deletedyndatastore)**

        Scopes:
          - `manageDynamicDataStores` - Required and must be owner.

      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteDynamicDataStoreSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: dynamicStoreId
          in: path
          description: Dynamic data store ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteDynamicDataStorePayload'
      security:
        - apiKey: []
      x-internal: false
  /application/{applicationId}:
    get:
      operationId: getApplication
      summary: Get Application
      tags:
        - Applications
      description: |-
        Gets an application by specific ID.

        ```tsx
        await BitBadgesApi.getApplication("application123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetApplicationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetApplicationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getapplication)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: applicationId
          in: path
          description: Application ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetApplicationPayload'
      security:
        - apiKey: []
      x-internal: false
  /addressList/{addressListId}:
    get:
      operationId: getAddressList
      summary: Get Address List
      tags:
        - Address Lists
      description: |-
        Gets an address list by specific ID.

        ```tsx
        await BitBadgesApi.getAddressList("addressList123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslist)**

        Note: The `views` and corresponding fields like `listActivity`, etc will be blank with this simple
        GET but are provided in the response for compatibility with the SDK. To actually fetch these views,
        use the POST batch route or the individual view routes.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: addressListId
          in: path
          description: Address list ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAddressListPayload'
      security:
        - apiKey: []
      x-internal: false
  /status:
    get:
      operationId: getStatus
      summary: Get Status
      description: |
        Gets the current status details about the blockchain / indexer (gas, block height, etc).
        ```tsx
        const res = await BitBadgesApi.getStatus();
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetStatusPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetStatusSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getstatus)**
      tags:
        - Miscellanous
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetStatusSuccessResponse'
          description: Returns the current status of the blockchain / indexer
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetStatusPayload'
      security:
        - apiKey: []
  '/collection/{collectionId}/{badgeId}/owners':
    get:
      operationId: getOwners
      summary: Get Token Owners
      tags:
        - Tokens
      description: |
        Retrieves the owners in a paginated format for a specific token in a collection.
        Returns a list of addresses and their corresponding balances for the specified token ID.

        ```tsx
        const res = await BitBadgesApi.getOwners(
          collectionId,
          badgeId,
          {
            bookmark: '...'
          }
        );
        ```


        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetOwnersPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetOwnersSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getownersforbadge)**
      parameters:
        - name: collectionId
          in: path
          description: The numeric collection ID.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The numeric token ID to retrieve owners for.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetOwnersPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetOwnersSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []

  '/collection/{collectionId}/{badgeId}/activity':
    get:
      operationId: getTokenActivity
      summary: Get Token Activity
      description: |
        Retrieves the activity in a paginated format for a specific token in a collection.

        ```tsx
        const res = await BitBadgesApi.getTokenActivity(
          collectionId,
          badgeId,
          {
            bookmark: '...'
          }
        );
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTokenActivityPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTokenActivitySuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getbadgeactivity)**
      tags:
        - Tokens
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The ID for which activity is to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetTokenActivityPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetTokenActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  '/collection/{collectionId}/refresh':
    post:
      operationId: refreshMetadata
      summary: Refresh Metadata
      tags:
        - Tokens
      description: |
        Triggers a metadata refresh for a specific collection. BitBadges API uses a refresh queue system for fetching anything off-chain.
        This will refetch any details for the collection (such as metadata, balances if applicable, approval details, etc).

        Note it will reject if recently refreshed to prevent abuse.

        ```tsx
        const res = await BitBadgesApi.refreshMetadata(collectionId, { ...options });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRefreshMetadataPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRefreshMetadataSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#refreshmetadata)**
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection to trigger metadata refresh.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iRefreshMetadataPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshMetadataSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: true
  '/claims/complete/{claimId}/{address}':
    post:
      operationId: completeClaim
      summary: Complete Claim
      tags:
        - Claims
      description: |
        Completes a claim for a specific address. This triggers a complete claim request to be sent to the queue.
        Note, this route returning a success code does not mean the claim has been completed. You will need to
        fetch its status via the attempt ID.

        If you want to simulate the claim first, you can use the simulate claim endpoint.

        _expectedVersion is required and must match the version of the claim. If you want to override this check,
        specify -1.

        The rest of the body should look like:
        ```typescript
        {
          _expectedVersion: 1,
          [pluginInstanceId1]: { ..bodyForPluginInstanceId1 },
          [pluginInstanceId2]: { ..bodyForPluginInstanceId2 },
        }
        ```

        ```tsx
        const res = await BitBadgesApi.completeClaim(claimId, address, { _expectedVersion: 1, ...body });
        console.log(res.claimAttemptId);

        //Sleep 2 seconds

        const res = await BitBadgesApi.getClaimAttemptStatus(res.claimAttemptId);
        console.log(res) // { success: true }
        ```

        Documentation References / Tutorials:
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCompleteClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCompleteClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#completeclaim)**

        Scopes:
          - `completeClaims` - Required if completing claims on behalf of a user and requires sign-in

      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: The address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCompleteClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCompleteClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  '/claims/simulate/{claimId}/{address}':
    post:
      operationId: simulateClaim
      summary: Simulate Claim
      tags:
        - Claims
      description: |-
        Simulates a claim for a user. This will check if the claim is valid and that all criteria is satisfied. This returns a fake ID for compatibility with certain integrations.
        A successful response means simulation passed. This is instant and does not use the queue.

        Note: There may be cases where the simulation passes but the claim fails. This may happen if state changes
        between the simulation and the claim. It is always best practice to simulate first, but do not rely on the simulation
        response for the final result.

        ```tsx
        const res = await BitBadgesApi.simulateClaim(claimId, address, { ...body });
        ```

        _expectedVersion is required and must match the version of the claim. If you want to override this check,
        specify -1.

        The rest of the body should look like:
        ```typescript
        {
          _expectedVersion: 1,
          _specificInstanceIds: [pluginInstanceId1, pluginInstanceId2], //Optional: simulate only specific instances
          [pluginInstanceId1]: { ..bodyForPluginInstanceId1 },
          [pluginInstanceId2]: { ..bodyForPluginInstanceId2 },
        }
        ```

        Documentation References / Tutorials:
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSimulateClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSimulateClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#simulateclaim)**

        Scopes:
          - `completeClaims` - Required if completing claims on behalf of a user and requires sign-in

      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: The address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSimulateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  '/claims/reserved/{claimId}/{address}':
    post:
      operationId: getReservedCodes
      summary: Get Reserved Claim Codes
      tags:
        - Claims
      description: |-
        Retrieves the reserved codes for a claim.

        For on-chain claims / approvals, we use a code reservation system where the claim code is to be used in the eventual blockchain transaction.
        This is used to bridge the gap between the off-chain claim and on-chain approval / transfer.

        ```tsx
        const res = await BitBadgesApi.getReservedCodes(claimId, address);
        ```

        Documentation References / Tutorials:
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetReservedClaimCodesPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetReservedClaimCodesSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getReservedCodes)**

        Scopes:
          - `completeClaims` - Required
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: The address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetReservedClaimCodesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetReservedClaimCodesPayload'
  '/claims/status/{claimAttemptId}':
    get:
      operationId: getClaimAttemptStatus
      tags:
        - Claims
      summary: Get Claim Attempt Status
      description: |-
        Retrieves the status of a claim attempt by the ID received when submitting.

        ```tsx
        const res = await BitBadgesApi.getClaimAttemptStatus(claimAttemptId);
        ```

        Documentation References / Tutorials:
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptStatusPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptStatusSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaimattemptstatus)**
      parameters:
        - name: claimAttemptId
          in: path
          description: The transaction ID of the claim attempt.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          explode: true
          required: false
          schema:
            $ref: '#/components/schemas/iGetClaimAttemptStatusPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAttemptStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  '/broadcast':
    post:
      operationId: broadcastTx
      tags:
        - Transactions
      summary: Broadcast Transaction
      description: |-
        Broadcasts a transaction to the blockchain. This will broadcast the transaction to the blockchain
        via the BitBadges blockchain node.

        ```tsx
        const res = await BitBadgesApi.broadcastTx(...);
        ```

        Documentation References / Tutorials:
        - **[Create, Generate, and Sign Txs](https://docs.bitbadges.io/for-developers/create-and-broadcast-txs)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/types/iBroadcastTxPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iBroadcastTxSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#broadcasttx)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/iBroadcastTxPayload'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBroadcastTxSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /simulate:
    post:
      operationId: simulateTx
      summary: Simulate Transaction
      description: |-
        Simulates a transaction on the blockchain. This will simulate the transaction on the blockchain
        via the BitBadges blockchain node.

        ```tsx
        const res = await BitBadgesApi.simulateTx(...);
        ```

        Documentation References / Tutorials:
        - **[Create, Generate, and Sign Txs](https://docs.bitbadges.io/for-developers/create-and-broadcast-txs)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/types/iSimulateTxPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSimulateTxSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#simulatetx)**
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/iSimulateTxPayload'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateTxSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /addressLists:
    #   put:
    #     operationId: updateAddressLists
    #     tags:
    #       - Address Lists
    #     summary: Update Address Lists
    #     description: |-
    #       Updates address lists for the user.

    #       ```tsx
    #       const res = await BitBadgesApi.updateAddressLists(...);
    #       ```

    #       SDK Links:
    #       - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListsPayload)**
    #       - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListsSuccessResponse)**
    #       - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateaddresslists)**

    #       Scopes:
    #         - `manageAddressLists` - Required

    #       Warning: The claims object expects all claims to be provided. If any are not provided, they will not be included moving forward and will
    #       be deleted. To update an individual claim, you can use the update claim endpoint.

    #       Note: This is legacy and an all-inclusive endpoint. Please use the simpler update functions for more fine-grained updates.
    #     requestBody:
    #       required: true
    #       content:
    #         application/json:
    #           schema:
    #             $ref: '#/components/schemas/iUpdateAddressListsPayload'
    #     responses:
    #       '200':
    #         description: Success response
    #         content:
    #           application/json:
    #             schema:
    #               $ref: '#/components/schemas/iUpdateAddressListsSuccessResponse'
    #       '400':
    #         $ref: '#/components/responses/BadRequestResponse'
    #       '401':
    #         $ref: '#/components/responses/UnauthorizedResponse'
    #       '500':
    #         $ref: '#/components/responses/InternalServerErrorResponse'
    #     parameters:
    #       - name: x-api-key
    #         in: header
    #         description: BitBadges API Key for authentication
    #         required: true
    #         schema:
    #           type: string
    #     security:
    #       - apiKey: []
    #         userIsOwner: []
    #         userSignedIn: []
    post:
      operationId: createAddressLists
      summary: Creates Address Lists
      tags:
        - Address Lists
      description: |-
        Creates address lists stored by BitBadges centralized servers.

        ```tsx
        const res = await BitBadgesApi.createAddressLists(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateAddressListsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateAddressListsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createaddresslists)**

        Scopes:
          - `manageAddressLists` - Required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateAddressListsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
    delete:
      operationId: deleteAddressLists
      summary: Delete Address Lists
      tags:
        - Address Lists
      description: |-
        Deletes address lists. Must be created off-chain.

        ```tsx
        const res = await BitBadgesApi.deleteAddressLists(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteAddressListsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteAddressListsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteaddresslists)**

        Scopes:
          - `manageAddressLists` - Required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteAddressListsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
  /addressLists/coreDetails:
    put:
      operationId: updateAddressListCoreDetails
      summary: Update Address List Core Details
      tags:
        - Address Lists
      description: |-
        Updates the core details of an off-chain address list. This does not include address updates or claim updates.

        ```tsx
        const res = await BitBadgesApi.updateAddressListCoreDetails(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListCoreDetailsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListCoreDetailsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateaddresslistcoredetails)**

        Scopes:
          - `manageAddressLists` - Required

      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateAddressListCoreDetailsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAddressListCoreDetailsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
  /addressLists/addresses:
    put:
      operationId: updateAddressListAddresses
      summary: Update Address List Addresses
      tags:
        - Address Lists
      description: |-
        Updates the addresses of an off-chain address list. This does not include claim updates or core details updates.

        Note: This is a complete overwrite. If you have active claims, ensure no race conditions.

        ```tsx
        const res = await BitBadgesApi.updateAddressListAddresses(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListAddressesPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListAddressesSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateaddresslistaddresses)**

        Scopes:
          - `manageAddressLists` - Required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateAddressListAddressesPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAddressListAddressesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /addressLists/fetch:
    post:
      operationId: getAddressLists
      summary: Get Address Lists - Batch
      tags:
        - Address Lists
      description: |-
        Gets address lists. This uses an all-in-one approach with views and paginations
        to fetch details about the list all in one place. Note: Fetching views via this
        route is not supported. Use the other GET simpler routes. This may be deprecated soon.

        ```tsx
        const listsRes = await BitBadgesApi.getAddressLists([{
            //example
            listId: "...",
            viewsToFetch: [{
                viewType: 'listActivity',
                viewId: 'listActivity',
                bookmark: ''
            }]
        }])

        const list = listsRes[0];
        ```

        Documentation References / Tutorials:
        - **[Managing Views](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-views)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslists)**

        Scopes:
          - `readPrivateClaimData` - Required if fetching private claim data

        Note: This route has a lot of legacy features that may be deprecated soon. For views, p-lease
        use the other GET simpler routes.

      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetAddressListsPayload'
  /siwbb/token:
    post:
      operationId: exchangeSIWBBAuthorizationCode
      summary: Exchange SIWBB Code
      tags:
        - Sign In with BitBadges
      description: |-
        Exchange either a refresh token or OAuth authorization code for an access token.

        IMPORTANT: Keep your client secret safe and secure.

        Documentation References / Tutorials:
        - **[API Authorization](https://docs.bitbadges.io/for-developers/sign-in-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iExchangeSIWBBAuthorizationCodePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iExchangeSIWBBAuthorizationCodeSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#exchangesiwbbauthorizationcode)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iExchangeSIWBBAuthorizationCodeSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iExchangeSIWBBAuthorizationCodePayload'
  /siwbb/token/revoke:
    post:
      operationId: revokeOauthAuthorization
      summary: Revoke Authorization
      tags:
        - Sign In with BitBadges
      description: |-
        Revokes the authorization. The token can either be an access token or a refresh token.
        This endpoint revokes all tokens associated with the procided token (thus revoking the entire authorization).
        This can be called by the user or the authorized application.

        ```tsx
        await BitBadgesApi.revokeOauthAuthorization({ token });
        ```


        Documentation References / Tutorials:
        - **[API Authorization](https://docs.bitbadges.io/for-developers/sign-in-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iOauthRevokePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iOauthRevokeSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#revokeoauthauthorization)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iOauthRevokePayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iOauthRevokeSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userSignedIn: []
  /siwbbRequest/rotate:
    post:
      operationId: rotateSIWBBRequest
      summary: Rotate SIWBB Request
      tags:
        - Sign In with BitBadges
      description: |-
        Rotates a Sign In with BitBadges request. This is typically used to rotate a QR code to a new value.

        ```tsx
        const res = await BitBadgesApi.rotateSIWBBRequest(...);
        ```

        Documentation References / Tutorials:
        - **[Sign In with BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRotateSIWBBRequestPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRotateSIWBBRequestSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#rotatesiwbbrequest)**

        Scopes:
          - `approveSignInWithBitBadgesRequests` - Required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iRotateSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRotateSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /siwbbRequest:
    delete:
      operationId: deleteSIWBBRequest
      summary: Delete SIWBB Request
      tags:
        - Sign In with BitBadges
      description: |-
        Deletes an authentication code from the user's account.

        ```tsx
        const res = await BitBadgesApi.deleteSIWBBRequest(...);
        ```

        Documentation References / Tutorials:
        - **[Sign In with BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteSIWBBRequestPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteSIWBBRequestSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deletesiwbbrequest)**

        Scopes:
          - `deleteAuthenticationCodes` - Required
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    post:
      operationId: createSIWBBRequest
      summary: Create SIWBB Request
      tags:
        - Sign In with BitBadges
      description: |-
        Creates an authentication code. This is used for the Sign In wtih BitBadges flow.

        Note: This is typically not recommended to be called directly. Instead, direct the user to use the frontend authorization flow.

        ```tsx
        const res = await BitBadgesApi.createSIWBBRequest(...);
        ```

        Documentation References / Tutorials:
        - **[Sign In with BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateSIWBBRequestPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateSIWBBRequestSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createsiwbbrequest)**

        Scopes:
          - `approveSignInWithBitBadgesRequests` - Required
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /developerApps/siwbbRequests:
    get:
      operationId: getSIWBBRequestsForDeveloperApp
      summary: Get SIWBB Requests For Developer App
      tags:
        - Sign In with BitBadges
      description: |-
        Gets all saved docs for the Sign In with BitBadges flow for a specific app. This is useful, for example,
        if you are authenticating in-person and want to pre-fetch all authentication details
        to avoid doing it at verification time.

        This will return the actual authentication details, not just the codes. You will still have to exchange
        the code for the access token / confirmations.

        ```tsx
        const res = await BitBadgesApi.getSIWBBRequestsForDeveloperApp(...);
        ```

        Documentation References / Tutorials:
        - **[Sign In with BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSIWBBRequestsForDeveloperAppPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSIWBBRequestsForDeveloperAppSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getsiwbbrequestsfordeveloperapp)**

        Scopes:
          - `manageDeveloperApps` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSIWBBRequestsForDeveloperAppSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: true
          explode: true
          schema:
            $ref: '#/components/schemas/iGetSIWBBRequestsForDeveloperAppPayload'
      security:
        - apiKey: []
          userSignedIn: []
  /claimAlerts/send:
    post:
      operationId: sendClaimAlert
      summary: Sends Claim Alert
      tags:
        - Claim Alerts
      description: |-
        Sends claim alert notifications out. Claim alerts are in-app notifications to alert a user.
        You can send from an address or anonymously (no sender).

        ```tsx
        const res = await BitBadgesApi.sendClaimAlert(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSendClaimAlertsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSendClaimAlertsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#sendclaimalert)**

        Scopes:
          - `sendClaimAlerts` - Required (if sending on behalf of a user). Set address to blank if anonymous.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSendClaimAlertsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSendClaimAlertsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  '/collection/{collectionId}/refreshStatus':
    get:
      operationId: getRefreshStatus
      summary: Get Refresh Status
      tags:
        - Tokens
      description: |-
        Gets the refresh status for a collection. Used to track if any errors occur during a refresh, or if it is in the queue or not.

        ```tsx
        const res = await BitBadgesApi.getRefreshStatus(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetRefreshStatusPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetRefreshStatusSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getrefreshstatus)**
      parameters:
        - name: collectionId
          in: path
          description: The collection ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userIsManager: []
  /maps/{mapId}:
    get:
      operationId: getMap
      summary: Get Map
      tags:
        - Maps and Protocols
      description: |-
        Gets the core details of a map.

        For getting actual values, use the getMapValues endpoint(s).

        ```tsx
        const res = await BitBadgesApi.getMap(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getmap)**
      parameters:
        - name: mapId
          in: path
          description: The map ID
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: true
          explode: true
          schema:
            $ref: '#/components/schemas/iGetMapPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /maps:
    post:
      operationId: getMaps
      summary: Get Maps - Batch
      tags:
        - Maps and Protocols
      description: |-
        Gets map data. Maps are created and stored on-chain. They are key-value objects which can have certain properties
        like restricting who sets which values, expected formatting, and more.

        For getting actual values, use the getMapValues endpoint.

        ```tsx
        const res = await BitBadgesApi.getMaps(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getmaps)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetMapsPayload'
  /mapValues:
    post:
      operationId: getMapValues
      summary: Get Map Values - Batch
      tags:
        - Maps and Protocols
      description: |-
        Gets map values for a collection.

        ```tsx
        const res = await BitBadgesApi.getMapValues(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapValuesPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapValuesSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getmapvalues)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetMapValuesPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapValuesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /mapValue/{mapId}/{key}:
    get:
      operationId: getMapValue
      summary: Get Map Value
      tags:
        - Maps and Protocols
      description: |-
        Gets a map value.

        ```tsx
        const res = await BitBadgesApi.getMapValue(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapValuePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapValueSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getmapvalue)**
      parameters:
        - name: mapId
          in: path
          description: The map ID
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: The key to get the value for
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapValueSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /claims/search:
    get:
      operationId: searchClaims
      summary: Search Claims
      tags:
        - Claims
      description: |-
        Search through the signed in user's claims they have created / are managing.

        ```tsx
        const res = await BitBadgesApi.searchClaims(...);
        ```

        Documentation References / Tutorials:
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchClaimsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchClaimsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchclaims)**

        Scopes:
          - `readPrivateClaimData` - Required for fetching private claim data
      parameters:
        - in: query
          name: payload
          required: true
          schema:
            $ref: '#/components/schemas/iSearchClaimsPayload'
          style: form
          explode: true
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []

  /claims/fetch:
    post:
      operationId: getClaims
      summary: Get Claims - Batch
      tags:
        - Claims
      description: |-
        Retrieve claims by ID(s). Certain state is not made available by default for scalability reasons and must
        be requested explicitly.

        To fetch private parameters and state, you must be the manager of the claim, signed in, and request it.

        ```tsx
        const res = await BitBadgesApi.getClaims({
          claimsToFetch: [
            {
              claimId: '123',
              fetchPrivateParams: true,
              privateStatesToFetch: [instanceId1, instanceId2],
            },
          ],
        });
        ```

        Documentation References / Tutorials:
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimsPayloadV1)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaims)**

        Scopes:
          - `readPrivateClaimData` - Required if fetching private claim data
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetClaimsPayloadV1'
  /claims:
    post:
      operationId: createClaim
      summary: Create Claim
      tags:
        - Claims
      description: |-
        Creates a new claim.

        Note: Creating claims via the API is often overkill. Consider doing this in-site, using a plugin approach or another method first.
        You may also opt to leave the creation in-site but update claims via the API instead.

        There are a few categories of claims:
        - Standalone (default) - Not attached to anything
        - Test claims - Used for frontend claim tester
        - Linked to address lists - Specify the valid `listId` within the request. Must be list creator.
        - Linked to off-chain balances - Specify the valid `collectionId` + `balancesToSet` within the request. `balancesToSet` determine what tokens are allocated.
        - Linked to on-chain approvals (user or collection level) - This is advanced. If you need this, please reach out to us. Updates are fine, but creation uses an advanced processs that is undocumented currently.

        ```tsx
        const res = await BitBadgesApi.createClaims(...);
        ```

        Documentation References / Tutorials:
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createclaims)**

        Tip: You can see the claim JSONs in-site. Click the info circle button > JSON tab. Use the claim tester, build your claim, and see how it works behind the scenes.

        Scopes:
          - `manageClaims` - Required
          - `manageAddressLists` - Required for linked address list claims
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    put:
      operationId: updateClaim
      summary: Update Claim
      tags:
        - Claims
      description: |-
        Updates an existing claim.

        Note: Updating claims via the API is often overkill. Consider doing this in-site, using a plugin approach or another method first.

        There are a few categories of claims:
        - Standalone (default) - Not attached to anything
        - Test claims - Used for frontend claim tester
        - Linked to address lists - Specify the valid `listId` within the request. Must be list creator.
        - Linked to off-chain balances - Specify the valid `collectionId` + `balancesToSet` within the request. `balancesToSet` determine what tokens are allocated per claim.
        - Linked to on-chain approvals (user or collection level) - Specify the valid collectionId. Note: This is advanced. Please reach out if you need this.

        ```tsx
        const res = await BitBadgesApi.updateClaims(...);
        ```

        Documentation References / Tutorials:
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateclaims)**

        Tip: You can see the claim JSONs in-site. Click the info circle button > JSON tab. Use the claim tester, build your claim, and see how it works behind the scenes.

        Scopes:
          - `manageClaims` - Required
          - `manageAddressLists` - Required for updating link listed claims
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    delete:
      operationId: deleteClaim
      summary: Delete Claim
      tags:
        - Claims
      description: |-
        Deletes a claim. Creating and maintaining claims are typically recommended
        to be done through the site, not the API, because they require special configuration.

        ```tsx
        const res = await BitBadgesApi.deleteClaims(...);
        ```

        Documentation References / Tutorials:
        - **[Completing Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**
        - **[All About BitBadges Claims](https://docs.bitbadges.io/for-developers/claim-builder)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteclaims)**

        Scopes:
          - `manageClaims` - Required
          - `manageAddressLists` - Required for linked address list claims
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /codes:
    get:
      operationId: generateCode
      summary: Get Code (Codes Plugin)
      description: |
        Generates a unique code based on a seed and a zero-based index. This is used for the Codes plugin with claims.

        Documentation References / Tutorials:
        - **[Codes Plugin](https://docs.bitbadges.io/for-developers/claim-builder/universal-approach-claim-codes)**

      tags:
        - Claims
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: The generated code
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: seedCode
          in: query
          description: The seed used to generate the code
          required: true
          schema:
            type: string
        - name: idx
          in: query
          description: The index of the code to generate
          required: true
          schema:
            type: integer
            minimum: 0
      security:
        - apiKey: []
      x-internal: false
  /claims/{claimId}/attempts:
    get:
      operationId: getClaimAttempts
      summary: Get Claim Attempts
      tags:
        - Claims
      description: |-
        Retrieves the attempts for a claim in a paginated format. If you are the manager and authenticated, you
        can also request failed attempts and view the errors.

        ```tsx
        const res = await BitBadgesApi.getClaimAttempts(claimId, {
          address: "",
          bookmark: "",
          includeErrors: true
        });
        ```

        Documentation References / Tutorials:
        - **[Getting Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**
        - **[Managing Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaimattempts)**

        Scopes:
          - `readPrivateClaimData` - Required if fetching errors
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAttemptsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          name: payload
          required: true
          schema:
            $ref: '#/components/schemas/iGetClaimAttemptsPayload'
          style: form
          explode: true
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /claims/gatedContent/{claimId}:
    get:
      operationId: getGatedContentForClaim
      summary: Get Gated Content for Claim
      tags:
        - Claims
      description: |-
        If claims implement the rewards tab with in-site delivery, there may be gated URLs or content that is only
        accessible to users who have completed the claim. This endpoint allows you to retrieve the gated content for a claim
        if you are authenticated and meet the claim's gated content requirements.

        ```typescript
        const res = await BitBadgesApi.getGatedContentForClaim(claimId);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetGatedContentForClaimPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetGatedContentForClaimSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getgatedcontentforclaim)**

        Scopes:
          - `completeClaims` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetGatedContentForClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: claimId
          in: path
          description: The ID of the claim
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetGatedContentForClaimPayload'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /storeActions/single:
    post:
      operationId: performStoreActionSingleWithBodyAuth
      summary: Perform Single Store Action (Body Auth)
      tags:
        - Dynamic Stores
      description: |-
        Performs a single action on a dynamic store using body authentication.

        For more information on this route, see the Dynamic Stores > Manage tab in the developer portal.

        ```tsx
        await BitBadgesApi.performStoreAction(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#performstoreaction)**

        Scopes:
          - `manageDynamicStores` - Required if you do not specify the data secret
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iPerformStoreActionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iPerformStoreActionSingleWithBodyAuthPayload'
  /storeActions/batch:
    post:
      operationId: performStoreActionBatchWithBodyAuth
      summary: Perform Batch Store Actions (Body Auth)
      tags:
        - Dynamic Stores
      description: |-
        Performs multiple actions on a dynamic store using body authentication.

        For more information on this route, see the Dynamic Stores > Manage tab in the developer portal.

        ```tsx
        await BitBadgesApi.performBatchStoreAction(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#performstoreaction)**

        Scopes:
          - `manageDynamicStores` - Required if you do not specify the data secret
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBatchStoreActionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iPerformStoreActionBatchWithBodyAuthPayload'
  /dynamicStores/fetch:
    post:
      operationId: getDynamicDataStores
      summary: Fetch Dynamic Data Stores - Batch
      tags:
        - Dynamic Stores
      description: |-
        Fetches dynamic stores by ID(s).

        ```tsx
        await BitBadgesApi.getDynamicDataStores(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoresPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoresSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdynamicdatastores)**

        Scopes:
        - `manageDynamicStores` - Required (or specify the valid data secret)
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataStoresSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetDynamicDataStoresPayload'
  /dynamicStores/search:
    get:
      operationId: searchDynamicDataStores
      summary: Search Dynamic Data Stores For User
      tags:
        - Dynamic Stores
      description: |-
        Searches for dynamic stores based on the provided criteria. Currently, this only gets the signed in user's dynamic stores.

        ```tsx
        await BitBadgesApi.searchDynamicDataStores(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchDynamicDataStoresPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchDynamicDataStoresSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchdynamicdatastores)**

        Scopes:
        - `manageDynamicStores` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchDynamicDataStoresSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          explode: true
          schema:
            $ref: '#/components/schemas/iSearchDynamicDataStoresPayload'
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
  /dynamicStores/activity:
    get:
      operationId: getDynamicDataActivity
      summary: Get Dynamic Data Activity
      tags:
        - Dynamic Stores
      description: |-
        Fetches activity history for dynamic stores.

        ```tsx
        await BitBadgesApi.getDynamicDataActivity(...);
        ```

        Documentation References / Tutorials:
        - **[Dynamic Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataActivityPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataActivitySuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdynamicdataactivity)**

        Scopes:
        - `manageDynamicStores` - Required (or specify the valid data secret)
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetDynamicDataActivityPayload'
      security:
        - apiKey: []
          userSignedIn: []
      x-internal: false
  /applications/search:
    get:
      operationId: searchApplications
      summary: Search Applications
      tags:
        - Applications
      description: |-
        Searches for applications based on the provided criteria. Currently,
        this only gets the signed in user's applications.

        ```tsx
        await BitBadgesApi.searchApplications(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchApplicationsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchApplicationsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchapplications)**

        Scopes:
        - `manageApplications` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchApplicationsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iSearchApplicationsPayload'
      security:
        - apiKey: []
      x-internal: false
  /applications/fetch:
    post:
      operationId: getApplications
      summary: Get Applications - Batch
      tags:
        - Applications
      description: |-
        Fetches applications based on the provided criteria.

        ```tsx
        await BitBadgesApi.getApplications(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetApplicationsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetApplicationsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getapplications)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetApplicationsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetApplicationsPayload'
  /applications:
    post:
      operationId: createApplication
      summary: Create Application
      tags:
        - Applications
      description: |-
        Creates an application.

        ```tsx
        await BitBadgesApi.createApplication(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateApplicationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateApplicationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createapplication)**

        Scopes:
        - `manageApplications` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateApplicationPayload'
    put:
      operationId: updateApplication
      summary: Update Application
      tags:
        - Applications
      description: |-
        Updates an application.

        ```tsx
        await BitBadgesApi.updateApplication(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateApplicationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateApplicationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateapplication)**

        Scopes:
        - `manageApplications` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateApplicationPayload'
    delete:
      operationId: deleteApplication
      summary: Delete Application
      tags:
        - Applications
      description: |-
        Deletes an application.

        ```tsx
        await BitBadgesApi.deleteApplication(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteApplicationPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteApplicationSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteapplication)**

        Scopes:
        - `manageApplications` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteApplicationPayload'
  /applications/points:
    post:
      operationId: calculatePoints
      summary: Calculate Points
      tags:
        - Applications
      description: |-
        Calculates points for an application, page, and user.

        Note: We use a heavy caching system, so you may not see the results immediately and may be rejected if
        recently calculated.

        ```tsx
        await BitBadgesApi.calculatePoints(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCalculatePointsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCalculatePointsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#calculatepoints)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCalculatePointsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCalculatePointsPayload'
  /applications/points/activity:
    get:
      operationId: getPointsActivity
      summary: Get Points Activity
      tags:
        - Applications
      description: |-
        Fetches points activity for an application.

        ```tsx
        await BitBadgesApi.getPointsActivity(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPointsActivityPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPointsActivitySuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getpointsactivity)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPointsActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetPointsActivityPayload'
      security:
        - apiKey: []
      x-internal: false

  /plugins/fetch:
    post:
      operationId: getPlugins
      summary: Get Plugins - Batch
      tags:
        - Plugins
      description: |-
        Fetches plugins based on the provided criteria.

        ```tsx
        await BitBadgesApi.getPlugins(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPluginsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPluginSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getplugins)**

        Scopes:
        - Full Access - Required for private plugins
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPluginSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetPluginsPayload'
  /plugins/search:
    get:
      operationId: searchPlugins
      summary: Search Plugins
      tags:
        - Plugins
      description: |-
        Searches for plugins based on the provided criteria.

        ```tsx
        await BitBadgesApi.searchPlugins(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchPluginsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchPluginsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchplugins)**

        Scopes:
        - Full Access - Required for fetching your created plugins / private plugins
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchPluginsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iSearchPluginsPayload'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
  /utilityPages/fetch:
    post:
      operationId: getUtilityPages
      summary: Get Utility Pages - Batch
      tags:
        - Utility Pages
      description: |-
        Fetches utility pages based on the provided criteria.

        Requires authentication for private listings.

        ```tsx
        await BitBadgesApi.getUtilityPages(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetUtilityPagesPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetUtilityPagesSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getutilitylistings)**

        Scopes:
        - `manageUtilityPages` - Required for private listings
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetUtilityPagesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetUtilityPagesPayload'
  /utilityPages/search:
    get:
      operationId: searchUtilityPages
      summary: Search Utility Pages
      tags:
        - Utility Pages
      description: |-
        Searches for utility pages based on the provided criteria. Currently,
        this only gets the signed in user's utility pages.

        ```tsx
          await BitBadgesApi.searchUtilityPages(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchUtilityPagesPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchUtilityPagesSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchutilitylistings)**

        Scopes:
        - `manageUtilityPages` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchUtilityPagesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iSearchUtilityPagesPayload'
      security:
        - apiKey: []
          userSignedIn: []
      x-internal: false
  /utilityPages:
    post:
      operationId: createUtilityPage
      summary: Create Utility Page
      tags:
        - Utility Pages
      description: |-
        Creates a new utility page. This is also available in the developer portal.

        ```tsx
        await BitBadgesApi.createUtilityPage(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateUtilityPagePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateUtilityPageSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createutilitylisting)**

        Scopes:
        - `manageUtilityPages` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateUtilityPageSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateUtilityPagePayload'
    put:
      operationId: updateUtilityPage
      summary: Update Utility Page
      tags:
        - Utility Pages
      description: |-
        Updates an existing utility page. This is also available in the developer portal.

        ```tsx
        await BitBadgesApi.updateUtilityPage(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateUtilityPagePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateUtilityPageSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateutilitylisting)**

        Scopes:
        - `manageUtilityPages` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateUtilityPageSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateUtilityPagePayload'

    delete:
      operationId: deleteUtilityPage
      summary: Delete Utility Page
      tags:
        - Utility Pages
      description: |-
        Deletes a utility page. This is also available in the developer portal.

        ```tsx
        await BitBadgesApi.deleteUtilityPage(...);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteUtilityPagePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteUtilityPageSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteutilitylisting)**

        Scopes:
        - `manageUtilityPages` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteUtilityPageSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteUtilityPagePayload'
  /auth/status:
    post:
      operationId: checkSignInStatus
      summary: Check Sign In Status
      description: |
        Checks if a user is currently signed in and returns their authentication status.

        ```tsx
        const res = await BitBadgesApi.checkIfSignedIn(...);
        console.log(res.signedIn);
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckSignInStatusPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckSignInStatusSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#checkifsignedin)**
      tags:
        - Sign In with BitBadges
      responses:
        '200':
          description: Successfully retrieved authentication status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckSignInStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCheckSignInStatusPayload'
      security:
        - userMaybeSignedIn: []
      x-internal: false

  /account/{address}/lists:
    get:
      operationId: getAddressListsForUser
      summary: Get Address Lists For User
      tags:
        - Accounts
      description: |-
        Gets address lists for a specific account. Specify the viewType to determine what
        address lists to retrieve.

        ```tsx
        await BitBadgesApi.getAddressListsForUser(address, { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListsForUserPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListsForUserSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslistsforuser)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListsForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAddressListsForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/requests/siwbb:
    get:
      operationId: getSiwbbRequestsForUser
      summary: Get SIWBB Requests For User
      tags:
        - Accounts
      description: |-
        Gets Sign-In with BitBadges (SIWBB) requests for a user.

        ```tsx
        await BitBadgesApi.getSiwbbRequestsForUser({ address: "bb1..." });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSiwbbRequestsForUserPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSiwbbRequestsForUserSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getsiwbbrequestsforuser)**

        Scopes:
          - `readAuthenticationCodes` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSiwbbRequestsForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetSiwbbRequestsForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/activity/badges:
    get:
      operationId: getTransferActivityForUser
      summary: Get Transfer Activity For User
      tags:
        - Accounts
      description: |-
        Gets transfer activity for a specific user.

        ```tsx
        await BitBadgesApi.getTransferActivityForUser({ address: "bb1..." });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTransferActivityForUserPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTransferActivityForUserSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#gettransferactivityforuser)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetTransferActivityForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetTransferActivityForUserPayload'
      security:
        - apiKey: []
      x-internal: false

  /account/{address}/badges/:
    get:
      operationId: GetBadgesViewForUser
      summary: Get Tokens For User
      tags:
        - Accounts
      description: |-
        Gets tokens for a specific user. Specify the viewType to determine what
        tokens to retrieve. Default is 'collected'.

        ```tsx
        await BitBadgesApi.getBadgesViewForUser(address, { viewType: "collected" });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBadgesViewForUserPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBadgesViewForUserSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getbadgesviewforuser)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgesViewForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetBadgesViewForUserPayload'
      security:
        - apiKey: []
      x-internal: false

  /account/{address}/activity/lists:
    get:
      operationId: getListActivityForUser
      summary: Get Lists Activity For User
      tags:
        - Accounts
      description: |-
        Gets lists activity for a specific user.

        ```tsx
        await BitBadgesApi.getListActivityForUser({ address: "bb1..." });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetListActivityForUserPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetListActivityForUserSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getlistActivityforuser)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetListActivityForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetListActivityForUserPayload'
      security:
        - apiKey: []
      x-internal: false

  /account/{address}/activity/claims:
    get:
      operationId: getClaimActivityForUser
      summary: Get Claim Activity For User
      tags:
        - Accounts
      description: |-
        Gets claim activity for a specific user. Specify the viewType to determine what
        claim activity to retrieve.

        Most claim activity will be public, but if the state is hidden, then only the
        manager of the claim and you should be able to see the activity.

        ```tsx
        await BitBadgesApi.getClaimActivityForUser(address, { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimActivityForUserPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimActivityForUserSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaimactivityforuser)**

        Scopes:
          - `completeClaims` - Required if fetching all claim activity.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimActivityForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetClaimActivityForUserPayload'
      security:
        - apiKey: []
      x-internal: false

  /account/{address}/activity/points:
    get:
      operationId: getPointsActivityForUser
      summary: Get Points Activity For User
      tags:
        - Accounts
      description: |-
        Gets points activity for a specific user.

        ```tsx
        await BitBadgesApi.getPointsActivityForUser({ address: "bb1..." });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPointsActivityForUserPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPointsActivityForUserSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getpointsactivityforuser)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPointsActivityForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetPointsActivityForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/claimAlerts:
    get:
      operationId: getClaimAlertsForUser
      summary: Get Claim Alerts For User
      tags:
        - Accounts
      description: |-
        Gets claim alerts for a specific user. Specify the viewType 'received' or 'sent' to determine what
        claim alerts to retrieve.

        ```tsx
        await BitBadgesApi.getClaimAlertsForUser(address, { viewType: 'received' });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAlertsForUserPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAlertsForUserSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaimalertsforuser)**

        Scopes:
          - `readClaimAlerts` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAlertsForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetClaimAlertsForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /addressLists/{addressListId}/activity:
    get:
      operationId: getAddressListActivity
      summary: Get Address List Activity
      tags:
        - Address Lists
      description: |-
        Gets activity for a specific address list.

        ```tsx
        await BitBadgesApi.getAddressListActivity("list123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListActivityPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListActivitySuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslistactivity)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: addressListId
          in: path
          description: Address list ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAddressListActivityPayload'
      security:
        - apiKey: []
      x-internal: false

  /addressLists/{addressListId}/listings:
    get:
      operationId: getAddressListListings
      summary: Get Address List Listings
      tags:
        - Address Lists
      description: |-
        Gets listings for a specific address list.

        ```tsx
        await BitBadgesApi.getAddressListListings("list123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListListingsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListListingsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslistlistings)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListListingsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: addressListId
          in: path
          description: Address list ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAddressListListingsPayload'
      security:
        - apiKey: []
      x-internal: false

  /collection/{collectionId}/owners:
    get:
      operationId: getCollectionOwners
      summary: Get Collection Owners
      tags:
        - Tokens
      description: |-
        Gets owners for a specific collection.

        ```tsx
        await BitBadgesApi.getCollectionOwners("123");
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionOwnersPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionOwnersSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionowners)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionOwnersSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetCollectionOwnersPayload'
      security:
        - apiKey: []
      x-internal: false

  /collection/{collectionId}/activity:
    get:
      operationId: getCollectionTransferActivity
      summary: Get Collection Transfer Activity
      tags:
        - Tokens
      description: |-
        Gets transfer activity for a specific collection.

        ```tsx
        await BitBadgesApi.getCollectionTransferActivity("123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionTransferActivityPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionTransferActivitySuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectiontransferactivity)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionTransferActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetCollectionTransferActivityPayload'
      security:
        - apiKey: []
      x-internal: false

  /collection/{collectionId}/challengeTrackers:
    get:
      operationId: getCollectionChallengeTrackers
      summary: Get Collection Challenge Trackers
      tags:
        - Tokens
      description: |-
        Gets challenge trackers for a specific collection.

        ```tsx
        await BitBadgesApi.getCollectionChallengeTrackers("123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionChallengeTrackersPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionChallengeTrackersSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionchallengetrackers)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionChallengeTrackersSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetCollectionChallengeTrackersPayload'
      security:
        - apiKey: []
      x-internal: false
  /collection/{collectionId}/amountTrackers:
    get:
      operationId: getCollectionAmountTrackers
      summary: Get Collection Amount Trackers
      tags:
        - Tokens
      description: |-
        Gets amount trackers for a specific collection.

        ```tsx
        await BitBadgesApi.getCollectionAmountTrackers("123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionAmountTrackersPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionAmountTrackersSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionamounttrackers)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionAmountTrackersSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetCollectionAmountTrackersPayload'
      security:
        - apiKey: []
      x-internal: false
  /api/v0/collection/amountTracker:
    get:
      operationId: getCollectionAmountTrackerById
      summary: Get Collection Amount Tracker By ID
      tags:
        - Tokens
      description: |-
        Gets an amount tracker by ID for a collection.

        ```tsx
        await BitBadgesApi.getCollectionAmountTrackerById({ ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iAmountTrackerIdDetails)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionAmountTrackerByIdSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionamounttrackerbyid)**
      parameters:
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionAmountTrackerByIdSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false
  /api/v0/collection/challengeTracker:
    get:
      operationId: getCollectionChallengeTrackerById
      summary: Get Collection Challenge Tracker By ID
      tags:
        - Tokens
      description: |-
        Gets a challenge tracker by ID for a collection.

        ```tsx
        await BitBadgesApi.getCollectionChallengeTrackerById({ ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iChallengeTrackerIdDetails)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionChallengeTrackerByIdSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionchallengetrackerbyid)**
      parameters:
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionChallengeTrackerByIdSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /collection/{collectionId}/listings:
    get:
      operationId: getCollectionListings
      summary: Get Collection Listings
      tags:
        - Tokens
      description: |-
        Gets listings for a specific collection.

        ```tsx
        await BitBadgesApi.getCollectionListings("123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionListingsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionListingsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionlistings)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionListingsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetCollectionListingsPayload'
      security:
        - apiKey: []
      x-internal: false

  /collection/{collectionId}/claims:
    get:
      operationId: getCollectionClaims
      summary: Get Collection Claims
      tags:
        - Tokens
      description: |-
        Gets claims for a specific collection.

        ```tsx
        await BitBadgesApi.getCollectionClaims("123", { ... });
        ```

        SDK Links:
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionClaimsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionclaims)**

        Scopes:
          - `readPrivateClaimData` - Required if fetching private claim data (also must be manager of collection)

        Note: For fetching more advanced information like private claim data, you can do so with the get claim routes. Use the IDs from these responses.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false

  /addressLists/{addressListId}/claims:
    get:
      operationId: getAddressListClaims
      summary: Get Address List Claims
      tags:
        - Address Lists
      description: |-
        Gets claims for a specific address list.

        ```tsx
        await BitBadgesApi.getAddressListClaims("list123", { ... });
        ```

        SDK Links:
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListClaimsSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslistclaims)**

        Scopes:
          - `readPrivateClaimData` - Required if fetching private claim data (also must be manager of address list)

        Note: For fetching more advanced information like private claim data, you can do so with the get claim routes. Use the IDs from these responses.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: addressListId
          in: path
          description: Address list ID
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
  /api/v0/requestBin/attemptData/{claimId}/{claimAttemptId}:
    get:
      operationId: getAttemptDataFromRequestBin
      summary: Get Attempt Data (Request Bin)
      tags:
        - Claims
      description: |-
        Gets the attempt data for a specific claim attempt from the requestBin plugin.

        Pre-Req: Your claim must be setup with a "requestBin" plugin. On the site, it will be titled
        "Collect User Inputs". If there is none, this will fail.

        ```tsx
        await BitBadgesApi.getAttemptDataFromRequestBin("claim123", "attempt123", { ... });
        ```

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttemptDataFromRequestBinPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttemptDataFromRequestBinSuccessResponse)**
        - **[SDK API Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getattemptdatafromrequestbin)**

        Scopes:
          - `readPrivateClaimData` - Required and must be the manager
      parameters:
        - name: claimId
          in: path
          description: Claim ID
          required: true
          schema:
            type: string
        - name: claimAttemptId
          in: path
          description: Claim attempt ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAttemptDataFromRequestBinPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAttemptDataFromRequestBinSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/pools:
    get:
      operationId: getAllPools
      summary: Get All Pools
      description: |
        Retrieves all available liquidity pools.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAllPoolsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAllPoolsSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAllPoolsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAllPoolsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/pools/byDenom:
    get:
      operationId: getPoolInfosByDenom
      summary: Get Pool Infos by Denom
      description: |
        Retrieves pool information filtered by denomination.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPoolInfosByDenomPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPoolInfosByDenomSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetPoolInfosByDenomPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPoolInfosByDenomSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/pools/byAssets:
    get:
      operationId: getPoolInfosByAssets
      summary: Get Pool Infos by Assets
      description: |
        Retrieves pool information filtered by specific assets.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPoolInfosByAssetsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPoolInfosByAssetsSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetPoolInfosByAssetsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPoolInfosByAssetsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/pools/{poolId}:
    get:
      operationId: getPoolInfoById
      summary: Get Pool Info by ID
      description: |
        Retrieves detailed information for a specific pool by its ID.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPoolInfoByIdPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPoolInfoByIdSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: poolId
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetPoolInfoByIdPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPoolInfoByIdSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/swaps/estimate:
    post:
      operationId: estimateSwap
      summary: Estimate Swap
      description: |
        Estimates the output amount for a swap operation.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iEstimateSwapPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iEstimateSwapSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iEstimateSwapPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iEstimateSwapSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/assetPairs:
    get:
      operationId: getAssetPairs
      summary: Get Asset Pairs
      description: |
        Retrieves all available asset pairs.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAssetPairsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAssetPairsSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAssetPairsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAssetPairsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/assetPairs/topGainers:
    get:
      operationId: getTopGainers
      summary: Get Top Gainers
      description: |
        Retrieves asset pairs with the highest price gains.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTopGainersPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTopGainersSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetTopGainersPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetTopGainersSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/assetPairs/topLosers:
    get:
      operationId: getTopLosers
      summary: Get Top Losers
      description: |
        Retrieves asset pairs with the highest price losses.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTopLosersPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTopLosersSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetTopLosersPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetTopLosersSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/assetPairs/highestVolume:
    get:
      operationId: getHighestVolume
      summary: Get Highest Volume
      description: |
        Retrieves asset pairs with the highest trading volume.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetHighestVolumePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetHighestVolumeSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetHighestVolumePayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetHighestVolumeSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/assetPairs/priceSorted:
    get:
      operationId: getByPrice
      summary: Get by Price
      description: |
        Retrieves asset pairs sorted by price.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetByPricePayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetByPriceSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetByPricePayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetByPriceSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/assetPairs/weeklyTopGainers:
    get:
      operationId: getWeeklyTopGainers
      summary: Get Weekly Top Gainers
      description: |
        Retrieves asset pairs with the highest weekly price gains.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetWeeklyTopGainersPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetWeeklyTopGainersSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetWeeklyTopGainersPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetWeeklyTopGainersSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/assetPairs/weeklyTopLosers:
    get:
      operationId: getWeeklyTopLosers
      summary: Get Weekly Top Losers
      description: |
        Retrieves asset pairs with the highest weekly price losses.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetWeeklyTopLosersPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetWeeklyTopLosersSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetWeeklyTopLosersPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetWeeklyTopLosersSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/assetPairs/search:
    get:
      operationId: searchAssetPairsByText
      summary: Search Asset Pairs by Text
      description: |
        Searches asset pairs by text query.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchAssetPairsByTextPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchAssetPairsByTextSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: The payload for the request. Anything here should be specified as query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iSearchAssetPairsByTextPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchAssetPairsByTextSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

  /api/{version}/assetPairs/byDenoms:
    post:
      operationId: getByDenoms
      summary: Get Asset Pairs by Denoms
      description: |
        Retrieves asset pairs filtered by specific denominations.

        SDK Links:
        - **[Request Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetByDenomsPayload)**
        - **[Response Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetByDenomsSuccessResponse)**
      tags:
        - Assets
      parameters:
        - name: version
          in: path
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetByDenomsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetByDenomsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false

components:
  responses:
    ErrorResponse:
      description: An error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestResponse:
      description: Bad Request - Invalid configuration or request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedResponse:
      description: 'Unauthorized - Does not meet authentication requirements. This can be due to an invalid API key, CORS origin, or session cookie.'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
      description: Requires a BitBadges API key. This is true for all requests.
      x-type: string
    frontendOnly:
      type: apiKey
      in: header
      name: Origin
      description: Can only be called by the official BitBadges frontend. Not for developer use.
    userSignedIn:
      type: http
      scheme: cookie
      description: User must be signed in with correct OAuth scopes with a valid session and correct OAuth scopes. This can be done with OAuth 2.0 or an approved sign in.
    userMaybeSignedIn:
      type: http
      scheme: cookie
      description: 'User must be signed in with correct OAuth scopes for certain requests that fetch sensitive information, but certain requests can be made without being signed in. This can be done with OAuth 2.0 or an approved sign in.'
    userIsManager:
      type: http
      scheme: cookie
      description: User must be signed in with correct OAuth scopes and be the manager of the requested collection.
    userIsOwner:
      type: http
      scheme: cookie
      description: User must be signed in with correct OAuth scopes and must be the owner of the requested object.
