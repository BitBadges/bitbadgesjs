// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file maps/permissions.proto (package maps, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { UintRange } from "./balances_pb.js";

/**
 *
 * ActionPermission defines the permissions for performing an action.
 *
 * This is simple and straightforward as the only thing we need to check is the permitted/forbidden times.
 *
 * @generated from message maps.ActionPermission
 */
export class ActionPermission extends Message<ActionPermission> {
  /**
   * Specifies the times when this permission is permitted. Can not overlap with permanentlyForbiddenTimes.
   *
   * @generated from field: repeated maps.UintRange permanentlyPermittedTimes = 1;
   */
  permanentlyPermittedTimes: UintRange[] = [];

  /**
   * Specifies the times when this permission is forbidden. Can not overlap with permanentlyPermittedTimes.
   *
   * @generated from field: repeated maps.UintRange permanentlyForbiddenTimes = 2;
   */
  permanentlyForbiddenTimes: UintRange[] = [];

  constructor(data?: PartialMessage<ActionPermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.ActionPermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permanentlyPermittedTimes", kind: "message", T: UintRange, repeated: true },
    { no: 2, name: "permanentlyForbiddenTimes", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ActionPermission {
    return new ActionPermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ActionPermission {
    return new ActionPermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ActionPermission {
    return new ActionPermission().fromJsonString(jsonString, options);
  }

  static equals(a: ActionPermission | PlainMessage<ActionPermission> | undefined, b: ActionPermission | PlainMessage<ActionPermission> | undefined): boolean {
    return proto3.util.equals(ActionPermission, a, b);
  }
}

/**
 *
 * TimedUpdatePermission defines the permissions for updating a timeline-based field.
 *
 * Ex: If you want to lock the ability to update the collection's metadata for timelineTimes 1/1/2020 - 1/1/2021,
 * you could set the combination (TimelineTimes: [1/1/2020 - 1/1/2021]) to always be forbidden.
 *
 * @generated from message maps.TimedUpdatePermission
 */
export class TimedUpdatePermission extends Message<TimedUpdatePermission> {
  /**
   * Specifies the times when this permission is permitted. Can not overlap with permanentlyForbiddenTimes.
   *
   * @generated from field: repeated maps.UintRange permanentlyPermittedTimes = 1;
   */
  permanentlyPermittedTimes: UintRange[] = [];

  /**
   * Specifies the times when this permission is forbidden. Can not overlap with permanentlyPermittedTimes.
   *
   * @generated from field: repeated maps.UintRange permanentlyForbiddenTimes = 2;
   */
  permanentlyForbiddenTimes: UintRange[] = [];

  /**
   * Specifies the times when the timeline-based field is a specific value.
   *
   * @generated from field: repeated maps.UintRange timelineTimes = 3;
   */
  timelineTimes: UintRange[] = [];

  constructor(data?: PartialMessage<TimedUpdatePermission>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.TimedUpdatePermission";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "permanentlyPermittedTimes", kind: "message", T: UintRange, repeated: true },
    { no: 2, name: "permanentlyForbiddenTimes", kind: "message", T: UintRange, repeated: true },
    { no: 3, name: "timelineTimes", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimedUpdatePermission {
    return new TimedUpdatePermission().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimedUpdatePermission {
    return new TimedUpdatePermission().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimedUpdatePermission {
    return new TimedUpdatePermission().fromJsonString(jsonString, options);
  }

  static equals(a: TimedUpdatePermission | PlainMessage<TimedUpdatePermission> | undefined, b: TimedUpdatePermission | PlainMessage<TimedUpdatePermission> | undefined): boolean {
    return proto3.util.equals(TimedUpdatePermission, a, b);
  }
}

