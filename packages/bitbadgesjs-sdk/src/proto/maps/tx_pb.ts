// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file maps/tx.proto (package maps, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { ActionPermission, TimedUpdatePermission } from "./permissions_pb.js";
import { ManagerTimeline, MapMetadataTimeline } from "./timelines_pb.js";

/**
 * @generated from message maps.ValueStore
 */
export class ValueStore extends Message<ValueStore> {
  /**
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * @generated from field: string value = 2;
   */
  value = "";

  /**
   * @generated from field: string lastSetBy = 3;
   */
  lastSetBy = "";

  constructor(data?: PartialMessage<ValueStore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.ValueStore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lastSetBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueStore {
    return new ValueStore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueStore {
    return new ValueStore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueStore {
    return new ValueStore().fromJsonString(jsonString, options);
  }

  static equals(a: ValueStore | PlainMessage<ValueStore> | undefined, b: ValueStore | PlainMessage<ValueStore> | undefined): boolean {
    return proto3.util.equals(ValueStore, a, b);
  }
}

/**
 * @generated from message maps.MapUpdateCriteria
 */
export class MapUpdateCriteria extends Message<MapUpdateCriteria> {
  /**
   * All ID slots are only updatable by manager
   *
   * @generated from field: bool managerOnly = 1;
   */
  managerOnly = false;

  /**
   * ID slots are only updatable by badge ID owner of this collection (>1 balance at current time)
   *
   * @generated from field: string collectionId = 2;
   */
  collectionId = "";

  /**
   * Keys are address based and can only be updated by that respective address
   *
   * @generated from field: bool creatorOnly = 3;
   */
  creatorOnly = false;

  /**
   * Claim slots. Can unclaim by setting to blank. Uses lastSetBy.
   *
   * @generated from field: bool firstComeFirstServe = 4;
   */
  firstComeFirstServe = false;

  constructor(data?: PartialMessage<MapUpdateCriteria>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.MapUpdateCriteria";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "managerOnly", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "collectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "creatorOnly", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "firstComeFirstServe", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MapUpdateCriteria {
    return new MapUpdateCriteria().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MapUpdateCriteria {
    return new MapUpdateCriteria().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MapUpdateCriteria {
    return new MapUpdateCriteria().fromJsonString(jsonString, options);
  }

  static equals(a: MapUpdateCriteria | PlainMessage<MapUpdateCriteria> | undefined, b: MapUpdateCriteria | PlainMessage<MapUpdateCriteria> | undefined): boolean {
    return proto3.util.equals(MapUpdateCriteria, a, b);
  }
}

/**
 * @generated from message maps.ValueOptions
 */
export class ValueOptions extends Message<ValueOptions> {
  /**
   * @generated from field: bool noDuplicates = 1;
   */
  noDuplicates = false;

  /**
   * @generated from field: bool permanentOnceSet = 2;
   */
  permanentOnceSet = false;

  /**
   * @generated from field: bool expectUint = 3;
   */
  expectUint = false;

  /**
   * @generated from field: bool expectBoolean = 4;
   */
  expectBoolean = false;

  /**
   * @generated from field: bool expectAddress = 5;
   */
  expectAddress = false;

  /**
   * @generated from field: bool expectUri = 6;
   */
  expectUri = false;

  constructor(data?: PartialMessage<ValueOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.ValueOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "noDuplicates", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "permanentOnceSet", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "expectUint", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "expectBoolean", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "expectAddress", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "expectUri", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValueOptions {
    return new ValueOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValueOptions {
    return new ValueOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValueOptions {
    return new ValueOptions().fromJsonString(jsonString, options);
  }

  static equals(a: ValueOptions | PlainMessage<ValueOptions> | undefined, b: ValueOptions | PlainMessage<ValueOptions> | undefined): boolean {
    return proto3.util.equals(ValueOptions, a, b);
  }
}

/**
 * @generated from message maps.MapPermissions
 */
export class MapPermissions extends Message<MapPermissions> {
  /**
   * @generated from field: repeated maps.TimedUpdatePermission canUpdateMetadata = 1;
   */
  canUpdateMetadata: TimedUpdatePermission[] = [];

  /**
   * @generated from field: repeated maps.TimedUpdatePermission canUpdateManager = 2;
   */
  canUpdateManager: TimedUpdatePermission[] = [];

  /**
   * @generated from field: repeated maps.ActionPermission canDeleteMap = 3;
   */
  canDeleteMap: ActionPermission[] = [];

  constructor(data?: PartialMessage<MapPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.MapPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "canUpdateMetadata", kind: "message", T: TimedUpdatePermission, repeated: true },
    { no: 2, name: "canUpdateManager", kind: "message", T: TimedUpdatePermission, repeated: true },
    { no: 3, name: "canDeleteMap", kind: "message", T: ActionPermission, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MapPermissions {
    return new MapPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MapPermissions {
    return new MapPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MapPermissions {
    return new MapPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: MapPermissions | PlainMessage<MapPermissions> | undefined, b: MapPermissions | PlainMessage<MapPermissions> | undefined): boolean {
    return proto3.util.equals(MapPermissions, a, b);
  }
}

/**
 * @generated from message maps.Map
 */
export class Map extends Message<Map> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string mapId = 2;
   */
  mapId = "";

  /**
   * @generated from field: string inheritManagerTimelineFrom = 3;
   */
  inheritManagerTimelineFrom = "";

  /**
   * @generated from field: repeated maps.ManagerTimeline managerTimeline = 4;
   */
  managerTimeline: ManagerTimeline[] = [];

  /**
   * config options that will not change at all
   *
   * @generated from field: maps.MapUpdateCriteria updateCriteria = 5;
   */
  updateCriteria?: MapUpdateCriteria;

  /**
   * @generated from field: maps.ValueOptions valueOptions = 6;
   */
  valueOptions?: ValueOptions;

  /**
   * @generated from field: string defaultValue = 7;
   */
  defaultValue = "";

  /**
   * @generated from field: repeated maps.MapMetadataTimeline metadataTimeline = 10;
   */
  metadataTimeline: MapMetadataTimeline[] = [];

  /**
   * @generated from field: maps.MapPermissions permissions = 11;
   */
  permissions?: MapPermissions;

  constructor(data?: PartialMessage<Map>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.Map";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mapId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "inheritManagerTimelineFrom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "managerTimeline", kind: "message", T: ManagerTimeline, repeated: true },
    { no: 5, name: "updateCriteria", kind: "message", T: MapUpdateCriteria },
    { no: 6, name: "valueOptions", kind: "message", T: ValueOptions },
    { no: 7, name: "defaultValue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "metadataTimeline", kind: "message", T: MapMetadataTimeline, repeated: true },
    { no: 11, name: "permissions", kind: "message", T: MapPermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Map {
    return new Map().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Map {
    return new Map().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Map {
    return new Map().fromJsonString(jsonString, options);
  }

  static equals(a: Map | PlainMessage<Map> | undefined, b: Map | PlainMessage<Map> | undefined): boolean {
    return proto3.util.equals(Map, a, b);
  }
}

/**
 * @generated from message maps.MsgCreateMap
 */
export class MsgCreateMap extends Message<MsgCreateMap> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string mapId = 2;
   */
  mapId = "";

  /**
   * @generated from field: string inheritManagerTimelineFrom = 3;
   */
  inheritManagerTimelineFrom = "";

  /**
   * @generated from field: repeated maps.ManagerTimeline managerTimeline = 4;
   */
  managerTimeline: ManagerTimeline[] = [];

  /**
   * config options that will not change at all
   *
   * @generated from field: maps.MapUpdateCriteria updateCriteria = 5;
   */
  updateCriteria?: MapUpdateCriteria;

  /**
   * @generated from field: maps.ValueOptions valueOptions = 6;
   */
  valueOptions?: ValueOptions;

  /**
   * @generated from field: string defaultValue = 7;
   */
  defaultValue = "";

  /**
   * @generated from field: repeated maps.MapMetadataTimeline metadataTimeline = 9;
   */
  metadataTimeline: MapMetadataTimeline[] = [];

  /**
   * @generated from field: maps.MapPermissions permissions = 10;
   */
  permissions?: MapPermissions;

  constructor(data?: PartialMessage<MsgCreateMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.MsgCreateMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mapId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "inheritManagerTimelineFrom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "managerTimeline", kind: "message", T: ManagerTimeline, repeated: true },
    { no: 5, name: "updateCriteria", kind: "message", T: MapUpdateCriteria },
    { no: 6, name: "valueOptions", kind: "message", T: ValueOptions },
    { no: 7, name: "defaultValue", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "metadataTimeline", kind: "message", T: MapMetadataTimeline, repeated: true },
    { no: 10, name: "permissions", kind: "message", T: MapPermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateMap {
    return new MsgCreateMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateMap {
    return new MsgCreateMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateMap {
    return new MsgCreateMap().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateMap | PlainMessage<MsgCreateMap> | undefined, b: MsgCreateMap | PlainMessage<MsgCreateMap> | undefined): boolean {
    return proto3.util.equals(MsgCreateMap, a, b);
  }
}

/**
 * @generated from message maps.MsgCreateMapResponse
 */
export class MsgCreateMapResponse extends Message<MsgCreateMapResponse> {
  constructor(data?: PartialMessage<MsgCreateMapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.MsgCreateMapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateMapResponse {
    return new MsgCreateMapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateMapResponse {
    return new MsgCreateMapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateMapResponse {
    return new MsgCreateMapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateMapResponse | PlainMessage<MsgCreateMapResponse> | undefined, b: MsgCreateMapResponse | PlainMessage<MsgCreateMapResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateMapResponse, a, b);
  }
}

/**
 * @generated from message maps.MsgUpdateMap
 */
export class MsgUpdateMap extends Message<MsgUpdateMap> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string mapId = 2;
   */
  mapId = "";

  /**
   * @generated from field: bool updateManagerTimeline = 3;
   */
  updateManagerTimeline = false;

  /**
   * @generated from field: repeated maps.ManagerTimeline managerTimeline = 4;
   */
  managerTimeline: ManagerTimeline[] = [];

  /**
   * @generated from field: bool updateMetadataTimeline = 7;
   */
  updateMetadataTimeline = false;

  /**
   * @generated from field: repeated maps.MapMetadataTimeline metadataTimeline = 8;
   */
  metadataTimeline: MapMetadataTimeline[] = [];

  /**
   * @generated from field: bool updatePermissions = 9;
   */
  updatePermissions = false;

  /**
   * @generated from field: maps.MapPermissions permissions = 10;
   */
  permissions?: MapPermissions;

  constructor(data?: PartialMessage<MsgUpdateMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.MsgUpdateMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mapId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "updateManagerTimeline", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "managerTimeline", kind: "message", T: ManagerTimeline, repeated: true },
    { no: 7, name: "updateMetadataTimeline", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "metadataTimeline", kind: "message", T: MapMetadataTimeline, repeated: true },
    { no: 9, name: "updatePermissions", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "permissions", kind: "message", T: MapPermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateMap {
    return new MsgUpdateMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateMap {
    return new MsgUpdateMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateMap {
    return new MsgUpdateMap().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateMap | PlainMessage<MsgUpdateMap> | undefined, b: MsgUpdateMap | PlainMessage<MsgUpdateMap> | undefined): boolean {
    return proto3.util.equals(MsgUpdateMap, a, b);
  }
}

/**
 * @generated from message maps.MsgUpdateMapResponse
 */
export class MsgUpdateMapResponse extends Message<MsgUpdateMapResponse> {
  constructor(data?: PartialMessage<MsgUpdateMapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.MsgUpdateMapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateMapResponse {
    return new MsgUpdateMapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateMapResponse {
    return new MsgUpdateMapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateMapResponse {
    return new MsgUpdateMapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateMapResponse | PlainMessage<MsgUpdateMapResponse> | undefined, b: MsgUpdateMapResponse | PlainMessage<MsgUpdateMapResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateMapResponse, a, b);
  }
}

/**
 * @generated from message maps.MsgDeleteMap
 */
export class MsgDeleteMap extends Message<MsgDeleteMap> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string mapId = 2;
   */
  mapId = "";

  constructor(data?: PartialMessage<MsgDeleteMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.MsgDeleteMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mapId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeleteMap {
    return new MsgDeleteMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeleteMap {
    return new MsgDeleteMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeleteMap {
    return new MsgDeleteMap().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeleteMap | PlainMessage<MsgDeleteMap> | undefined, b: MsgDeleteMap | PlainMessage<MsgDeleteMap> | undefined): boolean {
    return proto3.util.equals(MsgDeleteMap, a, b);
  }
}

/**
 * @generated from message maps.MsgDeleteMapResponse
 */
export class MsgDeleteMapResponse extends Message<MsgDeleteMapResponse> {
  constructor(data?: PartialMessage<MsgDeleteMapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.MsgDeleteMapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeleteMapResponse {
    return new MsgDeleteMapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeleteMapResponse {
    return new MsgDeleteMapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeleteMapResponse {
    return new MsgDeleteMapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgDeleteMapResponse | PlainMessage<MsgDeleteMapResponse> | undefined, b: MsgDeleteMapResponse | PlainMessage<MsgDeleteMapResponse> | undefined): boolean {
    return proto3.util.equals(MsgDeleteMapResponse, a, b);
  }
}

/**
 * @generated from message maps.SetOptions
 */
export class SetOptions extends Message<SetOptions> {
  /**
   * @generated from field: bool useMostRecentCollectionId = 1;
   */
  useMostRecentCollectionId = false;

  constructor(data?: PartialMessage<SetOptions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.SetOptions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "useMostRecentCollectionId", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOptions {
    return new SetOptions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOptions {
    return new SetOptions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOptions {
    return new SetOptions().fromJsonString(jsonString, options);
  }

  static equals(a: SetOptions | PlainMessage<SetOptions> | undefined, b: SetOptions | PlainMessage<SetOptions> | undefined): boolean {
    return proto3.util.equals(SetOptions, a, b);
  }
}

/**
 * @generated from message maps.MsgSetValue
 */
export class MsgSetValue extends Message<MsgSetValue> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string mapId = 2;
   */
  mapId = "";

  /**
   * @generated from field: string key = 3;
   */
  key = "";

  /**
   * @generated from field: string value = 4;
   */
  value = "";

  /**
   * @generated from field: maps.SetOptions options = 5;
   */
  options?: SetOptions;

  constructor(data?: PartialMessage<MsgSetValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.MsgSetValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "mapId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "options", kind: "message", T: SetOptions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetValue {
    return new MsgSetValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetValue {
    return new MsgSetValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetValue {
    return new MsgSetValue().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetValue | PlainMessage<MsgSetValue> | undefined, b: MsgSetValue | PlainMessage<MsgSetValue> | undefined): boolean {
    return proto3.util.equals(MsgSetValue, a, b);
  }
}

/**
 * @generated from message maps.MsgSetValueResponse
 */
export class MsgSetValueResponse extends Message<MsgSetValueResponse> {
  constructor(data?: PartialMessage<MsgSetValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.MsgSetValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetValueResponse {
    return new MsgSetValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetValueResponse {
    return new MsgSetValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetValueResponse {
    return new MsgSetValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgSetValueResponse | PlainMessage<MsgSetValueResponse> | undefined, b: MsgSetValueResponse | PlainMessage<MsgSetValueResponse> | undefined): boolean {
    return proto3.util.equals(MsgSetValueResponse, a, b);
  }
}

