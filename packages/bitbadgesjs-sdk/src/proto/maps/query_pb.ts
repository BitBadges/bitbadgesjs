// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file maps/query.proto (package maps, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { Map, ValueStore } from "./tx_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message maps.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message maps.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: maps.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message maps.QueryGetMapRequest
 */
export class QueryGetMapRequest extends Message<QueryGetMapRequest> {
  /**
   * @generated from field: string mapId = 1;
   */
  mapId = "";

  constructor(data?: PartialMessage<QueryGetMapRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.QueryGetMapRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mapId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetMapRequest {
    return new QueryGetMapRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetMapRequest {
    return new QueryGetMapRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetMapRequest {
    return new QueryGetMapRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetMapRequest | PlainMessage<QueryGetMapRequest> | undefined, b: QueryGetMapRequest | PlainMessage<QueryGetMapRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetMapRequest, a, b);
  }
}

/**
 * @generated from message maps.QueryGetMapResponse
 */
export class QueryGetMapResponse extends Message<QueryGetMapResponse> {
  /**
   * @generated from field: maps.Map map = 1;
   */
  map?: Map;

  constructor(data?: PartialMessage<QueryGetMapResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.QueryGetMapResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "map", kind: "message", T: Map },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetMapResponse {
    return new QueryGetMapResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetMapResponse {
    return new QueryGetMapResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetMapResponse {
    return new QueryGetMapResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetMapResponse | PlainMessage<QueryGetMapResponse> | undefined, b: QueryGetMapResponse | PlainMessage<QueryGetMapResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetMapResponse, a, b);
  }
}

/**
 * @generated from message maps.QueryGetMapValueRequest
 */
export class QueryGetMapValueRequest extends Message<QueryGetMapValueRequest> {
  /**
   * @generated from field: string mapId = 1;
   */
  mapId = "";

  /**
   * @generated from field: string key = 2;
   */
  key = "";

  constructor(data?: PartialMessage<QueryGetMapValueRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.QueryGetMapValueRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mapId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetMapValueRequest {
    return new QueryGetMapValueRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetMapValueRequest {
    return new QueryGetMapValueRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetMapValueRequest {
    return new QueryGetMapValueRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetMapValueRequest | PlainMessage<QueryGetMapValueRequest> | undefined, b: QueryGetMapValueRequest | PlainMessage<QueryGetMapValueRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetMapValueRequest, a, b);
  }
}

/**
 * @generated from message maps.QueryGetMapValueResponse
 */
export class QueryGetMapValueResponse extends Message<QueryGetMapValueResponse> {
  /**
   * @generated from field: maps.ValueStore value = 1;
   */
  value?: ValueStore;

  constructor(data?: PartialMessage<QueryGetMapValueResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "maps.QueryGetMapValueResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: ValueStore },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetMapValueResponse {
    return new QueryGetMapValueResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetMapValueResponse {
    return new QueryGetMapValueResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetMapValueResponse {
    return new QueryGetMapValueResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetMapValueResponse | PlainMessage<QueryGetMapValueResponse> | undefined, b: QueryGetMapValueResponse | PlainMessage<QueryGetMapValueResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetMapValueResponse, a, b);
  }
}

