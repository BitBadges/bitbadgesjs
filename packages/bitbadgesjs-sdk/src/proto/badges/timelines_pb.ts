// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file badges/timelines.proto (package badges, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { BadgeMetadata, CollectionMetadata, OffChainBalancesMetadata } from "./metadata_pb.js";
import { UintRange } from "./balances_pb.js";

/**
 * CollectionMetadataTimeline defines the metadata for a collection at different timeline times.
 *
 * @generated from message badges.CollectionMetadataTimeline
 */
export class CollectionMetadataTimeline extends Message<CollectionMetadataTimeline> {
  /**
   * The collection metadata for a specific timeline element.
   *
   * @generated from field: badges.CollectionMetadata collectionMetadata = 1;
   */
  collectionMetadata?: CollectionMetadata;

  /**
   * The timeline times when the collection metadata is valid. Can not overlap with other timeline elements in same array.
   *
   * @generated from field: repeated badges.UintRange timelineTimes = 2;
   */
  timelineTimes: UintRange[] = [];

  constructor(data?: PartialMessage<CollectionMetadataTimeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.CollectionMetadataTimeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collectionMetadata", kind: "message", T: CollectionMetadata },
    { no: 2, name: "timelineTimes", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionMetadataTimeline {
    return new CollectionMetadataTimeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionMetadataTimeline {
    return new CollectionMetadataTimeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionMetadataTimeline {
    return new CollectionMetadataTimeline().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionMetadataTimeline | PlainMessage<CollectionMetadataTimeline> | undefined, b: CollectionMetadataTimeline | PlainMessage<CollectionMetadataTimeline> | undefined): boolean {
    return proto3.util.equals(CollectionMetadataTimeline, a, b);
  }
}

/**
 * BadgeMetadataTimeline defines the metadata for badges at different timeline times.
 *
 * @generated from message badges.BadgeMetadataTimeline
 */
export class BadgeMetadataTimeline extends Message<BadgeMetadataTimeline> {
  /**
   * The badge metadata for a specific timeline element.
   *
   * @generated from field: repeated badges.BadgeMetadata badgeMetadata = 1;
   */
  badgeMetadata: BadgeMetadata[] = [];

  /**
   * The timeline times when the badge metadata is valid. Can not overlap with other timeline elements in same array.
   *
   * @generated from field: repeated badges.UintRange timelineTimes = 2;
   */
  timelineTimes: UintRange[] = [];

  constructor(data?: PartialMessage<BadgeMetadataTimeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.BadgeMetadataTimeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "badgeMetadata", kind: "message", T: BadgeMetadata, repeated: true },
    { no: 2, name: "timelineTimes", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BadgeMetadataTimeline {
    return new BadgeMetadataTimeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BadgeMetadataTimeline {
    return new BadgeMetadataTimeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BadgeMetadataTimeline {
    return new BadgeMetadataTimeline().fromJsonString(jsonString, options);
  }

  static equals(a: BadgeMetadataTimeline | PlainMessage<BadgeMetadataTimeline> | undefined, b: BadgeMetadataTimeline | PlainMessage<BadgeMetadataTimeline> | undefined): boolean {
    return proto3.util.equals(BadgeMetadataTimeline, a, b);
  }
}

/**
 * OffChainBalancesMetadataTimeline defines the metadata for off-chain balances at different timeline times.
 *
 * @generated from message badges.OffChainBalancesMetadataTimeline
 */
export class OffChainBalancesMetadataTimeline extends Message<OffChainBalancesMetadataTimeline> {
  /**
   * The off-chain balances metadata for a specific timeline element.
   *
   * @generated from field: badges.OffChainBalancesMetadata offChainBalancesMetadata = 1;
   */
  offChainBalancesMetadata?: OffChainBalancesMetadata;

  /**
   * The timeline times when the off-chain balances metadata is valid. Can not overlap with other timeline elements in same array.
   *
   * @generated from field: repeated badges.UintRange timelineTimes = 2;
   */
  timelineTimes: UintRange[] = [];

  constructor(data?: PartialMessage<OffChainBalancesMetadataTimeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.OffChainBalancesMetadataTimeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offChainBalancesMetadata", kind: "message", T: OffChainBalancesMetadata },
    { no: 2, name: "timelineTimes", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OffChainBalancesMetadataTimeline {
    return new OffChainBalancesMetadataTimeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OffChainBalancesMetadataTimeline {
    return new OffChainBalancesMetadataTimeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OffChainBalancesMetadataTimeline {
    return new OffChainBalancesMetadataTimeline().fromJsonString(jsonString, options);
  }

  static equals(a: OffChainBalancesMetadataTimeline | PlainMessage<OffChainBalancesMetadataTimeline> | undefined, b: OffChainBalancesMetadataTimeline | PlainMessage<OffChainBalancesMetadataTimeline> | undefined): boolean {
    return proto3.util.equals(OffChainBalancesMetadataTimeline, a, b);
  }
}

/**
 * CustomDataTimeline defines custom data at different timeline times.
 *
 * @generated from message badges.CustomDataTimeline
 */
export class CustomDataTimeline extends Message<CustomDataTimeline> {
  /**
   * The custom data for a specific timeline element.
   *
   * @generated from field: string customData = 1;
   */
  customData = "";

  /**
   * The timeline times when the custom data is valid. Can not overlap with other timeline elements in same array.
   *
   * @generated from field: repeated badges.UintRange timelineTimes = 2;
   */
  timelineTimes: UintRange[] = [];

  constructor(data?: PartialMessage<CustomDataTimeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.CustomDataTimeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "customData", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timelineTimes", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CustomDataTimeline {
    return new CustomDataTimeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CustomDataTimeline {
    return new CustomDataTimeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CustomDataTimeline {
    return new CustomDataTimeline().fromJsonString(jsonString, options);
  }

  static equals(a: CustomDataTimeline | PlainMessage<CustomDataTimeline> | undefined, b: CustomDataTimeline | PlainMessage<CustomDataTimeline> | undefined): boolean {
    return proto3.util.equals(CustomDataTimeline, a, b);
  }
}

/**
 * ManagerTimeline defines the manager address at different timeline times.
 *
 * @generated from message badges.ManagerTimeline
 */
export class ManagerTimeline extends Message<ManagerTimeline> {
  /**
   * The manager address for a specific timeline element.
   *
   * @generated from field: string manager = 1;
   */
  manager = "";

  /**
   * The timeline times when the manager address is valid. Can not overlap with other timeline elements in same array.
   *
   * @generated from field: repeated badges.UintRange timelineTimes = 2;
   */
  timelineTimes: UintRange[] = [];

  constructor(data?: PartialMessage<ManagerTimeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.ManagerTimeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "manager", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timelineTimes", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ManagerTimeline {
    return new ManagerTimeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ManagerTimeline {
    return new ManagerTimeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ManagerTimeline {
    return new ManagerTimeline().fromJsonString(jsonString, options);
  }

  static equals(a: ManagerTimeline | PlainMessage<ManagerTimeline> | undefined, b: ManagerTimeline | PlainMessage<ManagerTimeline> | undefined): boolean {
    return proto3.util.equals(ManagerTimeline, a, b);
  }
}

/**
 * IsArchivedTimeline defines whether a collection is archived at different timeline times.
 *
 * @generated from message badges.IsArchivedTimeline
 */
export class IsArchivedTimeline extends Message<IsArchivedTimeline> {
  /**
   * Indicates whether the collection is archived for a specific timeline element.
   *
   * @generated from field: bool isArchived = 1;
   */
  isArchived = false;

  /**
   * The timeline times when the archived status is valid. Can not overlap with other timeline elements in same array.
   *
   * @generated from field: repeated badges.UintRange timelineTimes = 2;
   */
  timelineTimes: UintRange[] = [];

  constructor(data?: PartialMessage<IsArchivedTimeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.IsArchivedTimeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "isArchived", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "timelineTimes", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IsArchivedTimeline {
    return new IsArchivedTimeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IsArchivedTimeline {
    return new IsArchivedTimeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IsArchivedTimeline {
    return new IsArchivedTimeline().fromJsonString(jsonString, options);
  }

  static equals(a: IsArchivedTimeline | PlainMessage<IsArchivedTimeline> | undefined, b: IsArchivedTimeline | PlainMessage<IsArchivedTimeline> | undefined): boolean {
    return proto3.util.equals(IsArchivedTimeline, a, b);
  }
}

/**
 * ContractAddressTimeline defines the contract address at different timeline times.
 *
 * @generated from message badges.ContractAddressTimeline
 */
export class ContractAddressTimeline extends Message<ContractAddressTimeline> {
  /**
   * The contract address for a specific timeline element.
   *
   * @generated from field: string contractAddress = 1;
   */
  contractAddress = "";

  /**
   * The timeline times when the contract address is valid. Can not overlap with other timeline elements in same array.
   *
   * @generated from field: repeated badges.UintRange timelineTimes = 2;
   */
  timelineTimes: UintRange[] = [];

  constructor(data?: PartialMessage<ContractAddressTimeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.ContractAddressTimeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "contractAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "timelineTimes", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ContractAddressTimeline {
    return new ContractAddressTimeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ContractAddressTimeline {
    return new ContractAddressTimeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ContractAddressTimeline {
    return new ContractAddressTimeline().fromJsonString(jsonString, options);
  }

  static equals(a: ContractAddressTimeline | PlainMessage<ContractAddressTimeline> | undefined, b: ContractAddressTimeline | PlainMessage<ContractAddressTimeline> | undefined): boolean {
    return proto3.util.equals(ContractAddressTimeline, a, b);
  }
}

/**
 * StandardsTimeline defines the standards used for a collection at different timeline times.
 *
 * @generated from message badges.StandardsTimeline
 */
export class StandardsTimeline extends Message<StandardsTimeline> {
  /**
   * The standards applied to the collection for a specific timeline element.
   *
   * @generated from field: repeated string standards = 1;
   */
  standards: string[] = [];

  /**
   * The timeline times when the standards are valid. Can not overlap with other timeline elements in same array.
   *
   * @generated from field: repeated badges.UintRange timelineTimes = 2;
   */
  timelineTimes: UintRange[] = [];

  constructor(data?: PartialMessage<StandardsTimeline>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.StandardsTimeline";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "standards", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "timelineTimes", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): StandardsTimeline {
    return new StandardsTimeline().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): StandardsTimeline {
    return new StandardsTimeline().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): StandardsTimeline {
    return new StandardsTimeline().fromJsonString(jsonString, options);
  }

  static equals(a: StandardsTimeline | PlainMessage<StandardsTimeline> | undefined, b: StandardsTimeline | PlainMessage<StandardsTimeline> | undefined): boolean {
    return proto3.util.equals(StandardsTimeline, a, b);
  }
}

