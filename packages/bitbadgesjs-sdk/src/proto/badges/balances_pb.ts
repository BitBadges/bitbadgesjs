// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file badges/balances.proto (package badges, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 *
 * The UintRange is a range of IDs from some start to some end (inclusive).
 * uintRanges are one of the core types used.
 *
 * They are used for everything from badge IDs to time ranges to min/max balance amounts.
 *
 * See the BitBadges documentation for more information.
 *
 * @generated from message badges.UintRange
 */
export class UintRange extends Message<UintRange> {
  /**
   * The starting value of the range (inclusive).
   *
   * @generated from field: string start = 1;
   */
  start = "";

  /**
   * The ending value of the range (inclusive).
   *
   * @generated from field: string end = 2;
   */
  end = "";

  constructor(data?: PartialMessage<UintRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.UintRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "end", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UintRange {
    return new UintRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UintRange {
    return new UintRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UintRange {
    return new UintRange().fromJsonString(jsonString, options);
  }

  static equals(a: UintRange | PlainMessage<UintRange> | undefined, b: UintRange | PlainMessage<UintRange> | undefined): boolean {
    return proto3.util.equals(UintRange, a, b);
  }
}

/**
 *
 * Balance represents the balance of a badge for a specific user.
 * The user amounts xAmount of a badge for the badgeID specified for the time ranges specified.
 *
 * Example: User A owns x10 of badge IDs 1-10 from 1/1/2020 to 1/1/2021.
 *
 * If times or badgeIDs have len > 1, then the user owns all badge IDs specified for all time ranges specified.
 *
 * @generated from message badges.Balance
 */
export class Balance extends Message<Balance> {
  /**
   * The amount of the badge owned by the user.
   *
   * @generated from field: string amount = 1;
   */
  amount = "";

  /**
   * The time ranges during which the user owns the badge.
   *
   * @generated from field: repeated badges.UintRange ownershipTimes = 2;
   */
  ownershipTimes: UintRange[] = [];

  /**
   * The badge IDs for which the user owns the badge.
   *
   * @generated from field: repeated badges.UintRange badgeIds = 3;
   */
  badgeIds: UintRange[] = [];

  constructor(data?: PartialMessage<Balance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.Balance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "amount", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ownershipTimes", kind: "message", T: UintRange, repeated: true },
    { no: 3, name: "badgeIds", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Balance {
    return new Balance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Balance {
    return new Balance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Balance {
    return new Balance().fromJsonString(jsonString, options);
  }

  static equals(a: Balance | PlainMessage<Balance> | undefined, b: Balance | PlainMessage<Balance> | undefined): boolean {
    return proto3.util.equals(Balance, a, b);
  }
}

