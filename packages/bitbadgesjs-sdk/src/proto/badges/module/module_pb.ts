// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file badges/module/module.proto (package badges.module, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * Module is the config object for the module.
 *
 * @generated from message badges.module.Module
 */
export class Module extends Message<Module> {
  /**
   * authority defines the custom module authority. If not set, defaults to the governance module.
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * approved_contract_addresses defines the list of contract addresses that are approved to override the creator.
   *
   * @generated from field: repeated string approved_contract_addresses = 2;
   */
  approvedContractAddresses: string[] = [];

  /**
   * payout_address defines where to send the revenue from the module
   *
   * @generated from field: string payout_address = 3;
   */
  payoutAddress = "";

  /**
   * whether to allow coin_transfers in the approval interface
   *
   * @generated from field: bool enable_coin_transfers = 4;
   */
  enableCoinTransfers = false;

  /**
   * allowed_denoms defines the list of denoms that are allowed to be used in coin_transfers
   *
   * @generated from field: repeated string allowed_denoms = 5;
   */
  allowedDenoms: string[] = [];

  /**
   * fixed_cost_per_transfer defines the fixed cost per transfer
   *
   * @generated from field: string fixed_cost_per_transfer = 6;
   */
  fixedCostPerTransfer = "";

  constructor(data?: PartialMessage<Module>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.module.Module";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "approved_contract_addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "payout_address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "enable_coin_transfers", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "allowed_denoms", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 6, name: "fixed_cost_per_transfer", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Module {
    return new Module().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Module {
    return new Module().fromJsonString(jsonString, options);
  }

  static equals(a: Module | PlainMessage<Module> | undefined, b: Module | PlainMessage<Module> | undefined): boolean {
    return proto3.util.equals(Module, a, b);
  }
}

