// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file badges/query.proto (package badges, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";
import { BadgeCollection } from "./collections_pb.js";
import { ApprovalTracker, UserBalanceStore } from "./transfers_pb.js";
import { AddressList } from "./address_lists_pb.js";

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message badges.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined, b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b);
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message badges.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: badges.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined, b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b);
  }
}

/**
 * @generated from message badges.QueryGetCollectionRequest
 */
export class QueryGetCollectionRequest extends Message<QueryGetCollectionRequest> {
  /**
   * @generated from field: string collectionId = 1;
   */
  collectionId = "";

  constructor(data?: PartialMessage<QueryGetCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetCollectionRequest {
    return new QueryGetCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetCollectionRequest {
    return new QueryGetCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetCollectionRequest {
    return new QueryGetCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetCollectionRequest | PlainMessage<QueryGetCollectionRequest> | undefined, b: QueryGetCollectionRequest | PlainMessage<QueryGetCollectionRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetCollectionRequest, a, b);
  }
}

/**
 * @generated from message badges.QueryGetCollectionResponse
 */
export class QueryGetCollectionResponse extends Message<QueryGetCollectionResponse> {
  /**
   * @generated from field: badges.BadgeCollection collection = 1;
   */
  collection?: BadgeCollection;

  constructor(data?: PartialMessage<QueryGetCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collection", kind: "message", T: BadgeCollection },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetCollectionResponse {
    return new QueryGetCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetCollectionResponse {
    return new QueryGetCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetCollectionResponse {
    return new QueryGetCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetCollectionResponse | PlainMessage<QueryGetCollectionResponse> | undefined, b: QueryGetCollectionResponse | PlainMessage<QueryGetCollectionResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetCollectionResponse, a, b);
  }
}

/**
 * @generated from message badges.QueryGetBalanceRequest
 */
export class QueryGetBalanceRequest extends Message<QueryGetBalanceRequest> {
  /**
   * @generated from field: string collectionId = 1;
   */
  collectionId = "";

  /**
   * @generated from field: string address = 2;
   */
  address = "";

  constructor(data?: PartialMessage<QueryGetBalanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetBalanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetBalanceRequest {
    return new QueryGetBalanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetBalanceRequest {
    return new QueryGetBalanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetBalanceRequest {
    return new QueryGetBalanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetBalanceRequest | PlainMessage<QueryGetBalanceRequest> | undefined, b: QueryGetBalanceRequest | PlainMessage<QueryGetBalanceRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetBalanceRequest, a, b);
  }
}

/**
 * @generated from message badges.QueryGetBalanceResponse
 */
export class QueryGetBalanceResponse extends Message<QueryGetBalanceResponse> {
  /**
   * @generated from field: badges.UserBalanceStore balance = 1;
   */
  balance?: UserBalanceStore;

  constructor(data?: PartialMessage<QueryGetBalanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetBalanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "balance", kind: "message", T: UserBalanceStore },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetBalanceResponse {
    return new QueryGetBalanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetBalanceResponse {
    return new QueryGetBalanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetBalanceResponse {
    return new QueryGetBalanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetBalanceResponse | PlainMessage<QueryGetBalanceResponse> | undefined, b: QueryGetBalanceResponse | PlainMessage<QueryGetBalanceResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetBalanceResponse, a, b);
  }
}

/**
 * @generated from message badges.QueryGetAddressListRequest
 */
export class QueryGetAddressListRequest extends Message<QueryGetAddressListRequest> {
  /**
   * @generated from field: string listId = 1;
   */
  listId = "";

  constructor(data?: PartialMessage<QueryGetAddressListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetAddressListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "listId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetAddressListRequest {
    return new QueryGetAddressListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetAddressListRequest {
    return new QueryGetAddressListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetAddressListRequest {
    return new QueryGetAddressListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetAddressListRequest | PlainMessage<QueryGetAddressListRequest> | undefined, b: QueryGetAddressListRequest | PlainMessage<QueryGetAddressListRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetAddressListRequest, a, b);
  }
}

/**
 * @generated from message badges.QueryGetAddressListResponse
 */
export class QueryGetAddressListResponse extends Message<QueryGetAddressListResponse> {
  /**
   * @generated from field: badges.AddressList list = 1;
   */
  list?: AddressList;

  constructor(data?: PartialMessage<QueryGetAddressListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetAddressListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "list", kind: "message", T: AddressList },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetAddressListResponse {
    return new QueryGetAddressListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetAddressListResponse {
    return new QueryGetAddressListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetAddressListResponse {
    return new QueryGetAddressListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetAddressListResponse | PlainMessage<QueryGetAddressListResponse> | undefined, b: QueryGetAddressListResponse | PlainMessage<QueryGetAddressListResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetAddressListResponse, a, b);
  }
}

/**
 * @generated from message badges.QueryGetApprovalTrackerRequest
 */
export class QueryGetApprovalTrackerRequest extends Message<QueryGetApprovalTrackerRequest> {
  /**
   * @generated from field: string collectionId = 5;
   */
  collectionId = "";

  /**
   * "collection" or "incoming" or "outgoing"
   *
   * @generated from field: string approvalLevel = 2;
   */
  approvalLevel = "";

  /**
   * if approvalLevel is "collection", leave blank
   *
   * @generated from field: string approverAddress = 3;
   */
  approverAddress = "";

  /**
   * @generated from field: string amountTrackerId = 1;
   */
  amountTrackerId = "";

  /**
   * @generated from field: string trackerType = 4;
   */
  trackerType = "";

  /**
   * if trackerType is "overall", leave blank
   *
   * @generated from field: string approvedAddress = 6;
   */
  approvedAddress = "";

  constructor(data?: PartialMessage<QueryGetApprovalTrackerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetApprovalTrackerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 5, name: "collectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "approvalLevel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "approverAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 1, name: "amountTrackerId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "trackerType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "approvedAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetApprovalTrackerRequest {
    return new QueryGetApprovalTrackerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetApprovalTrackerRequest {
    return new QueryGetApprovalTrackerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetApprovalTrackerRequest {
    return new QueryGetApprovalTrackerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetApprovalTrackerRequest | PlainMessage<QueryGetApprovalTrackerRequest> | undefined, b: QueryGetApprovalTrackerRequest | PlainMessage<QueryGetApprovalTrackerRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetApprovalTrackerRequest, a, b);
  }
}

/**
 * @generated from message badges.QueryGetApprovalTrackerResponse
 */
export class QueryGetApprovalTrackerResponse extends Message<QueryGetApprovalTrackerResponse> {
  /**
   * @generated from field: badges.ApprovalTracker tracker = 1;
   */
  tracker?: ApprovalTracker;

  constructor(data?: PartialMessage<QueryGetApprovalTrackerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetApprovalTrackerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tracker", kind: "message", T: ApprovalTracker },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetApprovalTrackerResponse {
    return new QueryGetApprovalTrackerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetApprovalTrackerResponse {
    return new QueryGetApprovalTrackerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetApprovalTrackerResponse {
    return new QueryGetApprovalTrackerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetApprovalTrackerResponse | PlainMessage<QueryGetApprovalTrackerResponse> | undefined, b: QueryGetApprovalTrackerResponse | PlainMessage<QueryGetApprovalTrackerResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetApprovalTrackerResponse, a, b);
  }
}

/**
 * @generated from message badges.QueryGetChallengeTrackerRequest
 */
export class QueryGetChallengeTrackerRequest extends Message<QueryGetChallengeTrackerRequest> {
  /**
   * @generated from field: string collectionId = 1;
   */
  collectionId = "";

  /**
   * "collection" or "incoming" or "outgoing"
   *
   * @generated from field: string approvalLevel = 2;
   */
  approvalLevel = "";

  /**
   * if approvalLevel is "collection", leave blank
   *
   * @generated from field: string approverAddress = 3;
   */
  approverAddress = "";

  /**
   * @generated from field: string challengeTrackerId = 4;
   */
  challengeTrackerId = "";

  /**
   * @generated from field: string leafIndex = 5;
   */
  leafIndex = "";

  constructor(data?: PartialMessage<QueryGetChallengeTrackerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetChallengeTrackerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collectionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "approvalLevel", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "approverAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "challengeTrackerId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "leafIndex", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetChallengeTrackerRequest {
    return new QueryGetChallengeTrackerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetChallengeTrackerRequest {
    return new QueryGetChallengeTrackerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetChallengeTrackerRequest {
    return new QueryGetChallengeTrackerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetChallengeTrackerRequest | PlainMessage<QueryGetChallengeTrackerRequest> | undefined, b: QueryGetChallengeTrackerRequest | PlainMessage<QueryGetChallengeTrackerRequest> | undefined): boolean {
    return proto3.util.equals(QueryGetChallengeTrackerRequest, a, b);
  }
}

/**
 * @generated from message badges.QueryGetChallengeTrackerResponse
 */
export class QueryGetChallengeTrackerResponse extends Message<QueryGetChallengeTrackerResponse> {
  /**
   * @generated from field: string numUsed = 1;
   */
  numUsed = "";

  constructor(data?: PartialMessage<QueryGetChallengeTrackerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.QueryGetChallengeTrackerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numUsed", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryGetChallengeTrackerResponse {
    return new QueryGetChallengeTrackerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryGetChallengeTrackerResponse {
    return new QueryGetChallengeTrackerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryGetChallengeTrackerResponse {
    return new QueryGetChallengeTrackerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryGetChallengeTrackerResponse | PlainMessage<QueryGetChallengeTrackerResponse> | undefined, b: QueryGetChallengeTrackerResponse | PlainMessage<QueryGetChallengeTrackerResponse> | undefined): boolean {
    return proto3.util.equals(QueryGetChallengeTrackerResponse, a, b);
  }
}

