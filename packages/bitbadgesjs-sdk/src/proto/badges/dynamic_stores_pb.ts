// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file badges/dynamic_stores.proto (package badges, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 *
 * A DynamicStore is a flexible storage object that can store arbitrary data.
 * It is identified by a unique ID assigned by the blockchain, which is a uint64 that increments.
 * Dynamic stores are created by users and can only be updated or deleted by their creator.
 * They provide a way to store custom data on-chain with proper access control.
 *
 * @generated from message badges.DynamicStore
 */
export class DynamicStore extends Message<DynamicStore> {
  /**
   * The unique identifier for this dynamic store. This is assigned by the blockchain.
   *
   * @generated from field: string storeId = 1;
   */
  storeId = "";

  /**
   * The address of the creator of this dynamic store.
   *
   * @generated from field: string createdBy = 2;
   */
  createdBy = "";

  /**
   * The default value for uninitialized addresses.
   *
   * @generated from field: bool defaultValue = 3;
   */
  defaultValue = false;

  constructor(data?: PartialMessage<DynamicStore>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.DynamicStore";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "storeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "createdBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "defaultValue", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DynamicStore {
    return new DynamicStore().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DynamicStore {
    return new DynamicStore().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DynamicStore {
    return new DynamicStore().fromJsonString(jsonString, options);
  }

  static equals(a: DynamicStore | PlainMessage<DynamicStore> | undefined, b: DynamicStore | PlainMessage<DynamicStore> | undefined): boolean {
    return proto3.util.equals(DynamicStore, a, b);
  }
}

/**
 *
 * A DynamicStoreValue stores a 0/1 flag for a specific address in a dynamic store.
 * This allows the creator to set boolean values per address.
 *
 * @generated from message badges.DynamicStoreValue
 */
export class DynamicStoreValue extends Message<DynamicStoreValue> {
  /**
   * The unique identifier for this dynamic store.
   *
   * @generated from field: string storeId = 1;
   */
  storeId = "";

  /**
   * The address for which this value is stored.
   *
   * @generated from field: string address = 2;
   */
  address = "";

  /**
   * The boolean value (0 or 1).
   *
   * @generated from field: bool value = 3;
   */
  value = false;

  constructor(data?: PartialMessage<DynamicStoreValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.DynamicStoreValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "storeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DynamicStoreValue {
    return new DynamicStoreValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DynamicStoreValue {
    return new DynamicStoreValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DynamicStoreValue {
    return new DynamicStoreValue().fromJsonString(jsonString, options);
  }

  static equals(a: DynamicStoreValue | PlainMessage<DynamicStoreValue> | undefined, b: DynamicStoreValue | PlainMessage<DynamicStoreValue> | undefined): boolean {
    return proto3.util.equals(DynamicStoreValue, a, b);
  }
}

