// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file badges/metadata.proto (package badges, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { UintRange } from "./balances_pb.js";

/**
 *
 * This message defines the metadata for specific token IDs.
 * The interpretation of this metadata should follow the collection standard.
 *
 * @generated from message badges.TokenMetadata
 */
export class TokenMetadata extends Message<TokenMetadata> {
  /**
   * The URI (Uniform Resource Identifier) associated with the token metadata.
   *
   * @generated from field: string uri = 1;
   */
  uri = "";

  /**
   * Custom data or additional information related to the token metadata.
   *
   * @generated from field: string customData = 2;
   */
  customData = "";

  /**
   * The token IDs to which this metadata applies.
   *
   * @generated from field: repeated badges.UintRange tokenIds = 3;
   */
  tokenIds: UintRange[] = [];

  constructor(data?: PartialMessage<TokenMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.TokenMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customData", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "tokenIds", kind: "message", T: UintRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TokenMetadata {
    return new TokenMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TokenMetadata {
    return new TokenMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TokenMetadata {
    return new TokenMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: TokenMetadata | PlainMessage<TokenMetadata> | undefined, b: TokenMetadata | PlainMessage<TokenMetadata> | undefined): boolean {
    return proto3.util.equals(TokenMetadata, a, b);
  }
}

/**
 *
 * This message defines the metadata for the collection.
 * The interpretation of this metadata should follow the collection standard.
 *
 * @generated from message badges.CollectionMetadata
 */
export class CollectionMetadata extends Message<CollectionMetadata> {
  /**
   * The URI (Uniform Resource Identifier) associated with the collection metadata.
   *
   * @generated from field: string uri = 1;
   */
  uri = "";

  /**
   * Custom data or additional information related to the collection metadata.
   *
   * @generated from field: string customData = 2;
   */
  customData = "";

  constructor(data?: PartialMessage<CollectionMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.CollectionMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customData", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CollectionMetadata {
    return new CollectionMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CollectionMetadata {
    return new CollectionMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CollectionMetadata {
    return new CollectionMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: CollectionMetadata | PlainMessage<CollectionMetadata> | undefined, b: CollectionMetadata | PlainMessage<CollectionMetadata> | undefined): boolean {
    return proto3.util.equals(CollectionMetadata, a, b);
  }
}

/**
 *
 * This message defines the metadata for off-chain balances (if using an off-chain balances type).
 * The interpretation of this metadata should follow the collection standard.
 *
 * @generated from message badges.OffChainBalancesMetadata
 */
export class OffChainBalancesMetadata extends Message<OffChainBalancesMetadata> {
  /**
   * The URI (Uniform Resource Identifier) associated with the off-chain balances metadata.
   *
   * @generated from field: string uri = 1;
   */
  uri = "";

  /**
   * Custom data or additional information related to the off-chain balances metadata.
   *
   * @generated from field: string customData = 2;
   */
  customData = "";

  constructor(data?: PartialMessage<OffChainBalancesMetadata>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.OffChainBalancesMetadata";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "customData", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OffChainBalancesMetadata {
    return new OffChainBalancesMetadata().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OffChainBalancesMetadata {
    return new OffChainBalancesMetadata().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OffChainBalancesMetadata {
    return new OffChainBalancesMetadata().fromJsonString(jsonString, options);
  }

  static equals(a: OffChainBalancesMetadata | PlainMessage<OffChainBalancesMetadata> | undefined, b: OffChainBalancesMetadata | PlainMessage<OffChainBalancesMetadata> | undefined): boolean {
    return proto3.util.equals(OffChainBalancesMetadata, a, b);
  }
}

