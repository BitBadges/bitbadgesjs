// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file badges/address_lists.proto (package badges, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 *
 * An AddressList is a list of addresses that are referenced by an ID.
 * The list may include only the specified addresses, or it may include all addresses but
 * the specified addresses (depending on if whitelist is true (whitelist) or false (blacklist)).
 *
 * AddressLists are used for defining approvals, as well as being a simplified badge interface.
 *
 * @generated from message badges.AddressList
 */
export class AddressList extends Message<AddressList> {
  /**
   * Unique identifier for the address list.
   *
   * @generated from field: string listId = 1;
   */
  listId = "";

  /**
   * List of addresses included in the list.
   *
   * @generated from field: repeated string addresses = 2;
   */
  addresses: string[] = [];

  /**
   * Indicates whether the list includes the specified addresses (true) or excludes them (false).
   *
   * @generated from field: bool whitelist = 3;
   */
  whitelist = false;

  /**
   * URI (Uniform Resource Identifier) associated with the address list to provide metadata, if applicable.
   *
   * @generated from field: string uri = 4;
   */
  uri = "";

  /**
   * Custom arbitrary data or additional information related to the address list.
   *
   * @generated from field: string customData = 5;
   */
  customData = "";

  /**
   * The user or entity who created the address list.
   *
   * @generated from field: string createdBy = 6;
   */
  createdBy = "";

  /**
   * The alias BitBadges address for the list.
   *
   * @generated from field: string aliasAddress = 7;
   */
  aliasAddress = "";

  constructor(data?: PartialMessage<AddressList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "badges.AddressList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "listId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "addresses", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "whitelist", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "uri", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "customData", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "createdBy", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "aliasAddress", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddressList {
    return new AddressList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddressList {
    return new AddressList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddressList {
    return new AddressList().fromJsonString(jsonString, options);
  }

  static equals(a: AddressList | PlainMessage<AddressList> | undefined, b: AddressList | PlainMessage<AddressList> | undefined): boolean {
    return proto3.util.equals(AddressList, a, b);
  }
}

