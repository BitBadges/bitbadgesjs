// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file gamm/poolmodels/balancer/balancerPool.proto (package gamm.poolmodels.balancer, syntax proto3)
/* eslint-disable */
// @ts-nocheck

// this is a legacy package that requires additional migration logic
// in order to use the correct package. Decision made to use legacy package path
// until clear steps for migration logic and the unknowns for state breaking are
// investigated for changing proto package.

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js";

/**
 * PoolParams defined the parameters that will be managed by the pool
 * governance in the future. This params are not managed by the chain
 * governance. Instead they will be managed by the token holders of the pool.
 *
 * @generated from message gamm.poolmodels.balancer.PoolParams
 */
export class PoolParams extends Message<PoolParams> {
  /**
   * @generated from field: string swap_fee = 1;
   */
  swapFee = "";

  /**
   * N.B.: exit fee is disabled during pool creation in x/poolmanager. While old
   * pools can maintain a non-zero fee. No new pool can be created with non-zero
   * fee anymore
   *
   * @generated from field: string exit_fee = 2;
   */
  exitFee = "";

  constructor(data?: PartialMessage<PoolParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gamm.poolmodels.balancer.PoolParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "swap_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exit_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolParams {
    return new PoolParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolParams {
    return new PoolParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolParams {
    return new PoolParams().fromJsonString(jsonString, options);
  }

  static equals(a: PoolParams | PlainMessage<PoolParams> | undefined, b: PoolParams | PlainMessage<PoolParams> | undefined): boolean {
    return proto3.util.equals(PoolParams, a, b);
  }
}

/**
 * Pool asset is an internal struct that combines the amount of the
 * token in the pool, and its balancer weight.
 * This is an awkward packaging of data,
 * and should be revisited in a future state migration.
 *
 * @generated from message gamm.poolmodels.balancer.PoolAsset
 */
export class PoolAsset extends Message<PoolAsset> {
  /**
   * Coins we are talking about,
   * the denomination must be unique amongst all PoolAssets for this pool.
   *
   * @generated from field: cosmos.base.v1beta1.Coin token = 1;
   */
  token?: Coin;

  /**
   * Weight that is not normalized. This weight must be less than 2^50
   *
   * @generated from field: string weight = 2;
   */
  weight = "";

  constructor(data?: PartialMessage<PoolAsset>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gamm.poolmodels.balancer.PoolAsset";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: Coin },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PoolAsset {
    return new PoolAsset().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolAsset {
    return new PoolAsset().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PoolAsset {
    return new PoolAsset().fromJsonString(jsonString, options);
  }

  static equals(a: PoolAsset | PlainMessage<PoolAsset> | undefined, b: PoolAsset | PlainMessage<PoolAsset> | undefined): boolean {
    return proto3.util.equals(PoolAsset, a, b);
  }
}

/**
 * @generated from message gamm.poolmodels.balancer.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: uint64 id = 2;
   */
  id = protoInt64.zero;

  /**
   * @generated from field: gamm.poolmodels.balancer.PoolParams pool_params = 3;
   */
  poolParams?: PoolParams;

  /**
   * sum of all LP tokens sent out
   *
   * @generated from field: cosmos.base.v1beta1.Coin total_shares = 4;
   */
  totalShares?: Coin;

  /**
   * These are assumed to be sorted by denomiation.
   * They contain the pool asset and the information about the weight
   *
   * @generated from field: repeated gamm.poolmodels.balancer.PoolAsset pool_assets = 5;
   */
  poolAssets: PoolAsset[] = [];

  /**
   * sum of all non-normalized pool weights
   *
   * @generated from field: string total_weight = 6;
   */
  totalWeight = "";

  constructor(data?: PartialMessage<Pool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gamm.poolmodels.balancer.Pool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pool_params", kind: "message", T: PoolParams },
    { no: 4, name: "total_shares", kind: "message", T: Coin },
    { no: 5, name: "pool_assets", kind: "message", T: PoolAsset, repeated: true },
    { no: 6, name: "total_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options);
  }

  static equals(a: Pool | PlainMessage<Pool> | undefined, b: Pool | PlainMessage<Pool> | undefined): boolean {
    return proto3.util.equals(Pool, a, b);
  }
}

