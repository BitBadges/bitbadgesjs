// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file gamm/poolmodels/balancer/tx.proto (package gamm.poolmodels.balancer, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { PoolAsset, PoolParams } from "./balancerPool_pb.js";

/**
 * ===================== MsgCreatePool
 *
 * @generated from message gamm.poolmodels.balancer.MsgCreateBalancerPool
 */
export class MsgCreateBalancerPool extends Message<MsgCreateBalancerPool> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * @generated from field: gamm.poolmodels.balancer.PoolParams pool_params = 2;
   */
  poolParams?: PoolParams;

  /**
   * @generated from field: repeated gamm.poolmodels.balancer.PoolAsset pool_assets = 3;
   */
  poolAssets: PoolAsset[] = [];

  constructor(data?: PartialMessage<MsgCreateBalancerPool>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gamm.poolmodels.balancer.MsgCreateBalancerPool";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_params", kind: "message", T: PoolParams },
    { no: 3, name: "pool_assets", kind: "message", T: PoolAsset, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateBalancerPool {
    return new MsgCreateBalancerPool().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateBalancerPool {
    return new MsgCreateBalancerPool().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateBalancerPool {
    return new MsgCreateBalancerPool().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateBalancerPool | PlainMessage<MsgCreateBalancerPool> | undefined, b: MsgCreateBalancerPool | PlainMessage<MsgCreateBalancerPool> | undefined): boolean {
    return proto3.util.equals(MsgCreateBalancerPool, a, b);
  }
}

/**
 * Returns the poolID
 *
 * @generated from message gamm.poolmodels.balancer.MsgCreateBalancerPoolResponse
 */
export class MsgCreateBalancerPoolResponse extends Message<MsgCreateBalancerPoolResponse> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero;

  constructor(data?: PartialMessage<MsgCreateBalancerPoolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gamm.poolmodels.balancer.MsgCreateBalancerPoolResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateBalancerPoolResponse {
    return new MsgCreateBalancerPoolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateBalancerPoolResponse {
    return new MsgCreateBalancerPoolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateBalancerPoolResponse {
    return new MsgCreateBalancerPoolResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgCreateBalancerPoolResponse | PlainMessage<MsgCreateBalancerPoolResponse> | undefined, b: MsgCreateBalancerPoolResponse | PlainMessage<MsgCreateBalancerPoolResponse> | undefined): boolean {
    return proto3.util.equals(MsgCreateBalancerPoolResponse, a, b);
  }
}

/**
 * Used for WASM bindings and JSON parsing
 *
 * @generated from message gamm.poolmodels.balancer.BalancerCustomMsgType
 */
export class BalancerCustomMsgType extends Message<BalancerCustomMsgType> {
  /**
   * @generated from field: gamm.poolmodels.balancer.MsgCreateBalancerPool createBalancerPoolMsg = 1;
   */
  createBalancerPoolMsg?: MsgCreateBalancerPool;

  constructor(data?: PartialMessage<BalancerCustomMsgType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "gamm.poolmodels.balancer.BalancerCustomMsgType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "createBalancerPoolMsg", kind: "message", T: MsgCreateBalancerPool },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BalancerCustomMsgType {
    return new BalancerCustomMsgType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BalancerCustomMsgType {
    return new BalancerCustomMsgType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BalancerCustomMsgType {
    return new BalancerCustomMsgType().fromJsonString(jsonString, options);
  }

  static equals(a: BalancerCustomMsgType | PlainMessage<BalancerCustomMsgType> | undefined, b: BalancerCustomMsgType | PlainMessage<BalancerCustomMsgType> | undefined): boolean {
    return proto3.util.equals(BalancerCustomMsgType, a, b);
  }
}

