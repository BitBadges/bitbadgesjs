// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file solana/web3.proto (package solana, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from '@bufbuild/protobuf';
import { Message, proto3, protoInt64 } from '@bufbuild/protobuf';

/**
 * ExtensionOptionsWeb3Tx is an extension option that specifies the typed chain id,
 * the fee payer as well as its signature data.
 *
 * @generated from message solana.ExtensionOptionsWeb3TxSolana
 */
export class ExtensionOptionsWeb3TxSolana extends Message<ExtensionOptionsWeb3TxSolana> {
  /**
   * typed_data_chain_id is used only in EIP712 Domain and should match
   * Ethereum network ID in a Web3 provider (e.g. Metamask).
   *
   * @generated from field: uint64 typed_data_chain_id = 1;
   */
  typedDataChainId = protoInt64.zero;

  /**
   * fee_payer is an account address for the fee payer. It will be validated
   * during EIP712 signature checking.
   *
   * @generated from field: string fee_payer = 2;
   */
  feePayer = '';

  /**
   * fee_payer_sig is a signature data from the fee paying account,
   * allows to perform fee delegation when using EIP712 Domain.
   *
   * @generated from field: bytes fee_payer_sig = 3;
   */
  feePayerSig = new Uint8Array(0);

  /**
   * chain should be "Solana"
   *
   * @generated from field: string chain = 4;
   */
  chain = '';

  /**
   * sol_address is the address of the solana account.
   * Used for indexing purposes because we can't natively go from a cosmos address (what is used on-chain) to a solana address
   * without knowing the solana address in the first place. This is because conversion to cosmos requires a hash of the solana address.
   *
   * @generated from field: string sol_address = 5;
   */
  solAddress = '';

  constructor(data?: PartialMessage<ExtensionOptionsWeb3TxSolana>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'solana.ExtensionOptionsWeb3TxSolana';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'typed_data_chain_id', kind: 'scalar', T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: 'fee_payer', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'fee_payer_sig', kind: 'scalar', T: 12 /* ScalarType.BYTES */ },
    { no: 4, name: 'chain', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'sol_address', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExtensionOptionsWeb3TxSolana {
    return new ExtensionOptionsWeb3TxSolana().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExtensionOptionsWeb3TxSolana {
    return new ExtensionOptionsWeb3TxSolana().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExtensionOptionsWeb3TxSolana {
    return new ExtensionOptionsWeb3TxSolana().fromJsonString(jsonString, options);
  }

  static equals(
    a: ExtensionOptionsWeb3TxSolana | PlainMessage<ExtensionOptionsWeb3TxSolana> | undefined,
    b: ExtensionOptionsWeb3TxSolana | PlainMessage<ExtensionOptionsWeb3TxSolana> | undefined
  ): boolean {
    return proto3.util.equals(ExtensionOptionsWeb3TxSolana, a, b);
  }
}
