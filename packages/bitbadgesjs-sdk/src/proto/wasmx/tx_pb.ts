// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file wasmx/tx.proto (package wasmx, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message wasmx.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * params defines the module parameters to update.
   *
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: wasmx.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wasmx.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message wasmx.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wasmx.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * MsgExecuteContractCompat submits the given message data to a smart contract, compatible with EIP712
 *
 * @generated from message wasmx.MsgExecuteContractCompat
 */
export class MsgExecuteContractCompat extends Message<MsgExecuteContractCompat> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 2;
   */
  contract = "";

  /**
   * Msg json encoded message to be passed to the contract
   *
   * @generated from field: string msg = 3;
   */
  msg = "";

  /**
   * Funds coins that are transferred to the contract on execution
   *
   * @generated from field: string funds = 4;
   */
  funds = "";

  constructor(data?: PartialMessage<MsgExecuteContractCompat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wasmx.MsgExecuteContractCompat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "contract", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "msg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "funds", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteContractCompat {
    return new MsgExecuteContractCompat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteContractCompat {
    return new MsgExecuteContractCompat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteContractCompat {
    return new MsgExecuteContractCompat().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteContractCompat | PlainMessage<MsgExecuteContractCompat> | undefined, b: MsgExecuteContractCompat | PlainMessage<MsgExecuteContractCompat> | undefined): boolean {
    return proto3.util.equals(MsgExecuteContractCompat, a, b);
  }
}

/**
 * MsgExecuteContractCompatResponse returns execution result data.
 *
 * @generated from message wasmx.MsgExecuteContractCompatResponse
 */
export class MsgExecuteContractCompatResponse extends Message<MsgExecuteContractCompatResponse> {
  /**
   * Data contains bytes to returned from the contract
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgExecuteContractCompatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wasmx.MsgExecuteContractCompatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteContractCompatResponse {
    return new MsgExecuteContractCompatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteContractCompatResponse {
    return new MsgExecuteContractCompatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteContractCompatResponse {
    return new MsgExecuteContractCompatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgExecuteContractCompatResponse | PlainMessage<MsgExecuteContractCompatResponse> | undefined, b: MsgExecuteContractCompatResponse | PlainMessage<MsgExecuteContractCompatResponse> | undefined): boolean {
    return proto3.util.equals(MsgExecuteContractCompatResponse, a, b);
  }
}

/**
 * @generated from message wasmx.MsgInstantiateContractCompat
 */
export class MsgInstantiateContractCompat extends Message<MsgInstantiateContractCompat> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = "";

  /**
   * Code ID obtained from store wasm code
   *
   * @generated from field: string codeId = 2;
   */
  codeId = "";

  /**
   * Label is a human-readable string for labelling the contract
   *
   * @generated from field: string label = 3;
   */
  label = "";

  /**
   * Funds coins that are transferred to the contract on instantiation
   *
   * @generated from field: string funds = 4;
   */
  funds = "";

  constructor(data?: PartialMessage<MsgInstantiateContractCompat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wasmx.MsgInstantiateContractCompat";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "codeId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "funds", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantiateContractCompat {
    return new MsgInstantiateContractCompat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantiateContractCompat {
    return new MsgInstantiateContractCompat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantiateContractCompat {
    return new MsgInstantiateContractCompat().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantiateContractCompat | PlainMessage<MsgInstantiateContractCompat> | undefined, b: MsgInstantiateContractCompat | PlainMessage<MsgInstantiateContractCompat> | undefined): boolean {
    return proto3.util.equals(MsgInstantiateContractCompat, a, b);
  }
}

/**
 * MsgInstantiateContractCompatResponse returns store result data.
 *
 * @generated from message wasmx.MsgInstantiateContractCompatResponse
 */
export class MsgInstantiateContractCompatResponse extends Message<MsgInstantiateContractCompatResponse> {
  /**
   * @generated from field: string address = 1;
   */
  address = "";

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgInstantiateContractCompatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wasmx.MsgInstantiateContractCompatResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantiateContractCompatResponse {
    return new MsgInstantiateContractCompatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantiateContractCompatResponse {
    return new MsgInstantiateContractCompatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantiateContractCompatResponse {
    return new MsgInstantiateContractCompatResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgInstantiateContractCompatResponse | PlainMessage<MsgInstantiateContractCompatResponse> | undefined, b: MsgInstantiateContractCompatResponse | PlainMessage<MsgInstantiateContractCompatResponse> | undefined): boolean {
    return proto3.util.equals(MsgInstantiateContractCompatResponse, a, b);
  }
}

