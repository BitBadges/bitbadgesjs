// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file wasmx/tx.proto (package wasmx, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * MsgExecuteContractCompat submits the given message data to a smart contract, compatible with EIP712
 *
 * @generated from message wasmx.MsgExecuteContractCompat
 */
export class MsgExecuteContractCompat extends Message<MsgExecuteContractCompat> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = '';

  /**
   * Contract is the address of the smart contract
   *
   * @generated from field: string contract = 2;
   */
  contract = '';

  /**
   * Msg json encoded message to be passed to the contract
   *
   * @generated from field: string msg = 3;
   */
  msg = '';

  /**
   * Funds coins that are transferred to the contract on execution
   *
   * @generated from field: string funds = 4;
   */
  funds = '';

  constructor(data?: PartialMessage<MsgExecuteContractCompat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'wasmx.MsgExecuteContractCompat';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'sender', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'contract', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'msg', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'funds', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteContractCompat {
    return new MsgExecuteContractCompat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteContractCompat {
    return new MsgExecuteContractCompat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteContractCompat {
    return new MsgExecuteContractCompat().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgExecuteContractCompat | PlainMessage<MsgExecuteContractCompat> | undefined,
    b: MsgExecuteContractCompat | PlainMessage<MsgExecuteContractCompat> | undefined
  ): boolean {
    return proto3.util.equals(MsgExecuteContractCompat, a, b);
  }
}

/**
 * MsgExecuteContractCompatResponse returns execution result data.
 *
 * @generated from message wasmx.MsgExecuteContractCompatResponse
 */
export class MsgExecuteContractCompatResponse extends Message<MsgExecuteContractCompatResponse> {
  /**
   * Data contains bytes to returned from the contract
   *
   * @generated from field: bytes data = 1;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgExecuteContractCompatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'wasmx.MsgExecuteContractCompatResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [{ no: 1, name: 'data', kind: 'scalar', T: 12 /* ScalarType.BYTES */ }]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgExecuteContractCompatResponse {
    return new MsgExecuteContractCompatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgExecuteContractCompatResponse {
    return new MsgExecuteContractCompatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgExecuteContractCompatResponse {
    return new MsgExecuteContractCompatResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgExecuteContractCompatResponse | PlainMessage<MsgExecuteContractCompatResponse> | undefined,
    b: MsgExecuteContractCompatResponse | PlainMessage<MsgExecuteContractCompatResponse> | undefined
  ): boolean {
    return proto3.util.equals(MsgExecuteContractCompatResponse, a, b);
  }
}

/**
 * MsgStoreCodeCompat submits the given message data to a smart contract, compatible with EIP712
 *
 * @generated from message wasmx.MsgStoreCodeCompat
 */
export class MsgStoreCodeCompat extends Message<MsgStoreCodeCompat> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = '';

  /**
   * WasmByteCode is the raw wasm bytes
   *
   * @generated from field: string hexWasmByteCode = 2;
   */
  hexWasmByteCode = '';

  constructor(data?: PartialMessage<MsgStoreCodeCompat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'wasmx.MsgStoreCodeCompat';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'sender', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'hexWasmByteCode', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStoreCodeCompat {
    return new MsgStoreCodeCompat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStoreCodeCompat {
    return new MsgStoreCodeCompat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStoreCodeCompat {
    return new MsgStoreCodeCompat().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgStoreCodeCompat | PlainMessage<MsgStoreCodeCompat> | undefined,
    b: MsgStoreCodeCompat | PlainMessage<MsgStoreCodeCompat> | undefined
  ): boolean {
    return proto3.util.equals(MsgStoreCodeCompat, a, b);
  }
}

/**
 * MsgStoreCodeCompatResponse returns store result data.
 *
 * @generated from message wasmx.MsgStoreCodeCompatResponse
 */
export class MsgStoreCodeCompatResponse extends Message<MsgStoreCodeCompatResponse> {
  /**
   * CodeID is the reference to the stored WASM code
   *
   * @generated from field: string codeId = 1;
   */
  codeId = '';

  /**
   * Checksum is the sha256 hash of the stored code
   *
   * @generated from field: bytes checksum = 2;
   */
  checksum = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgStoreCodeCompatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'wasmx.MsgStoreCodeCompatResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'codeId', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'checksum', kind: 'scalar', T: 12 /* ScalarType.BYTES */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgStoreCodeCompatResponse {
    return new MsgStoreCodeCompatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgStoreCodeCompatResponse {
    return new MsgStoreCodeCompatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgStoreCodeCompatResponse {
    return new MsgStoreCodeCompatResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgStoreCodeCompatResponse | PlainMessage<MsgStoreCodeCompatResponse> | undefined,
    b: MsgStoreCodeCompatResponse | PlainMessage<MsgStoreCodeCompatResponse> | undefined
  ): boolean {
    return proto3.util.equals(MsgStoreCodeCompatResponse, a, b);
  }
}

/**
 * @generated from message wasmx.MsgInstantiateContractCompat
 */
export class MsgInstantiateContractCompat extends Message<MsgInstantiateContractCompat> {
  /**
   * Sender is the that actor that signed the messages
   *
   * @generated from field: string sender = 1;
   */
  sender = '';

  /**
   * Code ID obtained from store wasm code
   *
   * @generated from field: string codeId = 2;
   */
  codeId = '';

  /**
   * Label is a human-readable string for labelling the contract
   *
   * @generated from field: string label = 3;
   */
  label = '';

  /**
   * Funds coins that are transferred to the contract on instantiation
   *
   * @generated from field: string funds = 4;
   */
  funds = '';

  constructor(data?: PartialMessage<MsgInstantiateContractCompat>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'wasmx.MsgInstantiateContractCompat';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'sender', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'codeId', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'label', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'funds', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantiateContractCompat {
    return new MsgInstantiateContractCompat().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantiateContractCompat {
    return new MsgInstantiateContractCompat().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantiateContractCompat {
    return new MsgInstantiateContractCompat().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgInstantiateContractCompat | PlainMessage<MsgInstantiateContractCompat> | undefined,
    b: MsgInstantiateContractCompat | PlainMessage<MsgInstantiateContractCompat> | undefined
  ): boolean {
    return proto3.util.equals(MsgInstantiateContractCompat, a, b);
  }
}

/**
 * MsgInstantiateContractCompatResponse returns store result data.
 *
 * @generated from message wasmx.MsgInstantiateContractCompatResponse
 */
export class MsgInstantiateContractCompatResponse extends Message<MsgInstantiateContractCompatResponse> {
  /**
   * @generated from field: string address = 1;
   */
  address = '';

  /**
   * @generated from field: bytes data = 2;
   */
  data = new Uint8Array(0);

  constructor(data?: PartialMessage<MsgInstantiateContractCompatResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'wasmx.MsgInstantiateContractCompatResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'address', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'data', kind: 'scalar', T: 12 /* ScalarType.BYTES */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgInstantiateContractCompatResponse {
    return new MsgInstantiateContractCompatResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgInstantiateContractCompatResponse {
    return new MsgInstantiateContractCompatResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgInstantiateContractCompatResponse {
    return new MsgInstantiateContractCompatResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgInstantiateContractCompatResponse | PlainMessage<MsgInstantiateContractCompatResponse> | undefined,
    b: MsgInstantiateContractCompatResponse | PlainMessage<MsgInstantiateContractCompatResponse> | undefined
  ): boolean {
    return proto3.util.equals(MsgInstantiateContractCompatResponse, a, b);
  }
}
