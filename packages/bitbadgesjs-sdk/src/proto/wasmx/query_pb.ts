// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file wasmx/query.proto (package wasmx, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./wasmx_pb.js";
import { GenesisState } from "./genesis_pb.js";

/**
 * QueryWasmxParamsRequest is the request type for the Query/WasmxParams RPC method.
 *
 * @generated from message wasmx.QueryWasmxParamsRequest
 */
export class QueryWasmxParamsRequest extends Message<QueryWasmxParamsRequest> {
  constructor(data?: PartialMessage<QueryWasmxParamsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wasmx.QueryWasmxParamsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWasmxParamsRequest {
    return new QueryWasmxParamsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWasmxParamsRequest {
    return new QueryWasmxParamsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWasmxParamsRequest {
    return new QueryWasmxParamsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWasmxParamsRequest | PlainMessage<QueryWasmxParamsRequest> | undefined, b: QueryWasmxParamsRequest | PlainMessage<QueryWasmxParamsRequest> | undefined): boolean {
    return proto3.util.equals(QueryWasmxParamsRequest, a, b);
  }
}

/**
 * QueryWasmxParamsRequest is the response type for the Query/WasmxParams RPC method.
 *
 * @generated from message wasmx.QueryWasmxParamsResponse
 */
export class QueryWasmxParamsResponse extends Message<QueryWasmxParamsResponse> {
  /**
   * @generated from field: wasmx.Params params = 1;
   */
  params?: Params;

  constructor(data?: PartialMessage<QueryWasmxParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wasmx.QueryWasmxParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryWasmxParamsResponse {
    return new QueryWasmxParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryWasmxParamsResponse {
    return new QueryWasmxParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryWasmxParamsResponse {
    return new QueryWasmxParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryWasmxParamsResponse | PlainMessage<QueryWasmxParamsResponse> | undefined, b: QueryWasmxParamsResponse | PlainMessage<QueryWasmxParamsResponse> | undefined): boolean {
    return proto3.util.equals(QueryWasmxParamsResponse, a, b);
  }
}

/**
 * QueryModuleStateRequest is the request type for the Query/WasmxModuleState RPC method.
 *
 * @generated from message wasmx.QueryModuleStateRequest
 */
export class QueryModuleStateRequest extends Message<QueryModuleStateRequest> {
  constructor(data?: PartialMessage<QueryModuleStateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wasmx.QueryModuleStateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModuleStateRequest {
    return new QueryModuleStateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModuleStateRequest | PlainMessage<QueryModuleStateRequest> | undefined, b: QueryModuleStateRequest | PlainMessage<QueryModuleStateRequest> | undefined): boolean {
    return proto3.util.equals(QueryModuleStateRequest, a, b);
  }
}

/**
 * QueryModuleStateResponse is the response type for the Query/WasmxModuleState RPC method.
 *
 * @generated from message wasmx.QueryModuleStateResponse
 */
export class QueryModuleStateResponse extends Message<QueryModuleStateResponse> {
  /**
   * @generated from field: wasmx.GenesisState state = 1;
   */
  state?: GenesisState;

  constructor(data?: PartialMessage<QueryModuleStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "wasmx.QueryModuleStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "message", T: GenesisState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryModuleStateResponse {
    return new QueryModuleStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryModuleStateResponse | PlainMessage<QueryModuleStateResponse> | undefined, b: QueryModuleStateResponse | PlainMessage<QueryModuleStateResponse> | undefined): boolean {
    return proto3.util.equals(QueryModuleStateResponse, a, b);
  }
}

