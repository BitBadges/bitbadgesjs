// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file protocols/tx.proto (package protocols, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from '@bufbuild/protobuf';
import { Message, proto3 } from '@bufbuild/protobuf';

/**
 * @generated from message protocols.Protocol
 */
export class Protocol extends Message<Protocol> {
  /**
   * @generated from field: string name = 1;
   */
  name = '';

  /**
   * @generated from field: string uri = 2;
   */
  uri = '';

  /**
   * @generated from field: string customData = 3;
   */
  customData = '';

  /**
   * @generated from field: string createdBy = 4;
   */
  createdBy = '';

  /**
   * @generated from field: bool isFrozen = 5;
   */
  isFrozen = false;

  constructor(data?: PartialMessage<Protocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.Protocol';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'customData', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'createdBy', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'isFrozen', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Protocol {
    return new Protocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Protocol {
    return new Protocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Protocol {
    return new Protocol().fromJsonString(jsonString, options);
  }

  static equals(a: Protocol | PlainMessage<Protocol> | undefined, b: Protocol | PlainMessage<Protocol> | undefined): boolean {
    return proto3.util.equals(Protocol, a, b);
  }
}

/**
 * @generated from message protocols.MsgCreateProtocol
 */
export class MsgCreateProtocol extends Message<MsgCreateProtocol> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = '';

  /**
   * @generated from field: string name = 2;
   */
  name = '';

  /**
   * @generated from field: string uri = 3;
   */
  uri = '';

  /**
   * @generated from field: string customData = 4;
   */
  customData = '';

  /**
   * @generated from field: bool isFrozen = 5;
   */
  isFrozen = false;

  constructor(data?: PartialMessage<MsgCreateProtocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.MsgCreateProtocol';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'creator', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'customData', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'isFrozen', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateProtocol {
    return new MsgCreateProtocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateProtocol {
    return new MsgCreateProtocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateProtocol {
    return new MsgCreateProtocol().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgCreateProtocol | PlainMessage<MsgCreateProtocol> | undefined,
    b: MsgCreateProtocol | PlainMessage<MsgCreateProtocol> | undefined
  ): boolean {
    return proto3.util.equals(MsgCreateProtocol, a, b);
  }
}

/**
 * @generated from message protocols.MsgCreateProtocolResponse
 */
export class MsgCreateProtocolResponse extends Message<MsgCreateProtocolResponse> {
  constructor(data?: PartialMessage<MsgCreateProtocolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.MsgCreateProtocolResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgCreateProtocolResponse {
    return new MsgCreateProtocolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgCreateProtocolResponse {
    return new MsgCreateProtocolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgCreateProtocolResponse {
    return new MsgCreateProtocolResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgCreateProtocolResponse | PlainMessage<MsgCreateProtocolResponse> | undefined,
    b: MsgCreateProtocolResponse | PlainMessage<MsgCreateProtocolResponse> | undefined
  ): boolean {
    return proto3.util.equals(MsgCreateProtocolResponse, a, b);
  }
}

/**
 * @generated from message protocols.MsgUpdateProtocol
 */
export class MsgUpdateProtocol extends Message<MsgUpdateProtocol> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = '';

  /**
   * @generated from field: string name = 2;
   */
  name = '';

  /**
   * @generated from field: string uri = 3;
   */
  uri = '';

  /**
   * @generated from field: string customData = 4;
   */
  customData = '';

  /**
   * @generated from field: bool isFrozen = 5;
   */
  isFrozen = false;

  constructor(data?: PartialMessage<MsgUpdateProtocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.MsgUpdateProtocol';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'creator', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'uri', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 4, name: 'customData', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 5, name: 'isFrozen', kind: 'scalar', T: 8 /* ScalarType.BOOL */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateProtocol {
    return new MsgUpdateProtocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateProtocol {
    return new MsgUpdateProtocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateProtocol {
    return new MsgUpdateProtocol().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgUpdateProtocol | PlainMessage<MsgUpdateProtocol> | undefined,
    b: MsgUpdateProtocol | PlainMessage<MsgUpdateProtocol> | undefined
  ): boolean {
    return proto3.util.equals(MsgUpdateProtocol, a, b);
  }
}

/**
 * @generated from message protocols.MsgUpdateProtocolResponse
 */
export class MsgUpdateProtocolResponse extends Message<MsgUpdateProtocolResponse> {
  constructor(data?: PartialMessage<MsgUpdateProtocolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.MsgUpdateProtocolResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateProtocolResponse {
    return new MsgUpdateProtocolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateProtocolResponse {
    return new MsgUpdateProtocolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateProtocolResponse {
    return new MsgUpdateProtocolResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgUpdateProtocolResponse | PlainMessage<MsgUpdateProtocolResponse> | undefined,
    b: MsgUpdateProtocolResponse | PlainMessage<MsgUpdateProtocolResponse> | undefined
  ): boolean {
    return proto3.util.equals(MsgUpdateProtocolResponse, a, b);
  }
}

/**
 * @generated from message protocols.MsgDeleteProtocol
 */
export class MsgDeleteProtocol extends Message<MsgDeleteProtocol> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = '';

  /**
   * @generated from field: string name = 2;
   */
  name = '';

  constructor(data?: PartialMessage<MsgDeleteProtocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.MsgDeleteProtocol';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'creator', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeleteProtocol {
    return new MsgDeleteProtocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeleteProtocol {
    return new MsgDeleteProtocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeleteProtocol {
    return new MsgDeleteProtocol().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgDeleteProtocol | PlainMessage<MsgDeleteProtocol> | undefined,
    b: MsgDeleteProtocol | PlainMessage<MsgDeleteProtocol> | undefined
  ): boolean {
    return proto3.util.equals(MsgDeleteProtocol, a, b);
  }
}

/**
 * @generated from message protocols.MsgDeleteProtocolResponse
 */
export class MsgDeleteProtocolResponse extends Message<MsgDeleteProtocolResponse> {
  constructor(data?: PartialMessage<MsgDeleteProtocolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.MsgDeleteProtocolResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgDeleteProtocolResponse {
    return new MsgDeleteProtocolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgDeleteProtocolResponse {
    return new MsgDeleteProtocolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgDeleteProtocolResponse {
    return new MsgDeleteProtocolResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgDeleteProtocolResponse | PlainMessage<MsgDeleteProtocolResponse> | undefined,
    b: MsgDeleteProtocolResponse | PlainMessage<MsgDeleteProtocolResponse> | undefined
  ): boolean {
    return proto3.util.equals(MsgDeleteProtocolResponse, a, b);
  }
}

/**
 * @generated from message protocols.MsgSetCollectionForProtocol
 */
export class MsgSetCollectionForProtocol extends Message<MsgSetCollectionForProtocol> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = '';

  /**
   * @generated from field: string name = 2;
   */
  name = '';

  /**
   * @generated from field: string collectionId = 3;
   */
  collectionId = '';

  constructor(data?: PartialMessage<MsgSetCollectionForProtocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.MsgSetCollectionForProtocol';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'creator', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 3, name: 'collectionId', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetCollectionForProtocol {
    return new MsgSetCollectionForProtocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetCollectionForProtocol {
    return new MsgSetCollectionForProtocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetCollectionForProtocol {
    return new MsgSetCollectionForProtocol().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgSetCollectionForProtocol | PlainMessage<MsgSetCollectionForProtocol> | undefined,
    b: MsgSetCollectionForProtocol | PlainMessage<MsgSetCollectionForProtocol> | undefined
  ): boolean {
    return proto3.util.equals(MsgSetCollectionForProtocol, a, b);
  }
}

/**
 * @generated from message protocols.MsgSetCollectionForProtocolResponse
 */
export class MsgSetCollectionForProtocolResponse extends Message<MsgSetCollectionForProtocolResponse> {
  constructor(data?: PartialMessage<MsgSetCollectionForProtocolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.MsgSetCollectionForProtocolResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgSetCollectionForProtocolResponse {
    return new MsgSetCollectionForProtocolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgSetCollectionForProtocolResponse {
    return new MsgSetCollectionForProtocolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgSetCollectionForProtocolResponse {
    return new MsgSetCollectionForProtocolResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgSetCollectionForProtocolResponse | PlainMessage<MsgSetCollectionForProtocolResponse> | undefined,
    b: MsgSetCollectionForProtocolResponse | PlainMessage<MsgSetCollectionForProtocolResponse> | undefined
  ): boolean {
    return proto3.util.equals(MsgSetCollectionForProtocolResponse, a, b);
  }
}

/**
 * @generated from message protocols.MsgUnsetCollectionForProtocol
 */
export class MsgUnsetCollectionForProtocol extends Message<MsgUnsetCollectionForProtocol> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = '';

  /**
   * @generated from field: string name = 2;
   */
  name = '';

  constructor(data?: PartialMessage<MsgUnsetCollectionForProtocol>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.MsgUnsetCollectionForProtocol';
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: 'creator', kind: 'scalar', T: 9 /* ScalarType.STRING */ },
    { no: 2, name: 'name', kind: 'scalar', T: 9 /* ScalarType.STRING */ }
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnsetCollectionForProtocol {
    return new MsgUnsetCollectionForProtocol().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnsetCollectionForProtocol {
    return new MsgUnsetCollectionForProtocol().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnsetCollectionForProtocol {
    return new MsgUnsetCollectionForProtocol().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgUnsetCollectionForProtocol | PlainMessage<MsgUnsetCollectionForProtocol> | undefined,
    b: MsgUnsetCollectionForProtocol | PlainMessage<MsgUnsetCollectionForProtocol> | undefined
  ): boolean {
    return proto3.util.equals(MsgUnsetCollectionForProtocol, a, b);
  }
}

/**
 * @generated from message protocols.MsgUnsetCollectionForProtocolResponse
 */
export class MsgUnsetCollectionForProtocolResponse extends Message<MsgUnsetCollectionForProtocolResponse> {
  constructor(data?: PartialMessage<MsgUnsetCollectionForProtocolResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = 'protocols.MsgUnsetCollectionForProtocolResponse';
  static readonly fields: FieldList = proto3.util.newFieldList(() => []);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUnsetCollectionForProtocolResponse {
    return new MsgUnsetCollectionForProtocolResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUnsetCollectionForProtocolResponse {
    return new MsgUnsetCollectionForProtocolResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUnsetCollectionForProtocolResponse {
    return new MsgUnsetCollectionForProtocolResponse().fromJsonString(jsonString, options);
  }

  static equals(
    a: MsgUnsetCollectionForProtocolResponse | PlainMessage<MsgUnsetCollectionForProtocolResponse> | undefined,
    b: MsgUnsetCollectionForProtocolResponse | PlainMessage<MsgUnsetCollectionForProtocolResponse> | undefined
  ): boolean {
    return proto3.util.equals(MsgUnsetCollectionForProtocolResponse, a, b);
  }
}
