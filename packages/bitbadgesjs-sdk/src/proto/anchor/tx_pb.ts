// @generated by protoc-gen-es v1.7.2 with parameter "target=ts"
// @generated from file anchor/tx.proto (package anchor, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { Params } from "./params_pb.js";

/**
 * MsgUpdateParams is the Msg/UpdateParams request type.
 *
 * @generated from message anchor.MsgUpdateParams
 */
export class MsgUpdateParams extends Message<MsgUpdateParams> {
  /**
   * authority is the address that controls the module (defaults to x/gov unless overwritten).
   *
   * @generated from field: string authority = 1;
   */
  authority = "";

  /**
   * NOTE: All parameters must be supplied.
   *
   * @generated from field: anchor.Params params = 2;
   */
  params?: Params;

  constructor(data?: PartialMessage<MsgUpdateParams>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anchor.MsgUpdateParams";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "authority", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "params", kind: "message", T: Params },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParams {
    return new MsgUpdateParams().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined, b: MsgUpdateParams | PlainMessage<MsgUpdateParams> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParams, a, b);
  }
}

/**
 * MsgUpdateParamsResponse defines the response structure for executing a
 * MsgUpdateParams message.
 *
 * @generated from message anchor.MsgUpdateParamsResponse
 */
export class MsgUpdateParamsResponse extends Message<MsgUpdateParamsResponse> {
  constructor(data?: PartialMessage<MsgUpdateParamsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anchor.MsgUpdateParamsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgUpdateParamsResponse {
    return new MsgUpdateParamsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined, b: MsgUpdateParamsResponse | PlainMessage<MsgUpdateParamsResponse> | undefined): boolean {
    return proto3.util.equals(MsgUpdateParamsResponse, a, b);
  }
}

/**
 * Used for WASM bindings and JSON parsing
 *
 * @generated from message anchor.AnchorCustomMsgType
 */
export class AnchorCustomMsgType extends Message<AnchorCustomMsgType> {
  /**
   * @generated from field: anchor.MsgAddCustomData addCustomDataMsg = 1;
   */
  addCustomDataMsg?: MsgAddCustomData;

  constructor(data?: PartialMessage<AnchorCustomMsgType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anchor.AnchorCustomMsgType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "addCustomDataMsg", kind: "message", T: MsgAddCustomData },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnchorCustomMsgType {
    return new AnchorCustomMsgType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnchorCustomMsgType {
    return new AnchorCustomMsgType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnchorCustomMsgType {
    return new AnchorCustomMsgType().fromJsonString(jsonString, options);
  }

  static equals(a: AnchorCustomMsgType | PlainMessage<AnchorCustomMsgType> | undefined, b: AnchorCustomMsgType | PlainMessage<AnchorCustomMsgType> | undefined): boolean {
    return proto3.util.equals(AnchorCustomMsgType, a, b);
  }
}

/**
 * @generated from message anchor.MsgAddCustomData
 */
export class MsgAddCustomData extends Message<MsgAddCustomData> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string data = 2;
   */
  data = "";

  constructor(data?: PartialMessage<MsgAddCustomData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anchor.MsgAddCustomData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddCustomData {
    return new MsgAddCustomData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddCustomData {
    return new MsgAddCustomData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddCustomData {
    return new MsgAddCustomData().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddCustomData | PlainMessage<MsgAddCustomData> | undefined, b: MsgAddCustomData | PlainMessage<MsgAddCustomData> | undefined): boolean {
    return proto3.util.equals(MsgAddCustomData, a, b);
  }
}

/**
 * @generated from message anchor.MsgAddCustomDataResponse
 */
export class MsgAddCustomDataResponse extends Message<MsgAddCustomDataResponse> {
  /**
   * ID of the anchor location.
   *
   * @generated from field: string locationId = 1;
   */
  locationId = "";

  constructor(data?: PartialMessage<MsgAddCustomDataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anchor.MsgAddCustomDataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locationId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MsgAddCustomDataResponse {
    return new MsgAddCustomDataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MsgAddCustomDataResponse {
    return new MsgAddCustomDataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MsgAddCustomDataResponse {
    return new MsgAddCustomDataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MsgAddCustomDataResponse | PlainMessage<MsgAddCustomDataResponse> | undefined, b: MsgAddCustomDataResponse | PlainMessage<MsgAddCustomDataResponse> | undefined): boolean {
    return proto3.util.equals(MsgAddCustomDataResponse, a, b);
  }
}

/**
 * @generated from message anchor.AnchorData
 */
export class AnchorData extends Message<AnchorData> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = "";

  /**
   * @generated from field: string data = 2;
   */
  data = "";

  /**
   * @generated from field: string timestamp = 3;
   */
  timestamp = "";

  constructor(data?: PartialMessage<AnchorData>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "anchor.AnchorData";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "data", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AnchorData {
    return new AnchorData().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AnchorData {
    return new AnchorData().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AnchorData {
    return new AnchorData().fromJsonString(jsonString, options);
  }

  static equals(a: AnchorData | PlainMessage<AnchorData> | undefined, b: AnchorData | PlainMessage<AnchorData> | undefined): boolean {
    return proto3.util.equals(AnchorData, a, b);
  }
}

