openapi: 3.1.0
info:
  title: BitBadges API
  description: >-
    # Introduction

    The BitBadges API is a RESTful API that enables developers to interact with
    the BitBadges blockchain and indexer. This API provides comprehensive access
    to the BitBadges ecosystem, allowing you to query and interact with digital
    badges, collections, accounts, blockchain data, and more.

    For complete documentation, see the [BitBadges
    Documentation](https://docs.bitbadges.io/for-developers/bitbadges-api/api)

    and use along with this reference.


    Note: The API + documentation is new and may contain bugs. If you find any
    issues, please let us know via Discord or another contact method
    (https://bitbadges.io/contact).


    # Getting Started


    ## Authentication

    All API requests require an API key for authentication. You can obtain your
    API key from the [BitBadges Developer
    Portal](https://bitbadges.io/developer).


    ### API Key Authentication

    Include your API key in the `x-api-key` header:

    ```

    x-api-key: your-api-key-here

    ```


    <br />


    ## User Authentication

    Most read-only applications can function with just an API key. However, if
    you need to access private user data or perform actions on behalf of users,
    you have two options:


    ### OAuth 2.0 (Sign In with BitBadges)

    For performing actions on behalf of other users, use the standard OAuth 2.0
    flow via Sign In with BitBadges.

    See the [Sign In with BitBadges
    documentation](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)
    for details.


    You will pass the access token in the Authorization header:

    ```

    Authorization: Bearer your-access-token-here

    ```


    ### Password Self-Approve Method

    For automating actions for your own account:

    1. Set up an approved password sign in in your account settings tab on
    https://bitbadges.io with desired scopes (e.g. `completeClaims`)

    2. Sign in using:

    ```typescript

    const { message } = await BitBadgesApi.getSignInChallenge(...);

    const verificationRes = await BitBadgesApi.verifySignIn({
        message,
        signature: '', //Empty string
        password: '...'
    })

    ```


    Note: This method uses HTTP session cookies. Ensure your requests support
    credentials (e.g. axios: { withCredentials: true }).


    ### Scopes

    Note that for proper authentication, you must have the proper scopes set.


    See [https://bitbadges.io/auth/linkgen](https://bitbadges.io/auth/linkgen)
    for a helper URL generation tool. The scopes will be included in

    the `scope` parameter of the SIWBB URL or set in your approved sign in
    settings.


    Note that stuff marked as Full Access is typically reserved for the official
    site. If you think you may need this,

    contact us.


    ### Available Scopes


    - **Report** (`report`)
      Report users or collections.

    - **Read Profile** (`readProfile`)
      Read your private profile information. This includes your email, approved sign-in methods, connections, and other private information.

    - **Read Address Lists** (`readAddressLists`)
      Read private address lists on behalf of the user.

    - **Manage Address Lists** (`manageAddressLists`)
      Create, update, and delete address lists on behalf of the user (private or public).

    - **Manage Applications** (`manageApplications`)
      Create, update, and delete applications on behalf of the user.

    - **Manage Claims** (`manageClaims`)
      Create, update, and delete claims on behalf of the user.

    - **Manage Developer Apps** (`manageDeveloperApps`)
      Create, update, and delete developer apps on behalf of the user.

    - **Manage Dynamic Stores** (`manageDynamicStores`)
      Create, update, and delete dynamic stores on behalf of the user.

    - **Manage Utility Pages** (`manageUtilityPages`)
      Create, update, and delete utility pages on behalf of the user.

    - **Approve Sign In With BitBadges Requests**
    (`approveSignInWithBitBadgesRequests`)
      Sign In with BitBadges on behalf of the user.

    - **Read Authentication Codes** (`readAuthenticationCodes`)
      Read Authentication Codes on behalf of the user.

    - **Delete Authentication Codes** (`deleteAuthenticationCodes`)
      Delete Authentication Codes on behalf of the user.

    - **Send Claim Alerts** (`sendClaimAlerts`)
      Send claim alerts on behalf of the user.

    - **Read Claim Alerts** (`readClaimAlerts`)
      Read claim alerts on behalf of the user. Note that claim alerts may contain sensitive information like claim codes, attestation IDs, etc.

    - **Manage Attestations** (`manageAttestations`)
      Manage attestations on behalf of the user. This includes creating, updating, and deleting attestations.

    - **Read Attestations** (`readAttestations`)
      Read attestations on behalf of the user.

    - **Read Private Claim Data** (`readPrivateClaimData`)
      Read private claim data on behalf of the user (e.g. codes, passwords, private user lists, etc.).

    - **Complete Claims** (`completeClaims`)
      Complete claims on behalf of the user.

    - **Manage Off-Chain Balances** (`manageOffChainBalances`)
      Manage off-chain balances on behalf of the user.

    - **Embedded Wallet** (`embeddedWallet`)
      Sign transactions on behalf of the user with their embedded wallet.

    <br />


    ## SDK Integration

    The recommended way to interact with the API is through our
    TypeScript/JavaScript SDK:


    ```typescript

    import { BigIntify, BitBadgesAPI } from "bitbadgesjs-sdk";


    // Initialize the API client

    const api = new BitBadgesAPI({
      convertFunction: BigIntify,
      apiKey: 'your-api-key-here'
    });


    // Example: Fetch collections

    const collections = await api.getCollections({
      collectionsToFetch: [{
        collectionId: 1n,
        metadataToFetch: {
          badgeIds: [{ start: 1n, end: 10n }]
        }
      }]
    });

    ```


    <br />


    # Tiers

    There are 3 tiers of API keys, each with different rate limits and
    permissions. See the pricing page for more details:
    https://bitbadges.io/pricing

    - Free tier

    - Premium tier

    - Enterprise tier


    Rate limit headers included in responses:

    - `X-RateLimit-Limit`: Total requests allowed per window

    - `X-RateLimit-Remaining`: Remaining requests in current window

    - `X-RateLimit-Reset`: Time until rate limit resets (UTC timestamp)


    # Response Formats


    ## Error Response


    All API errors follow a consistent format:


    ```typescript

    {
      // Serialized error object for debugging purposes
      // Advanced users can use this to debug issues
      error?: any;

      // UX-friendly error message that can be displayed to the user
      // Always present if error occurs
      errorMessage: string;

      // Authentication error flag
      // Present if the user is not authenticated
      unauthorized?: boolean;
    }

    ```


    <br />


    ## Pagination

    Cursor-based pagination is used for list endpoints:

    ```typescript

    {
      items: T[],
      bookmark: string, // Use this for the next page
      hasMore: boolean
    }

    ```


    <br />


    # Best Practices

    1. **Rate Limiting**: Implement proper rate limit handling

    2. **Caching**: Cache responses when appropriate

    3. **Error Handling**: Handle API errors gracefully

    4. **Batch Operations**: Use batch endpoints when possible


    # Additional Resources

    - [Official
    Documentation](https://docs.bitbadges.io/for-developers/bitbadges-api/api)

    - [SDK
    Documentation](https://docs.bitbadges.io/for-developers/bitbadges-sdk/overview)

    - [Developer Portal](https://bitbadges.io/developer)

    - [GitHub SDK Repository](https://github.com/bitbadges/bitbadgesjs)

    - [Quickstarter
    Repository](https://github.com/bitbadges/bitbadges-quickstart)


    # Support

    - [Contact Page](https://bitbadges.io/contact)
  version: '0.1'
  license:
    name: MIT
    url: https://github.com/bitbadges/bitbadgesjs/blob/main/LICENSE
  termsOfService: https://bitbadges.io/policies
servers:
  - url: https://api.bitbadges.io/api/v0
    description: Production API Server
  - url: https://api.bitbadges.io/testnet/api/v0
    description: Testnet API Server
security:
  - apiKey: []
tags:
  - name: Accounts
    description: Endpoints for managing user accounts and profiles
  - name: Badges
    description: Endpoints for badge and collection operations
  - name: Claims
    description: Endpoints for managing claims
  - name: Sign In with BitBadges
    description: Authentication and authorization endpoints for Sign In with BitBadges
  - name: Address Lists
    description: Endpoints for managing address lists
  - name: Transactions
    description: Endpoints for submitting and simulating blockchain transactions
  - name: Applications
    description: Endpoints for managing applications (points, tiers, quests)
  - name: Plugins
    description: Endpoints for the plugins for claims
  - name: Dynamic Stores
    description: Endpoints for managing dynamic data stores
  - name: Utility Pages
    description: Endpoints for managing utility pages
  - name: Miscellaneous
paths:
  /user:
    get:
      operationId: getAccount
      summary: Get Account
      description: >
        Retrieves an account by address or username.


        ```tsx

        const res = await BitBadgesApi.getAccount({ address: '...', username:
        '...' });

        console.log(res);

        ```


        For more specific views, you can use the other routes.


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAccountPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAccountSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaccount)**


        ## Authentication Details

        - **Public Data**: Available with API key only
          - Basic profile information
          - Etc

        - **Private Data** (requires user authentication):
          - Notification preferences
          - Stored Social connections
          - Etc

        Scopes

        - `readProfile` - Required for private profile information like
        notification preferences, social connections, etc.


        Couple Notes:

        - **[Native Chain
        Algorithm](https://docs.bitbadges.io/for-developers/bitbadges-api/concepts/native-chain-algorithm)**


        Note: The `views` and corresponding fields like `badgesCollected`,
        `claimAlerts`, etc will be blank with this simple

        GET but are provided in the response for compatibility with the SDK. To
        actually fetch these views, use the POST

        batch route or the individual view routes.
      tags:
        - Accounts
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAccountSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAccountPayload'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /users:
    post:
      operationId: getAccounts
      summary: Get Accounts - Batch
      description: >
        Retrieves accounts and accompanying details. This route is all-inclusive
        and uses a view-based approach to fetch specific data about the account.
        See more in the tutorial below.


        ```tsx

        const accountsRes = await BitBadgesApi.getAccounts({
          accountsToFetch: [
            {
              //example
              address: 'bb1...',
              viewsToFetch: [
                {
                  viewType: 'badgesCollected',
                  viewId: 'badgesCollected',
                  bookmark: '',
                },
              ],
            },
          ],
        })

        const account = accountsRes.accounts[0]

        ```


        ## Authentication Details

        - **Public Data**: Available with API key only
          - Basic profile information
          - Public balances
          - Public activity
          - Etc

        - **Private Data** (requires user authentication):
          - Notification preferences
          - Private Attestations
          - Private activity, etc
          - Etc

        Scopes

        - `readProfile` - Required for private profile information like
        notification preferences, social connections, etc.

        - `readClaimAlerts` - Required if fetching private claim alerts

        - `readAuthenticationCodes` - Required if fetching private
        authentication codes

        - `readAttestations` - Required if fetching private attestations


        Documentation References / Tutorials:

        - **[Managing
        Views](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-views)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAccountsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAccountsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaccounts)**
      tags:
        - Accounts
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAccountsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetAccountsPayload'
  /collection/{collectionId}:
    get:
      operationId: getCollection
      summary: Get Collection
      tags:
        - Badges
      description: >-
        Gets a specific collection.


        ```tsx

        await BitBadgesApi.getCollection("123", { ... });

        ```


        SDK Links:

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollection)**


        Note: The `views` and corresponding fields like `owners`,
        `approvalTrackers`, etc will be blank with this simple

        GET but are provided in the response for compatibility with the SDK. To
        actually fetch these views, use the POST

        batch route or the individual view routes.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
  /collection/{collectionId}/{badgeId}/metadata:
    get:
      operationId: getBadgeMetadata
      summary: Get Token Metadata
      tags:
        - Badges
      description: >-
        Gets current metadata for a specific token in a collection.


        ```tsx

        await BitBadgesApi.getBadgeMetadata("123", "1");

        ```


        SDK Links:

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBadgeMetadataSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getbadgeMetadata)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeMetadataSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - name: badgeId
          in: path
          description: Token ID
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
  /collections:
    post:
      operationId: getCollectionsBatch
      summary: Get Collections - Batch
      tags:
        - Badges
      description: >
        Retrieves collections and associated details. This route is
        all-inclusive and uses a view-based approach to fetch specific data
        about collections, including metadata, balances, owners, and more.


        ```tsx

        const res = await BitBadgesApi.getCollections({
          collectionsToFetch: [
            {
              collectionId: 1n,
              metadataToFetch: {
                badgeIds: [{ start: 1n, end: 10n }],
              },
              fetchTotalAndMintBalances: true,
              viewsToFetch: [
                {
                  viewType: 'owners',
                  viewId: 'owners',
                  bookmark: '',
                },
              ],
            },
          ],
        })


        const collection = res.collections[0]

        ```


        Scopes:

        - `readPrivateClaimData` - Required if fetching private claim data (must
        also be the manager)


        Documentation References / Tutorials:

        - **[Managing
        Views](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-views)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollections)**


        Note: This route has lots of legacy features that are planned to be
        deprecated. For any views, we recommend

        using the other GET routes.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetCollectionsPayload'
  /collection/{collectionId}/balance/{address}/{badgeId}:
    get:
      operationId: getTokenBalanceByAddressSpecificToken
      summary: Get Badge Balance By Address - Specific Badge
      description: >
        Retrieves the balance of a specific token for a specific address at the
        current time.


        For more advanced queries returning the whole balance document, please
        use the POST `/collection/{collectionId}/balance/{address}` endpoint.


        ```tsx

        const res = await
        BitBadgesApi.getTokenBalanceByAddressSpecificToken(collectionId,
        address, badgeId);

        console.log(res);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTokenBalanceByAddressSpecificTokenPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTokenBalanceByAddressSpecificTokenSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getbadgebalancebyaddressspecificbadge)**


        Alternative Flow: Note that you can also set up a claim that checks
        token ownership and check the success per user of that claim as well
      tags:
        - Badges
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: address
          in: path
          description: >-
            The address for which the balance is to be retrieved. Can be
            "Total" for the circulating supply.
          required: true
          schema:
            type: string
        - name: badgeId
          in: path
          description: The ID for which the balance is to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetTokenBalanceByAddressSpecificTokenSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /collection/{collectionId}/balance/{address}:
    get:
      operationId: getTokenBalanceByAddress
      tags:
        - Badges
      summary: Get Badge Balances By Address
      description: >
        Retrieves the balances of a specific address for a collection.


        ```tsx

        const res = await BitBadgesApi.getTokenBalanceByAddress(collectionId,
        address, { ...options });

        console.log(res);

        ```



        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTokenBalanceByAddressPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTokenBalanceByAddressSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getbadgebalancebyaddress)**


        Scopes:

        - `readPrivateClaimData` - Required if fetching private claim data
        (user-level approvals)


        Alternative Flow: Note that you can also set up a claim that checks
        token ownership and check the success per user of that claim as well
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: address
          in: path
          description: >-
            The address for which the balance is to be retrieved. Can be
            "Total" for the circulating supply.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetTokenBalanceByAddressPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetTokenBalanceByAddressSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /claim/{claimId}:
    get:
      operationId: getClaim
      summary: Get Claim
      tags:
        - Claims
      description: >-
        Gets a claim by specific ID.


        ```tsx

        await BitBadgesApi.getClaim("claim123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaim)**


        Scopes:
          - `readPrivateClaimData` - Required if fetching private claim data (also must be manager of claim)
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: claimId
          in: path
          description: Claim ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetClaimPayload'
      security:
        - apiKey: []
      x-internal: false
  /claims/success/{claimId}/{address}:
    get:
      operationId: checkClaimSuccess
      summary: Check Claim Successes By User
      description: >
        Checks if a claim has been successfully completed.


        This returns a success count based on how many times the user has
        completed the claim.


        For on-demand claims, this will return 1 if the user has completed the
        claim. For indexed claims, this will return the number of times the user
        has completed the claim.


        Note that this will not work if the claim hides its state.


        ```tsx

        const res = await BitBadgesApi.checkClaimSuccess(claimId, address);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckClaimSuccessPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckClaimSuccessSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#checkclaimsuccess)**
      tags:
        - Claims
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckClaimSuccessSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: claimId
          in: path
          required: true
          schema:
            type: string
        - name: address
          in: path
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
  /attestation/{attestationId}:
    get:
      operationId: getAttestation
      summary: Get Attestation
      tags:
        - Attestations
      description: >-
        Gets an attestation by specific ID.


        ```tsx

        await BitBadgesApi.getAttestation("attestation123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttestationPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttestationSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getattestation)**


        Scopes:
          - `readAttestations` - Required and must have view permissions
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAttestationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: attestationId
          in: path
          description: Attestation ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAttestationPayload'
      security:
        - apiKey: []
      x-internal: false
  /developerApp/{clientId}:
    get:
      operationId: getDeveloperApp
      summary: Get OAuth App
      tags:
        - Sign In with BitBadges
      description: >-
        Gets a developer app by specific ID.


        ```tsx

        await BitBadgesApi.getDeveloperApp("clientId123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDeveloperAppPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDeveloperAppSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdeveloperapp)**


        Scopes:
          - `manageDeveloperApps` - Required to return the client secret (plus being owner). Else, it will just be the app metadata
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDeveloperAppSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: clientId
          in: path
          description: Client ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetDeveloperAppPayload'
      security:
        - apiKey: []
      x-internal: false
  /developerApps:
    post:
      operationId: createDeveloperApp
      summary: Create OAuth App
      tags:
        - Sign In with BitBadges
      description: >-
        Creates a new OAuth app.


        ```tsx

        await BitBadgesApi.createDeveloperApp(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateDeveloperAppPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateDeveloperAppSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createdeveloperapp)**


        Scopes:
          - `manageDeveloperApps` - Required to create a new app
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateDeveloperAppSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: null
            $ref: '#/components/schemas/iCreateDeveloperAppPayload'
      security:
        - apiKey: []
      x-internal: false
    put:
      operationId: updateDeveloperApp
      summary: Update OAuth App
      tags:
        - Sign In with BitBadges
      description: >-
        Updates an existing OAuth app.


        ```tsx

        await BitBadgesApi.updateDeveloperApp(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateDeveloperAppPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateDeveloperAppSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updatedeveloperapp)**


        Scopes:
          - `manageDeveloperApps` - Required to update an app
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateDeveloperAppSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: clientId
          in: path
          description: Client ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: null
            $ref: '#/components/schemas/iUpdateDeveloperAppPayload'
      security:
        - apiKey: []
      x-internal: false
    delete:
      operationId: deleteDeveloperApp
      summary: Delete OAuth App
      tags:
        - Sign In with BitBadges
      description: >-
        Deletes an existing OAuth app.


        ```tsx

        await BitBadgesApi.deleteDeveloperApp(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteDeveloperAppPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteDeveloperAppSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deletedeveloperapp)**


        Scopes:
          - `manageDeveloperApps` - Required to delete an app
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteDeveloperAppSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: clientId
          in: path
          description: Client ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema: null
            $ref: '#/components/schemas/iDeleteDeveloperAppPayload'
      security:
        - apiKey: []
      x-internal: false
  /plugin/{pluginId}:
    get:
      operationId: getPlugin
      summary: Get Plugin
      tags:
        - Plugins
      description: >-
        Gets a plugin by specific ID.


        ```tsx

        await BitBadgesApi.getPlugin("plugin123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPluginPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPluginSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getplugin)**


        Scopes:

        - Full Access: Required for private plugins
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPluginSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: pluginId
          in: path
          description: Plugin ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetPluginPayload'
      security:
        - apiKey: []
      x-internal: false
  /utilityPage/{utilityPageId}:
    get:
      operationId: getUtilityPage
      summary: Get Utility Page
      tags:
        - Utility Pages
      description: >-
        Gets a utility page by specific ID.


        ```tsx

        await BitBadgesApi.getUtilityPage("utilityPage123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetUtilityPagePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetUtilityPageSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getutilitylisting)**


        Scopes:
          - `manageUtilityPages` - Required and must have view permissions for private listings
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetUtilityPageSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: utilityPageId
          in: path
          description: Utility listing ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetUtilityPagePayload'
      security:
        - apiKey: []
      x-internal: false
  /dynamicStore/{dynamicStoreId}:
    get:
      operationId: getDynamicDataStore
      summary: Get Dynamic Data Store
      tags:
        - Dynamic Stores
      description: >-
        Gets a dynamic data store by specific ID.


        ```tsx

        await BitBadgesApi.getDynamicDataStore("dynamicStore123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStorePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoreSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdynamicDataStore)**


        Scopes:
          - `manageDynamicDataStores` - Required and must be owner. Alternatively, you can specify the dataSecret.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataStoreSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: dynamicStoreId
          in: path
          description: Dynamic data store ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetDynamicDataStorePayload'
      security:
        - apiKey: []
      x-internal: false
  /dynamicStore/{dynamicStoreId}/value:
    get:
      operationId: getDynamicDataStoreValue
      summary: Get Dynamic Data Store Value
      tags:
        - Dynamic Stores
      description: >-
        Gets a value from a dynamic data store by specific ID and key.


        ```tsx

        await BitBadgesApi.getDynamicDataStoreValue("dynamicStore123", { key:
        "key123", ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoreValuePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoreValueSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdynamicDataStoreValue)**


        Scopes:
          - `manageDynamicDataStores` - Required and must be owner. You can also specify the dataSecret.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataStoreValueSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: dynamicStoreId
          in: path
          description: Dynamic data store ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetDynamicDataStoreValuePayload'
      security:
        - apiKey: []
      x-internal: false
  /dynamicStore/{dynamicStoreId}/values:
    get:
      operationId: getDynamicDataStoreValuesPaginated
      summary: Get Dynamic Data Store Values Paginated
      tags:
        - Dynamic Stores
      description: >-
        Gets a paginated list of values from a dynamic data store by specific
        ID.


        ```tsx

        await BitBadgesApi.getDynamicDataStoreValuesPaginated("dynamicStore123",
        { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoreValuesPaginatedPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoreValuesPaginatedSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdynamicDataStoreValuesPaginated)**


        Scopes:
          - `manageDynamicDataStores` - Required and must be owner.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetDynamicDataStoreValuesPaginatedSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: dynamicStoreId
          in: path
          description: Dynamic data store ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetDynamicDataStoreValuesPaginatedPayload'
      security:
        - apiKey: []
      x-internal: false
  /dynamicStores:
    post:
      operationId: createDynamicDataStore
      summary: Create Dynamic Data Store
      tags:
        - Dynamic Stores
      description: >-
        Creates a new dynamic data store.


        ```tsx

        await BitBadgesApi.createDynamicDataStore(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateDynamicDataStorePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateDynamicDataStoreSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createdynamicDataStore)**


        Scopes:
          - `manageDynamicDataStores` - Required and must be owner.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateDynamicDataStoreSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateDynamicDataStorePayload'
      security:
        - apiKey: []
      x-internal: false
    put:
      operationId: updateDynamicDataStore
      summary: Update Dynamic Data Store
      tags:
        - Dynamic Stores
      description: >-
        Updates a dynamic data store.


        ```tsx

        await BitBadgesApi.updateDynamicDataStore(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateDynamicDataStorePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateDynamicDataStoreSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updatedynamicDataStore)**


        Scopes:
          - `manageDynamicDataStores` - Required and must be owner.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateDynamicDataStoreSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: dynamicStoreId
          in: path
          description: Dynamic data store ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateDynamicDataStorePayload'
      security:
        - apiKey: []
      x-internal: false
    delete:
      operationId: deleteDynamicDataStore
      summary: Delete Dynamic Data Store
      tags:
        - Dynamic Stores
      description: >-
        Deletes a dynamic data store.


        ```tsx

        await BitBadgesApi.deleteDynamicDataStore(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteDynamicDataStorePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteDynamicDataStoreSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deletedyndatastore)**


        Scopes:
          - `manageDynamicDataStores` - Required and must be owner.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteDynamicDataStoreSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: dynamicStoreId
          in: path
          description: Dynamic data store ID
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteDynamicDataStorePayload'
      security:
        - apiKey: []
      x-internal: false
  /application/{applicationId}:
    get:
      operationId: getApplication
      summary: Get Application
      tags:
        - Applications
      description: >-
        Gets an application by specific ID.


        ```tsx

        await BitBadgesApi.getApplication("application123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetApplicationPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetApplicationSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getapplication)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: applicationId
          in: path
          description: Application ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetApplicationPayload'
      security:
        - apiKey: []
      x-internal: false
  /addressList/{addressListId}:
    get:
      operationId: getAddressList
      summary: Get Address List
      tags:
        - Address Lists
      description: >-
        Gets an address list by specific ID.


        ```tsx

        await BitBadgesApi.getAddressList("addressList123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslist)**


        Note: The `views` and corresponding fields like `listActivity`, etc will
        be blank with this simple

        GET but are provided in the response for compatibility with the SDK. To
        actually fetch these views,

        use the POST batch route or the individual view routes.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: addressListId
          in: path
          description: Address list ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAddressListPayload'
      security:
        - apiKey: []
      x-internal: false
  /status:
    get:
      operationId: getStatus
      summary: Get Status
      description: >
        Gets the current status details about the blockchain / indexer (gas,
        block height, etc).

        ```tsx

        const res = await BitBadgesApi.getStatus();

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetStatusPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetStatusSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getstatus)**
      tags:
        - Miscellanous
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetStatusSuccessResponse'
          description: Returns the current status of the blockchain / indexer
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetStatusPayload'
      security:
        - apiKey: []
  /collection/{collectionId}/{badgeId}/owners:
    get:
      operationId: getOwners
      summary: Get Badge Owners
      tags:
        - Badges
      description: >
        Retrieves the owners in a paginated format for a specific token in a
        collection.

        Returns a list of addresses and their corresponding balances for the
        specified token ID.


        ```tsx

        const res = await BitBadgesApi.getOwners(
          collectionId,
          badgeId,
          {
            bookmark: '...'
          }
        );

        ```



        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetOwnersPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetOwnersSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getownersforbadge)**
      parameters:
        - name: collectionId
          in: path
          description: The numeric collection ID.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The numeric token ID to retrieve owners for.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetOwnersPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetOwnersSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /collection/{collectionId}/{badgeId}/activity:
    get:
      operationId: getTokenActivity
      summary: Get Badge Activity
      description: >
        Retrieves the activity in a paginated format for a specific token in a
        collection.


        ```tsx

        const res = await BitBadgesApi.getTokenActivity(
          collectionId,
          badgeId,
          {
            bookmark: '...'
          }
        );

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTokenActivityPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTokenActivitySuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getbadgeactivity)**
      tags:
        - Badges
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The ID for which activity is to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetTokenActivityPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetTokenActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /collection/{collectionId}/refresh:
    post:
      operationId: refreshMetadata
      summary: Refresh Metadata
      tags:
        - Badges
      description: >
        Triggers a metadata refresh for a specific collection. BitBadges API
        uses a refresh queue system for fetching anything off-chain.

        This will refetch any details for the collection (such as metadata,
        balances if applicable, approval details, etc).


        Note it will reject if recently refreshed to prevent abuse.


        ```tsx

        const res = await BitBadgesApi.refreshMetadata(collectionId, {
        ...options });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRefreshMetadataPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRefreshMetadataSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#refreshmetadata)**
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection to trigger metadata refresh.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iRefreshMetadataPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshMetadataSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: true
  /claims/complete/{claimId}/{address}:
    post:
      operationId: completeClaim
      summary: Complete Claim
      tags:
        - Claims
      description: >
        Completes a claim for a specific address. This triggers a complete claim
        request to be sent to the queue.

        Note, this route returning a success code does not mean the claim has
        been completed. You will need to

        fetch its status via the attempt ID.


        If you want to simulate the claim first, you can use the simulate claim
        endpoint.


        _expectedVersion is required and must match the version of the claim. If
        you want to override this check,

        specify -1.


        The rest of the body should look like:

        ```typescript

        {
          _expectedVersion: 1,
          [pluginInstanceId1]: { ..bodyForPluginInstanceId1 },
          [pluginInstanceId2]: { ..bodyForPluginInstanceId2 },
        }

        ```


        ```tsx

        const res = await BitBadgesApi.completeClaim(claimId, address, {
        _expectedVersion: 1, ...body });

        console.log(res.claimAttemptId);


        //Sleep 2 seconds


        const res = await
        BitBadgesApi.getClaimAttemptStatus(res.claimAttemptId);

        console.log(res) // { success: true }

        ```


        Documentation References / Tutorials:

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCompleteClaimPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCompleteClaimSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#completeclaim)**


        Scopes:
          - `completeClaims` - Required if completing claims on behalf of a user and requires sign-in
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: The address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCompleteClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCompleteClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /claims/simulate/{claimId}/{address}:
    post:
      operationId: simulateClaim
      summary: Simulate Claim
      tags:
        - Claims
      description: >-
        Simulates a claim for a user. This will check if the claim is valid and
        that all criteria is satisfied. This returns a fake ID for compatibility
        with certain integrations.

        A successful response means simulation passed. This is instant and does
        not use the queue.


        Note: There may be cases where the simulation passes but the claim
        fails. This may happen if state changes

        between the simulation and the claim. It is always best practice to
        simulate first, but do not rely on the simulation

        response for the final result.


        ```tsx

        const res = await BitBadgesApi.simulateClaim(claimId, address, { ...body
        });

        ```


        _expectedVersion is required and must match the version of the claim. If
        you want to override this check,

        specify -1.


        The rest of the body should look like:

        ```typescript

        {
          _expectedVersion: 1,
          _specificInstanceIds: [pluginInstanceId1, pluginInstanceId2], //Optional: simulate only specific instances
          [pluginInstanceId1]: { ..bodyForPluginInstanceId1 },
          [pluginInstanceId2]: { ..bodyForPluginInstanceId2 },
        }

        ```


        Documentation References / Tutorials:

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSimulateClaimPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSimulateClaimSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#simulateclaim)**


        Scopes:
          - `completeClaims` - Required if completing claims on behalf of a user and requires sign-in
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: The address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSimulateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /claims/reserved/{claimId}/{address}:
    post:
      operationId: getReservedCodes
      summary: Get Reserved Claim Codes
      tags:
        - Claims
      description: >-
        Retrieves the reserved codes for a claim.


        For on-chain claims / approvals, we use a code reservation system where
        the claim code is to be used in the eventual blockchain transaction.

        This is used to bridge the gap between the off-chain claim and on-chain
        approval / transfer.


        ```tsx

        const res = await BitBadgesApi.getReservedCodes(claimId, address);

        ```


        Documentation References / Tutorials:

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetReservedClaimCodesPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetReservedClaimCodesSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getReservedCodes)**


        Scopes:
          - `completeClaims` - Required
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: The address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetReservedClaimCodesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetReservedClaimCodesPayload'
  /claims/status/{claimAttemptId}:
    get:
      operationId: getClaimAttemptStatus
      tags:
        - Claims
      summary: Get Claim Attempt Status
      description: >-
        Retrieves the status of a claim attempt by the ID received when
        submitting.


        ```tsx

        const res = await BitBadgesApi.getClaimAttemptStatus(claimAttemptId);

        ```


        Documentation References / Tutorials:

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptStatusPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptStatusSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaimattemptstatus)**
      parameters:
        - name: claimAttemptId
          in: path
          description: The transaction ID of the claim attempt.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          explode: true
          required: false
          schema:
            $ref: '#/components/schemas/iGetClaimAttemptStatusPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAttemptStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /broadcast:
    post:
      operationId: broadcastTx
      tags:
        - Transactions
      summary: Broadcast Transaction
      description: >-
        Broadcasts a transaction to the blockchain. This will broadcast the
        transaction to the blockchain

        via the BitBadges blockchain node.


        ```tsx

        const res = await BitBadgesApi.broadcastTx(...);

        ```


        Documentation References / Tutorials:

        - **[Create, Generate, and Sign
        Txs](https://docs.bitbadges.io/for-developers/create-and-broadcast-txs)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/types/iBroadcastTxPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iBroadcastTxSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#broadcasttx)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/iBroadcastTxPayload'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBroadcastTxSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /simulate:
    post:
      operationId: simulateTx
      summary: Simulate Transaction
      description: >-
        Simulates a transaction on the blockchain. This will simulate the
        transaction on the blockchain

        via the BitBadges blockchain node.


        ```tsx

        const res = await BitBadgesApi.simulateTx(...);

        ```


        Documentation References / Tutorials:

        - **[Create, Generate, and Sign
        Txs](https://docs.bitbadges.io/for-developers/create-and-broadcast-txs)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/types/iSimulateTxPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSimulateTxSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#simulatetx)**
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/iSimulateTxPayload'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateTxSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /addressLists:
    post:
      operationId: createAddressLists
      summary: Creates Address Lists
      tags:
        - Address Lists
      description: >-
        Creates address lists stored by BitBadges centralized servers.


        ```tsx

        const res = await BitBadgesApi.createAddressLists(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateAddressListsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateAddressListsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createaddresslists)**


        Scopes:
          - `manageAddressLists` - Required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateAddressListsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
    delete:
      operationId: deleteAddressLists
      summary: Delete Address Lists
      tags:
        - Address Lists
      description: >-
        Deletes address lists. Must be created off-chain.


        ```tsx

        const res = await BitBadgesApi.deleteAddressLists(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteAddressListsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteAddressListsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteaddresslists)**


        Scopes:
          - `manageAddressLists` - Required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteAddressListsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
  /addressLists/coreDetails:
    put:
      operationId: updateAddressListCoreDetails
      summary: Update Address List Core Details
      tags:
        - Address Lists
      description: >-
        Updates the core details of an off-chain address list. This does not
        include address updates or claim updates.


        ```tsx

        const res = await BitBadgesApi.updateAddressListCoreDetails(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListCoreDetailsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListCoreDetailsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateaddresslistcoredetails)**


        Scopes:
          - `manageAddressLists` - Required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateAddressListCoreDetailsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iUpdateAddressListCoreDetailsSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
  /addressLists/addresses:
    put:
      operationId: updateAddressListAddresses
      summary: Update Address List Addresses
      tags:
        - Address Lists
      description: >-
        Updates the addresses of an off-chain address list. This does not
        include claim updates or core details updates.


        Note: This is a complete overwrite. If you have active claims, ensure no
        race conditions.


        ```tsx

        const res = await BitBadgesApi.updateAddressListAddresses(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListAddressesPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAddressListAddressesSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateaddresslistaddresses)**


        Scopes:
          - `manageAddressLists` - Required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateAddressListAddressesPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iUpdateAddressListAddressesSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /addressLists/fetch:
    post:
      operationId: getAddressLists
      summary: Get Address Lists - Batch
      tags:
        - Address Lists
      description: >-
        Gets address lists. This uses an all-in-one approach with views and
        paginations

        to fetch details about the list all in one place. Note: Fetching views
        via this

        route is not supported. Use the other GET simpler routes. This may be
        deprecated soon.


        ```tsx

        const listsRes = await BitBadgesApi.getAddressLists([{
            //example
            listId: "...",
            viewsToFetch: [{
                viewType: 'listActivity',
                viewId: 'listActivity',
                bookmark: ''
            }]
        }])


        const list = listsRes[0];

        ```


        Documentation References / Tutorials:

        - **[Managing
        Views](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-views)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslists)**


        Scopes:
          - `readPrivateClaimData` - Required if fetching private claim data

        Note: This route has a lot of legacy features that may be deprecated
        soon. For views, p-lease

        use the other GET simpler routes.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetAddressListsPayload'
  /siwbb/token:
    post:
      operationId: exchangeSIWBBAuthorizationCode
      summary: Exchange SIWBB Code
      tags:
        - Sign In with BitBadges
      description: >-
        Exchange either a refresh token or OAuth authorization code for an
        access token.


        IMPORTANT: Keep your client secret safe and secure.


        Documentation References / Tutorials:

        - **[API
        Authorization](https://docs.bitbadges.io/for-developers/sign-in-with-bitbadges)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iExchangeSIWBBAuthorizationCodePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iExchangeSIWBBAuthorizationCodeSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#exchangesiwbbauthorizationcode)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iExchangeSIWBBAuthorizationCodeSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iExchangeSIWBBAuthorizationCodePayload'
  /siwbb/token/revoke:
    post:
      operationId: revokeOauthAuthorization
      summary: Revoke Authorization
      tags:
        - Sign In with BitBadges
      description: >-
        Revokes the authorization. The token can either be an access token or a
        refresh token.

        This endpoint revokes all tokens associated with the procided token
        (thus revoking the entire authorization).

        This can be called by the user or the authorized application.


        ```tsx

        await BitBadgesApi.revokeOauthAuthorization({ token });

        ```



        Documentation References / Tutorials:

        - **[API
        Authorization](https://docs.bitbadges.io/for-developers/sign-in-with-bitbadges)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iOauthRevokePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iOauthRevokeSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#revokeoauthauthorization)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iOauthRevokePayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iOauthRevokeSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userSignedIn: []
  /siwbbRequest/rotate:
    post:
      operationId: rotateSIWBBRequest
      summary: Rotate SIWBB Request
      tags:
        - Sign In with BitBadges
      description: >-
        Rotates a Sign In with BitBadges request. This is typically used to
        rotate a QR code to a new value.


        ```tsx

        const res = await BitBadgesApi.rotateSIWBBRequest(...);

        ```


        Documentation References / Tutorials:

        - **[Sign In with
        BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRotateSIWBBRequestPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iRotateSIWBBRequestSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#rotatesiwbbrequest)**


        Scopes:
          - `approveSignInWithBitBadgesRequests` - Required
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iRotateSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRotateSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /siwbbRequest:
    delete:
      operationId: deleteSIWBBRequest
      summary: Delete SIWBB Request
      tags:
        - Sign In with BitBadges
      description: >-
        Deletes an authentication code from the user's account.


        ```tsx

        const res = await BitBadgesApi.deleteSIWBBRequest(...);

        ```


        Documentation References / Tutorials:

        - **[Sign In with
        BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteSIWBBRequestPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteSIWBBRequestSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deletesiwbbrequest)**


        Scopes:
          - `deleteAuthenticationCodes` - Required
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    post:
      operationId: createSIWBBRequest
      summary: Create SIWBB Request
      tags:
        - Sign In with BitBadges
      description: >-
        Creates an authentication code. This is used for the Sign In wtih
        BitBadges flow.


        Note: This is typically not recommended to be called directly. Instead,
        direct the user to use the frontend authorization flow.


        ```tsx

        const res = await BitBadgesApi.createSIWBBRequest(...);

        ```


        Documentation References / Tutorials:

        - **[Sign In with
        BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateSIWBBRequestPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateSIWBBRequestSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createsiwbbrequest)**


        Scopes:
          - `approveSignInWithBitBadgesRequests` - Required
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /developerApps/siwbbRequests:
    get:
      operationId: getSIWBBRequestsForDeveloperApp
      summary: Get SIWBB Requests For Developer App
      tags:
        - Sign In with BitBadges
      description: >-
        Gets all saved docs for the Sign In with BitBadges flow for a specific
        app. This is useful, for example,

        if you are authenticating in-person and want to pre-fetch all
        authentication details

        to avoid doing it at verification time.


        This will return the actual authentication details, not just the codes.
        You will still have to exchange

        the code for the access token / confirmations.


        ```tsx

        const res = await BitBadgesApi.getSIWBBRequestsForDeveloperApp(...);

        ```


        Documentation References / Tutorials:

        - **[Sign In with
        BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSIWBBRequestsForDeveloperAppPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSIWBBRequestsForDeveloperAppSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getsiwbbrequestsfordeveloperapp)**


        Scopes:
          - `manageDeveloperApps` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetSIWBBRequestsForDeveloperAppSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: true
          explode: true
          schema:
            $ref: '#/components/schemas/iGetSIWBBRequestsForDeveloperAppPayload'
      security:
        - apiKey: []
          userSignedIn: []
  /claimAlerts/send:
    post:
      operationId: sendClaimAlert
      summary: Sends Claim Alert
      tags:
        - Claim Alerts
      description: >-
        Sends claim alert notifications out. Claim alerts are in-app
        notifications to alert a user.

        You can send from an address or anonymously (no sender).


        ```tsx

        const res = await BitBadgesApi.sendClaimAlert(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSendClaimAlertsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSendClaimAlertsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#sendclaimalert)**


        Scopes:
          - `sendClaimAlerts` - Required (if sending on behalf of a user). Set address to blank if anonymous.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iSendClaimAlertsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSendClaimAlertsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /collection/{collectionId}/refreshStatus:
    get:
      operationId: getRefreshStatus
      summary: Get Refresh Status
      tags:
        - Badges
      description: >-
        Gets the refresh status for a collection. Used to track if any errors
        occur during a refresh, or if it is in the queue or not.


        ```tsx

        const res = await BitBadgesApi.getRefreshStatus(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetRefreshStatusPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetRefreshStatusSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getrefreshstatus)**
      parameters:
        - name: collectionId
          in: path
          description: The collection ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userIsManager: []
  /maps/{mapId}:
    get:
      operationId: getMap
      summary: Get Map
      tags:
        - Maps and Protocols
      description: >-
        Gets the core details of a map.


        For getting actual values, use the getMapValues endpoint(s).


        ```tsx

        const res = await BitBadgesApi.getMap(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getmap)**
      parameters:
        - name: mapId
          in: path
          description: The map ID
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: true
          explode: true
          schema:
            $ref: '#/components/schemas/iGetMapPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /maps:
    post:
      operationId: getMaps
      summary: Get Maps - Batch
      tags:
        - Maps and Protocols
      description: >-
        Gets map data. Maps are created and stored on-chain. They are key-value
        objects which can have certain properties

        like restricting who sets which values, expected formatting, and more.


        For getting actual values, use the getMapValues endpoint.


        ```tsx

        const res = await BitBadgesApi.getMaps(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getmaps)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetMapsPayload'
  /mapValues:
    post:
      operationId: getMapValues
      summary: Get Map Values - Batch
      tags:
        - Maps and Protocols
      description: >-
        Gets map values for a collection.


        ```tsx

        const res = await BitBadgesApi.getMapValues(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapValuesPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapValuesSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getmapvalues)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetMapValuesPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapValuesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /mapValue/{mapId}/{key}:
    get:
      operationId: getMapValue
      summary: Get Map Value
      tags:
        - Maps and Protocols
      description: >-
        Gets a map value.


        ```tsx

        const res = await BitBadgesApi.getMapValue(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapValuePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetMapValueSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getmapvalue)**
      parameters:
        - name: mapId
          in: path
          description: The map ID
          required: true
          schema:
            type: string
        - name: key
          in: path
          description: The key to get the value for
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapValueSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /attestations/fetch:
    post:
      operationId: getAttestation
      summary: Get Attestations - Batch
      tags:
        - Attestations
      description: >-
        Gets verifiable attestation. Attestations are private-by-default
        credentials that can be used to verify

        anything. If you are a provider, you can request attestations via the
        Sign In with BitBadges flow, claim flow,

        or directly.


        Attestations are private by default but can be showcased on profiles or
        selectively revealed to others.


        ```tsx

        const res = await BitBadgesApi.getAttestations(...);

        ```


        Documentation References / Tutorials:

        -
        **[Attestations](https://docs.bitbadges.io/for-developers/core-concepts/verifiable-attestations)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttestationsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttestationsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getattestations)**


        Scopes:
          - `manageAttestations` - Required if requesting a private attestation. You must be owner or holder.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAttestationsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetAttestationsPayload'
  /attestations:
    post:
      operationId: createAttestation
      tags:
        - Attestations
      summary: Create Attestation
      description: >-
        Creates an attestation.


        ```tsx

        const res = await BitBadgesApi.createAttestation(...);

        ```


        Documentation References / Tutorials:

        -
        **[Attestations](https://docs.bitbadges.io/for-developers/core-concepts/verifiable-attestations)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateAttestationPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateAttestationSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createattestation)**


        Scopes:
          - `manageAttestations` - Required if requesting a private attestation. You must be owner or holder.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateAttestationPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateAttestationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userIsOwner: []
    put:
      operationId: updateAttestation
      tags:
        - Attestations
      summary: Update Attestation
      description: >-
        Updates an attestation.


        ```tsx

        const res = await BitBadgesApi.updateAttestation(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAttestationPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateAttestationSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateattestation)**


        Scopes:
          - `manageAttestations` - Required if requesting a private attestation. You must be owner or holder.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateAttestationPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAttestationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userIsOwner: []
    delete:
      tags:
        - Attestations
      operationId: deleteAttestation
      summary: Delete Attestation
      description: >-
        Deletes an attestation.


        ```tsx

        const res = await BitBadgesApi.deleteAttestation(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteAttestationPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteAttestationSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteattestation)**


        Scopes:
          - `manageAttestations` - Required if requesting a private attestation. You must be owner or holder.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteAttestationPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteAttestationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userIsOwner: []
  /claims/search:
    get:
      operationId: searchClaims
      summary: Search Claims
      tags:
        - Claims
      description: >-
        Search through the signed in user's claims they have created / are
        managing.


        ```tsx

        const res = await BitBadgesApi.searchClaims(...);

        ```


        Documentation References / Tutorials:

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchClaimsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchClaimsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchclaims)**


        Scopes:
          - `readPrivateClaimData` - Required for fetching private claim data
      parameters:
        - in: query
          name: payload
          required: true
          schema:
            $ref: '#/components/schemas/iSearchClaimsPayload'
          style: form
          explode: true
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /claims/fetch:
    post:
      operationId: getClaims
      summary: Get Claims - Batch
      tags:
        - Claims
      description: >-
        Retrieve claims by ID(s). Certain state is not made available by default
        for scalability reasons and must

        be requested explicitly.


        To fetch private parameters and state, you must be the manager of the
        claim, signed in, and request it.


        ```tsx

        const res = await BitBadgesApi.getClaims({
          claimsToFetch: [
            {
              claimId: '123',
              fetchPrivateParams: true,
              privateStatesToFetch: [instanceId1, instanceId2],
            },
          ],
        });

        ```


        Documentation References / Tutorials:

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimsPayloadV1)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaims)**


        Scopes:
          - `readPrivateClaimData` - Required if fetching private claim data
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetClaimsPayloadV1'
  /claims:
    post:
      operationId: createClaim
      summary: Create Claim
      tags:
        - Claims
      description: >-
        Creates a new claim.


        Note: Creating claims via the API is often overkill. Consider doing this
        in-site, using a plugin approach or another method first.

        You may also opt to leave the creation in-site but update claims via the
        API instead.


        There are a few categories of claims:

        - Standalone (default) - Not attached to anything

        - Test claims - Used for frontend claim tester

        - Linked to address lists - Specify the valid `listId` within the
        request. Must be list creator.

        - Linked to off-chain balances - Specify the valid `collectionId` +
        `balancesToSet` within the request. `balancesToSet` determine what
        badges are allocated.

        - Linked to on-chain approvals (user or collection level) - This is
        advanced. If you need this, please reach out to us. Updates are fine,
        but creation uses an advanced processs that is undocumented currently.


        ```tsx

        const res = await BitBadgesApi.createClaims(...);

        ```


        Documentation References / Tutorials:

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateClaimPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateClaimSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createclaims)**


        Tip: You can see the claim JSONs in-site. Click the info circle button >
        JSON tab. Use the claim tester, build your claim, and see how it works
        behind the scenes.


        Scopes:
          - `manageClaims` - Required
          - `manageAddressLists` - Required for linked address list claims
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    put:
      operationId: updateClaim
      summary: Update Claim
      tags:
        - Claims
      description: >-
        Updates an existing claim.


        Note: Updating claims via the API is often overkill. Consider doing this
        in-site, using a plugin approach or another method first.


        There are a few categories of claims:

        - Standalone (default) - Not attached to anything

        - Test claims - Used for frontend claim tester

        - Linked to address lists - Specify the valid `listId` within the
        request. Must be list creator.

        - Linked to off-chain balances - Specify the valid `collectionId` +
        `balancesToSet` within the request. `balancesToSet` determine what
        badges are allocated per claim.

        - Linked to on-chain approvals (user or collection level) - Specify the
        valid collectionId. Note: This is advanced. Please reach out if you need
        this.


        ```tsx

        const res = await BitBadgesApi.updateClaims(...);

        ```


        Documentation References / Tutorials:

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateClaimPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateClaimSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateclaims)**


        Tip: You can see the claim JSONs in-site. Click the info circle button >
        JSON tab. Use the claim tester, build your claim, and see how it works
        behind the scenes.


        Scopes:
          - `manageClaims` - Required
          - `manageAddressLists` - Required for updating link listed claims
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    delete:
      operationId: deleteClaim
      summary: Delete Claim
      tags:
        - Claims
      description: >-
        Deletes a claim. Creating and maintaining claims are typically
        recommended

        to be done through the site, not the API, because they require special
        configuration.


        ```tsx

        const res = await BitBadgesApi.deleteClaims(...);

        ```


        Documentation References / Tutorials:

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteClaimPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteClaimSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteclaims)**


        Scopes:
          - `manageClaims` - Required
          - `manageAddressLists` - Required for linked address list claims
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /siwbbRequest/appleWalletPass:
    post:
      operationId: generateAppleWalletPass
      summary: Generate Apple Wallet Pass
      tags:
        - Sign In with BitBadges
      description: >
        Generate an Apple Wallet pass based on the provided request body.

        ```tsx
          <a
              onClick={async () => {
                const res = await BitBadgesApi.generateAppleWalletPass({
                  ...
                });
                const pass = Buffer.from(res.data);

                const blob = new Blob([pass], { type: 'application/vnd.apple.pkpass' });
                const url = window.URL.createObjectURL(blob);
                if (url) {
                  const link = document.createElement('a');
                  link.href = url;
                  link.download = 'bitbadges.pkpass';
                  link.click();
                }
              }}>
              <img src="/images/add_to_apple_wallet.svg" style={{ width: 150 }} />
            </a>
        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenerateAppleWalletPassPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenerateAppleWalletPassSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#generateapplewalletpass)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenerateAppleWalletPassSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGenerateAppleWalletPassPayload'
  /siwbbRequest/googleWalletPass:
    post:
      operationId: generateGoogleWalletPass
      summary: Generate Google Wallet Pass
      tags:
        - Sign In with BitBadges
      description: >
        Generate a Google Wallet pass based on the provided request body.


        ```tsx

        const res = await BitBadgesApi.generateGoogleWalletPass(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenerateGoogleWalletPassPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGenerateGoogleWalletPassSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#generategooglewalletpass)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenerateGoogleWalletSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGenerateGoogleWalletPayload'
  /codes:
    get:
      operationId: generateCode
      summary: Get Code (Codes Plugin)
      description: >
        Generates a unique code based on a seed and a zero-based index. This is
        used for the Codes plugin with claims.


        Documentation References / Tutorials:

        - **[Codes
        Plugin](https://docs.bitbadges.io/for-developers/claim-builder/universal-approach-claim-codes)**
      tags:
        - Claims
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    description: The generated code
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: seedCode
          in: query
          description: The seed used to generate the code
          required: true
          schema:
            type: string
        - name: idx
          in: query
          description: The index of the code to generate
          required: true
          schema:
            type: integer
            minimum: 0
      security:
        - apiKey: []
      x-internal: false
  /claims/{claimId}/attempts:
    get:
      operationId: getClaimAttempts
      summary: Get Claim Attempts
      tags:
        - Claims
      description: >-
        Retrieves the attempts for a claim in a paginated format. If you are the
        manager and authenticated, you

        can also request failed attempts and view the errors.


        ```tsx

        const res = await BitBadgesApi.getClaimAttempts(claimId, {
          address: "",
          bookmark: "",
          includeErrors: true
        });

        ```


        Documentation References / Tutorials:

        - **[Getting
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**

        - **[Managing
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAttemptsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaimattempts)**


        Scopes:
          - `readPrivateClaimData` - Required if fetching errors
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAttemptsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          name: payload
          required: true
          schema:
            $ref: '#/components/schemas/iGetClaimAttemptsPayload'
          style: form
          explode: true
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /claims/gatedContent/{claimId}:
    get:
      operationId: getGatedContentForClaim
      summary: Get Gated Content for Claim
      tags:
        - Claims
      description: >-
        If claims implement the rewards tab with in-site delivery, there may be
        gated URLs or content that is only

        accessible to users who have completed the claim. This endpoint allows
        you to retrieve the gated content for a claim

        if you are authenticated and meet the claim's gated content
        requirements.


        ```typescript

        const res = await BitBadgesApi.getGatedContentForClaim(claimId);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetGatedContentForClaimPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetGatedContentForClaimSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getgatedcontentforclaim)**


        Scopes:
          - `completeClaims` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetGatedContentForClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: claimId
          in: path
          description: The ID of the claim
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetGatedContentForClaimPayload'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /attestations/verify:
    post:
      operationId: verifyAttestation
      summary: Verify Attestation
      tags:
        - Attestations
      description: >
        Verifies the attestation proofs well-formedness and signatures.


        This is a helper route for the verifyAttestation SDK function to
        outsource the verification logic

        to the server. Only supports BitBadges native schemes (bbs, standard).


        NOTE: This is a helper route but should not be used as the final
        verification logic. This will check

        cryptographic signatures, but you are responsible for checking the
        attestation's content, issuer, or

        anything else.


        ```tsx

        const res = await BitBadgesApi.verifyAttestation(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iVerifyAttestationPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iVerifyAttestationSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#verifyattestation)**


        Documentation References / Tutorials:

        -
        **[Attestations](https://docs.bitbadges.io/for-developers/core-concepts/verifiable-attestations)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iVerifyAttestationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iVerifyAttestationPayload'
      security:
        - apiKey: []
  /storeActions/single:
    post:
      operationId: performStoreActionSingleWithBodyAuth
      summary: Perform Single Store Action (Body Auth)
      tags:
        - Dynamic Stores
      description: >-
        Performs a single action on a dynamic store using body authentication.


        For more information on this route, see the Dynamic Stores > Manage tab
        in the developer portal.


        ```tsx

        await BitBadgesApi.performStoreAction(...);

        ```


        Documentation References / Tutorials:

        - **[Dynamic
        Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#performstoreaction)**


        Scopes:
          - `manageDynamicStores` - Required if you do not specify the data secret
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iPerformStoreActionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/iPerformStoreActionSingleWithBodyAuthPayload
  /storeActions/batch:
    post:
      operationId: performStoreActionBatchWithBodyAuth
      summary: Perform Batch Store Actions (Body Auth)
      tags:
        - Dynamic Stores
      description: >-
        Performs multiple actions on a dynamic store using body authentication.


        For more information on this route, see the Dynamic Stores > Manage tab
        in the developer portal.


        ```tsx

        await BitBadgesApi.performBatchStoreAction(...);

        ```


        Documentation References / Tutorials:

        - **[Dynamic
        Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iPerformStoreActionSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#performstoreaction)**


        Scopes:
          - `manageDynamicStores` - Required if you do not specify the data secret
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBatchStoreActionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iPerformStoreActionBatchWithBodyAuthPayload'
  /dynamicStores/fetch:
    post:
      operationId: getDynamicDataStores
      summary: Fetch Dynamic Data Stores - Batch
      tags:
        - Dynamic Stores
      description: >-
        Fetches dynamic stores by ID(s).


        ```tsx

        await BitBadgesApi.getDynamicDataStores(...);

        ```


        Documentation References / Tutorials:

        - **[Dynamic
        Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoresPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataStoresSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdynamicdatastores)**


        Scopes:

        - `manageDynamicStores` - Required (or specify the valid data secret)
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataStoresSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetDynamicDataStoresPayload'
  /dynamicStores/search:
    get:
      operationId: searchDynamicDataStores
      summary: Search Dynamic Data Stores For User
      tags:
        - Dynamic Stores
      description: >-
        Searches for dynamic stores based on the provided criteria. Currently,
        this only gets the signed in user's dynamic stores.


        ```tsx

        await BitBadgesApi.searchDynamicDataStores(...);

        ```


        Documentation References / Tutorials:

        - **[Dynamic
        Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchDynamicDataStoresPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchDynamicDataStoresSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchdynamicdatastores)**


        Scopes:

        - `manageDynamicStores` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchDynamicDataStoresSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          explode: true
          schema:
            $ref: '#/components/schemas/iSearchDynamicDataStoresPayload'
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
  /dynamicStores/activity:
    get:
      operationId: getDynamicDataActivity
      summary: Get Dynamic Data Activity
      tags:
        - Dynamic Stores
      description: >-
        Fetches activity history for dynamic stores.


        ```tsx

        await BitBadgesApi.getDynamicDataActivity(...);

        ```


        Documentation References / Tutorials:

        - **[Dynamic
        Stores](https://docs.bitbadges.io/for-developers/claim-builder/dynamic-stores)**


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataActivityPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetDynamicDataActivitySuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getdynamicdataactivity)**


        Scopes:

        - `manageDynamicStores` - Required (or specify the valid data secret)
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetDynamicDataActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetDynamicDataActivityPayload'
      security:
        - apiKey: []
          userSignedIn: []
      x-internal: false
  /applications/search:
    get:
      operationId: searchApplications
      summary: Search Applications
      tags:
        - Applications
      description: >-
        Searches for applications based on the provided criteria. Currently,

        this only gets the signed in user's applications.


        ```tsx

        await BitBadgesApi.searchApplications(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchApplicationsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchApplicationsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchapplications)**


        Scopes:

        - `manageApplications` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchApplicationsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: payload
          in: query
          explode: true
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iSearchApplicationsPayload'
      security:
        - apiKey: []
      x-internal: false
  /applications/fetch:
    post:
      operationId: getApplications
      summary: Get Applications - Batch
      tags:
        - Applications
      description: >-
        Fetches applications based on the provided criteria.


        ```tsx

        await BitBadgesApi.getApplications(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetApplicationsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetApplicationsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getapplications)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetApplicationsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetApplicationsPayload'
  /applications:
    post:
      operationId: createApplication
      summary: Create Application
      tags:
        - Applications
      description: >-
        Creates an application.


        ```tsx

        await BitBadgesApi.createApplication(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateApplicationPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateApplicationSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createapplication)**


        Scopes:

        - `manageApplications` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateApplicationPayload'
    put:
      operationId: updateApplication
      summary: Update Application
      tags:
        - Applications
      description: >-
        Updates an application.


        ```tsx

        await BitBadgesApi.updateApplication(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateApplicationPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateApplicationSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateapplication)**


        Scopes:

        - `manageApplications` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateApplicationPayload'
    delete:
      operationId: deleteApplication
      summary: Delete Application
      tags:
        - Applications
      description: >-
        Deletes an application.


        ```tsx

        await BitBadgesApi.deleteApplication(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteApplicationPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteApplicationSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteapplication)**


        Scopes:

        - `manageApplications` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteApplicationSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteApplicationPayload'
  /applications/points:
    post:
      operationId: calculatePoints
      summary: Calculate Points
      tags:
        - Applications
      description: >-
        Calculates points for an application, page, and user.


        Note: We use a heavy caching system, so you may not see the results
        immediately and may be rejected if

        recently calculated.


        ```tsx

        await BitBadgesApi.calculatePoints(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCalculatePointsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCalculatePointsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#calculatepoints)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCalculatePointsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCalculatePointsPayload'
  /applications/points/activity:
    get:
      operationId: getPointsActivity
      summary: Get Points Activity
      tags:
        - Applications
      description: >-
        Fetches points activity for an application.


        ```tsx

        await BitBadgesApi.getPointsActivity(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPointsActivityPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPointsActivitySuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getpointsactivity)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPointsActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetPointsActivityPayload'
      security:
        - apiKey: []
      x-internal: false
  /plugins/fetch:
    post:
      operationId: getPlugins
      summary: Get Plugins - Batch
      tags:
        - Plugins
      description: >-
        Fetches plugins based on the provided criteria.


        ```tsx

        await BitBadgesApi.getPlugins(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPluginsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPluginSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getplugins)**


        Scopes:

        - Full Access - Required for private plugins
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPluginSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetPluginsPayload'
  /plugins/search:
    get:
      operationId: searchPlugins
      summary: Search Plugins
      tags:
        - Plugins
      description: >-
        Searches for plugins based on the provided criteria.


        ```tsx

        await BitBadgesApi.searchPlugins(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchPluginsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchPluginsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchplugins)**


        Scopes:

        - Full Access - Required for fetching your created plugins / private
        plugins
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchPluginsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iSearchPluginsPayload'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
  /utilityPages/fetch:
    post:
      operationId: getUtilityPages
      summary: Get Utility Pages - Batch
      tags:
        - Utility Pages
      description: >-
        Fetches utility pages based on the provided criteria.


        Requires authentication for private listings.


        ```tsx

        await BitBadgesApi.getUtilityPages(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetUtilityPagesPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetUtilityPagesSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getutilitylistings)**


        Scopes:

        - `manageUtilityPages` - Required for private listings
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetUtilityPagesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iGetUtilityPagesPayload'
  /utilityPages/search:
    get:
      operationId: searchUtilityPages
      summary: Search Utility Pages
      tags:
        - Utility Pages
      description: >-
        Searches for utility pages based on the provided criteria. Currently,

        this only gets the signed in user's utility pages.


        ```tsx
          await BitBadgesApi.searchUtilityPages(...);
        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchUtilityPagesPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iSearchUtilityPagesSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#searchutilitylistings)**


        Scopes:

        - `manageUtilityPages` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSearchUtilityPagesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iSearchUtilityPagesPayload'
      security:
        - apiKey: []
          userSignedIn: []
      x-internal: false
  /utilityPages:
    post:
      operationId: createUtilityPage
      summary: Create Utility Page
      tags:
        - Utility Pages
      description: >-
        Creates a new utility page. This is also available in the developer
        portal.


        ```tsx

        await BitBadgesApi.createUtilityPage(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateUtilityPagePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCreateUtilityPageSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#createutilitylisting)**


        Scopes:

        - `manageUtilityPages` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateUtilityPageSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCreateUtilityPagePayload'
    put:
      operationId: updateUtilityPage
      summary: Update Utility Page
      tags:
        - Utility Pages
      description: >-
        Updates an existing utility page. This is also available in the
        developer portal.


        ```tsx

        await BitBadgesApi.updateUtilityPage(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateUtilityPagePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUpdateUtilityPageSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#updateutilitylisting)**


        Scopes:

        - `manageUtilityPages` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateUtilityPageSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUpdateUtilityPagePayload'
    delete:
      operationId: deleteUtilityPage
      summary: Delete Utility Page
      tags:
        - Utility Pages
      description: >-
        Deletes a utility page. This is also available in the developer
        portal.


        ```tsx

        await BitBadgesApi.deleteUtilityPage(...);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteUtilityPagePayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iDeleteUtilityPageSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#deleteutilitylisting)**


        Scopes:

        - `manageUtilityPages` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteUtilityPageSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iDeleteUtilityPagePayload'
  /auth/status:
    post:
      operationId: checkSignInStatus
      summary: Check Sign In Status
      description: >
        Checks if a user is currently signed in and returns their authentication
        status.


        ```tsx

        const res = await BitBadgesApi.checkIfSignedIn(...);

        console.log(res.signedIn);

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckSignInStatusPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iCheckSignInStatusSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#checkifsignedin)**
      tags:
        - Sign In with BitBadges
      responses:
        '200':
          description: Successfully retrieved authentication status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCheckSignInStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iCheckSignInStatusPayload'
      security:
        - userMaybeSignedIn: []
      x-internal: false
  /account/{address}/lists:
    get:
      operationId: getAddressListsForUser
      summary: Get Address Lists For User
      tags:
        - Accounts
      description: >-
        Gets address lists for a specific account. Specify the viewType to
        determine what

        address lists to retrieve.


        ```tsx

        await BitBadgesApi.getAddressListsForUser(address, { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListsForUserPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListsForUserSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslistsforuser)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListsForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAddressListsForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/requests/siwbb:
    get:
      operationId: getSiwbbRequestsForUser
      summary: Get SIWBB Requests For User
      tags:
        - Accounts
      description: >-
        Gets Sign-In with BitBadges (SIWBB) requests for a user.


        ```tsx

        await BitBadgesApi.getSiwbbRequestsForUser({ address: "bb1..." });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSiwbbRequestsForUserPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetSiwbbRequestsForUserSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getsiwbbrequestsforuser)**


        Scopes:
          - `readAuthenticationCodes` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSiwbbRequestsForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetSiwbbRequestsForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/activity/badges:
    get:
      operationId: getTransferActivityForUser
      summary: Get Transfer Activity For User
      tags:
        - Accounts
      description: >-
        Gets transfer activity for a specific user.


        ```tsx

        await BitBadgesApi.getTransferActivityForUser({ address: "bb1..." });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTransferActivityForUserPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetTransferActivityForUserSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#gettransferactivityforuser)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetTransferActivityForUserSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetTransferActivityForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/badges/:
    get:
      operationId: GetBadgesViewForUser
      summary: Get Tokens For User
      tags:
        - Accounts
      description: >-
        Gets tokens for a specific user. Specify the viewType to determine what

        tokens to retrieve. Default is 'collected'.


        ```tsx

        await BitBadgesApi.getBadgesViewForUser(address, { viewType: "collected"
        });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBadgesViewForUserPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetBadgesViewForUserSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getbadgesviewforuser)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgesViewForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetBadgesViewForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/activity/lists:
    get:
      operationId: getListActivityForUser
      summary: Get Lists Activity For User
      tags:
        - Accounts
      description: >-
        Gets lists activity for a specific user.


        ```tsx

        await BitBadgesApi.getListActivityForUser({ address: "bb1..." });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetListActivityForUserPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetListActivityForUserSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getlistActivityforuser)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetListActivityForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetListActivityForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/attestations/:
    get:
      operationId: getAttestationsForUser
      summary: Get Attestations For User
      tags:
        - Accounts
      description: >-
        Gets attestations for a specific user. Specify the viewType to determine
        what

        attestations to retrieve.


        ```tsx

        await BitBadgesApi.getAttestationsForUser(address, { viewType:
        "collected" });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttestationsForUserPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttestationsForUserSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getattestationsforuser)**


        Scopes:
          - `readAttestations` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAttestationsForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAttestationsForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/activity/claims:
    get:
      operationId: getClaimActivityForUser
      summary: Get Claim Activity For User
      tags:
        - Accounts
      description: >-
        Gets claim activity for a specific user. Specify the viewType to
        determine what

        claim activity to retrieve.


        Most claim activity will be public, but if the state is hidden, then
        only the

        manager of the claim and you should be able to see the activity.


        ```tsx

        await BitBadgesApi.getClaimActivityForUser(address, { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimActivityForUserPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimActivityForUserSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaimactivityforuser)**


        Scopes:
          - `completeClaims` - Required if fetching all claim activity.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimActivityForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetClaimActivityForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/activity/points:
    get:
      operationId: getPointsActivityForUser
      summary: Get Points Activity For User
      tags:
        - Accounts
      description: >-
        Gets points activity for a specific user.


        ```tsx

        await BitBadgesApi.getPointsActivityForUser({ address: "bb1..." });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPointsActivityForUserPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetPointsActivityForUserSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getpointsactivityforuser)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetPointsActivityForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetPointsActivityForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /account/{address}/claimAlerts:
    get:
      operationId: getClaimAlertsForUser
      summary: Get Claim Alerts For User
      tags:
        - Accounts
      description: >-
        Gets claim alerts for a specific user. Specify the viewType 'received'
        or 'sent' to determine what

        claim alerts to retrieve.


        ```tsx

        await BitBadgesApi.getClaimAlertsForUser(address, { viewType: 'received'
        });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAlertsForUserPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetClaimAlertsForUserSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getclaimalertsforuser)**


        Scopes:
          - `readClaimAlerts` - Required
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAlertsForUserSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: address
          in: path
          description: Account address
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetClaimAlertsForUserPayload'
      security:
        - apiKey: []
      x-internal: false
  /addressLists/{addressListId}/activity:
    get:
      operationId: getAddressListActivity
      summary: Get Address List Activity
      tags:
        - Address Lists
      description: >-
        Gets activity for a specific address list.


        ```tsx

        await BitBadgesApi.getAddressListActivity("list123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListActivityPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListActivitySuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslistactivity)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: addressListId
          in: path
          description: Address list ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAddressListActivityPayload'
      security:
        - apiKey: []
      x-internal: false
  /addressLists/{addressListId}/listings:
    get:
      operationId: getAddressListListings
      summary: Get Address List Listings
      tags:
        - Address Lists
      description: >-
        Gets listings for a specific address list.


        ```tsx

        await BitBadgesApi.getAddressListListings("list123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListListingsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListListingsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslistlistings)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListListingsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: addressListId
          in: path
          description: Address list ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAddressListListingsPayload'
      security:
        - apiKey: []
      x-internal: false
  /collection/{collectionId}/owners:
    get:
      operationId: getCollectionOwners
      summary: Get Collection Owners
      tags:
        - Badges
      description: >-
        Gets owners for a specific collection.


        ```tsx

        await BitBadgesApi.getCollectionOwners("123");

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionOwnersPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionOwnersSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionowners)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionOwnersSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetCollectionOwnersPayload'
      security:
        - apiKey: []
      x-internal: false
  /collection/{collectionId}/activity:
    get:
      operationId: getCollectionTransferActivity
      summary: Get Collection Transfer Activity
      tags:
        - Badges
      description: >-
        Gets transfer activity for a specific collection.


        ```tsx

        await BitBadgesApi.getCollectionTransferActivity("123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionTransferActivityPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionTransferActivitySuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectiontransferactivity)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetCollectionTransferActivitySuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetCollectionTransferActivityPayload'
      security:
        - apiKey: []
      x-internal: false
  /collection/{collectionId}/challengeTrackers:
    get:
      operationId: getCollectionChallengeTrackers
      summary: Get Collection Challenge Trackers
      tags:
        - Badges
      description: >-
        Gets challenge trackers for a specific collection.


        ```tsx

        await BitBadgesApi.getCollectionChallengeTrackers("123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionChallengeTrackersPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionChallengeTrackersSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionchallengetrackers)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetCollectionChallengeTrackersSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetCollectionChallengeTrackersPayload'
      security:
        - apiKey: []
      x-internal: false
  /collection/{collectionId}/amountTrackers:
    get:
      operationId: getCollectionAmountTrackers
      summary: Get Collection Amount Trackers
      tags:
        - Badges
      description: >-
        Gets amount trackers for a specific collection.


        ```tsx

        await BitBadgesApi.getCollectionAmountTrackers("123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionAmountTrackersPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionAmountTrackersSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionamounttrackers)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetCollectionAmountTrackersSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetCollectionAmountTrackersPayload'
      security:
        - apiKey: []
      x-internal: false
  /api/v0/collection/amountTracker:
    get:
      operationId: getCollectionAmountTrackerById
      summary: Get Collection Amount Tracker By ID
      tags:
        - Badges
      description: >-
        Gets an amount tracker by ID for a collection.


        ```tsx

        await BitBadgesApi.getCollectionAmountTrackerById({ ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iAmountTrackerIdDetails)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionAmountTrackerByIdSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionamounttrackerbyid)**
      parameters:
        - name: payload
          in: query
          explode: true
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetCollectionAmountTrackerByIdSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false
  /api/v0/collection/challengeTracker:
    get:
      operationId: getCollectionChallengeTrackerById
      summary: Get Collection Challenge Tracker By ID
      tags:
        - Badges
      description: >-
        Gets a challenge tracker by ID for a collection.


        ```tsx

        await BitBadgesApi.getCollectionChallengeTrackerById({ ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iChallengeTrackerIdDetails)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionChallengeTrackerByIdSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionchallengetrackerbyid)**
      parameters:
        - name: payload
          in: query
          explode: true
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetCollectionChallengeTrackerByIdSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /collection/{collectionId}/listings:
    get:
      operationId: getCollectionListings
      summary: Get Collection Listings
      tags:
        - Badges
      description: >-
        Gets listings for a specific collection.


        ```tsx

        await BitBadgesApi.getCollectionListings("123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionListingsPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionListingsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionlistings)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionListingsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetCollectionListingsPayload'
      security:
        - apiKey: []
      x-internal: false
  /collection/{collectionId}/claims:
    get:
      operationId: getCollectionClaims
      summary: Get Collection Claims
      tags:
        - Badges
      description: >-
        Gets claims for a specific collection.


        ```tsx

        await BitBadgesApi.getCollectionClaims("123", { ... });

        ```


        SDK Links:

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetCollectionClaimsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getcollectionclaims)**


        Scopes:
          - `readPrivateClaimData` - Required if fetching private claim data (also must be manager of collection)

        Note: For fetching more advanced information like private claim data,
        you can do so with the get claim routes. Use the IDs from these
        responses.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: collectionId
          in: path
          description: Collection ID
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
  /addressLists/{addressListId}/claims:
    get:
      operationId: getAddressListClaims
      summary: Get Address List Claims
      tags:
        - Address Lists
      description: >-
        Gets claims for a specific address list.


        ```tsx

        await BitBadgesApi.getAddressListClaims("list123", { ... });

        ```


        SDK Links:

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAddressListClaimsSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getaddresslistclaims)**


        Scopes:
          - `readPrivateClaimData` - Required if fetching private claim data (also must be manager of address list)

        Note: For fetching more advanced information like private claim data,
        you can do so with the get claim routes. Use the IDs from these
        responses.
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
        - name: addressListId
          in: path
          description: Address list ID
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: false
  /api/v0/requestBin/attemptData/{claimId}/{claimAttemptId}:
    get:
      operationId: getAttemptDataFromRequestBin
      summary: Get Attempt Data (Request Bin)
      tags:
        - Claims
      description: >-
        Gets the attempt data for a specific claim attempt from the requestBin
        plugin.


        Pre-Req: Your claim must be setup with a "requestBin" plugin. On the
        site, it will be titled

        "Collect User Inputs". If there is none, this will fail.


        ```tsx

        await BitBadgesApi.getAttemptDataFromRequestBin("claim123",
        "attempt123", { ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttemptDataFromRequestBinPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iGetAttemptDataFromRequestBinSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#getattemptdatafromrequestbin)**


        Scopes:
          - `readPrivateClaimData` - Required and must be the manager
      parameters:
        - name: claimId
          in: path
          description: Claim ID
          required: true
          schema:
            type: string
        - name: claimAttemptId
          in: path
          description: Claim attempt ID
          required: true
          schema:
            type: string
        - in: query
          explode: true
          name: payload
          description: >-
            The payload for the request. Anything here should be specified as
            query parameters (e.g. ?key1=value1&key2=)
          required: false
          schema:
            $ref: '#/components/schemas/iGetAttemptDataFromRequestBinPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetAttemptDataFromRequestBinSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: false
  /api/v0/uploadBalances:
    post:
      operationId: uploadBalances
      summary: Upload Balances
      tags:
        - Badges
      description: >-
        Uploads balances for off-chain indexed balances managed by BitBadges.
        Note: This only applies to

        collections with off-chain balances, and the tokens must not be frozen /
        immutable yet.


        This uses a queue-system, so it may take a few minutes to process and
        display in-site.


        ```tsx

        await BitBadgesApi.uploadBalances({ ... });

        ```


        SDK Links:

        - **[Request
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUploadBalancesPayload)**

        - **[Response
        Type](https://bitbadges.github.io/bitbadgesjs/interfaces/iUploadBalancesSuccessResponse)**

        - **[SDK API
        Function](https://bitbadges.github.io/bitbadgesjs/classes/BitBadgesAPI.html#uploadbalances)**


        Scopes:
          - `manageOffChainBalances` - Required and also must be current manager
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUploadBalancesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/iUploadBalancesPayload'
      security:
        - apiKey: []
      x-internal: false
components:
  responses:
    ErrorResponse:
      description: An error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestResponse:
      description: Bad Request - Invalid configuration or request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedResponse:
      description: >-
        Unauthorized - Does not meet authentication requirements. This can be
        due to an invalid API key, CORS origin, or session cookie.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
      description: Requires a BitBadges API key. This is true for all requests.
      x-type: string
    frontendOnly:
      type: apiKey
      in: header
      name: Origin
      description: >-
        Can only be called by the official BitBadges frontend. Not for developer
        use.
    userSignedIn:
      type: http
      scheme: cookie
      description: >-
        User must be signed in with correct OAuth scopes with a valid session
        and correct OAuth scopes. This can be done with OAuth 2.0 or an approved
        sign in.
    userMaybeSignedIn:
      type: http
      scheme: cookie
      description: >-
        User must be signed in with correct OAuth scopes for certain requests
        that fetch sensitive information, but certain requests can be made
        without being signed in. This can be done with OAuth 2.0 or an approved
        sign in.
    userIsManager:
      type: http
      scheme: cookie
      description: >-
        User must be signed in with correct OAuth scopes and be the manager of
        the requested collection.
    userIsOwner:
      type: http
      scheme: cookie
      description: >-
        User must be signed in with correct OAuth scopes and must be the owner
        of the requested object.
  schemas:
    SupportedChain:
      enum:
        - Bitcoin
        - Ethereum
        - Cosmos
        - Solana
        - Unknown
      type: string
    AssetDetails:
      properties:
        chain:
          type: string
        collectionId:
          $ref: '#/components/schemas/NumberType'
        assetIds:
          items:
            anyOf:
              - type: string
              - $ref: '#/components/schemas/iUintRange'
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
          examples: &ref_29
            - - start: '1713301889'
                end: '2000000000'
            - - start: '1'
                end: '18446744073709551615'
        mustOwnAmounts:
          $ref: '#/components/schemas/iUintRange'
        additionalCriteria:
          type: string
      required:
        - chain
        - collectionId
        - assetIds
        - ownershipTimes
        - mustOwnAmounts
      additionalProperties: false
      type: object
    AndGroup:
      properties:
        $and:
          items:
            $ref: '#/components/schemas/AssetConditionGroup'
          type: array
      required:
        - $and
      additionalProperties: false
      type: object
    OrGroup:
      properties:
        $or:
          items:
            $ref: '#/components/schemas/AssetConditionGroup'
          type: array
      required:
        - $or
      additionalProperties: false
      type: object
    AssetConditionGroup:
      anyOf:
        - $ref: '#/components/schemas/AndGroup'
        - $ref: '#/components/schemas/OrGroup'
        - $ref: '#/components/schemas/OwnershipRequirements'
      examples:
        - $and:
            - assets:
                - chain: BitBadges
                  collectionId: '1'
                  assetIds:
                    - start: '1'
                      end: '1'
                  mustOwnAmounts:
                    start: '1'
                    end: '1'
                  ownershipTimes: []
    OwnershipRequirements:
      properties:
        assets:
          items:
            $ref: '#/components/schemas/AssetDetails'
          type: array
        options:
          properties:
            numMatchesForVerification:
              $ref: '#/components/schemas/NumberType'
          additionalProperties: false
          type: object
      required:
        - assets
      additionalProperties: false
      type: object
    ChallengeParams:
      properties:
        domain:
          type: string
          examples: &ref_0
            - https://example.com
            - ipfs://Qm...
        statement:
          type: string
        address:
          type: string
        uri:
          type: string
          examples: &ref_1
            - https://example.com
            - ipfs://Qm...
        nonce:
          type: string
        version:
          type: string
        chainId:
          type: string
        issuedAt:
          type: string
          examples: &ref_2
            - '2022-01-01T00:00:00Z'
        expirationDate:
          type: string
          examples: &ref_3
            - '2022-01-01T00:00:00Z'
        notBefore:
          type: string
          examples: &ref_4
            - '2022-01-01T00:00:00Z'
        resources:
          items:
            type: string
          type: array
          examples: &ref_5
            - - 'Full Access: Full access to all features.'
        assetOwnershipRequirements:
          examples: &ref_6
            - assets:
                - chain: BitBadges
                  collectionId: '1'
                  assetIds:
                    - start: '1'
                      end: '1'
                  mustOwnAmounts:
                    start: '1'
                    end: '1'
                  ownershipTimes: []
          $ref: '#/components/schemas/AssetConditionGroup'
      required:
        - domain
        - statement
        - address
        - uri
        - nonce
      additionalProperties: false
      type: object
    VerifyChallengeOptions:
      properties:
        expectedChallengeParams:
          properties:
            domain:
              type: string
              examples: *ref_0
            statement:
              type: string
            address:
              type: string
            uri:
              type: string
              examples: *ref_1
            nonce:
              type: string
            version:
              type: string
            chainId:
              type: string
            issuedAt:
              type: string
              examples: *ref_2
            expirationDate:
              type: string
              examples: *ref_3
            notBefore:
              type: string
              examples: *ref_4
            resources:
              items:
                type: string
              type: array
              examples: *ref_5
            assetOwnershipRequirements:
              $ref: '#/components/schemas/AssetConditionGroup'
              examples: *ref_6
          additionalProperties: false
          description: >-
            Optionally define the expected details to check. If the challenge
            was edited and the details

            do not match, the challenge will fail verification.
          type: object
        balancesSnapshot:
          description: >-
            For verification of assets, instead of dynamically fetching the
            assets, you can specify a snapshot of the assets.


            This is useful if you have a snapshot, balances will not change, or
            you are verifying in an offline manner.
          type: object
        skipTimestampVerification:
          description: >-
            If true, we do not check timestamps (expirationDate / notBefore).
            This is useful if you are verifying a challenge that is expected to
            be verified at a future time.
          type: boolean
        skipAssetVerification:
          description: >-
            If true, we do not check asset ownership. This is useful if you are
            verifying a challenge that is expected to be verified at a future
            time.
          type: boolean
        earliestIssuedAt:
          description: >-
            The earliest issued At ISO date string that is valid. For example,
            if you want to verify a challenge that was issued within the last
            minute, you can specify this to be 1 minute ago.
          type: string
          examples:
            - '2022-01-01T00:00:00Z'
        issuedAtTimeWindowMs:
          description: >-
            If set, we will verify the issuedAt is within this amount of ms ago
            (i.e. issuedAt >= Date.now() - issuedAtTimeWindowMs)
          type: number
        skipSignatureVerification:
          description: >-
            If true, we do not check the signature. You can pass in an undefined
            ChainDriver
          type: boolean
      additionalProperties: false
      type: object
    Doc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
      required:
        - _docId
      additionalProperties: false
      type: object
    ErrorResponse:
      properties:
        error:
          description: >-
            Serialized error object for debugging purposes. Technical users can
            use this to debug issues.
          type: string
        errorMessage:
          description: >-
            UX-friendly error message that can be displayed to the user. Always
            present if error.
          type: string
        unauthorized:
          description: Authentication error. Present if the user is not authenticated.
          type: boolean
      required:
        - errorMessage
      additionalProperties: false
      description: |-
        If an error occurs, the response will be an ErrorResponse.

        400 - Bad Request (e.g. invalid request body)
        401 - Unauthorized
        500 - Internal Server Error
      type: object
    PaginationInfo:
      properties:
        bookmark:
          description: >-
            The bookmark for the next page of results. Obtained from previous
            response.
          type: string
        hasMore:
          description: Whether there are more results to fetch.
          type: boolean
      required:
        - bookmark
        - hasMore
      additionalProperties: false
      description: Type for pagination information.
      type: object
    ErrorDoc:
      properties:
        _docId:
          type: string
        _id:
          type: string
        error:
          type: string
        function:
          type: string
      required:
        - _docId
        - error
        - function
      additionalProperties: false
      type: object
    OAuthScopeDetails:
      properties:
        scopeName:
          description: >-
            The name of the scope. Note: For this, we use the capitalized
            version of the scope name with spaces.


            For example, "completeClaims" becomes "Complete Claims"
          type: string
        options:
          description: The options for the scope. Currently, this is not used.
          type: object
      required:
        - scopeName
      additionalProperties: false
      type: object
    UNIXMilliTimestamp:
      description: >-
        Numeric timestamp - value is equal to the milliseconds since the UNIX
        epoch.
      $ref: '#/components/schemas/NumberType'
      examples:
        - '1713301889'
    BitBadgesAddress:
      description: >-
        All supported addresses map to a Bech32 BitBadges address which is used
        by the BitBadges blockchain behind the scenes.

        For conversion, see the BitBadges documentation. If this type is used,
        we must always convert to a BitBadges address before using it.
      type: string
      examples:
        - bb1...
    SiwbbMessage:
      description: >-
        SiwbbMessage is the sign-in challenge strint to be signed by the user.
        It extends EIP 4361 Sign-In with Ethereum

        and adds additional fields for cross-chain compatibility and native
        asset ownership verification.


        For example, 'https://bitbadges.io wants you to sign in with your
        Ethereum address ...'
      type: string
      examples:
        - >-
          https://bitbadges.io wants you to sign in with your Ethereum
          address....
    NativeAddress:
      description: >-
        A native address is an address that is native to the user's chain. For
        example, an Ethereum address is native to Ethereum (0x...).

        If this type is used, we support any native address type. We do not
        require conversion to a BitBadges address like the BitBadgesAddress
        type.
      type: string
      examples:
        - 0x...
        - bc1...
        - bb1...
    iSocialConnections:
      properties:
        discord:
          properties:
            username:
              type: string
            id:
              type: string
            discriminator:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        twitter:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        google:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        github:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        twitch:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        strava:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        reddit:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        meetup:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        bluesky:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        mailchimp:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        facebook:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        googleCalendar:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        youtube:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        linkedIn:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        shopify:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        telegram:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        farcaster:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        slack:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
      additionalProperties: false
      description: >-
        Social connections are tracked for each user to provide an enhanced
        experience.

        These are kept private from other users or sites using the API.

        Currently, there is no use for these, but they may be used in the
        future.
      type: object
    iNotificationPreferences:
      properties:
        email:
          description: The email to receive push notifications.
          type: string
        discord:
          properties:
            id:
              type: string
            username:
              type: string
            discriminator:
              type: string
            token:
              type: string
          required:
            - id
            - username
            - discriminator
            - token
          additionalProperties: false
          description: The Discord ID to receive push notifications.
          type: object
        emailVerification:
          description: The verification status of the email.
          $ref: '#/components/schemas/iEmailVerificationStatus'
        preferences:
          properties:
            listActivity:
              type: boolean
            transferActivity:
              type: boolean
            claimAlerts:
              type: boolean
            claimActivity:
              type: boolean
            ignoreIfInitiator:
              type: boolean
          additionalProperties: false
          description: >-
            The preferences for the notifications. What type of notifications
            does the user want to receive?
          type: object
      additionalProperties: false
      description: Details about the user's push notification preferences.
      type: object
    iEmailVerificationStatus:
      properties:
        verified:
          description: Whether or not the email has been verified.
          type: boolean
        verifiedAt:
          description: Verified at timestamp.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        token:
          description: >-
            The email verification token. This is used for verification and
            unsubscription.
          type: string
        expiry:
          description: The expiry of the token for verification purposes.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        antiPhishingCode:
          description: >-
            A unique code that we will send with all emails to verify that
            BitBadges is the one sending the email.
          type: string
      additionalProperties: false
      description: The verification status of the user's email.
      type: object
    iActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        private:
          description: Only for private purposes?
          type: boolean
      required:
        - _docId
        - timestamp
        - block
      additionalProperties: false
      description: The base document interface for all acitivity types.
      type: object
    iReviewDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        private:
          description: Only for private purposes?
          type: boolean
        review:
          description: The review text (max 2048 characters).
          type: string
        stars:
          description: The number of stars given (1-5).
          $ref: '#/components/schemas/NumberType'
        from:
          description: The user who gave the review.
          $ref: '#/components/schemas/BitBadgesAddress'
        collectionId:
          description: >-
            The collection ID of the collection that was reviewed. Only
            applicable to collection reviews.
          $ref: '#/components/schemas/CollectionId'
        reviewedAddress:
          description: >-
            The BitBadges address of the user who the review is for. Only
            applicable to user reviews.
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - _docId
        - timestamp
        - block
        - review
        - stars
        - from
      additionalProperties: false
      description: ''
      type: object
    iTransferActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        private:
          description: Only for private purposes?
          type: boolean
        to:
          items:
            $ref: '#/components/schemas/BitBadgesAddress'
          description: The list of recipients.
          type: array
        from:
          description: The sender of the tokens.
          $ref: '#/components/schemas/BitBadgesAddress'
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The list of balances and token IDs that were transferred.
          type: array
        collectionId:
          description: The collection ID for the tokens that was transferred.
          $ref: '#/components/schemas/CollectionId'
        memo:
          description: The memo of the transfer.
          type: string
        precalculateBalancesFromApproval:
          description: Which approval to use to precalculate the balances?
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            The prioritized approvals of the transfer. This is used to check
            certain approvals before others to ensure intended behavior.
          type: array
        initiatedBy:
          description: The user who initiated the transfer transaction.
          $ref: '#/components/schemas/BitBadgesAddress'
        txHash:
          description: The transaction hash of the activity.
          type: string
          examples: &ref_7
            - CE22D7...
      required:
        - _docId
        - timestamp
        - block
        - to
        - from
        - balances
        - collectionId
        - initiatedBy
      additionalProperties: false
      description: ''
      type: object
    iListActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        private:
          description: Only for private purposes?
          type: boolean
        listId:
          description: The list ID.
          type: string
          examples: &ref_11
            - customOrReservedListId
            - Mint
            - All
            - bb1...
        initiatedBy:
          description: Initiator of the list activity.
          $ref: '#/components/schemas/BitBadgesAddress'
        addedToList:
          description: Whether or not the address was added to the list or removed.
          type: boolean
        addresses:
          items:
            $ref: '#/components/schemas/BitBadgesAddress'
          description: The list of addresses that were added or removed from the list.
          type: array
        txHash:
          description: The transaction hash of the activity.
          type: string
          examples: *ref_7
      required:
        - _docId
        - timestamp
        - block
        - listId
        - initiatedBy
      additionalProperties: false
      description: ''
      type: object
    iClaimActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        private:
          description: Only for private purposes?
          type: boolean
        success:
          description: Whether the claim attempt was successful or not
          type: boolean
        claimId:
          description: The claim ID of the claim attempt
          type: string
        claimAttemptId:
          description: The claim attempt ID of the claim attempt
          type: string
        bitbadgesAddress:
          description: The BitBadges address of the user who attempted the claim
          examples: &ref_8
            - bb1...
          $ref: '#/components/schemas/BitBadgesAddress'
        claimType:
          enum:
            - standalone
            - collection
            - list
          description: The claim type of the claim attempt
          type: string
      required:
        - _docId
        - timestamp
        - block
        - success
        - claimId
        - claimAttemptId
        - bitbadgesAddress
      additionalProperties: false
      description: ''
      type: object
    iPointsActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        private:
          description: Only for private purposes?
          type: boolean
        bitbadgesAddress:
          description: The BitBadges address of the user who earned the points
          examples: *ref_8
          $ref: '#/components/schemas/BitBadgesAddress'
        oldPoints:
          description: The amount of points before the activity
          $ref: '#/components/schemas/NumberType'
        newPoints:
          description: The amount of points after the activity
          $ref: '#/components/schemas/NumberType'
        applicationId:
          description: The application ID of the points activity
          type: string
        pageId:
          description: The page ID of the points activity
          type: string
      required:
        - _docId
        - timestamp
        - block
        - bitbadgesAddress
        - oldPoints
        - newPoints
        - applicationId
        - pageId
      additionalProperties: false
      description: ''
      type: object
    iClaimAlertDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        private:
          description: Only for private purposes?
          type: boolean
        from:
          description: The sender
          type: string
        bitbadgesAddresses:
          items:
            $ref: '#/components/schemas/BitBadgesAddress'
          description: The BitBadges addresses of the users that have been alerted.
          type: array
        collectionId:
          description: |-
            The collection ID of the claim alert.
            @deprecated Not supported anymore.
          $ref: '#/components/schemas/CollectionId'
        message:
          description: The message of the claim alert.
          type: string
      required:
        - _docId
        - timestamp
        - block
        - from
        - bitbadgesAddresses
        - collectionId
      additionalProperties: false
      description: ''
      type: object
    iCollectionDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/CollectionId'
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
          description: The collection metadata timeline
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
          description: The token metadata timeline
          type: array
        balancesType:
          enum:
            - Standard
            - Off-Chain - Indexed
            - Non-Public
            - Off-Chain - Non-Indexed
          description: >-
            The type of balances (i.e. "Standard", "Off-Chain - Indexed",
            "Non-Public, "Off-Chain - Non-Indexed")
          type: string
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          description: The off-chain balances metadata timeline
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
          description: The custom data timeline
          type: array
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          description: The manager timeline
          type: array
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
          description: The collection approved transfers timeline
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
          description: The standards timeline
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
          description: The is archived timeline
          type: array
        createdBy:
          description: The BitBadges address of the user who created this collection
          $ref: '#/components/schemas/BitBadgesAddress'
        createdBlock:
          description: The block number when this collection was created
          $ref: '#/components/schemas/NumberType'
        createdTimestamp:
          description: >-
            The timestamp when this collection was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this collection
          type: array
        validBadgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: Valid token IDs for the collection
          type: array
      required:
        - _docId
        - collectionId
        - collectionMetadataTimeline
        - badgeMetadataTimeline
        - balancesType
        - offChainBalancesMetadataTimeline
        - customDataTimeline
        - managerTimeline
        - collectionApprovals
        - standardsTimeline
        - isArchivedTimeline
        - createdBy
        - createdBlock
        - createdTimestamp
        - updateHistory
        - validBadgeIds
      additionalProperties: false
      description: ''
      type: object
    iAccountDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        publicKey:
          description: The public key of the account
          type: string
          examples: &ref_15
            - AksB.... (base64)
        accountNumber:
          description: >-
            The account number of the account. This is the account number
            registered on the BitBadges blockchain.
          $ref: '#/components/schemas/NumberType'
        pubKeyType:
          description: The public key type of the account
          type: string
        bitbadgesAddress:
          description: The BitBadges address of the account
          examples: *ref_8
          $ref: '#/components/schemas/BitBadgesAddress'
        ethAddress:
          description: The Eth address of the account
          type: string
          examples: &ref_21
            - 0x...
        solAddress:
          description: >-
            The Solana address of the account. Note: This may be empty if we do
            not have it yet. Solana -> BitBadges address conversions are
            one-way, and we cannot convert a BitBadges address to a Solana
            address without prior knowledge.
          type: string
          examples: &ref_10
            - 6H2af6...
        btcAddress:
          description: The Bitcoin address of the account
          type: string
          examples: &ref_22
            - bc1...
        thorAddress:
          description: The Thorchain address of the account
          type: string
        sequence:
          description: >-
            The sequence of the account. This is the nonce for the blockchain
            for this account
          $ref: '#/components/schemas/NumberType'
        balance:
          description: The $BADGE balance of the account
          $ref: '#/components/schemas/iCosmosCoin'
      required:
        - _docId
        - publicKey
        - accountNumber
        - pubKeyType
        - bitbadgesAddress
        - ethAddress
        - solAddress
        - btcAddress
        - thorAddress
      additionalProperties: false
      description: ''
      type: object
    iCustomLink:
      properties:
        title:
          description: Title of the link
          type: string
        url:
          description: URL of the link
          type: string
        image:
          description: Description of the link
          type: string
          examples: &ref_12
            - https://example.com/image.png
            - ipfs://Qm...
      required:
        - title
        - url
        - image
      additionalProperties: false
      description: CustomLinks are custom links that can be added to a profile.
      type: object
    iCustomPage:
      properties:
        title:
          description: The title of the custom page
          type: string
        description:
          description: The description of the custom page
          type: string
          examples: &ref_9
            - Brief description.
        items:
          items:
            $ref: '#/components/schemas/iBatchTokenDetails'
          description: The token IDs to display on the custom page
          type: array
      required:
        - title
        - description
        - items
      additionalProperties: false
      type: object
    iCustomListPage:
      properties:
        title:
          description: The title of the custom list page
          type: string
        description:
          description: The description of the custom list page
          type: string
          examples: *ref_9
        items:
          items:
            type: string
          description: The list IDs to display on the custom list page
          type: array
      required:
        - title
        - description
        - items
      additionalProperties: false
      description: >-
        CustomListPage is a custom list page that can be added to a profile. The
        items are valid list IDs.
      type: object
    iProfileDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        fetchedProfile:
          enum:
            - full
            - partial
          description: Whether we have already fetched the profile or not
          type: string
        embeddedWalletAddress:
          description: Embedded wallet address
          type: string
        seenActivity:
          description: >-
            The timestamp of the last activity seen for this account
            (milliseconds since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        createdAt:
          description: >-
            The timestamp of when this account was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        discord:
          description: The Discord username of the account
          type: string
        twitter:
          description: The Twitter username of the account
          type: string
        github:
          description: The GitHub username of the account
          type: string
        telegram:
          description: The Telegram username of the account
          type: string
        bluesky:
          description: The Bluesky username of the account
          type: string
        readme:
          description: The readme of the account
          type: string
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
          description: The custom links of the account
          type: array
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchTokenDetails'
          description: The hidden badges of the account
          type: array
        hiddenLists:
          items:
            type: string
          description: The hidden lists of the account
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
            attestations:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
            - attestations
          additionalProperties: false
          description: The custom pages of the account
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
            attestations:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
            - attestations
          additionalProperties: false
          description: The watched lists of the account's portfolio
          type: object
        profilePicUrl:
          description: The profile picture URL of the account
          type: string
          examples: &ref_23
            - https://example.com
            - ipfs://Qm...
        bannerImage:
          description: The banner image URL of the account
          type: string
          examples: &ref_19
            - https://example.com
            - ipfs://Qm...
        username:
          description: The username of the account
          type: string
        latestSignedInChain:
          description: The latest chain the user signed in with
          $ref: '#/components/schemas/SupportedChain'
        solAddress:
          description: >-
            The Solana address of the profile, if applicable (bc we need it to
            convert)
          type: string
          examples: *ref_10
        notifications:
          description: The notifications of the account
          $ref: '#/components/schemas/iNotificationPreferences'
        socialConnections:
          description: Social connections stored for the account
          $ref: '#/components/schemas/iSocialConnections'
        publicSocialConnections:
          description: Public social connections stored for the account
          $ref: '#/components/schemas/iSocialConnections'
        approvedSignInMethods:
          properties:
            discord:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            github:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            google:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            twitter:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            facebook:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            addresses:
              items:
                properties:
                  address:
                    $ref: '#/components/schemas/NativeAddress'
                  scopes:
                    items:
                      $ref: '#/components/schemas/OAuthScopeDetails'
                    type: array
                required:
                  - address
                  - scopes
                additionalProperties: false
                type: object
              type: array
            passwords:
              items:
                properties:
                  passwordHash:
                    type: string
                  salt:
                    type: string
                  scopes:
                    items:
                      $ref: '#/components/schemas/OAuthScopeDetails'
                    type: array
                required:
                  - passwordHash
                  - salt
                  - scopes
                additionalProperties: false
                type: object
              type: array
          additionalProperties: false
          description: Approved ways to sign in
          type: object
      required:
        - _docId
      additionalProperties: false
      description: ''
      type: object
    iQueueDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        uri:
          description: >-
            The URI of the metadata to be fetched. If {id} is present, it will
            be replaced with each individual ID in badgeIds
          type: string
          examples: *ref_1
        collectionId:
          description: The collection ID of the metadata to be fetched
          $ref: '#/components/schemas/CollectionId'
        loadBalanceId:
          description: >-
            The load balance ID of the metadata to be fetched. Only the node
            with the same load balance ID will fetch this metadata
          $ref: '#/components/schemas/NumberType'
        refreshRequestTime:
          description: >-
            The timestamp of when this metadata was requested to be refreshed
            (milliseconds since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        numRetries:
          description: >-
            The number of times this metadata has been tried to be fetched but
            failed
          $ref: '#/components/schemas/NumberType'
        lastFetchedAt:
          description: >-
            The timestamp of when this metadata was last fetched (milliseconds
            since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        error:
          description: The error message if this metadata failed to be fetched
          type: string
        deletedAt:
          description: >-
            The timestamp of when this document was deleted (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        nextFetchTime:
          description: >-
            The timestamp of when this document should be fetched next
            (milliseconds since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        pending:
          description: Whether this document is pending to be fetched or not
          type: boolean
        emailMessage:
          type: string
        recipientAddress:
          type: string
        activityDocId:
          type: string
        notificationType:
          description: Type of the doc / purpose
          type: string
        initiatedBy:
          description: The BitBadges address of the user who initiated this fetch
          $ref: '#/components/schemas/BitBadgesAddress'
        actionConfig:
          description: For use for post-claim actions
        claimInfo:
          properties:
            session: {}
            body: {}
            claimId:
              type: string
            bitbadgesAddress:
              $ref: '#/components/schemas/BitBadgesAddress'
              examples: *ref_8
            ip:
              type: string
          required:
            - session
            - body
            - claimId
            - bitbadgesAddress
            - ip
          additionalProperties: {}
          description: For use for claim completion
          type: object
        faucetInfo:
          properties:
            txHash:
              type: string
              examples: *ref_7
            amount:
              $ref: '#/components/schemas/NumberType'
            recipient:
              $ref: '#/components/schemas/BitBadgesAddress'
            denom:
              type: string
          required:
            - txHash
            - amount
            - recipient
            - denom
          additionalProperties: false
          description: For use for airdrops
          type: object
      required:
        - _docId
        - uri
        - collectionId
        - loadBalanceId
        - refreshRequestTime
        - numRetries
      additionalProperties: false
      description: ''
      type: object
    iIndexerStatus:
      properties:
        status:
          $ref: '#/components/schemas/iStatusDoc'
      required:
        - status
      additionalProperties: false
      type: object
    iLatestBlockStatus:
      properties:
        height:
          description: The height of the latest block
          $ref: '#/components/schemas/NumberType'
        txIndex:
          description: The transaction index of the latest block
          $ref: '#/components/schemas/NumberType'
        timestamp:
          description: The timestamp of the latest block (milliseconds since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - height
        - txIndex
        - timestamp
      additionalProperties: false
      type: object
    iStatusDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        block:
          description: The latest synced block status (i.e. height, txIndex, timestamp)
          $ref: '#/components/schemas/iLatestBlockStatus'
        nextCollectionId:
          description: The next collection ID to be used
          $ref: '#/components/schemas/NumberType'
        gasPrice:
          description: The current gas price based on the average of the lastXGasAmounts
          type: number
        lastXGasAmounts:
          items:
            $ref: '#/components/schemas/NumberType'
          description: The last X gas prices (internal use only)
          type: array
        lastXGasLimits:
          items:
            $ref: '#/components/schemas/NumberType'
          description: The last X gas limits (internal use only)
          type: array
      required:
        - _docId
        - block
        - nextCollectionId
        - gasPrice
        - lastXGasAmounts
        - lastXGasLimits
      additionalProperties: false
      description: ''
      type: object
    iAddressListEditKey:
      properties:
        key:
          description: The key that can be used to edit the address list
          type: string
        expirationDate:
          description: The expiration date of the key (milliseconds since epoch)
          examples: *ref_3
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        mustSignIn:
          description: True if the user can only add their signed in address to the list
          type: boolean
      required:
        - key
        - expirationDate
      additionalProperties: false
      type: object
    iAddressListDoc:
      properties:
        listId:
          description: The ID of the address list.
          type: string
          examples: *ref_11
        addresses:
          items:
            type: string
          description: >-
            The addresses of the address list. If this is a tracker list, the
            addresses are the tracker IDs.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
          examples: *ref_1
        customData:
          description: >-
            Arbitrary custom data that can be stored. Leave blank for no custom
            data.
          type: string
        createdBy:
          description: The address that created the address list. Handled internally.
          $ref: '#/components/schemas/BitBadgesAddress'
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        managedBy:
          description: The BitBadges address of the user who is currently managing this
          $ref: '#/components/schemas/BitBadgesAddress'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this list
          type: array
        createdBlock:
          description: The block number when this list was created
          $ref: '#/components/schemas/NumberType'
        lastUpdated:
          description: >-
            The timestamp of when this list was last updated (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        nsfw:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: The NSFW reason if this list is NSFW
          type: object
        reported:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: The reported reason if this list is reported
          type: object
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
        - _docId
        - managedBy
        - updateHistory
        - createdBlock
        - lastUpdated
      additionalProperties: false
      description: ''
      type: object
    iBalanceDoc:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          description: The user's permissions.
          $ref: '#/components/schemas/iUserPermissions'
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        autoApproveAllIncomingTransfers:
          description: >-
            Whether the user's all incoming transfers are auto-approved. If not,
            they must be explicitly approved using the incoming approvals.
          type: boolean
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/CollectionId'
        bitbadgesAddress:
          description: The BitBadges address of the user
          examples: *ref_8
          $ref: '#/components/schemas/BitBadgesAddress'
        onChain:
          description: True if the balances are on-chain
          type: boolean
        uri:
          description: The URI of the off-chain balances
          type: string
          examples: *ref_1
        fetchedAt:
          description: >-
            The timestamp of when the off-chain balances were fetched
            (milliseconds since epoch). For BitBadges indexer, we only populate
            this for the Total docs.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        fetchedAtBlock:
          description: >-
            The block number of when the off-chain balances were fetched. For
            BitBadges indexer, we only populate this for the Total docs.
          $ref: '#/components/schemas/NumberType'
        isPermanent:
          description: True if the off-chain balances are using permanent storage
          type: boolean
        contentHash:
          description: The content hash of the off-chain balances
          type: string
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this balance
          type: array
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - autoApproveAllIncomingTransfers
        - _docId
        - collectionId
        - bitbadgesAddress
        - onChain
        - updateHistory
      additionalProperties: false
      description: >-

        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.
      type: object
    iPointsDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        address:
          description: The address to calculate points for
          $ref: '#/components/schemas/BitBadgesAddress'
        points:
          description: The points for the address
          $ref: '#/components/schemas/NumberType'
        lastCalculatedAt:
          description: >-
            The timestamp of when the points were last calculated (milliseconds
            since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        applicationId:
          description: The application ID
          type: string
        pageId:
          description: The page ID
          type: string
        claimSuccessCounts:
          additionalProperties:
            type: number
          description: >-
            Claim success counts. These were the claim success counts calculated
            for this points calculation.
          type: object
      required:
        - _docId
        - address
        - points
        - lastCalculatedAt
        - applicationId
        - pageId
      additionalProperties: false
      description: ''
      type: object
    ClaimIntegrationPluginType:
      type: string
    JsonBodyInputWithValue:
      properties:
        key:
          type: string
        label:
          type: string
        type:
          type: string
        value:
          anyOf:
            - type: string
            - type: number
            - type: boolean
        headerField:
          type: boolean
      required:
        - key
        - label
        - type
        - value
      additionalProperties: false
      type: object
    JsonBodyInputSchema:
      properties:
        key:
          type: string
        label:
          type: string
        type:
          type: string
        hyperlink:
          properties:
            url:
              type: string
            showAsGenericView:
              type: boolean
          required:
            - url
          additionalProperties: false
          type: object
        helper:
          type: string
        headerField:
          type: boolean
        required:
          type: boolean
        hideFromDetailsDisplay:
          description: Note only applicable for public parameters input schemas
          type: boolean
        defaultValue:
          anyOf:
            - type: string
            - type: number
            - type: boolean
        options:
          items:
            properties:
              label:
                type: string
              value:
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
            required:
              - label
              - value
            additionalProperties: false
            type: object
          type: array
        arrayField:
          type: boolean
      required:
        - key
        - label
        - type
      additionalProperties: false
      type: object
    any: null
    IntegrationPluginParams:
      properties:
        instanceId:
          description: >-
            The ID of the plugin instance. This is a unique identifier for
            referencing this instance of the plugin within this claim

            (e.g. differentiate between duplicates of the same plugin type).


            This is different from the pluginId, which is a unique identifier
            for the plugin itself. All instances of the same plugin

            will have the same pluginId.
          type: string
        pluginId:
          description: >-
            The ID of the plugin (e.g. "numUses"). This is the reusable plugin
            ID.

            Do not use this as a unique identifier for the plugin instance as
            there could be duplicate pluginIds. Use instanceId instead.
          $ref: '#/components/schemas/NumberType'
        version:
          description: The version of the plugin
          type: string
        publicParams:
          description: >-
            The parameters of the plugin that are visible to the public. These
            are custom per plugin type.
        privateParams:
          description: >-
            The parameters of the plugin that are not visible to the public.
            These are custom per plugin type.
        metadata:
          properties:
            name:
              type: string
              examples: &ref_13
                - Name
            description:
              type: string
              examples: *ref_9
            image:
              type: string
              examples: *ref_12
          required:
            - name
            - description
          additionalProperties: false
          description: >-
            Custom display metadata for the plugin. This will override the
            default metadata for the plugin.
          type: object
      required:
        - instanceId
        - pluginId
        - version
        - publicParams
        - privateParams
      additionalProperties: false
      type: object
    IntegrationPluginDetails:
      properties:
        instanceId:
          description: >-
            The ID of the plugin instance. This is a unique identifier for
            referencing this instance of the plugin within this claim

            (e.g. differentiate between duplicates of the same plugin type).


            This is different from the pluginId, which is a unique identifier
            for the plugin itself. All instances of the same plugin

            will have the same pluginId.
          type: string
        pluginId:
          description: >-
            The ID of the plugin (e.g. "numUses"). This is the reusable plugin
            ID.

            Do not use this as a unique identifier for the plugin instance as
            there could be duplicate pluginIds. Use instanceId instead.
          $ref: '#/components/schemas/NumberType'
        version:
          description: The version of the plugin
          type: string
        publicParams:
          description: >-
            The parameters of the plugin that are visible to the public. These
            are custom per plugin type.
        privateParams:
          description: >-
            The parameters of the plugin that are not visible to the public.
            These are custom per plugin type.
        metadata:
          properties:
            name:
              type: string
              examples: *ref_13
            description:
              type: string
              examples: *ref_9
            image:
              type: string
              examples: *ref_12
          required:
            - name
            - description
          additionalProperties: false
          description: >-
            Custom display metadata for the plugin. This will override the
            default metadata for the plugin.
          type: object
        publicState:
          description: >-
            The current state of the plugin. This is returned by BitBadges for
            information purposes. This is altered to not reveal sensitive
            information.
        privateState:
          description: >-
            The private state of the plugin. This is the exact state used by
            BitBadges behind the scenes.
      required:
        - instanceId
        - pluginId
        - version
        - publicParams
        - privateParams
        - publicState
      additionalProperties: false
      type: object
    IntegrationPluginDetailsUpdate:
      properties:
        instanceId:
          description: >-
            The ID of the plugin instance. This is a unique identifier for
            referencing this instance of the plugin within this claim

            (e.g. differentiate between duplicates of the same plugin type).


            This is different from the pluginId, which is a unique identifier
            for the plugin itself. All instances of the same plugin

            will have the same pluginId.
          type: string
        pluginId:
          description: >-
            The ID of the plugin (e.g. "numUses"). This is the reusable plugin
            ID.

            Do not use this as a unique identifier for the plugin instance as
            there could be duplicate pluginIds. Use instanceId instead.
          $ref: '#/components/schemas/NumberType'
        version:
          description: The version of the plugin
          type: string
        publicParams:
          description: >-
            The parameters of the plugin that are visible to the public. These
            are custom per plugin type.
        privateParams:
          description: >-
            The parameters of the plugin that are not visible to the public.
            These are custom per plugin type.
        metadata:
          properties:
            name:
              type: string
              examples: *ref_13
            description:
              type: string
              examples: *ref_9
            image:
              type: string
              examples: *ref_12
          required:
            - name
            - description
          additionalProperties: false
          description: >-
            Custom display metadata for the plugin. This will override the
            default metadata for the plugin.
          type: object
        resetState:
          description: >-
            If resetState = true, we will reset the state of the plugin back to
            default. If false, we will keep the current state. Incompatible with
            newState.
          type: boolean
        newState:
          description: >-
            If newState is present, we will set the state to the new state.
            Incompatible with resetState. Can be used alongside
            onlyUpdateProvidedNewState.

            By default, we will overwrite the whole state. If
            onlyUpdateProvidedNewState is true, we will only update the specific
            provided fields.


            Warning: This is an advanced feature and should be used with
            caution. Misconfiguring this can lead to unexpected behavior of this
            plugin.


            Note: Each plugin may have different state schemas. Please refer to
            the documentation of the plugin you are updating for more
            information.
        onlyUpdateProvidedNewState:
          description: >-
            If true, we will only update the specific fields provided in
            newState. If falsy, we will overwrite the whole state with newState.


            Only applicable if newState is present.


            Note that we do this on a recursive level. If you have nested
            objects, we will only update the specific fields provided for those
            nested objects

            and leave all else as-is.
          type: boolean
      required:
        - instanceId
        - pluginId
        - version
        - publicParams
        - privateParams
      additionalProperties: false
      type: object
    ManagePluginRequest:
      $ref: '#/components/schemas/IntegrationPluginDetailsUpdate'
    CreateClaimRequest:
      properties:
        claimId:
          description: Unique claim ID.
          type: string
        collectionId:
          description: >-
            Collection ID that the claim is for (if applicable - collection
            claims).
          $ref: '#/components/schemas/CollectionId'
        listId:
          description: Address list ID that the claim is for (if applicable - list claims).
          type: string
          examples: *ref_11
        balancesToSet:
          description: >-
            The balances to set for the claim.


            Only used for claims for collections that have off-chain indexed
            balances and are assigning balances based on the claim.
          $ref: '#/components/schemas/iPredeterminedBalances'
        rewards:
          items:
            $ref: '#/components/schemas/iClaimReward'
          description: Rewards for the claim.
          type: array
        estimatedCost:
          description: Estimated cost for the claim.
          type: string
        showInSearchResults:
          description: If true, the claim will be shown in search results
          type: boolean
        categories:
          items:
            type: string
          description: The categories of the claim
          type: array
        estimatedTime:
          description: Estimated time to satisfy the claim's requirements.
          type: string
        manualDistribution:
          description: >-
            If manual distribution is enabled, we do not handle any distribution
            of claim codes.

            We leave that up to the claim creator.


            Only applicable for on-chain token claims. This is only used in
            advanced self-hosted cases.
          type: boolean
        approach:
          description: >-
            How the claim is expected to be completed. This is for display
            purposes for the frontend.


            Available options:

            - in-site (default): The claim is expected to be completed in-site.

            - api: The claim is expected to be completed via an API call.

            - zapier: The claim is expected to be completed via Zapier
            auto-completion.


            Typically, you will use the in-site approach
          type: string
        seedCode:
          description: >-
            Seed code for the claim. Only used for on-chain token claims.


            This is how we produce all reserved codes for the on-chain merkle
            challenge / proofs.
          type: string
        metadata:
          allOf:
            - $ref: '#/components/schemas/iMetadata'
              description: Metadata for the claim.
            - $ref: '#/components/schemas/iMetadataWithoutInternals'
        assignMethod:
          description: >-
            Algorithm to determine the claim number order. Blank is just
            incrementing claim numbers.


            For most cases, you will not need to specify this.
          type: string
        satisfyMethod:
          description: >-
            Custom satisfaction logic.


            If left blank, all plugins must pass for the claim to be satisfied.

            Otherwise, you can specify a custom method to determine if the claim
            is satisfied.
          $ref: '#/components/schemas/iSatisfyMethod'
        cachePolicy:
          description: Cache policy for the claim. Only needed for on-demand claims.
          $ref: '#/components/schemas/iClaimCachePolicy'
        cid:
          type: string
        plugins:
          items:
            $ref: '#/components/schemas/ManagePluginRequest'
          type: array
      required:
        - claimId
        - plugins
      additionalProperties: false
      type: object
    UpdateClaimRequest:
      properties:
        claimId:
          description: Unique claim ID.
          type: string
        collectionId:
          description: >-
            Collection ID that the claim is for (if applicable - collection
            claims).
          $ref: '#/components/schemas/CollectionId'
        listId:
          description: Address list ID that the claim is for (if applicable - list claims).
          type: string
          examples: *ref_11
        balancesToSet:
          description: >-
            The balances to set for the claim.


            Only used for claims for collections that have off-chain indexed
            balances and are assigning balances based on the claim.
          $ref: '#/components/schemas/iPredeterminedBalances'
        rewards:
          items:
            $ref: '#/components/schemas/iClaimReward'
          description: Rewards for the claim.
          type: array
        estimatedCost:
          description: Estimated cost for the claim.
          type: string
        showInSearchResults:
          description: If true, the claim will be shown in search results
          type: boolean
        categories:
          items:
            type: string
          description: The categories of the claim
          type: array
        estimatedTime:
          description: Estimated time to satisfy the claim's requirements.
          type: string
        manualDistribution:
          description: >-
            If manual distribution is enabled, we do not handle any distribution
            of claim codes.

            We leave that up to the claim creator.


            Only applicable for on-chain token claims. This is only used in
            advanced self-hosted cases.
          type: boolean
        approach:
          description: >-
            How the claim is expected to be completed. This is for display
            purposes for the frontend.


            Available options:

            - in-site (default): The claim is expected to be completed in-site.

            - api: The claim is expected to be completed via an API call.

            - zapier: The claim is expected to be completed via Zapier
            auto-completion.


            Typically, you will use the in-site approach
          type: string
        metadata:
          allOf:
            - $ref: '#/components/schemas/iMetadata'
              description: Metadata for the claim.
            - $ref: '#/components/schemas/iMetadataWithoutInternals'
        assignMethod:
          description: >-
            Algorithm to determine the claim number order. Blank is just
            incrementing claim numbers.


            For most cases, you will not need to specify this.
          type: string
        satisfyMethod:
          description: >-
            Custom satisfaction logic.


            If left blank, all plugins must pass for the claim to be satisfied.

            Otherwise, you can specify a custom method to determine if the claim
            is satisfied.
          $ref: '#/components/schemas/iSatisfyMethod'
        cachePolicy:
          description: Cache policy for the claim. Only needed for on-demand claims.
          $ref: '#/components/schemas/iClaimCachePolicy'
        cid:
          type: string
        plugins:
          items:
            $ref: '#/components/schemas/ManagePluginRequest'
          type: array
      required:
        - claimId
        - plugins
      additionalProperties: false
      type: object
    iSatisfyMethod:
      properties:
        type:
          enum:
            - AND
            - OR
            - NOT
          type: string
        conditions:
          items:
            anyOf:
              - type: string
              - $ref: '#/components/schemas/iSatisfyMethod'
          description: >-
            Conditions can either be the instance ID string of the plugin to
            check success for or another satisfyMethod object.
          type: array
        options:
          properties:
            minNumSatisfied:
              description: Only applicable to OR logic. Implements M of N logic.
              type: number
          additionalProperties: false
          type: object
      required:
        - type
        - conditions
      additionalProperties: false
      type: object
    iEvent:
      properties:
        eventId:
          description: The event ID
          type: string
        metadata:
          description: The event metadata
          $ref: '#/components/schemas/iMetadata'
        eventTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: Other event specific metadata
          type: array
      required:
        - eventId
        - metadata
        - eventTimes
      additionalProperties: false
      type: object
    iTierWithOptionalWeight:
      properties:
        claimId:
          description: The claim ID to satisfy the tier
          type: string
        weight:
          description: The weight of the tier
          $ref: '#/components/schemas/NumberType'
        uncheckable:
          description: >-
            Uncheckable? If so, we will not display success or failure for this
            tier.


            We will just display the claim criteria and metadata.
          type: boolean
        pointsCalculationMethod:
          description: >-
            The calculation method to use for this tier. This is used for
            calculating the tier weight.


            By default, we check if the user has met the criteria for
            non-indexed and for indexed, we check claimed successfully at least
            one time.
          type: string
      required:
        - claimId
      additionalProperties: false
      type: object
    iApplicationPage:
      properties:
        pageId:
          description: The page ID
          type: string
        metadata:
          description: Metadata for the page
          $ref: '#/components/schemas/iMetadata'
        points:
          items:
            $ref: '#/components/schemas/iTierWithOptionalWeight'
          description: Points to display in the page
          type: array
        tiers:
          items:
            $ref: '#/components/schemas/iTierWithOptionalWeight'
          description: Tiers to display in the page
          type: array
        quests:
          items:
            $ref: '#/components/schemas/iTierWithOptionalWeight'
          description: Quests to display in the page
          type: array
      required:
        - pageId
        - metadata
      additionalProperties: false
      type: object
    iApiKeyDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        tier:
          type: string
        label:
          type: string
        apiKey:
          type: string
        bitbadgesAddress:
          type: string
          examples: *ref_8
        numRequests:
          type: number
        lastRequest:
          type: number
        createdAt:
          type: number
        expiry:
          type: number
        intendedUse:
          type: string
        stripeSubscriptionId:
          type: string
        subscriptionStatus:
          type: string
        currentPeriodEnd:
          type: number
        cancelAtPeriodEnd:
          type: boolean
      required:
        - _docId
        - label
        - apiKey
        - bitbadgesAddress
        - numRequests
        - lastRequest
        - createdAt
        - expiry
        - intendedUse
      additionalProperties: false
      description: ''
      type: object
    iApplicationDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        applicationId:
          description: The application ID
          type: string
        type:
          description: Type of the application
          type: string
        createdBy:
          description: The BitBadges address of the user who created this application
          $ref: '#/components/schemas/BitBadgesAddress'
        managedBy:
          description: The BitBadges address of the user who is currently managing this
          $ref: '#/components/schemas/BitBadgesAddress'
        createdAt:
          description: The time the application was created
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        lastUpdated:
          description: The last updated timestamp
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        metadata:
          description: The overall metadata for the application
          $ref: '#/components/schemas/iMetadata'
        pages:
          items:
            $ref: '#/components/schemas/iApplicationPage'
          description: The pages for the application
          type: array
      required:
        - _docId
        - applicationId
        - type
        - createdBy
        - managedBy
        - createdAt
        - metadata
        - pages
      additionalProperties: false
      description: ''
      type: object
    iInheritMetadataFrom:
      properties:
        claimId:
          description: The claim ID to link to
          type: string
        applicationId:
          description: The application ID to link to
          type: string
        collectionId:
          description: The collection ID to link to
          $ref: '#/components/schemas/CollectionId'
        listId:
          description: The address list ID to link to
          type: string
          examples: *ref_11
        mapId:
          description: The map ID to link to
          type: string
        badgeId:
          description: 'The token ID to link to "collectionId: CollectionIddgeId"'
          type: string
      additionalProperties: false
      type: object
    iUtilityPageDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        listingId:
          description: The listing ID
          type: string
        type:
          description: Type of the listing
          type: string
        createdBy:
          description: The BitBadges address of the user who created this listing
          $ref: '#/components/schemas/BitBadgesAddress'
        managedBy:
          description: The BitBadges address of the user who is currently managing this
          $ref: '#/components/schemas/BitBadgesAddress'
        directLink:
          description: >-
            The direct link for the listing. If specified, we will skip the
            entire content / listing page. Thus, content and links should be
            empty [].
          type: string
        createdAt:
          description: The time the listing was created
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        lastUpdated:
          description: The last updated timestamp
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        metadata:
          description: The overall metadata for the listing
          $ref: '#/components/schemas/iMetadata'
        inheritMetadataFrom:
          description: Where to inherit metadata from? Only one can be specified.
          $ref: '#/components/schemas/iInheritMetadataFrom'
        content:
          items:
            $ref: '#/components/schemas/iUtilityPageContent'
          description: The paginated content for the listing
          type: array
        links:
          items:
            $ref: '#/components/schemas/iUtilityPageLink'
          description: The relevant links for the listing
          type: array
        displayTimes:
          description: Optional time range for when the listing should be shown
          $ref: '#/components/schemas/iUintRange'
        visibility:
          enum:
            - public
            - private
            - unlisted
          description: Visibility state of the listing
          type: string
        categories:
          items:
            type: string
          description: The categories of the listing
          type: array
        approvalStatus:
          properties:
            isApproved:
              description: Whether the listing is approved
              type: boolean
            isFeatured:
              description: Is  Featured
              type: boolean
            featuredPriority:
              description: Featured Priority
              type: number
            rejected:
              description: Rejected or just pending
              type: boolean
            reason:
              description: Optional reason if not approved
              type: string
            updatedBy:
              $ref: '#/components/schemas/BitBadgesAddress'
              description: Address of who last updated the approval status
          required:
            - isApproved
          additionalProperties: false
          description: Approval status - can be used for moderation
          type: object
        viewCount:
          description: >-
            The total view count for this listing. This is updated periodically
            from the view tracking document.
          $ref: '#/components/schemas/NumberType'
        estimatedCost:
          description: The estimated cost for this utility/service
          $ref: '#/components/schemas/iEstimatedCost'
        estimatedTime:
          description: The estimated time to complete or deliver this utility/service
          type: string
        viewsByPeriod:
          properties:
            hourly:
              description: Views in the last hour
              type: number
            daily:
              description: Views in the last 24 hours
              type: number
            weekly:
              description: Views in the last 7 days
              type: number
            monthly:
              description: Views in the last 30 days
              type: number
          required:
            - hourly
            - daily
            - weekly
            - monthly
          additionalProperties: false
          description: Optional breakdown of views by time period for trending calculations
          type: object
        linkedTo:
          description: Linked details
          $ref: '#/components/schemas/iLinkedTo'
        locale:
          description: 'Locale (ex: es, fr, etc.). If not specified, we assume en.'
          type: string
        homePageView:
          properties:
            type:
              enum:
                - badges
                - lists
                - claims
                - applications
              type: string
            category:
              type: string
          required:
            - type
            - category
          additionalProperties: false
          description: Home page view
          type: object
      required:
        - _docId
        - listingId
        - type
        - createdBy
        - managedBy
        - createdAt
        - metadata
        - content
        - links
        - visibility
        - categories
        - approvalStatus
      additionalProperties: false
      description: ''
      type: object
    iLinkedTo:
      properties:
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/CollectionId'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs
          type: array
          examples: &ref_18
            - - start: '1'
                end: '10'
        listId:
          description: The list ID
          type: string
          examples: *ref_11
      additionalProperties: false
      type: object
    iUtilityPageContent:
      properties:
        type:
          description: The type of content
          type: string
        label:
          description: Label for the content page
          type: string
        content:
          description: The content - markdown supported
          type: string
      required:
        - type
        - label
        - content
      additionalProperties: false
      type: object
    iUtilityPageLink:
      properties:
        url:
          description: The URL of the link
          type: string
        claimId:
          description: The claim ID to link to
          type: string
        applicationId:
          description: The application ID to link to
          type: string
        collectionId:
          description: The collection ID to link to
          $ref: '#/components/schemas/CollectionId'
        listId:
          description: The address list ID to link to
          type: string
          examples: *ref_11
        mapId:
          description: The map ID to link to
          type: string
        metadata:
          description: >-
            Metadata for the link. Only applicable if the link is to a
            non-BitBadges entity. In other words, not tied to a specific claim,
            application, collection, etc.
          $ref: '#/components/schemas/iMetadata'
      required:
        - url
      additionalProperties: false
      type: object
    iListingViewsDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        listingId:
          description: The listing ID this view count is for
          type: string
        viewCount:
          description: The total number of views
          $ref: '#/components/schemas/NumberType'
        lastUpdated:
          description: The last time this view count was updated
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        viewsByPeriod:
          properties:
            hourly:
              description: Views in the last hour
              type: number
            daily:
              description: Views in the last 24 hours
              type: number
            weekly:
              description: Views in the last 7 days
              type: number
            monthly:
              description: Views in the last 30 days
              type: number
          required:
            - hourly
            - daily
            - weekly
            - monthly
          additionalProperties: false
          description: Optional breakdown of views by time period for trending calculations
          type: object
      required:
        - _docId
        - listingId
        - viewCount
        - lastUpdated
      additionalProperties: false
      description: ''
      type: object
    iClaimBuilderDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        cid:
          description: >-
            The CID (content ID) of the document. This is used behind the scenes
            to handle off-chain vs on-chain data races.
          type: string
        createdBy:
          description: The BitBadges address of the user who created this password
          $ref: '#/components/schemas/BitBadgesAddress'
        docClaimed:
          description: True if the document is claimed by the collection
          type: boolean
        collectionId:
          description: The collection ID of the document
          $ref: '#/components/schemas/CollectionId'
        managedBy:
          description: The BitBadges address of the user who is currently managing this
          $ref: '#/components/schemas/BitBadgesAddress'
        trackerDetails:
          description: Which challenge tracker is it tied to
          $ref: '#/components/schemas/iChallengeTrackerIdDetails'
        deletedAt:
          description: Deleted at timestamp
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        plugins:
          items:
            $ref: '#/components/schemas/IntegrationPluginParams'
          description: Dynamic checks to run in the form of plugins
          type: array
        pluginIds:
          items:
            type: string
          description: For query purposes, the plugin IDs
          type: array
        manualDistribution:
          description: >-
            If true, the claim codes are to be distributed manually. This doc
            will only be used for storage purposes.

            Only in use for legacy on-chain claims.
          type: boolean
        approach:
          description: >-
            The expected approach for the claim. This is for display purposes
            for the frontend.


            Available options:

            - in-site: The claim is expected to be completed in-site.

            - api: The claim is expected to be completed via an API call.

            - zapier: The claim is expected to be completed via Zapier
            auto-completion.
          type: string
        metadata:
          description: Metadata for the claim
          $ref: '#/components/schemas/iMetadata'
        state:
          additionalProperties: {}
          description: The current state of each plugin
          type: object
        assignMethod:
          description: Algorithm to determine the claaim number indices
          type: string
        satisfyMethod:
          description: >-
            Custom success logic. If not provided, we will default to AND logic
            with all plugins.
          $ref: '#/components/schemas/iSatisfyMethod'
        action:
          properties:
            seedCode:
              type: string
            balancesToSet:
              $ref: '#/components/schemas/iPredeterminedBalances'
            listId:
              type: string
              examples: *ref_11
            siwbbClaim:
              type: boolean
          additionalProperties: false
          description: Details for the action to perform if the criteria is correct
          type: object
        rewards:
          items:
            $ref: '#/components/schemas/iClaimReward'
          description: >-
            Rewards to be shown upon a successful claim. If you need further
            gating, you can do this in two-steps.
          type: array
        estimatedCost:
          description: Estimated cost for the user
          type: string
        estimatedTime:
          description: Estimated time to satisfy the claim's requirements
          type: string
        showInSearchResults:
          description: If true, the claim will be shown in search results
          type: boolean
        categories:
          items:
            type: string
          description: The categories of the claim
          type: array
        lastUpdated:
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        createdAt:
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        version:
          $ref: '#/components/schemas/NumberType'
        testOnly:
          type: boolean
        cachePolicy:
          description: >-
            For on-demand claims, we cache the result per user for a short
            period.


            To help optimize performance, please provide a cache policy.


            This is only applicable to on-demand claims.
          $ref: '#/components/schemas/iClaimCachePolicy'
      required:
        - _docId
        - cid
        - createdBy
        - docClaimed
        - collectionId
        - managedBy
        - plugins
        - state
        - action
        - lastUpdated
        - createdAt
        - version
      additionalProperties: false
      description: ''
      type: object
    iClaimCachePolicy:
      properties:
        ttl:
          description: >-
            The number of seconds to cache the result. Default is 5 minutes (300
            seconds) if none is specified.


            Note: This may be overridden by other options
          $ref: '#/components/schemas/NumberType'
        alwaysPermanent:
          description: >-
            Permanent once the claim is calculated once. We will cache results
            indefinitely.
          type: boolean
        permanentAfter:
          description: >-
            Permanent after a specific timestamp. Until then, we use the ttl. We
            will cache results indefinitely after this timestamp.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      additionalProperties: false
      type: object
    iClaimReward:
      properties:
        rewardId:
          description: >-
            The ID of the reward (either a pre-configured one or "custom").
            Currently, this is not used for anything.
          type: string
        instanceId:
          description: The instance ID of the reward. A unique identifier for the reward.
          type: string
        metadata:
          properties:
            name:
              type: string
              examples: *ref_13
            description:
              type: string
              examples: *ref_9
            image:
              type: string
              examples: *ref_12
          required:
            - name
            - description
            - image
          additionalProperties: false
          description: >-
            Metadata for the reward. This is public-facing, so do not include
            any gated content here. By default, we use the associated rewardId.
          type: object
        automatic:
          description: >-
            If true, the reward is automatically given to the user upon
            completion. No in-site logic is required.
          type: boolean
        gatedContent:
          description: The gated content to display upon completion.
          $ref: '#/components/schemas/iClaimGatedContent'
        calculationMethod:
          properties:
            alwaysShow:
              type: boolean
            minClaimSuccesses:
              type: number
          additionalProperties: false
          description: >-
            Calculation method to use for the gated content. This is used to
            determine who is shown the gated content.


            By default, we check min 1 claim success for indexed claims and
            criteria met for non-indexed claims.
          type: object
      required:
        - rewardId
        - instanceId
        - gatedContent
      additionalProperties: false
      type: object
    iClaimGatedContent:
      properties:
        content:
          description: The content (markdown supported) to be shown to successful claimers
          type: string
        url:
          description: The URL to be shown to successful claimers
          type: string
        params:
          additionalProperties: {}
          description: >-
            The params to be shown to successful claimers. Only used for
            pre-configured rewards.
          type: object
      additionalProperties: false
      type: object
    iApprovalTrackerDoc:
      properties:
        collectionId:
          description: The collection ID for the approval.
          $ref: '#/components/schemas/CollectionId'
        approvalId:
          description: The approval ID
          type: string
        amountTrackerId:
          description: The amount tracker ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
          examples: &ref_14
            - collection
            - incoming
            - outgoing
        approverAddress:
          description: The address of the approval to check.
          $ref: '#/components/schemas/BitBadgesAddress'
        trackerType:
          description: >-
            The type of tracker to check "overall", "to", "from", or
            "initiatedBy".
          type: string
        approvedAddress:
          description: The address to check for the approval.
          $ref: '#/components/schemas/BitBadgesAddress'
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        numTransfers:
          description: The number of transfers. Is an incrementing tally.
          $ref: '#/components/schemas/NumberType'
        amounts:
          items:
            $ref: '#/components/schemas/iBalance'
          description: A tally of the amounts transferred for this approval.
          type: array
      required:
        - collectionId
        - approvalId
        - amountTrackerId
        - approvalLevel
        - approverAddress
        - trackerType
        - approvedAddress
        - _docId
        - numTransfers
        - amounts
      additionalProperties: false
      description: ''
      type: object
    iChallengeTrackerIdDetails:
      properties:
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/CollectionId'
        approvalId:
          description: The approval ID
          type: string
        challengeTrackerId:
          description: The challenge ID
          type: string
        approvalLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
          examples: *ref_14
        approverAddress:
          description: The approver address (leave blank if approvalLevel = "collection")
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - collectionId
        - approvalId
        - challengeTrackerId
        - approvalLevel
        - approverAddress
      additionalProperties: false
      type: object
    iMerkleChallengeTrackerDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/CollectionId'
        challengeTrackerId:
          description: The challenge ID
          type: string
        approvalId:
          description: The approval ID
          type: string
        approvalLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
          examples: *ref_14
        approverAddress:
          description: The approver address (leave blank if approvalLevel = "collection")
          $ref: '#/components/schemas/BitBadgesAddress'
        usedLeafIndices:
          items:
            $ref: '#/components/schemas/iUsedLeafStatus'
          description: >-
            The used leaf indices for each challenge. A leaf index is the leaf
            location in the bottommost layer of the Merkle tree
          type: array
      required:
        - _docId
        - collectionId
        - challengeTrackerId
        - approvalId
        - approvalLevel
        - approverAddress
        - usedLeafIndices
      additionalProperties: false
      description: ''
      type: object
    iUsedLeafStatus:
      properties:
        leafIndex:
          description: The leaf index
          $ref: '#/components/schemas/NumberType'
        usedBy:
          description: The address that used the leaf
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - leafIndex
        - usedBy
      additionalProperties: false
      type: object
    iFetchDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        content:
          anyOf:
            - $ref: '#/components/schemas/iMetadata'
            - $ref: '#/components/schemas/iApprovalInfoDetails'
            - $ref: '#/components/schemas/iOffChainBalancesMap'
            - $ref: '#/components/schemas/iChallengeDetails'
          description: >-
            The content of the fetch document. Note that we store balances in
            BALANCES_DB and not here to avoid double storage.
        fetchedAt:
          description: The time the document was fetched
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        fetchedAtBlock:
          description: The block the document was fetched
          $ref: '#/components/schemas/NumberType'
        db:
          enum:
            - ApprovalInfo
            - Metadata
            - Balances
            - ChallengeInfo
          description: The type of content fetched. This is used for querying purposes
          type: string
        isPermanent:
          description: >-
            True if the document is permanent (i.e. fetched from a permanent URI
            like IPFS)
          type: boolean
      required:
        - _docId
        - fetchedAt
        - fetchedAtBlock
        - db
        - isPermanent
      additionalProperties: false
      description: ''
      type: object
    iRefreshDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/CollectionId'
        refreshRequestTime:
          description: The time the refresh was requested (Unix timestamp in milliseconds)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - _docId
        - collectionId
        - refreshRequestTime
      additionalProperties: false
      description: ''
      type: object
    iAirdropDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        airdropped:
          description: True if the airdrop has been completed
          type: boolean
        timestamp:
          description: >-
            The timestamp of when the airdrop was completed (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        hash:
          description: The hash of the airdrop transaction
          type: string
        ip:
          type: string
      required:
        - _docId
        - airdropped
        - timestamp
      additionalProperties: false
      description: ''
      type: object
    iIPFSTotalsDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        bytesUploaded:
          description: The total bytes uploaded
          $ref: '#/components/schemas/NumberType'
      required:
        - _docId
        - bytesUploaded
      additionalProperties: false
      description: ''
      type: object
    iComplianceDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        badges:
          properties:
            nsfw:
              items:
                $ref: '#/components/schemas/iBatchTokenDetails'
              type: array
            reported:
              items:
                $ref: '#/components/schemas/iBatchTokenDetails'
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
        addressLists:
          properties:
            nsfw:
              items:
                properties:
                  listId:
                    type: string
                    examples: *ref_11
                  reason:
                    type: string
                required:
                  - listId
                  - reason
                additionalProperties: false
                type: object
              type: array
            reported:
              items:
                properties:
                  listId:
                    type: string
                    examples: *ref_11
                  reason:
                    type: string
                required:
                  - listId
                  - reason
                additionalProperties: false
                type: object
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
        accounts:
          properties:
            nsfw:
              items:
                properties:
                  bitbadgesAddress:
                    $ref: '#/components/schemas/BitBadgesAddress'
                    examples: *ref_8
                  reason:
                    type: string
                required:
                  - bitbadgesAddress
                  - reason
                additionalProperties: false
                type: object
              type: array
            reported:
              items:
                properties:
                  bitbadgesAddress:
                    $ref: '#/components/schemas/BitBadgesAddress'
                    examples: *ref_8
                  reason:
                    type: string
                required:
                  - bitbadgesAddress
                  - reason
                additionalProperties: false
                type: object
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
        applications:
          properties:
            nsfw:
              items:
                properties:
                  applicationId:
                    type: string
                  reason:
                    type: string
                required:
                  - applicationId
                  - reason
                additionalProperties: false
                type: object
              type: array
            reported:
              items:
                properties:
                  applicationId:
                    type: string
                  reason:
                    type: string
                required:
                  - applicationId
                  - reason
                additionalProperties: false
                type: object
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
        claims:
          properties:
            nsfw:
              items:
                properties:
                  claimId:
                    type: string
                  reason:
                    type: string
                required:
                  - claimId
                  - reason
                additionalProperties: false
                type: object
              type: array
            reported:
              items:
                properties:
                  claimId:
                    type: string
                  reason:
                    type: string
                required:
                  - claimId
                  - reason
                additionalProperties: false
                type: object
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
        maps:
          properties:
            nsfw:
              items:
                properties:
                  mapId:
                    type: string
                  reason:
                    type: string
                required:
                  - mapId
                  - reason
                additionalProperties: false
                type: object
              type: array
            reported:
              items:
                properties:
                  mapId:
                    type: string
                  reason:
                    type: string
                required:
                  - mapId
                  - reason
                additionalProperties: false
                type: object
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
      required:
        - _docId
        - badges
        - addressLists
        - accounts
      additionalProperties: false
      description: ''
      type: object
    iDeveloperAppDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        createdBy:
          description: Creator of the app
          $ref: '#/components/schemas/BitBadgesAddress'
        managedBy:
          description: The BitBadges address of the user who is currently managing this
          $ref: '#/components/schemas/BitBadgesAddress'
        name:
          description: The name of the app
          type: string
          examples: *ref_13
        description:
          description: The description of the app
          type: string
          examples: *ref_9
        image:
          description: The image of the app
          type: string
          examples: *ref_12
        clientId:
          description: The client ID of the app
          type: string
        clientSecret:
          description: The client secret of the app
          type: string
        redirectUris:
          items:
            type: string
          description: The redirect URI of the app
          type: array
        lastUpdated:
          description: The last updated timestamp
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        createdAt:
          description: The time the app was created
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - _docId
        - createdBy
        - managedBy
        - name
        - description
        - image
        - clientId
        - clientSecret
        - redirectUris
      additionalProperties: false
      description: ''
      type: object
    DynamicDataHandlerType:
      anyOf:
        - $ref: '#/components/schemas/OauthAppName'
        - enum:
            - addresses
          type: string
    ActionName:
      type: string
    DynamicDataHandlerActionRequest:
      properties:
        actionName:
          examples: &ref_28
            - add
          $ref: '#/components/schemas/ActionName'
        payload: {}
      required:
        - actionName
        - payload
      additionalProperties: false
      type: object
    iDynamicDataDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        handlerId:
          description: >-
            The handler ID. Can also be thought of as the type of dynamic data
            ("addresses", "email", ...)
          type: string
          examples: &ref_27
            - email
            - addresses
        dynamicDataId:
          description: The dynamic data ID. The ID of the store.
          type: string
        label:
          description: The label of the data store
          type: string
        dataSecret:
          description: >-
            The data secret. Used in cases where you are not signed in as
            creator. This authenticates the request.
          type: string
        data:
          description: The data itself.
        createdBy:
          description: The creator of the dynamic data store
          $ref: '#/components/schemas/BitBadgesAddress'
        managedBy:
          description: The manager of the dynamic data store
          $ref: '#/components/schemas/BitBadgesAddress'
        createdAt:
          description: The time the dynamic data store was created
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        lastUpdated:
          description: The time the dynamic data store was last updated
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - _docId
        - handlerId
        - dynamicDataId
        - label
        - dataSecret
        - data
        - createdBy
        - managedBy
      additionalProperties: false
      description: ''
      type: object
    iAccessTokenDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        accessToken:
          type: string
        tokenType:
          type: string
        clientId:
          type: string
        accessTokenExpiresAt:
          type: number
        refreshToken:
          type: string
        refreshTokenExpiresAt:
          type: number
        bitbadgesAddress:
          type: string
          examples: *ref_8
        address:
          type: string
        scopes:
          items:
            $ref: '#/components/schemas/OAuthScopeDetails'
          type: array
      required:
        - _docId
        - accessToken
        - tokenType
        - clientId
        - accessTokenExpiresAt
        - refreshToken
        - refreshTokenExpiresAt
        - bitbadgesAddress
        - address
        - scopes
      additionalProperties: false
      description: ''
      type: object
    iPluginDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        createdBy:
          description: The BitBadges address who created the plugin doc
          $ref: '#/components/schemas/BitBadgesAddress'
        managedBy:
          description: The BitBadges address of the user who is currently managing this
          $ref: '#/components/schemas/BitBadgesAddress'
        pluginId:
          description: The unique plugin ID
          type: string
        pluginSecret:
          description: >-
            The secret of the plugin. Used to verify BitBadges as origin of
            request.
          type: string
        inviteCode:
          description: Invite code for the plugin
          type: string
        toPublish:
          description: To publish to directory?
          type: boolean
        reviewCompleted:
          description: Review process completed
          type: boolean
        metadata:
          properties:
            createdBy:
              description: Creator of the plugin
              type: string
            name:
              description: The name of the plugin
              type: string
              examples: *ref_13
            description:
              description: Description of the plugin
              type: string
              examples: *ref_9
            image:
              description: The image of the plugin
              type: string
              examples: *ref_12
            parentApp:
              description: >-
                Parent app of the plugin. If blank, treated as its own app /
                entity.
              type: string
            documentation:
              description: Documentation for the plugin
              type: string
            sourceCode:
              description: Source code for the plugin
              type: string
            supportLink:
              description: Support link for the plugin
              type: string
          required:
            - createdBy
            - name
            - description
            - image
          additionalProperties: false
          type: object
        locale:
          description: >-
            Locale that is supported by the plugin. By default, we assume 'en'
            is supported if not specified.
          type: string
        lastUpdated:
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        createdAt:
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        deletedAt:
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        approvedUsers:
          items:
            $ref: '#/components/schemas/NativeAddress'
          type: array
        versions:
          items:
            $ref: '#/components/schemas/iPluginVersionConfig'
          description: Array of version-controlled plugin configurations
          type: array
      required:
        - _docId
        - createdBy
        - managedBy
        - pluginId
        - toPublish
        - reviewCompleted
        - metadata
        - lastUpdated
        - createdAt
        - approvedUsers
        - versions
      additionalProperties: false
      description: ''
      type: object
    iPluginVersionConfig:
      properties:
        version:
          description: Version of the plugin
          $ref: '#/components/schemas/NumberType'
        finalized:
          description: True if the version is finalized
          type: boolean
        createdAt:
          description: The time the version was created
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        lastUpdated:
          description: The time the version was last updated
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        reuseForNonIndexed:
          description: >-
            Reuse for nonindexed balances? Only applicable if is stateless,
            requires no user inputs, and requires no sessions.
          type: boolean
        receiveStatusWebhook:
          description: Whether the plugin should receive status webhooks
          type: boolean
        skipProcessingWebhook:
          description: >-
            Whether the plugin should skip processing webhooks. We will just
            auto-treat it as successful.
          type: boolean
        ignoreSimulations:
          description: Ignore simulations?
          type: boolean
        stateFunctionPreset:
          description: Preset type for how the plugin state is to be maintained.
        duplicatesAllowed:
          description: Whether it makes sense for multiple of this plugin to be allowed
          type: boolean
        requiresSessions:
          description: >-
            This means that the plugin can be used w/o any session cookies or
            authentication.
          type: boolean
        requiresUserInputs:
          description: >-
            This is a flag for being compatible with auto-triggered claims,
            meaning no user interaction is needed.
          type: boolean
        userInputsSchema:
          items:
            $ref: '#/components/schemas/JsonBodyInputSchema'
          type: array
        publicParamsSchema:
          items:
            $ref: '#/components/schemas/JsonBodyInputSchema'
          type: array
        privateParamsSchema:
          items:
            $ref: '#/components/schemas/JsonBodyInputSchema'
          type: array
        userInputRedirect:
          properties:
            baseUri:
              description: >-
                The base URI for user inputs. Note: This is experimental and not
                fully supported yet.
              type: string
            tutorialUri:
              description: The tutorial URI for user inputs.
              type: string
          additionalProperties: false
          description: The redirect URI for user inputs.
          type: object
        claimCreatorRedirect:
          properties:
            toolUri:
              description: >-
                The tool URI for claim creators. Note: This is experimental and
                not fully supported yet.
              type: string
            tutorialUri:
              description: The tutorial URI for claim creators.
              type: string
            testerUri:
              description: >-
                The tester URI for claim creators. Note: This is experimental
                and not fully supported yet.
              type: string
          additionalProperties: false
          description: The redirect URI for claim creators.
          type: object
        verificationCall:
          properties:
            uri:
              type: string
              examples: *ref_1
            method:
              enum:
                - POST
                - GET
                - PUT
                - DELETE
              type: string
            hardcodedInputs:
              items:
                $ref: '#/components/schemas/JsonBodyInputWithValue'
              type: array
            passAddress:
              type: boolean
            passDiscord:
              type: boolean
            passEmail:
              type: boolean
            passTwitter:
              type: boolean
            passGoogle:
              type: boolean
            passYoutube:
              type: boolean
            passGithub:
              type: boolean
            passTwitch:
              type: boolean
            passStrava:
              type: boolean
            passReddit:
              type: boolean
            passBluesky:
              type: boolean
            passShopify:
              type: boolean
            passFacebook:
              type: boolean
            passTelegram:
              type: boolean
            passFarcaster:
              type: boolean
            passSlack:
              type: boolean
            passMeetup:
              type: boolean
            passMailchimp:
              type: boolean
            postProcessingJs:
              type: string
          required:
            - uri
            - method
            - hardcodedInputs
            - postProcessingJs
          additionalProperties: false
          description: >-
            The verification URL config. This lets us know what should be passed
            to the plugin payload.
          type: object
        customDetailsDisplay:
          description: >-
            Custom details display for the plugin. Use {{publicParamKey}} to
            dynamically display the values of public parameters.


            Example: "This plugin checks for a minimum of {{publicBalanceParam}}
            balance."
          type: string
        requireSignIn:
          description: >-
            Require BitBadges sign-in to use the plugin?

            This will ensure that any addresss received is actually verified by
            BitBadges.

            Otherwise, the address will be the claimee's address but it could be
            manually entered (if configuration allows).


            We recommend keeping this false to allow for non-indexed support and
            also be more flexible

            for the claim creator's implementation.
          type: boolean
      required:
        - version
        - finalized
        - createdAt
        - lastUpdated
        - reuseForNonIndexed
        - receiveStatusWebhook
        - stateFunctionPreset
        - duplicatesAllowed
        - requiresSessions
        - requiresUserInputs
        - userInputsSchema
        - publicParamsSchema
        - privateParamsSchema
      additionalProperties: false
      type: object
    iDepositBalanceDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        bitbadgesAddress:
          description: The BitBadges address of the user
          examples: *ref_8
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - _docId
        - bitbadgesAddress
      additionalProperties: false
      description: ''
      type: object
    iSIWBBRequestDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        code:
          description: The actual code itself
          type: string
        bitbadgesAddress:
          description: The BitBadges address of the signer
          examples: *ref_8
          $ref: '#/components/schemas/BitBadgesAddress'
        address:
          description: The native address of the signer
          $ref: '#/components/schemas/NativeAddress'
        chain:
          description: The native chain for the user
          $ref: '#/components/schemas/SupportedChain'
        name:
          type: string
          examples: *ref_13
        description:
          type: string
          examples: *ref_9
        image:
          type: string
          examples: *ref_12
        scopes:
          items:
            $ref: '#/components/schemas/OAuthScopeDetails'
          type: array
        expiresAt:
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        attestations:
          items:
            $ref: '#/components/schemas/iAttestationsProof'
          description: >-
            If required, you can additionally attach proof of attestations ot
            the auth flow. These can be used to prove sensitive information to
            verifiers.
          type: array
        createdAt:
          description: >-
            The timestamp of when the signature was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        deletedAt:
          description: >-
            If deleted, we still store temporarily for a period of time. We use
            a deletedAt timestamp to determine when to delete.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        clientId:
          description: The client ID of the app that requested the signature
          type: string
        redirectUri:
          description: The redirect URI of the app
          type: string
        codeChallenge:
          description: The code challenge for the SIWBB request (if used with PKCE).
          type: string
        codeChallengeMethod:
          enum:
            - S256
            - plain
          description: The code challenge method for the SIWBB request (if used with PKCE).
          type: string
      required:
        - _docId
        - code
        - bitbadgesAddress
        - address
        - chain
        - scopes
        - expiresAt
        - attestations
        - createdAt
        - clientId
      additionalProperties: false
      description: ''
      type: object
    iAttestationDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the messages.
          type: string
        createdBy:
          description: >-
            The address of the user who created the attestation on BitBadges.
            Note this is used for permissions on BitBadges end and may not align
            with the signer / issuer of the attestation.
          $ref: '#/components/schemas/BitBadgesAddress'
        createdAt:
          description: When the attestation was created.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        entropies:
          items:
            type: string
          description: >-
            Entropies used for certain data integrity proofs on-chain (e.g.
            HASH(message + entropy) = on-chain value)
          type: array
        publicVisibility:
          description: >-
            Whether or not the attestation is displayable on the user's profile.
            if true, the attestation can be queried by anyone with the ID.
          type: boolean
        proofOfIssuance:
          properties:
            message:
              type: string
            signature:
              type: string
              examples: &ref_16
                - 0x...
                - 8d42172...
            signer:
              type: string
              examples: &ref_17
                - 0x...
                - 8d42172...
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this attestation signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        attestationId:
          description: >-
            The attestation ID. This is the constant ID that is given to the
            attestation.
          type: string
        inviteCode:
          description: >-
            The inviteCode is used to add the attestation to the user's wallet.
            Anyone with the key can query it, so keep this safe and secure.
          type: string
        scheme:
          description: >-
            The scheme of the attestation. BBS+ signatures are supported and can
            be used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        originalProvider:
          description: >-
            The original provider of the attestation. Used for third-party
            attestation providers.
          type: string
        messages:
          items:
            type: string
          description: >-
            Thesse are the attestations that are signed.

            For BBS+ signatures, there can be >1 messages, and the signer can
            selectively disclose the attestations.

            For standard signatures, there is only 1 attestationMessage.
          type: array
          examples: &ref_26
            - - attestation message 1
              - attestation message 2
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
            isDerived:
              type: boolean
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the messages. The
            siganture maintains the integrity of the messages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.


            For custom schemes, this is often left blank (because the proof is
            already included in the message).
          type: object
        name:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_12
        description:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_9
        holders:
          items:
            type: string
          description: Holders are the addresses that have been given the attestation.
          type: array
        allHolders:
          items:
            type: string
          description: >-
            All holders are the addresses that have been given the attestation
            at any point in time.

            Used internally as an append-only audit log.
          type: array
        anchors:
          items:
            properties:
              txHash:
                type: string
                examples: *ref_7
              message:
                type: string
            additionalProperties: false
            type: object
          description: >-
            Anchors are on-chain transactions used to prove certain things

            about the attestation. For example, you can anchor the attestation
            to a

            transaction hash to prove that the attestation existed at a certain
            time.
          type: array
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          type: array
      required:
        - _docId
        - messageFormat
        - createdBy
        - createdAt
        - entropies
        - attestationId
        - inviteCode
        - scheme
        - messages
        - name
        - image
        - description
        - holders
        - anchors
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    iMapDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        creator:
          $ref: '#/components/schemas/BitBadgesAddress'
        mapId:
          type: string
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          type: array
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
        defaultValue:
          type: string
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
          type: array
        values:
          additionalProperties:
            $ref: '#/components/schemas/iValueStore'
          description: The (key, value) pairs for the maps that are set.
          type: object
        metadata:
          description: The fetched metadata for the map (if any).
          $ref: '#/components/schemas/iMetadata'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: >-
            The update history for the map. Maps are maintained through
            blockchain transactions.
          type: array
      required:
        - _docId
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - permissions
        - metadataTimeline
        - values
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    iUpdateHistory:
      properties:
        txHash:
          description: The transaction hash of the on-chain transaction that updated this.
          type: string
          examples: *ref_7
        block:
          description: The block number of the on-chain transaction that updated this.
          $ref: '#/components/schemas/NumberType'
        blockTimestamp:
          description: >-
            The timestamp of the block of the on-chain transaction that updated
            this.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        timestamp:
          description: >-
            The indexer's timestamp of the update. This is provided in some
            cases because the time of indexing may be inconsistent with the time
            of the block.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - txHash
        - block
        - blockTimestamp
        - timestamp
      additionalProperties: false
      type: object
    iMapWithValues:
      properties:
        creator:
          $ref: '#/components/schemas/BitBadgesAddress'
        mapId:
          type: string
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          type: array
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
        defaultValue:
          type: string
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
          type: array
        values:
          additionalProperties:
            $ref: '#/components/schemas/iValueStore'
          description: The (key, value) pairs for the maps that are set.
          type: object
        metadata:
          description: The fetched metadata for the map (if any).
          $ref: '#/components/schemas/iMetadata'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: >-
            The update history for the map. Maps are maintained through
            blockchain transactions.
          type: array
      required:
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - permissions
        - metadataTimeline
        - values
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    iClaimDetails:
      properties:
        _includesPrivateParams:
          description: Whether the claim fetch includes private params
          type: boolean
        claimId:
          description: Unique claim ID.
          type: string
        createdBy:
          description: The original creator of the claim
          $ref: '#/components/schemas/BitBadgesAddress'
        managedBy:
          description: The BitBadges address of the user who is currently managing this
          $ref: '#/components/schemas/BitBadgesAddress'
        collectionId:
          description: >-
            Collection ID that the claim is for (if applicable - collection
            claims).
          $ref: '#/components/schemas/CollectionId'
        standaloneClaim:
          description: Standalone claims are not linked with a token or list.
          type: boolean
        listId:
          description: Address list ID that the claim is for (if applicable - list claims).
          type: string
          examples: *ref_11
        trackerDetails:
          description: >-
            The tracker details for the claim (if applicable - collection
            claims).
          $ref: '#/components/schemas/iChallengeTrackerIdDetails'
        balancesToSet:
          description: >-
            The balances to set for the claim.


            Only used for claims for collections that have off-chain indexed
            balances and are assigning balances based on the claim.
          $ref: '#/components/schemas/iPredeterminedBalances'
        plugins:
          items:
            $ref: '#/components/schemas/IntegrationPluginDetails'
          description: >-
            Claim plugins. These are the criteria that must pass for a user to
            claim.
          type: array
        rewards:
          items:
            $ref: '#/components/schemas/iClaimReward'
          description: Rewards for the claim.
          type: array
        estimatedCost:
          description: Estimated cost for the claim.
          type: string
        showInSearchResults:
          description: If true, the claim will be shown in search results
          type: boolean
        categories:
          items:
            type: string
          description: The categories of the claim
          type: array
        estimatedTime:
          description: Estimated time to satisfy the claim's requirements.
          type: string
        manualDistribution:
          description: >-
            If manual distribution is enabled, we do not handle any distribution
            of claim codes.

            We leave that up to the claim creator.


            Only applicable for on-chain token claims. This is only used in
            advanced self-hosted cases.
          type: boolean
        approach:
          description: >-
            How the claim is expected to be completed. This is for display
            purposes for the frontend.


            Available options:

            - in-site (default): The claim is expected to be completed in-site.

            - api: The claim is expected to be completed via an API call.

            - zapier: The claim is expected to be completed via Zapier
            auto-completion.


            Typically, you will use the in-site approach
          type: string
        seedCode:
          description: >-
            Seed code for the claim. Only used for on-chain token claims.


            This is how we produce all reserved codes for the on-chain merkle
            challenge / proofs.
          type: string
        metadata:
          description: Metadata for the claim.
          $ref: '#/components/schemas/iMetadata'
        assignMethod:
          description: >-
            Algorithm to determine the claim number order. Blank is just
            incrementing claim numbers.


            For most cases, you will not need to specify this.
          type: string
        lastUpdated:
          description: Last updated timestamp for the claim.
          $ref: '#/components/schemas/NumberType'
        version:
          description: The version of the claim.
          $ref: '#/components/schemas/NumberType'
        satisfyMethod:
          description: >-
            Custom satisfaction logic.


            If left blank, all plugins must pass for the claim to be satisfied.

            Otherwise, you can specify a custom method to determine if the claim
            is satisfied.
          $ref: '#/components/schemas/iSatisfyMethod'
        cachePolicy:
          description: Cache policy for the claim. Only needed for on-demand claims.
          $ref: '#/components/schemas/iClaimCachePolicy'
        _templateInfo:
          properties:
            supportedApproaches:
              items:
                type: string
              type: array
            pluginId:
              type: string
            completedTemplateStep:
              type: boolean
          additionalProperties: false
          description: For internal use by the frontend.
          type: object
      required:
        - _includesPrivateParams
        - claimId
        - plugins
        - version
      additionalProperties: false
      type: object
    iEstimatedCost:
      properties:
        amount:
          description: The amount of the cost
          $ref: '#/components/schemas/NumberType'
        denom:
          description: The denomination of the cost (e.g. 'USD', 'ETH', etc.)
          type: string
      required:
        - amount
        - denom
      additionalProperties: false
      description: >-
        A cost estimate with an amount and denomination, similar to CosmosCoin
        but for display purposes only.
      type: object
    iBadgeMetadataDetails:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs that correspond to the metadata
          type: array
          examples: *ref_18
        metadata:
          description: The metadata fetched by the URI
          $ref: '#/components/schemas/iMetadata'
        uri:
          description: >-
            The URI that the metadata was fetched from. This is the original
            on-chain URI, so may still have placeholders (i.e. {id} or
            {address})
          type: string
          examples: *ref_1
        fetchedUri:
          description: >-
            The URI that the metadata was fetched from with placeholders
            replaced.
          type: string
        customData:
          description: Custom data
          type: string
        toUploadToIpfs:
          description: >-
            Flag to denote if the metadata is new and should be updated. Used
            internally.
          type: boolean
      required:
        - badgeIds
        - uri
        - customData
      additionalProperties: false
      type: object
    iCollectionMetadataDetails:
      properties:
        metadata:
          description: The metadata fetched by the URI
          $ref: '#/components/schemas/iMetadata'
        uri:
          description: >-
            The URI that the metadata was fetched from. This is the original
            on-chain URI, so may still have placeholders (i.e. {id} or
            {address})
          type: string
          examples: *ref_1
        fetchedUri:
          description: >-
            The URI that the metadata was fetched from with placeholders
            replaced.
          type: string
        customData:
          description: Custom data
          type: string
        toUploadToIpfs:
          description: >-
            Flag to denote if the metadata is new and should be updated. Used
            internally.
          type: boolean
      required:
        - uri
        - customData
      additionalProperties: false
      type: object
    iMetadata:
      properties:
        name:
          description: The name of this item.
          type: string
          examples: *ref_13
        description:
          description: The description of this item. Supports markdown.
          type: string
          examples: *ref_9
        image:
          description: The image for this item.
          type: string
          examples: *ref_12
        bannerImage:
          description: The banner image for this item.
          type: string
          examples: *ref_19
        video:
          description: >-
            The video for this item. If a standard video is used, this should be
            a link to the video. We will use image as the poster image. If a
            youtube video is used, we embed it as an iframe.
          type: string
          examples: &ref_20
            - https://www.youtube.com/embed/VIDEO_ID
            - https://example.com/video.mp4
        category:
          description: The category for this item (e.g. "Education", "Attendance").
          type: string
        externalUrl:
          description: The external URL for this item.
          type: string
        tags:
          items:
            type: string
          description: The tags for this item
          type: array
        socials:
          additionalProperties:
            type: string
          description: The socials for this item
          type: object
        offChainTransferabilityInfo:
          properties:
            host:
              type: string
            assignMethod:
              type: string
          required:
            - host
            - assignMethod
          additionalProperties: false
          description: >-
            The off-chain transferability info for this item (used for tokens -
            off-chain, disregard for others)
          type: object
        attributes:
          items:
            properties:
              type:
                type: string
              name:
                type: string
                examples: *ref_13
              value:
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
            required:
              - type
              - name
              - value
            additionalProperties: false
            type: object
          description: The attributes for this item
          type: array
        additionalInfo:
          items:
            properties:
              name:
                type: string
                examples: *ref_13
              image:
                type: string
                examples: *ref_12
              description:
                type: string
                examples: *ref_9
              url:
                type: string
            required:
              - name
              - image
              - description
            additionalProperties: false
            type: object
          description: Header links for this item displayed right under the title
          type: array
        fetchedAtBlock:
          description: The block the metadata was fetched at.
          $ref: '#/components/schemas/NumberType'
        fetchedAt:
          description: The time the metadata was fetched.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        _isUpdating:
          description: Whether the metadata is currently being updated.
          type: boolean
      required:
        - name
        - description
        - image
      additionalProperties: false
      type: object
    iMetadataWithoutInternals:
      properties:
        name:
          description: The name of this item.
          type: string
          examples: *ref_13
        description:
          description: The description of this item. Supports markdown.
          type: string
          examples: *ref_9
        image:
          description: The image for this item.
          type: string
          examples: *ref_12
        bannerImage:
          description: The banner image for this item.
          type: string
          examples: *ref_19
        video:
          description: >-
            The video for this item. If a standard video is used, this should be
            a link to the video. We will use image as the poster image. If a
            youtube video is used, we embed it as an iframe.
          type: string
          examples: *ref_20
        category:
          description: The category for this item (e.g. "Education", "Attendance").
          type: string
        externalUrl:
          description: The external URL for this item.
          type: string
        tags:
          items:
            type: string
          description: The tags for this item
          type: array
        socials:
          additionalProperties:
            type: string
          description: The socials for this item
          type: object
        offChainTransferabilityInfo:
          properties:
            host:
              type: string
            assignMethod:
              type: string
          required:
            - host
            - assignMethod
          additionalProperties: false
          description: >-
            The off-chain transferability info for this item (used for tokens -
            off-chain, disregard for others)
          type: object
        attributes:
          items:
            properties:
              type:
                type: string
              name:
                type: string
                examples: *ref_13
              value:
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
            required:
              - type
              - name
              - value
            additionalProperties: false
            type: object
          description: The attributes for this item
          type: array
        additionalInfo:
          items:
            properties:
              name:
                type: string
                examples: *ref_13
              image:
                type: string
                examples: *ref_12
              description:
                type: string
                examples: *ref_9
              url:
                type: string
            required:
              - name
              - image
              - description
            additionalProperties: false
            type: object
          description: Header links for this item displayed right under the title
          type: array
      required:
        - name
        - description
        - image
      additionalProperties: false
      type: object
    AddressListViewKey:
      enum:
        - listActivity
        - listings
      type: string
    iGetAddressListPayload:
      additionalProperties: false
      type: object
    iGetAddressListSuccessResponse:
      properties:
        addressList: {}
      required:
        - addressList
      additionalProperties: false
      type: object
    iGetAddressListsPayload:
      properties:
        listsToFetch:
          items:
            properties:
              listId:
                type: string
                examples: *ref_11
              viewsToFetch:
                items:
                  properties:
                    viewId:
                      type: string
                      examples: &ref_24
                        - viewKey
                    viewType:
                      $ref: '#/components/schemas/AddressListViewKey'
                      examples: &ref_25
                        - viewKey
                    bookmark:
                      type: string
                  required:
                    - viewId
                    - viewType
                    - bookmark
                  additionalProperties: false
                  type: object
                type: array
              fetchPrivateParams:
                description: >-
                  Certain views and details are private. If you are the creator
                  of the list, you can fetch these details. By default, we do
                  not fetch them.
                type: boolean
            required:
              - listId
            additionalProperties: false
            type: object
          description: >-
            The lists and accompanying details to fetch. Supports on-chain,
            off-chain, and reserved lists.
          type: array
      required:
        - listsToFetch
      additionalProperties: false
      type: object
    iGetAddressListsSuccessResponse:
      properties:
        addressLists:
          items:
            anyOf: []
          type: array
      required:
        - addressLists
      additionalProperties: false
      type: object
    iAddressListCreateObject:
      properties:
        listId:
          description: The ID of the address list.
          type: string
          examples: *ref_11
        addresses:
          items:
            type: string
          description: >-
            The addresses of the address list. If this is a tracker list, the
            addresses are the tracker IDs.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
          examples: *ref_1
        customData:
          description: >-
            Arbitrary custom data that can be stored. Leave blank for no custom
            data.
          type: string
        updateAddresses:
          description: >-
            Flag to update addresses?. Because w/ claims there can be race
            conditions,

            we have this flag.


            If true, we overwrite with provided addresses. If false, we leave
            addresses untouched.
          type: boolean
        claims:
          items:
            $ref: '#/components/schemas/CreateClaimRequest'
          description: The linked claims of the address list.
          type: array
        metadata:
          description: >-
            Metadata of the address list to upload. This will override and set
            the uri parameter.
          $ref: '#/components/schemas/iMetadataWithoutInternals'
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
        - claims
      additionalProperties: false
      type: object
    iUpdateAddressListsPayload:
      properties:
        addressLists:
          items:
            $ref: '#/components/schemas/iAddressListCreateObject'
          type: array
      required:
        - addressLists
      additionalProperties: false
      type: object
    iUpdateAddressListsSuccessResponse:
      additionalProperties: false
      type: object
    iCreateAddressListsPayload:
      properties:
        addressLists:
          items:
            $ref: '#/components/schemas/iAddressListCreateObject'
          type: array
      required:
        - addressLists
      additionalProperties: false
      type: object
    iCreateAddressListsSuccessResponse:
      additionalProperties: false
      type: object
    iDeleteAddressListsPayload:
      properties:
        listIds:
          items:
            type: string
          description: The list IDs to delete.
          type: array
      required:
        - listIds
      additionalProperties: false
      type: object
    iDeleteAddressListsSuccessResponse:
      additionalProperties: false
      type: object
    iUpdateAddressListCoreDetailsPayload:
      properties:
        listId:
          description: The ID of the address list.
          type: string
          examples: *ref_11
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
          examples: *ref_1
        customData:
          description: >-
            Arbitrary custom data that can be stored. Leave blank for no custom
            data.
          type: string
        metadata:
          description: >-
            The new metadata of the address list.


            If provided, we upload this to our databases and this will override
            the uri parameter.
          $ref: '#/components/schemas/iMetadataWithoutInternals'
      required:
        - listId
        - whitelist
        - uri
        - customData
      additionalProperties: false
      type: object
    iUpdateAddressListCoreDetailsSuccessResponse:
      additionalProperties: false
      type: object
    iUpdateAddressListAddressesPayload:
      properties:
        listId:
          description: The list ID to update.
          type: string
          examples: *ref_11
        addresses:
          items:
            type: string
          description: >-
            The addresses to update. This is a full overwrite for ALL addresses.


            If you have active claims, ensure this does not conflict via race
            conditions.
          type: array
      required:
        - listId
        - addresses
      additionalProperties: false
      type: object
    iUpdateAddressListAddressesSuccessResponse:
      additionalProperties: false
      type: object
    iBitBadgesUserInfo:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        publicKey:
          description: The public key of the account
          type: string
          examples: *ref_15
        accountNumber:
          description: >-
            The account number of the account. This is the account number
            registered on the BitBadges blockchain.
          $ref: '#/components/schemas/NumberType'
        pubKeyType:
          description: The public key type of the account
          type: string
        bitbadgesAddress:
          description: The BitBadges address of the account
          examples: *ref_8
          $ref: '#/components/schemas/BitBadgesAddress'
        ethAddress:
          description: The Eth address of the account
          type: string
          examples: *ref_21
        btcAddress:
          description: The Bitcoin address of the account
          type: string
          examples: *ref_22
        thorAddress:
          description: The Thorchain address of the account
          type: string
        sequence:
          description: >-
            The sequence of the account. This is the nonce for the blockchain
            for this account
          $ref: '#/components/schemas/NumberType'
        balance:
          description: The $BADGE balance of the account
          $ref: '#/components/schemas/iCosmosCoin'
        fetchedProfile:
          enum:
            - full
            - partial
          description: Whether we have already fetched the profile or not
          type: string
        embeddedWalletAddress:
          description: Embedded wallet address
          type: string
        seenActivity:
          description: >-
            The timestamp of the last activity seen for this account
            (milliseconds since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        createdAt:
          description: >-
            The timestamp of when this account was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        discord:
          description: The Discord username of the account
          type: string
        twitter:
          description: The Twitter username of the account
          type: string
        github:
          description: The GitHub username of the account
          type: string
        telegram:
          description: The Telegram username of the account
          type: string
        bluesky:
          description: The Bluesky username of the account
          type: string
        readme:
          description: The readme of the account
          type: string
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
          description: The custom links of the account
          type: array
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchTokenDetails'
          description: The hidden badges of the account
          type: array
        hiddenLists:
          items:
            type: string
          description: The hidden lists of the account
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
            attestations:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
            - attestations
          additionalProperties: false
          description: The custom pages of the account
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
            attestations:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
            - attestations
          additionalProperties: false
          description: The watched lists of the account's portfolio
          type: object
        profilePicUrl:
          description: The profile picture URL of the account
          type: string
          examples: *ref_23
        bannerImage:
          description: The banner image URL of the account
          type: string
          examples: *ref_19
        username:
          description: The username of the account
          type: string
        latestSignedInChain:
          description: The latest chain the user signed in with
          $ref: '#/components/schemas/SupportedChain'
        notifications:
          description: The notifications of the account
          $ref: '#/components/schemas/iNotificationPreferences'
        socialConnections:
          description: Social connections stored for the account
          $ref: '#/components/schemas/iSocialConnections'
        publicSocialConnections:
          description: Public social connections stored for the account
          $ref: '#/components/schemas/iSocialConnections'
        approvedSignInMethods:
          properties:
            discord:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            github:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            google:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            twitter:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            facebook:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            addresses:
              items:
                properties:
                  address:
                    $ref: '#/components/schemas/NativeAddress'
                  scopes:
                    items:
                      $ref: '#/components/schemas/OAuthScopeDetails'
                    type: array
                required:
                  - address
                  - scopes
                additionalProperties: false
                type: object
              type: array
            passwords:
              items:
                properties:
                  passwordHash:
                    type: string
                  salt:
                    type: string
                  scopes:
                    items:
                      $ref: '#/components/schemas/OAuthScopeDetails'
                    type: array
                required:
                  - passwordHash
                  - salt
                  - scopes
                additionalProperties: false
                type: object
              type: array
          additionalProperties: false
          description: Approved ways to sign in
          type: object
        resolvedName:
          description: The resolved name of the account (e.g. ENS name).
          type: string
        avatar:
          description: The avatar of the account.
          type: string
        solAddress:
          description: >-
            The Solana address of the account. Note: This may be empty if we do
            not have it yet. Solana -> BitBadges address conversions are
            one-way, and we cannot convert a BitBadges address to a Solana
            address without prior knowledge.
          type: string
          examples: *ref_10
        chain:
          description: The chain of the account.
          $ref: '#/components/schemas/SupportedChain'
        airdropped:
          description: Indicates whether the account has claimed their airdrop.
          type: boolean
        collected:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          description: >-
            A list of tokens that the account has collected. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          description: >-
            A list of transfer activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        listActivity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
          description: >-
            A list of list activity items for the account. Paginated and fetched
            as needed. To be used in conjunction with views.
          type: array
        claimActivity:
          items:
            $ref: '#/components/schemas/iClaimActivityDoc'
          description: >-
            A list of claim activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        pointsActivity:
          items:
            $ref: '#/components/schemas/iPointsActivityDoc'
          description: >-
            A list of points activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        challengeTrackers:
          items:
            $ref: '#/components/schemas/iMerkleChallengeTrackerDoc'
          description: >-
            A list of merkle challenge activity items for the account. Paginated
            and fetched as needed. To be used in conjunction with views.
          type: array
        approvalTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
          description: >-
            A list of approvals tracker activity items for the account.
            Paginated and fetched as needed. To be used in conjunction with
            views.
          type: array
        addressLists:
          items: {}
          description: >-
            A list of address lists for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        claimAlerts:
          items:
            $ref: '#/components/schemas/iClaimAlertDoc'
          description: >-
            A list of claim alerts for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        siwbbRequests:
          items:
            $ref: '#/components/schemas/iSIWBBRequestDoc'
          description: >-
            A list of SIWBB requests for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        attestations:
          items:
            $ref: '#/components/schemas/iAttestationDoc'
          description: >-
            A list of user attestations for the account. Paginated and fetched
            as needed. To be used in conjunction with views.
          type: array
        address:
          description: The native address of the account
          $ref: '#/components/schemas/NativeAddress'
        nsfw:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: Indicates whether the account is NSFW.
          type: object
        reported:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: Indicates whether the account has been reported.
          type: object
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                type: array
              type:
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          description: >-
            The views for this collection and their pagination Doc. Views will
            only include the doc _ids. Use the pagination to fetch more.  For
            example, if you want to fetch the activity for a view, you would use
            the view's pagination to fetch the doc _ids, then use the
            corresponding activity array to find the matching docs.
          type: object
        alias:
          properties:
            collectionId:
              $ref: '#/components/schemas/CollectionId'
            listId:
              type: string
              examples: *ref_11
          additionalProperties: false
          description: >-
            For advanced cases where you want a custom address or account for a
            collection or list. We map it to an account.


            Experimental - For example, if you want to send a badge to a
            collection, you can transfer it to the alias account.
          type: object
      required:
        - _docId
        - publicKey
        - accountNumber
        - pubKeyType
        - bitbadgesAddress
        - ethAddress
        - btcAddress
        - thorAddress
        - solAddress
        - chain
        - collected
        - activity
        - listActivity
        - challengeTrackers
        - approvalTrackers
        - addressLists
        - claimAlerts
        - siwbbRequests
        - attestations
        - address
        - views
      additionalProperties: false
      description: ''
      type: object
    AccountViewKey:
      enum:
        - createdLists
        - siwbbRequests
        - transferActivity
        - badgesCollected
        - sentClaimAlerts
        - claimAlerts
        - allLists
        - whitelists
        - blacklists
        - createdBadges
        - managingBadges
        - listActivity
        - createdAttestations
        - receivedAttestations
        - attestations
        - publicClaimActivity
        - allClaimActivity
        - pointsActivity
      description: The supported view keys for fetching account details.
      type: string
    AccountFetchDetails:
      properties:
        address:
          description: >-
            The address of the user. This can be their native address. Only one
            of address or username should be specified.
          $ref: '#/components/schemas/NativeAddress'
        username:
          description: >-
            The username of the user. Only one of address or username should be
            specified.
          type: string
        partialProfile:
          description: >-
            If true, we will only fetch a partial set of the document for the
            user.


            Currently includes: solAddress, username, profile pic, and latest
            signed in chain


            Pretty much, anything you need to display the address but not the
            full profile
          type: boolean
        viewsToFetch:
          items:
            properties:
              viewId:
                description: >-
                  Unique view ID. Used for pagination. All fetches w/ same ID
                  should be made with same criteria.
                type: string
                examples: *ref_24
              viewType:
                $ref: '#/components/schemas/AccountViewKey'
                description: The base view type to fetch.
                examples: *ref_25
              specificCollections:
                items:
                  $ref: '#/components/schemas/iBatchTokenDetails'
                description: >-
                  If defined, we will filter the view to only include the
                  specified collections.
                type: array
              specificLists:
                items:
                  type: string
                description: >-
                  If defined, we will filter the view to only include the
                  specified lists.
                type: array
              oldestFirst:
                description: Oldest first. By default, we fetch newest
                type: boolean
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
            required:
              - viewId
              - viewType
              - bookmark
            additionalProperties: false
            type: object
          description: An array of views to fetch
          type: array
      additionalProperties: false
      description: >-
        This defines the options for fetching additional account details.


        A view is a way of fetching additional details about an account, and
        these will be queryable in the response via the `views` property.


        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.
      type: object
    iGetAccountPayload:
      properties:
        address:
          $ref: '#/components/schemas/NativeAddress'
        username:
          type: string
      additionalProperties: false
      type: object
    iGetAccountSuccessResponse:
      properties:
        account:
          $ref: '#/components/schemas/iBitBadgesUserInfo'
      required:
        - account
      additionalProperties: false
      type: object
    iGetAccountsPayload:
      properties:
        accountsToFetch:
          items:
            $ref: '#/components/schemas/AccountFetchDetails'
          type: array
      required:
        - accountsToFetch
      additionalProperties: false
      type: object
    iGetAccountsSuccessResponse:
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
          type: array
      required:
        - accounts
      additionalProperties: false
      type: object
    iGetConnectedAccountsSuccessResponse:
      properties:
        accounts:
          items:
            properties:
              id:
                type: string
              object:
                type: string
              business_type:
                type: string
              created:
                type: number
              default_currency:
                type: string
              email:
                type: string
              type:
                type: string
              payouts_enabled:
                type: boolean
              display_name:
                type: string
            required:
              - id
              - object
              - business_type
              - created
              - default_currency
              - email
              - type
              - payouts_enabled
              - display_name
            additionalProperties: false
            type: object
          type: array
      required:
        - accounts
      additionalProperties: false
      type: object
    iDeleteConnectedAccountSuccessResponse:
      properties:
        deleted:
          type: boolean
      required:
        - deleted
      additionalProperties: false
      type: object
    iFilterSuggestionsPayload:
      additionalProperties: false
      type: object
    iFilterSuggestionsSuccessResponse:
      properties:
        attributes:
          items:
            properties:
              name:
                type: string
                examples: *ref_13
              value:
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
              count:
                type: number
              type:
                type: string
            required:
              - name
              - value
              - count
              - type
            additionalProperties: false
            type: object
          type: array
      required:
        - attributes
      additionalProperties: false
      type: object
    iFilterBadgesInCollectionPayload:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: >-
            Limit to specific token IDs. Leave undefined to not filter by badge
            ID.
          type: array
          examples: *ref_18
        categories:
          items:
            type: string
          description: Limit to specific lists. Leave undefined to not filter by list.
          type: array
        tags:
          items:
            type: string
          description: Limit to specific lists. Leave undefined to not filter by list.
          type: array
        mostViewed:
          enum:
            - daily
            - allTime
            - weekly
            - monthly
            - yearly
          description: >-
            mostViewed is a special view that sorts by most viewed tokens. May
            be incompatible with other filters.
          type: string
        bookmark:
          description: Pagination bookmark. Leave undefined or "" for first request.
          type: string
        attributes:
          items:
            properties:
              name:
                type: string
                examples: *ref_13
              value:
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
            required:
              - name
              - value
            additionalProperties: false
            type: object
          description: Attribute queries
          type: array
      additionalProperties: false
      type: object
    iFilterBadgesInCollectionSuccessResponse:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
          examples: *ref_18
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - badgeIds
        - pagination
      additionalProperties: false
      type: object
    iGetOwnersPayload:
      properties:
        bookmark:
          description: >-
            The pagination bookmark for where to start the request. Bookmarks
            are obtained via the previous response. "" for first request.
          type: string
        sortBy:
          description: Sort by amount descending.
          enum:
            - amount
          type: string
      additionalProperties: false
      type: object
    iGetOwnersSuccessResponse:
      properties:
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          description: Represents a list of owners balance details.
          type: array
        pagination:
          description: Represents pagination information.
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - owners
        - pagination
      additionalProperties: false
      type: object
    iGetTokenBalanceByAddressSpecificTokenPayload:
      additionalProperties: false
      type: object
    iGetTokenBalanceByAddressSpecificTokenSuccessResponse:
      properties:
        balance:
          $ref: '#/components/schemas/NumberType'
      required:
        - balance
      additionalProperties: false
      type: object
    iGetTokenBalanceByAddressPayload:
      properties:
        fetchPrivateParams:
          description: >-
            If true, we will fetch private parameters for any claims /
            approvals. Must be creator.


            This is only applicable to incoming / outgoing approvals with
            claims.
          type: boolean
        forceful:
          description: >-
            If true, we will forcefully fetch the balance even if it is already
            cached. Only applicable to non-indexed / on-demand collections.
          type: boolean
      additionalProperties: false
      type: object
    iGetTokenBalanceByAddressSuccessResponse:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          description: The user's permissions.
          $ref: '#/components/schemas/iUserPermissions'
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        autoApproveAllIncomingTransfers:
          description: >-
            Whether the user's all incoming transfers are auto-approved. If not,
            they must be explicitly approved using the incoming approvals.
          type: boolean
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/CollectionId'
        bitbadgesAddress:
          description: The BitBadges address of the user
          examples: *ref_8
          $ref: '#/components/schemas/BitBadgesAddress'
        onChain:
          description: True if the balances are on-chain
          type: boolean
        uri:
          description: The URI of the off-chain balances
          type: string
          examples: *ref_1
        fetchedAt:
          description: >-
            The timestamp of when the off-chain balances were fetched
            (milliseconds since epoch). For BitBadges indexer, we only populate
            this for the Total docs.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        fetchedAtBlock:
          description: >-
            The block number of when the off-chain balances were fetched. For
            BitBadges indexer, we only populate this for the Total docs.
          $ref: '#/components/schemas/NumberType'
        isPermanent:
          description: True if the off-chain balances are using permanent storage
          type: boolean
        contentHash:
          description: The content hash of the off-chain balances
          type: string
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this balance
          type: array
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - autoApproveAllIncomingTransfers
        - _docId
        - collectionId
        - bitbadgesAddress
        - onChain
        - updateHistory
      additionalProperties: false
      description: >-

        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.
      type: object
    iGetTokenActivityPayload:
      properties:
        bookmark:
          description: >-
            An optional bookmark for pagination. Bookmarks are obtained via the
            previous response. "" for first request.
          type: string
        bitbadgesAddress:
          description: >-
            Specific address to filter by. If not present, all activity will be
            returned.
          type: string
          examples: *ref_8
      additionalProperties: false
      type: object
    iGetTokenActivitySuccessResponse:
      properties:
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          description: Array of transfer activity information.
          type: array
        pagination:
          description: Pagination information.
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - activity
        - pagination
      additionalProperties: false
      type: object
    MetadataFetchOptions:
      properties:
        doNotFetchCollectionMetadata:
          description: If true, collection metadata will not be fetched.
          type: boolean
        uris:
          items:
            type: string
          description: >-
            If present, the metadata corresponding to the specified URIs will be
            fetched.
          type: array
        badgeIds:
          anyOf:
            - type: string
            - items:
                type: number
              type: array
            - items:
                $ref: '#/components/schemas/iUintRange'
              type: array
          description: >-
            If present, the metadata corresponding to the specified token IDs
            will be fetched.
          examples: *ref_18
      additionalProperties: false
      description: Defines the options for fetching metadata.
      type: object
    CollectionViewKey:
      enum:
        - transferActivity
        - owners
        - amountTrackers
        - challengeTrackers
        - listings
      description: Supported view keys for fetching additional collection details.
      type: string
    GetAdditionalCollectionDetailsPayload:
      properties:
        viewsToFetch:
          items:
            properties:
              viewType:
                $ref: '#/components/schemas/CollectionViewKey'
                description: The base view type to fetch.
                examples: *ref_25
              viewId:
                description: >-
                  A unique view ID. This is used for pagination. All fetches w/
                  same ID should be made with same criteria.
                type: string
                examples: *ref_24
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              oldestFirst:
                description: If defined, we will return the oldest items first.
                type: boolean
              address:
                description: If specified, we will only fetch this users' activity.
                type: string
              badgeId:
                description: >-
                  IF specified, we will filter to this abdge ID (only applicable
                  to utiity listings view currently)
                $ref: '#/components/schemas/NumberType'
            required:
              - viewType
              - viewId
              - bookmark
            additionalProperties: false
            type: object
          description: If present, the specified views will be fetched.
          type: array
        fetchTotalBalances:
          description: >-
            If true, the total and mint balances will be fetched and will be put
            in owners[].


            collection.owners.find(x => x.bitbadgesAddresss === 'Mint')
          type: boolean
        challengeTrackersToFetch:
          items:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
          description: >-
            If present, the merkle challenge trackers corresponding to the
            specified merkle challenge IDs will be fetched.
          type: array
        disableDefaults:
          description: Disable appending default approvals.
          type: boolean
        approvalTrackersToFetch:
          items:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
          description: >-
            If present, the approvals trackers corresponding to the specified
            approvals tracker IDs will be fetched.
          type: array
        fetchPrivateParams:
          description: >-
            Fetches private parameters for any claims in addition to public
            parameters.
          type: boolean
      additionalProperties: false
      description: >-
        Defines the options for fetching additional collection details.


        A view is a way of fetching additional details about a collection, and
        these will be queryable in the response via the `views` property.

        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.

        If the bookmark is not supplied, the first page will be returned.
      type: object
    GetMetadataForCollectionPayload:
      properties:
        metadataToFetch:
          description: >-
            If present, we will fetch the metadata corresponding to the
            specified options.


            Consider using pruneMetadataToFetch for filtering out previously
            fetched metadata.
          $ref: '#/components/schemas/MetadataFetchOptions'
      additionalProperties: false
      type: object
    GetCollectionRequestBody:
      properties:
        viewsToFetch:
          items:
            properties:
              viewType:
                $ref: '#/components/schemas/CollectionViewKey'
                description: The base view type to fetch.
                examples: *ref_25
              viewId:
                description: >-
                  A unique view ID. This is used for pagination. All fetches w/
                  same ID should be made with same criteria.
                type: string
                examples: *ref_24
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              oldestFirst:
                description: If defined, we will return the oldest items first.
                type: boolean
              address:
                description: If specified, we will only fetch this users' activity.
                type: string
              badgeId:
                description: >-
                  IF specified, we will filter to this abdge ID (only applicable
                  to utiity listings view currently)
                $ref: '#/components/schemas/NumberType'
            required:
              - viewType
              - viewId
              - bookmark
            additionalProperties: false
            type: object
          description: If present, the specified views will be fetched.
          type: array
        fetchTotalBalances:
          description: >-
            If true, the total and mint balances will be fetched and will be put
            in owners[].


            collection.owners.find(x => x.bitbadgesAddresss === 'Mint')
          type: boolean
        challengeTrackersToFetch:
          items:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
          description: >-
            If present, the merkle challenge trackers corresponding to the
            specified merkle challenge IDs will be fetched.
          type: array
        disableDefaults:
          description: Disable appending default approvals.
          type: boolean
        approvalTrackersToFetch:
          items:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
          description: >-
            If present, the approvals trackers corresponding to the specified
            approvals tracker IDs will be fetched.
          type: array
        fetchPrivateParams:
          description: >-
            Fetches private parameters for any claims in addition to public
            parameters.
          type: boolean
        metadataToFetch:
          description: >-
            If present, we will fetch the metadata corresponding to the
            specified options.


            Consider using pruneMetadataToFetch for filtering out previously
            fetched metadata.
          $ref: '#/components/schemas/MetadataFetchOptions'
        collectionId:
          $ref: '#/components/schemas/CollectionId'
      required:
        - collectionId
      additionalProperties: false
      description: >-

        Defines the options for fetching additional collection details.


        A view is a way of fetching additional details about a collection, and
        these will be queryable in the response via the `views` property.

        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.

        If the bookmark is not supplied, the first page will be returned.
      type: object
    iRefreshMetadataPayload:
      additionalProperties: false
      type: object
    iRefreshMetadataSuccessResponse:
      additionalProperties: false
      type: object
    iRefreshStatusPayload:
      additionalProperties: false
      type: object
    iRefreshStatusSuccessResponse:
      properties:
        inQueue:
          description: Boolean indicating if the collection is currently in the queue.
          type: boolean
        errorDocs:
          items:
            $ref: '#/components/schemas/iQueueDoc'
          description: Array of error documents corresponding to the collection.
          type: array
        refreshDoc:
          description: The status information corresponding to the collection.
          $ref: '#/components/schemas/iRefreshDoc'
      required:
        - inQueue
        - errorDocs
        - refreshDoc
      additionalProperties: false
      type: object
    SiwbbAssetConditionGroup:
      $ref: '#/components/schemas/OwnershipRequirements'
    iGetCollectionOwnersPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
      additionalProperties: false
      type: object
    iGetCollectionOwnersSuccessResponse:
      properties:
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - owners
        - pagination
      additionalProperties: false
      type: object
    iGetCollectionTransferActivityPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
        address:
          description: Optional address to filter activity by
          type: string
      additionalProperties: false
      type: object
    iGetCollectionTransferActivitySuccessResponse:
      properties:
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - activity
        - pagination
      additionalProperties: false
      type: object
    iGetCollectionChallengeTrackersPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
      additionalProperties: false
      type: object
    iGetCollectionChallengeTrackersSuccessResponse:
      properties:
        challengeTrackers:
          items:
            $ref: '#/components/schemas/iMerkleChallengeTrackerDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - challengeTrackers
        - pagination
      additionalProperties: false
      type: object
    iGetCollectionAmountTrackersPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
      additionalProperties: false
      type: object
    iGetCollectionAmountTrackersSuccessResponse:
      properties:
        amountTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - amountTrackers
        - pagination
      additionalProperties: false
      type: object
    iGetCollectionListingsPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
        badgeId:
          description: Optional token ID to filter listings by
          $ref: '#/components/schemas/NumberType'
      additionalProperties: false
      type: object
    iGetCollectionListingsSuccessResponse:
      properties:
        listings:
          items:
            $ref: '#/components/schemas/iUtilityPageDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - listings
        - pagination
      additionalProperties: false
      type: object
    iGetAddressListActivityPayload:
      properties:
        bookmark:
          type: string
      additionalProperties: false
      type: object
    iGetAddressListActivitySuccessResponse:
      properties:
        activity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - activity
        - pagination
      additionalProperties: false
      type: object
    iGetAddressListListingsPayload:
      properties:
        bookmark:
          type: string
      additionalProperties: false
      type: object
    iGetAddressListListingsSuccessResponse:
      properties:
        listings:
          items:
            $ref: '#/components/schemas/iUtilityPageDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - listings
        - pagination
      additionalProperties: false
      type: object
    iGetTransferActivityForUserPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
      additionalProperties: false
      type: object
    iGetBadgesViewForUserPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
        collectionId:
          description: Optional collection ID to filter by
          $ref: '#/components/schemas/CollectionId'
        viewType:
          enum:
            - collected
            - managing
            - created
          description: |-
            The view type to search for. Default is 'collected'

            - 'collected' will return the tokens the user has a balance of
            - 'managing' will return the tokens the user is managing
            - 'created' will return the tokens the user has created
          type: string
          examples: *ref_25
      additionalProperties: false
      type: object
    iGetAddressListsForUserPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
        viewType:
          enum:
            - all
            - created
            - whitelists
            - blacklists
          description: >-
            The view type to search for. Default is 'all'

            - 'all' will return all address lists the user is a member of (both
            on whitelist or on blacklist)

            - 'created' will return all address lists the user has created

            - 'whitelists' will return all address lists the user is on the
            whitelist of

            - 'blacklists' will return all address lists the user is on the
            blacklist of
          type: string
          examples: *ref_25
      additionalProperties: false
      type: object
    iGetTransferActivityForUserSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          type: array
      required:
        - pagination
        - activity
      additionalProperties: false
      type: object
    iGetBadgesViewForUserSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        badges:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          type: array
      required:
        - pagination
        - badges
      additionalProperties: false
      type: object
    iGetAddressListsForUserSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        lists:
          items: {}
          type: array
      required:
        - pagination
        - lists
      additionalProperties: false
      type: object
    iGetAttestationsForUserPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
        viewType:
          enum:
            - all
            - created
            - received
          description: |-
            The view type to search for. Default is 'all'

            - 'all' will return all attestations the user has
            - 'created' will return all attestations the user has created
            - 'received' will return all attestations the user has received
          type: string
          examples: *ref_25
      additionalProperties: false
      type: object
    iGetAttestationsForUserSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        attestations:
          items:
            $ref: '#/components/schemas/iAttestationDoc'
          type: array
      required:
        - pagination
        - attestations
      additionalProperties: false
      type: object
    iGetClaimActivityForUserPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
        viewType:
          enum:
            - all
            - public
          description: >-
            The view type to search for. Default is 'public'


            - 'all' will return all claim activity even private (must have
            permission to view private activity)

            - 'public' will only return public claim activity
          type: string
          examples: *ref_25
      additionalProperties: false
      type: object
    iGetClaimActivityForUserSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        activity:
          items:
            $ref: '#/components/schemas/iClaimActivityDoc'
          type: array
      required:
        - pagination
        - activity
      additionalProperties: false
      type: object
    iGetSiwbbRequestsForUserPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
      additionalProperties: false
      type: object
    iGetSiwbbRequestsForUserSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        requests:
          items: {}
          type: array
      required:
        - pagination
        - requests
      additionalProperties: false
      type: object
    iGetListActivityForUserPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
      additionalProperties: false
      type: object
    iGetListActivityForUserSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        listActivity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
          type: array
      required:
        - pagination
        - listActivity
      additionalProperties: false
      type: object
    iGetClaimAlertsForUserPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
        viewType:
          enum:
            - received
            - sent
          description: |-
            The view type to search for. Default is 'received'

            - 'received' will return all claim alerts the user has received
            - 'sent' will return all claim alerts the user has sent
          type: string
          examples: *ref_25
      additionalProperties: false
      type: object
    iGetClaimAlertsForUserSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        claimAlerts:
          items:
            $ref: '#/components/schemas/iClaimAlertDoc'
          type: array
      required:
        - pagination
        - claimAlerts
      additionalProperties: false
      type: object
    iGetPointsActivityForUserPayload:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
      additionalProperties: false
      type: object
    iGetPointsActivityForUserSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        activity:
          items:
            $ref: '#/components/schemas/iPointsActivityDoc'
          type: array
      required:
        - pagination
        - activity
      additionalProperties: false
      type: object
    iGetCollectionPayload:
      additionalProperties: false
      type: object
    iGetCollectionSuccessResponse:
      properties:
        collection:
          description: The collection details
          $ref: '#/components/schemas/iBitBadgesCollection'
        metadata:
          description: The current collection metadata
          $ref: '#/components/schemas/iMetadata'
      required:
        - collection
        - metadata
      additionalProperties: false
      type: object
    iGetBadgeMetadataPayload:
      additionalProperties: false
      type: object
    iGetBadgeMetadataSuccessResponse:
      properties:
        metadata:
          $ref: '#/components/schemas/iMetadata'
      required:
        - metadata
      additionalProperties: false
      type: object
    GetCollectionClaimsPayload:
      additionalProperties: false
      type: object
    iGetCollectionClaimsSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        claims:
          items:
            $ref: '#/components/schemas/iClaimDetails'
          type: array
      required:
        - pagination
        - claims
      additionalProperties: false
      type: object
    GetAddressListClaimsPayload:
      additionalProperties: false
      type: object
    iGetAddressListClaimsSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
        claims:
          items:
            $ref: '#/components/schemas/iClaimDetails'
          type: array
      required:
        - pagination
        - claims
      additionalProperties: false
      type: object
    DeliverTxResponse:
      properties:
        height:
          type: number
        txIndex:
          description: >-
            The position of the transaction within the block. This is a 0-based
            index.
          type: number
        code:
          description: Error code. The transaction suceeded if and only if code is 0.
          type: number
        transactionHash:
          type: string
        events: {}
        rawLog:
          description: >-
            A string-based log document.


            This currently seems to merge attributes of multiple events into one
            event per type

            (https://github.com/tendermint/tendermint/issues/9595). You might
            want to use the `events`

            field instead.

            @deprecated This field is not filled anymore in Cosmos SDK 0.50+
            (https://github.com/cosmos/cosmos-sdk/pull/15845).

            Please consider using `events` instead.
          type: string
        data:
          description: '@deprecated Use `msgResponses` instead.'
        msgResponses:
          items:
            properties:
              typeUrl:
                type: string
              value: {}
            required:
              - typeUrl
              - value
            additionalProperties: false
            type: object
          description: >-
            The message responses of the
            [TxMsgData](https://github.com/cosmos/cosmos-sdk/blob/v0.46.3/proto/cosmos/base/abci/v1beta1/abci.proto#L128-L140)

            as `Any`s.

            This field is an empty list for chains running Cosmos SDK < 0.46.
          type: array
        gasUsed: {}
        gasWanted: {}
      required:
        - height
        - txIndex
        - code
        - transactionHash
        - events
        - msgResponses
        - gasUsed
        - gasWanted
      additionalProperties: false
      description: |-
        The response after successfully broadcasting a transaction.
        Success or failure refer to the execution result.
      type: object
    Attribute:
      properties:
        key:
          type: string
        value:
          type: string
      required:
        - key
        - value
      additionalProperties: false
      description: >-
        An event attribute.


        This is the same attribute type as tendermint34.Attribute and
        tendermint35.EventAttribute

        but `key` and `value` are unified to strings. The conversion

        from bytes to string in the Tendermint 0.34 case should be done by
        performing

        [lossy] UTF-8 decoding.


        [lossy]:
        https://doc.rust-lang.org/stable/std/string/struct.String.html#method.from_utf8_lossy
      type: object
    CosmosEvent:
      properties:
        type:
          type: string
        attributes: {}
      required:
        - type
        - attributes
      additionalProperties: false
      description: >-
        The same event type as tendermint34.Event and tendermint35.Event

        but attribute keys and values are unified to strings. The conversion

        from bytes to string in the Tendermint 0.34 case should be done by
        performing

        [lossy] UTF-8 decoding.


        [lossy]:
        https://doc.rust-lang.org/stable/std/string/struct.String.html#method.from_utf8_lossy
      type: object
    iGetStatusPayload:
      properties:
        withOutOfSyncCheck:
          description: >-
            If true, we will check if the indexer is out of sync with the
            blockchain.
          type: boolean
        chain:
          enum:
            - Thorchain
            - BitBadges
          description: Chain to check? Defaults to BitBadges poller.
          type: string
      additionalProperties: false
      type: object
    iGetStatusSuccessResponse:
      properties:
        status:
          description: Status details about the indexer / blockchain.
          $ref: '#/components/schemas/iStatusDoc'
        outOfSync:
          description: |-
            If true, we are out of sync with the blockchain.
            If undefined, we did not check for out of sync.
          type: boolean
      required:
        - status
      additionalProperties: false
      type: object
    iGetSearchPayload:
      properties:
        noCollections:
          description: If true, we will skip all collection queries.
          type: boolean
        noAccounts:
          description: If true, we will skip all account queries.
          type: boolean
        noAddressLists:
          description: If true, we will skip all address list queries.
          type: boolean
        noBadges:
          description: If true, we will skip all badge queries.
          type: boolean
        noMaps:
          description: If true, we will skip all map queries.
          type: boolean
        noApplications:
          description: If true, we will skip all application queries.
          type: boolean
        noClaims:
          description: If true, we will skip all claim queries.
          type: boolean
        specificCollectionId:
          description: >-
            If true, we will limit collection-based results to a single
            collection.
          $ref: '#/components/schemas/CollectionId'
      additionalProperties: false
      type: object
    iGetSearchSuccessResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
          type: array
        accounts:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
          type: array
        addressLists:
          items: {}
          type: array
        badges:
          items:
            properties:
              collection:
                $ref: '#/components/schemas/iBitBadgesCollection'
              badgeIds:
                items:
                  $ref: '#/components/schemas/iUintRange'
                type: array
                examples: *ref_18
            required:
              - collection
              - badgeIds
            additionalProperties: false
            type: object
          type: array
        maps:
          items:
            $ref: '#/components/schemas/iMapWithValues'
          type: array
        applications:
          items:
            $ref: '#/components/schemas/iApplicationDoc'
          type: array
        claims:
          items:
            $ref: '#/components/schemas/iClaimDetails'
          type: array
        utilityPages:
          items:
            $ref: '#/components/schemas/iUtilityPageDoc'
          type: array
      required:
        - collections
        - accounts
        - addressLists
        - badges
        - maps
      additionalProperties: false
      type: object
    iSearchClaimsPayload:
      properties:
        bookmark:
          description: >-
            Bookmark to start from. Obtained from previous request. Leave blank
            to start from the beginning. Only applicable when no additional
            criteria is specified.
          type: string
        fetchPrivateParams:
          description: >-
            Fetch private parameters for the claim. Only applicable if you are
            the creator / manager of the claim. Otherwise, it will be the public
            read-only view.
          type: boolean
        searchValue:
          description: >-
            If provided, we will only return claims with names that regex match
            the search value.
          type: string
      additionalProperties: false
      type: object
    iGetClaimsPayload:
      properties:
        claimIds:
          items:
            type: string
          description: The claim IDs to fetch.
          type: array
        fetchPrivateParams:
          description: >-
            Fetch private parameters for the claim. Only applicable if you are
            the creator / manager of the claim.
          type: boolean
        privateStatesToFetch:
          items:
            properties:
              claimId:
                type: string
              instanceId:
                type: string
            required:
              - claimId
              - instanceId
            additionalProperties: false
            type: object
          description: >-
            Which private state instance IDs to fetch. claimId and instanceId
            are required and must match a claimId in claimIds and the claim must
            have the corresponding instanceId.
          type: array
        fetchAllClaimedUsers:
          description: >-
            Fetch all claimed users for the claim. If true, you will be able to
            find all { [bitbadgesAddress]: [...zeroIndexedClaimNumbers] }

            on the numUses plugin's publicState.
          type: boolean
      required:
        - claimIds
      additionalProperties: false
      type: object
    iGetClaimsPayloadV1:
      properties:
        claimsToFetch:
          items:
            properties:
              claimId:
                description: The claim ID to fetch.
                type: string
              privateStatesToFetch:
                items:
                  type: string
                description: >-
                  The private state instance IDs to fetch. By default, we do not
                  fetch any private states.
                type: array
              fetchAllClaimedUsers:
                description: >-
                  Fetch all claimed users for the claim. If true, you will be
                  able to find all { [bitbadgesAddress]:
                  [...zeroIndexedClaimNumbers] }

                  on the numUses plugin's publicState.
                type: boolean
              fetchPrivateParams:
                description: >-
                  Fetch private parameters for the claim. Only applicable if you
                  are the creator / manager of the claim.
                type: boolean
            required:
              - claimId
            additionalProperties: false
            type: object
          description: The claims to fetch.
          type: array
      required:
        - claimsToFetch
      additionalProperties: false
      type: object
    iGetClaimsSuccessResponse:
      properties:
        claims:
          items:
            $ref: '#/components/schemas/iClaimDetails'
          type: array
        bookmark:
          type: string
      required:
        - claims
      additionalProperties: false
      type: object
    iGetClaimPayload:
      properties:
        fetchPrivateParams:
          description: >-
            Fetch private parameters for the claim. Only applicable if you are
            the creator / manager of the claim.
          type: boolean
        fetchAllClaimedUsers:
          description: >-
            Fetch all claimed users for the claim.  If true, you will be able to
            find all { [bitbadgesAddress]: [...zeroIndexedClaimNumbers] }

            on the numUses plugin's publicState.
          type: boolean
        privateStatesToFetch:
          items:
            type: string
          description: >-
            The private state instance IDs to fetch. By default, we do not fetch
            any private states.
          type: array
      additionalProperties: false
      type: object
    iGetClaimSuccessResponse:
      properties:
        claim:
          $ref: '#/components/schemas/iClaimDetails'
      required:
        - claim
      additionalProperties: false
      type: object
    iSearchClaimsSuccessResponse:
      properties:
        claims:
          items:
            $ref: '#/components/schemas/iClaimDetails'
          type: array
        bookmark:
          type: string
      required:
        - claims
      additionalProperties: false
      type: object
    iCompleteClaimPayload:
      properties:
        _expectedVersion:
          description: >-
            Needs to be provided so we check that no plugins or claims have been
            updated since the claim was fetched. To override, set to -1.
          type: number
        _specificInstanceIds:
          items:
            type: string
          description: >-
            If provided, we will only complete the claim for the specific
            plugins w/ the provided instance IDs. Must be compatible with the
            satisfaction logic.
          type: array
      required:
        - _expectedVersion
      additionalProperties: {}
      type: object
    iCompleteClaimSuccessResponse:
      properties:
        claimAttemptId:
          description: The transaction ID to track the claim.
          type: string
      required:
        - claimAttemptId
      additionalProperties: false
      type: object
    iGetClaimAttemptStatusPayload:
      additionalProperties: false
      type: object
    iGetClaimAttemptStatusSuccessResponse:
      properties:
        success:
          type: boolean
        error:
          type: string
        code:
          description: >-
            The code for the on-chain transaction. Only provided if you have
            permissions and this is an on-chain token claim.
          type: string
        bitbadgesAddress:
          type: string
          examples: *ref_8
      required:
        - success
        - error
        - bitbadgesAddress
      additionalProperties: false
      type: object
    iGetClaimAttemptsPayload:
      properties:
        bookmark:
          description: The bookmark to start from.
          type: string
        includeErrors:
          description: Whether to include errors or not.
          type: boolean
        address:
          description: >-
            The specific address to fetch claims for. If blank, we fetch most
            recent claims.
          $ref: '#/components/schemas/NativeAddress'
        includeRequestBinAttemptData:
          description: >-
            Include the cached payload data for requestBin plugin. Must be claim
            creator to view.


            You can also use the individual GET route to fetch this data.
          type: boolean
      additionalProperties: false
      type: object
    iGetClaimAttemptsSuccessResponse:
      properties:
        docs:
          items:
            properties:
              success:
                type: boolean
              attemptedAt:
                $ref: '#/components/schemas/UNIXMilliTimestamp'
              claimId:
                type: string
              bitbadgesAddress:
                $ref: '#/components/schemas/NativeAddress'
                examples: *ref_8
              claimAttemptId:
                type: string
              claimNumber:
                description: Zero-based index claim number
                type: number
              error:
                type: string
              attemptData:
                additionalProperties: {}
                description: >-
                  This is in the format of { [instanceId: string]:
                  Record<string, any> }

                  where the object is what was configured via the plugin.
                type: object
            required:
              - success
              - attemptedAt
              - claimId
              - bitbadgesAddress
              - claimAttemptId
              - claimNumber
            additionalProperties: false
            type: object
          type: array
        bookmark:
          type: string
        total:
          type: number
      required:
        - docs
      additionalProperties: false
      type: object
    iClaimAttempt:
      properties:
        success:
          type: boolean
        attemptedAt:
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        claimId:
          type: string
        bitbadgesAddress:
          examples: *ref_8
          $ref: '#/components/schemas/NativeAddress'
        claimAttemptId:
          type: string
        claimNumber:
          type: number
        error:
          type: string
        attemptData:
          additionalProperties: {}
          description: >-
            This is in the format of { [instanceId: string]: Record<string, any>
            }

            where the object is what was configured via the plugin.


            The instanceId is for the requestBin plugin's instance ID.
          type: object
      required:
        - success
        - attemptedAt
        - claimId
        - bitbadgesAddress
        - claimAttemptId
        - claimNumber
      additionalProperties: false
      type: object
    iSimulateClaimPayload:
      properties:
        _expectedVersion:
          description: >-
            Will fail if the claim version is not the expected version. To
            override, set to -1.
          type: number
        _specificInstanceIds:
          items:
            type: string
          description: >-
            If provided, we will only simulate the claim for the specific
            plugins w/ the provided instance IDs.
          type: array
      required:
        - _expectedVersion
      additionalProperties: {}
      type: object
    iSimulateClaimSuccessResponse:
      properties:
        claimAttemptId:
          description: >-
            The transaction ID to track the claim. This is just a simulated
            value for compatibility purposes.
          type: string
      required:
        - claimAttemptId
      additionalProperties: false
      type: object
    iGetReservedClaimCodesPayload:
      additionalProperties: false
      type: object
    iGetReservedClaimCodesSuccessResponse:
      properties:
        reservedCodes:
          items:
            type: string
          description: |-
            The previously reserved claim codes for the user. These are
            what are used in the eventual on-chain merkle proof to complete
            the transaction.
          type: array
      additionalProperties: false
      type: object
    iUpdateAccountInfoPayload:
      properties:
        discord:
          description: The Discord username.
          type: string
        twitter:
          description: The Twitter username.
          type: string
        github:
          description: The GitHub username.
          type: string
        telegram:
          description: The Telegram username.
          type: string
        bluesky:
          description: The Bluesky username.
          type: string
        seenActivity:
          description: The last seen activity timestamp.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        readme:
          description: The README details (markdown supported).
          type: string
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchTokenDetails'
          description: The tokens to hide and not view for this profile's portfolio
          type: array
        hiddenLists:
          items:
            type: string
          description: The lists to hide and not view for this profile's portfolio
          type: array
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
          description: Custom URL links to display on the user's portfolio.
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
            attestations:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
            - attestations
          additionalProperties: false
          description: >-
            An array of custom pages on the user's portolio. Used to customize,
            sort, and group badges / lists into pages.
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
            attestations:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
            - attestations
          additionalProperties: false
          description: The watchlist of tokens / lists
          type: object
        profilePicUrl:
          description: The profile picture URL.
          type: string
          examples: *ref_23
        bannerImage:
          description: The banner image URL.
          type: string
          examples: *ref_19
        username:
          description: The username.
          type: string
        profilePicImageFile:
          description: >-
            The profile picture image file to set. We will then upload to our
            CDN.
        notifications:
          properties:
            email:
              type: string
            discord:
              properties:
                id:
                  type: string
                username:
                  type: string
                discriminator:
                  type: string
              required:
                - id
                - username
                - discriminator
              additionalProperties: false
              type: object
            antiPhishingCode:
              type: string
            preferences:
              properties:
                listActivity:
                  type: boolean
                transferActivity:
                  type: boolean
                claimAlerts:
                  type: boolean
                ignoreIfInitiator:
                  type: boolean
              additionalProperties: false
              type: object
          additionalProperties: false
          description: >-
            The notification preferences for the user. Will only be returned if
            user is authenticated with full access.
          type: object
        approvedSignInMethods:
          properties:
            discord:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            github:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            google:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            twitter:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            facebook:
              properties:
                scopes:
                  items:
                    $ref: '#/components/schemas/OAuthScopeDetails'
                  type: array
                username:
                  type: string
                id:
                  type: string
              required:
                - scopes
                - username
                - id
              additionalProperties: false
              type: object
            addresses:
              items:
                properties:
                  address:
                    $ref: '#/components/schemas/NativeAddress'
                  scopes:
                    items:
                      $ref: '#/components/schemas/OAuthScopeDetails'
                    type: array
                required:
                  - address
                  - scopes
                additionalProperties: false
                type: object
              type: array
            passwords:
              items:
                properties:
                  passwordHash:
                    type: string
                  salt:
                    type: string
                  password:
                    type: string
                  scopes:
                    items:
                      $ref: '#/components/schemas/OAuthScopeDetails'
                    type: array
                required:
                  - passwordHash
                  - salt
                  - scopes
                additionalProperties: false
                type: object
              type: array
          additionalProperties: false
          description: >-
            Approved sign in methods. Only returned if user is authenticated
            with full access.
          type: object
        socialConnections:
          description: >-
            The social connections for the user. Only returned if user is
            authenticated with full access.
          $ref: '#/components/schemas/iSocialConnections'
        publicSocialConnectionsToSet:
          items:
            properties:
              appName:
                type: string
              toDelete:
                type: boolean
            required:
              - appName
            additionalProperties: false
            type: object
          description: >-
            The public social connections for the user. Will be returned for all
            queries and may be publicly displayed on profile
          type: array
      additionalProperties: false
      description: ''
      type: object
    iUpdateAccountInfoSuccessResponse:
      properties:
        verificationEmailSent:
          description: Verificatiom email sent?
          type: boolean
      additionalProperties: false
      type: object
    iAddBalancesToOffChainStoragePayload:
      properties:
        balances:
          description: >-
            A map of BitBadges addresses or list IDs -> Balance[].

            This will be set first. If undefined, we leave the existing balances
            map as is.

            For genesis, this must be set (even if empty {}), so we create the
            unique URL.


            If defined, this will overwrite for the entire collection. You must
            provide ALL balances for the collection.
          $ref: '#/components/schemas/iOffChainBalancesMap'
        claims:
          items:
            properties:
              claimId:
                type: string
              plugins:
                items:
                  $ref: '#/components/schemas/IntegrationPluginDetailsUpdate'
                type: array
              rewards:
                items:
                  $ref: '#/components/schemas/iClaimReward'
                type: array
              estimatedCost:
                type: string
              estimatedTime:
                type: string
              showInSearchResults:
                type: boolean
              categories:
                items:
                  type: string
                type: array
              balancesToSet:
                $ref: '#/components/schemas/iPredeterminedBalances'
              approach:
                type: string
            required:
              - claimId
              - plugins
            additionalProperties: false
            type: object
          description: >-
            The new set of claims for the collection. This should be ALL claims.
            We currently do not support fine-grained claim updates.


            If undefined, we leave the existing claims as is. If defined, we set
            the new claims to what is provided.


            If a claim has existing state, you can reset the individual plugin's
            state

            with plugin.resetState = true. Or, claims with new, unique IDs have
            blank state for all plugins.


            We soft delete any claims that are no longer in the claims array. By
            soft delete, we mean that we will flag it as deleted,

            but if you want to reinstate it, you can do so by adding it back
            with the same claim ID.
          type: array
        method:
          enum:
            - ipfs
            - centralized
          description: The method for storing balances (ipfs or centralized).
          type: string
        collectionId:
          description: The collection ID.
          $ref: '#/components/schemas/CollectionId'
        isNonIndexed:
          description: >-
            Whether this is for a non-indexed collection. Bypasses some
            validation.
          type: boolean
      required:
        - method
        - collectionId
      additionalProperties: false
      type: object
    iAddBalancesToOffChainStorageSuccessResponse:
      properties:
        uri:
          description: The URI of the stored data.
          type: string
          examples: *ref_1
      additionalProperties: false
      type: object
    iUploadBalancesPayload:
      properties:
        balances:
          description: >-
            A JSON map of BitBadges addresses or list IDs -> iBalance[].

            This will overwrite ALL balances for the collection.


            IMPORTANT: Ensure the keys are BitBadges converted addresses, not
            native addresses.
          $ref: '#/components/schemas/iOffChainBalancesMap'
        collectionId:
          description: The collection ID to update balances for.
          $ref: '#/components/schemas/CollectionId'
      required:
        - balances
        - collectionId
      additionalProperties: false
      type: object
    iUploadBalancesSuccessResponse:
      additionalProperties: false
      type: object
    iGetAttemptDataFromRequestBinPayload:
      properties:
        instanceId:
          description: >-
            The instance ID of the request bin plugin.


            Only needed if there are duplicates. Else, we default to first
            instance found.
          type: string
      additionalProperties: false
      type: object
    iGetAttemptDataFromRequestBinSuccessResponse:
      properties:
        payload:
          description: >-
            The attempt payload we cached. This will be in the format configured
            for the request bin plugin.
      required:
        - payload
      additionalProperties: false
      type: object
    iAddToIpfsPayload:
      properties:
        contents:
          items:
            anyOf:
              - $ref: '#/components/schemas/iBadgeMetadataDetails'
              - $ref: '#/components/schemas/iMetadata'
              - $ref: '#/components/schemas/iCollectionMetadataDetails'
              - $ref: '#/components/schemas/iChallengeDetails'
          description: The stuff to add to IPFS
          type: array
        method:
          enum:
            - ipfs
            - centralized
          type: string
      required:
        - method
      additionalProperties: false
      type: object
    iAddToIpfsSuccessResponse:
      properties:
        results:
          items:
            properties:
              cid:
                type: string
              uri:
                type: string
                examples: *ref_1
            required:
              - cid
            additionalProperties: false
            type: object
          description: An array of token metadata results, if applicable.
          type: array
      required:
        - results
      additionalProperties: false
      type: object
    iAddApprovalDetailsToOffChainStoragePayload:
      properties:
        approvalDetails:
          items:
            properties:
              name:
                description: The name of the approval.
                type: string
                examples: *ref_13
              description:
                description: The description of the approval.
                type: string
                examples: *ref_9
              image:
                description: The image of the approval.
                type: string
                examples: *ref_12
              challengeInfoDetails:
                items:
                  $ref: '#/components/schemas/iChallengeInfoDetailsUpdate'
                description: For any merkle challenge claims that we are implementing
                type: array
            required:
              - name
              - description
              - image
            additionalProperties: false
            type: object
          type: array
      required:
        - approvalDetails
      additionalProperties: false
      type: object
    iAddApprovalDetailsToOffChainStorageSuccessResponse:
      properties:
        approvalResults:
          items:
            properties:
              metadataResult:
                properties:
                  cid:
                    type: string
                required:
                  - cid
                additionalProperties: false
                description: The result for name / description (if applicable).
                type: object
              challengeResults:
                items:
                  properties:
                    cid:
                      type: string
                  required:
                    - cid
                  additionalProperties: false
                  type: object
                description: The result for the approval challenge details (if applicable).
                type: array
            required:
              - metadataResult
            additionalProperties: false
            type: object
          type: array
      required:
        - approvalResults
      additionalProperties: false
      type: object
    iGetSignInChallengePayload:
      properties:
        chain:
          description: The blockchain to be signed in with.
          $ref: '#/components/schemas/SupportedChain'
        address:
          description: The user's blockchain address. This can be their native address.
          $ref: '#/components/schemas/NativeAddress'
      required:
        - chain
        - address
      additionalProperties: false
      description: ''
      type: object
    iGetSignInChallengeSuccessResponse:
      properties:
        nonce:
          description: The nonce for the challenge.
          type: string
        params:
          description: The challenge parameters.
          $ref: '#/components/schemas/ChallengeParams'
        message:
          description: The challenge message to sign.
          $ref: '#/components/schemas/SiwbbMessage'
      required:
        - nonce
        - params
        - message
      additionalProperties: false
      type: object
    iVerifySignInPayload:
      properties:
        message:
          description: The original message that was signed.
          $ref: '#/components/schemas/SiwbbMessage'
        signature:
          description: The signature of the message
          type: string
          examples: *ref_16
        altSigner:
          description: The address that signed the message on behalf of another address.
          $ref: '#/components/schemas/NativeAddress'
        socialSignIn:
          description: Selected social to attempt to sign in with.
          type: string
        password:
          description: The password to sign in with.
          type: string
        publicKey:
          description: >-
            Required for some chains (Cosmos) to verify signature. The public
            key of the signer.
          type: string
          examples: *ref_15
      required:
        - message
        - signature
      additionalProperties: false
      type: object
    iVerifySignInSuccessResponse:
      additionalProperties: false
      type: object
    iCheckSignInStatusPayload:
      additionalProperties: false
      type: object
    iCheckSignInStatusSuccessResponse:
      properties:
        signedIn:
          description: Indicates whether the user is signed in.
          type: boolean
        address:
          $ref: '#/components/schemas/NativeAddress'
        bitbadgesAddress:
          examples: *ref_8
          $ref: '#/components/schemas/BitBadgesAddress'
        chain:
          $ref: '#/components/schemas/SupportedChain'
        scopes:
          items:
            $ref: '#/components/schemas/OAuthScopeDetailsWithId'
          description: Approved scopes
          type: array
        message:
          description: The message that was signed.
          $ref: '#/components/schemas/SiwbbMessage'
        email:
          description: The email of the session.
          type: string
        discord:
          properties:
            username:
              type: string
            discriminator:
              type: string
            id:
              type: string
          required:
            - username
            - discriminator
            - id
          additionalProperties: false
          description: Signed in with Discord username and discriminator?
          type: object
        twitter:
          properties:
            id:
              type: string
            username:
              type: string
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with Twitter username?
          type: object
        github:
          properties:
            id:
              type: string
            username:
              type: string
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with GitHub username?
          type: object
        google:
          properties:
            id:
              type: string
            username:
              type: string
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with Google username?
          type: object
        twitch:
          properties:
            id:
              type: string
            username:
              type: string
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with Twitch?
          type: object
        strava:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with Strava?
          type: object
        reddit:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with Reddit?
          type: object
        meetup:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with Meetup?
          type: object
        bluesky:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with Bluesky?
          type: object
        mailchimp:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with Mailchimp?
          type: object
        facebook:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with Facebook?
          type: object
        linkedIn:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with LinkedIn?
          type: object
        shopify:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with Shopify?
          type: object
        telegram:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with Telegram?
          type: object
        farcaster:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with Farcaster?
          type: object
        slack:
          properties:
            username:
              type: string
            id:
              type: string
          required:
            - username
            - id
          additionalProperties: false
          description: Signed in with Slack?
          type: object
        youtube:
          properties:
            id:
              type: string
            username:
              type: string
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with Youtube?
          type: object
        googleCalendar:
          properties:
            id:
              type: string
            username:
              type: string
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with Google Calendar?
          type: object
      required:
        - signedIn
        - address
        - bitbadgesAddress
        - chain
        - scopes
        - message
      additionalProperties: false
      type: object
    OAuthScopeDetailsWithId:
      properties:
        scopeName:
          description: >-
            The name of the scope. Note: For this, we use the capitalized
            version of the scope name with spaces.


            For example, "completeClaims" becomes "Complete Claims"
          type: string
        options:
          description: The options for the scope. Currently, this is not used.
          type: object
        scopeId:
          description: Camel case version of the scope name.
          type: string
      required:
        - scopeName
        - scopeId
      additionalProperties: false
      type: object
    iSignOutPayload:
      properties:
        signOutBlockin:
          description: Sign out of Blockin, and thus the entire API.
          type: boolean
        signOutDiscord:
          description: Sign out of Discord.
          type: boolean
        signOutTwitter:
          description: Sign out of Twitter.
          type: boolean
        signOutGoogle:
          description: Sign out of Google.
          type: boolean
        signOutGithub:
          description: Sign out of GitHub.
          type: boolean
        signOutTwitch:
          description: Sign out of Twitch.
          type: boolean
        signOutStrava:
          description: Sign out of Strava.
          type: boolean
        signOutYoutube:
          description: Sign out of Youtube
          type: boolean
        signOutReddit:
          description: Sign out of Reddit
          type: boolean
        signOutMeetup:
          description: Sign out of Meetup
          type: boolean
        signOutBluesky:
          description: Sign out of Bluesky
          type: boolean
        signOutMailchimp:
          description: Sign out of Mailchimp
          type: boolean
        signOutGoogleCalendar:
          description: Sign out of Google Calendar
          type: boolean
        signOutTelegram:
          description: Sign out of Telegram
          type: boolean
        signOutFarcaster:
          description: Sign out of Farcaster
          type: boolean
        signOutSlack:
          description: Sign out of Slack
          type: boolean
        signOutEmail:
          description: Sign out of email
          type: boolean
        signOutFacebook:
          description: Sign out of Facebook
          type: boolean
        signOutLinkedIn:
          description: Sign out of LinkedIn
          type: boolean
        signOutShopify:
          description: Sign out of Shopify
          type: boolean
      required:
        - signOutBlockin
      additionalProperties: false
      type: object
    iSignOutSuccessResponse:
      additionalProperties: false
      type: object
    iGetBrowsePayload:
      properties:
        type:
          enum:
            - collections
            - badges
            - addressLists
            - maps
            - attestations
            - claims
            - activity
            - utilityPages
            - applications
            - claimActivity
            - pointsActivity
          type: string
        category:
          type: string
        sortBy:
          type: string
        timeFrame:
          type: string
        searchTerm:
          type: string
        locale:
          type: string
      required:
        - type
      additionalProperties: false
      type: object
    iGetBrowseSuccessResponse:
      properties:
        collections:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesCollection'
            type: array
          type: object
        addressLists:
          additionalProperties:
            items: {}
            type: array
          type: object
        profiles:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesUserInfo'
            type: array
          type: object
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          type: array
        badges:
          additionalProperties:
            items:
              properties:
                collection:
                  $ref: '#/components/schemas/iBitBadgesCollection'
                badgeIds:
                  items:
                    $ref: '#/components/schemas/iUintRange'
                  type: array
                  examples: *ref_18
              required:
                - collection
                - badgeIds
              additionalProperties: false
              type: object
            type: array
          type: object
        applications:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iApplicationDoc'
            type: array
          type: object
        maps:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iMapWithValues'
            type: array
          type: object
        claims:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iClaimDetails'
            type: array
          type: object
        claimActivity:
          items:
            $ref: '#/components/schemas/iClaimActivityDoc'
          type: array
        pointsActivity:
          items:
            $ref: '#/components/schemas/iPointsActivityDoc'
          type: array
        utilityPages:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iUtilityPageDoc'
            type: array
          type: object
      required:
        - collections
        - addressLists
        - profiles
        - activity
        - badges
        - maps
      additionalProperties: false
      type: object
    iBroadcastTxPayload:
      $ref: '#/components/schemas/BroadcastPostBody'
    iBroadcastTxSuccessResponse:
      properties:
        tx_response:
          properties:
            code:
              type: number
            codespace:
              type: string
            data:
              type: string
            events:
              items:
                properties:
                  type:
                    type: string
                  attributes:
                    items:
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        index:
                          type: boolean
                      required:
                        - key
                        - value
                        - index
                      additionalProperties: false
                      type: object
                    type: array
                required:
                  - type
                  - attributes
                additionalProperties: false
                type: object
              type: array
            gas_wanted:
              type: string
            gas_used:
              type: string
            height:
              type: string
            logs:
              items:
                properties:
                  events:
                    items:
                      properties:
                        type:
                          type: string
                        attributes:
                          items:
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                              index:
                                type: boolean
                            required:
                              - key
                              - value
                              - index
                            additionalProperties: false
                            type: object
                          type: array
                      required:
                        - type
                        - attributes
                      additionalProperties: false
                      type: object
                    type: array
                required:
                  - events
                additionalProperties: false
                type: object
              type: array
            raw_log:
              type: string
            timestamp:
              type: string
            tx:
              nullable: true
              type: object
            txhash:
              type: string
          required:
            - code
            - codespace
            - data
            - events
            - gas_wanted
            - gas_used
            - height
            - logs
            - raw_log
            - timestamp
            - tx
            - txhash
          additionalProperties: false
          description: The response from the blockchain for the broadcasted tx.
          type: object
      required:
        - tx_response
      additionalProperties: false
      type: object
    iSimulateTxPayload:
      $ref: '#/components/schemas/BroadcastPostBody'
    iSimulateTxSuccessResponse:
      properties:
        gas_info:
          properties:
            gas_used:
              type: string
            gas_wanted:
              type: string
          required:
            - gas_used
            - gas_wanted
          additionalProperties: false
          description: How much gas was used in the simulation.
          type: object
        result:
          properties:
            data:
              type: string
            log:
              type: string
            events:
              items:
                properties:
                  type:
                    type: string
                  attributes:
                    items:
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        index:
                          type: boolean
                      required:
                        - key
                        - value
                        - index
                      additionalProperties: false
                      type: object
                    type: array
                required:
                  - type
                  - attributes
                additionalProperties: false
                type: object
              type: array
          required:
            - data
            - log
            - events
          additionalProperties: false
          description: The result of the simulation.
          type: object
      required:
        - gas_info
        - result
      additionalProperties: false
      type: object
    iFetchMetadataDirectlyPayload:
      properties:
        uris:
          items:
            type: string
          type: array
      required:
        - uris
      additionalProperties: false
      type: object
    iFetchMetadataDirectlySuccessResponse:
      properties:
        metadata:
          items:
            $ref: '#/components/schemas/iMetadata'
          type: array
      required:
        - metadata
      additionalProperties: false
      type: object
    iGetTokensFromFaucetPayload:
      additionalProperties: false
      type: object
    iGetTokensFromFaucetSuccessResponse:
      additionalProperties: false
      type: object
    iSendClaimAlertsPayload:
      properties:
        claimAlerts:
          items:
            properties:
              message:
                description: The message to send to the user.
                type: string
              bitbadgesAddresses:
                items:
                  $ref: '#/components/schemas/BitBadgesAddress'
                description: The addresses to send the claim alert to.
                type: array
            required:
              - message
              - bitbadgesAddresses
            additionalProperties: false
            type: object
          description: The claim alerts to send to users.
          type: array
      required:
        - claimAlerts
      additionalProperties: false
      type: object
    iSendClaimAlertsSuccessResponse:
      additionalProperties: false
      type: object
    CosmosAccountResponse:
      properties:
        account_number:
          type: number
        sequence:
          type: number
        pub_key:
          properties:
            key:
              type: string
          required:
            - key
          additionalProperties: false
          type: object
        address:
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - account_number
        - sequence
        - pub_key
        - address
      additionalProperties: false
      description: >-
        Information returned by the REST API getAccount route.


        Note this should be converted into AccountDoc or BitBadgesUserInfo
        before being returned by the BitBadges API for consistency.
      type: object
    iGenericVerifyAssetsPayload:
      properties:
        address:
          description: The address to check
          $ref: '#/components/schemas/NativeAddress'
        assetOwnershipRequirements:
          description: The asset requirements to verify.
          examples: *ref_6
          $ref: '#/components/schemas/AssetConditionGroup'
      required:
        - address
        - assetOwnershipRequirements
      additionalProperties: false
      description: Generic route to verify any asset ownership requirements.
      type: object
    iGenericVerifyAssetsSuccessResponse:
      properties:
        success:
          description: >-
            Success response of the verification check. Use this to determine if
            the verification was successful.


            Status code will be 200 both if the user meets or does not meet
            requirements, so you must check this success field to determine the
            result.
          type: boolean
        errorMessage:
          type: string
      required:
        - success
      additionalProperties: false
      type: object
    iGenericBlockinVerifyPayload:
      properties:
        message:
          description: The original message that was signed.
          $ref: '#/components/schemas/SiwbbMessage'
        signature:
          description: The signature of the message
          type: string
          examples: *ref_16
        altSigner:
          description: The address that signed the message on behalf of another address.
          $ref: '#/components/schemas/NativeAddress'
        socialSignIn:
          description: Selected social to attempt to sign in with.
          type: string
        password:
          description: The password to sign in with.
          type: string
        publicKey:
          description: >-
            Required for some chains (Cosmos) to verify signature. The public
            key of the signer.
          type: string
          examples: *ref_15
        options:
          description: Additional options for verifying the challenge.
          $ref: '#/components/schemas/VerifyChallengeOptions'
        attestations:
          items:
            $ref: '#/components/schemas/iAttestationsProof'
          description: Additional attestations to verify in the challenge.
          type: array
      required:
        - message
        - signature
      additionalProperties: false
      description: >-
        Generic route to verify any SIWBB request. Does not sign you in with the
        API. Used for custom SIWBB implementations.
      type: object
    iGenericBlockinVerifySuccessResponse:
      additionalProperties: false
      description: ''
      type: object
    iCreateAttestationPayload:
      properties:
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the messages.
          type: string
        publicVisibility:
          description: >-
            Whether or not the attestation is displayable on the user's profile.
            if true, the attestation can be queried by anyone with the ID.
          type: boolean
        proofOfIssuance:
          properties:
            message:
              type: string
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this attestation signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        scheme:
          description: >-
            The scheme of the attestation. BBS+ signatures are supported and can
            be used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        originalProvider:
          description: >-
            The original provider of the attestation. Used for third-party
            attestation providers.
          type: string
        messages:
          items:
            type: string
          description: >-
            Thesse are the attestations that are signed.

            For BBS+ signatures, there can be >1 messages, and the signer can
            selectively disclose the attestations.

            For standard signatures, there is only 1 attestationMessage.
          type: array
          examples: *ref_26
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
            isDerived:
              type: boolean
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the messages. The
            siganture maintains the integrity of the messages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.


            For custom schemes, this is often left blank (because the proof is
            already included in the message).
          type: object
        name:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_12
        description:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_9
        anchors:
          items:
            properties:
              txHash:
                type: string
                examples: *ref_7
              message:
                type: string
            additionalProperties: false
            type: object
          description: >-
            Anchors are on-chain transactions used to prove certain things

            about the attestation. For example, you can anchor the attestation
            to a

            transaction hash to prove that the attestation existed at a certain
            time.
          type: array
      required:
        - messageFormat
        - scheme
        - messages
        - name
        - image
        - description
        - anchors
      additionalProperties: false
      type: object
    iCreateAttestationSuccessResponse:
      properties:
        inviteCode:
          description: >-
            The attestation invite code to give to others to add / view / query
            (where applicable)
          type: string
        id:
          description: The attestation ID.
          type: string
      required:
        - inviteCode
        - id
      additionalProperties: false
      type: object
    iGetAttestationPayload:
      additionalProperties: false
      type: object
    iGetAttestationSuccessResponse:
      properties:
        attestation:
          $ref: '#/components/schemas/iAttestationDoc'
      required:
        - attestation
      additionalProperties: false
      type: object
    iGetAttestationsPayload:
      properties:
        inviteCode:
          description: The attestation key received from the original attestation creation.
          type: string
        attestationIds:
          items:
            type: string
          description: >-
            The attestation ID. You can use this if you are the creator or a
            holder of the attestation.
          type: array
      additionalProperties: false
      type: object
    iGetAttestationsSuccessResponse:
      properties:
        attestations:
          items:
            anyOf: []
          type: array
      required:
        - attestations
      additionalProperties: false
      type: object
    iDeleteAttestationPayload:
      properties:
        attestationId:
          description: >-
            The attestation ID. This is the ID that is given to the user to
            query the attestation. Anyone with the ID can query it, so keep this
            safe and secure.
          type: string
      required:
        - attestationId
      additionalProperties: false
      type: object
    iDeleteAttestationSuccessResponse:
      additionalProperties: false
      type: object
    iUpdateAttestationPayload:
      properties:
        attestationId:
          description: >-
            The attestation ID. If you are the owner, you can simply use the
            attestationId to update the attestation. One of inviteCode or
            attestationId must be provided.
          type: string
        inviteCode:
          description: >-
            The key to add oneself as a holder to the attestation. This is given
            to the holder themselves. One of inviteCode or attestationId must be
            provided.
          type: string
        rotateInviteCode:
          description: Whether or not to rotate the invite code.
          type: boolean
        holdersToSet:
          items:
            properties:
              bitbadgesAddress:
                $ref: '#/components/schemas/BitBadgesAddress'
                examples: *ref_8
              delete:
                type: boolean
            required:
              - bitbadgesAddress
            additionalProperties: false
            type: object
          description: >-
            Holders can use the attestation to prove something about themselves.
            This is a list of holders that have added this attestation to their
            profile.
          type: array
        anchorsToAdd:
          items:
            properties:
              txHash:
                type: string
                examples: *ref_7
              message:
                type: string
            additionalProperties: false
            type: object
          description: >-
            Blockchain anchors to add to the attestation. These are on-chain
            transactions that can be used to prove stuff about the attestation,
            like

            existence at a certain point in time or to maintain data integrity.
          type: array
        proofOfIssuance:
          properties:
            message:
              type: string
            signer:
              type: string
              examples: *ref_17
            signature:
              type: string
              examples: *ref_16
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signer
            - signature
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this attestation signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the messages.
          type: string
        scheme:
          description: >-
            The scheme of the attestation. BBS+ signatures are supported and can
            be used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        originalProvider:
          description: >-
            The original provider of the attestation. Used for third-party
            attestation providers.
          type: string
        messages:
          items:
            type: string
          description: >-
            Thesse are the attestations that are signed.

            For BBS+ signatures, there can be >1 messages, and the signer can
            selectively disclose the attestations.

            For standard signatures, there is only 1 attestationMessage.
          type: array
          examples: *ref_26
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
            derivedProof:
              type: boolean
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the messages. The
            siganture maintains the integrity of the messages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.
          type: object
        publicVisibility:
          description: >-
            Whether or not the attestation is displayable on the user's profile.
            if true, the attestation can be queried by anyone with the ID.
          type: boolean
        name:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_12
        description:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_9
      additionalProperties: false
      type: object
    iUpdateAttestationSuccessResponse:
      properties:
        inviteCode:
          type: string
      required:
        - inviteCode
      additionalProperties: false
      type: object
    iVerifyAttestationPayload:
      properties:
        scheme:
          description: Must be 'bbs' or 'standard'
          type: string
        messages:
          items:
            type: string
          description: The messages to attest to. Must be length 1 for standard
          type: array
          examples: *ref_26
        messageFormat:
          enum:
            - json
            - plaintext
          type: string
        dataIntegrityProof:
          properties:
            signature:
              description: The signature of the attestation.
              type: string
              examples: *ref_16
            signer:
              description: The signer of the attestation.
              type: string
              examples: *ref_17
            publicKey:
              description: The public key of the signer (if needed)
              type: string
              examples: *ref_15
            isDerived:
              description: Whether the proof is derived. Only applicable for BBS.
              type: boolean
          required:
            - signature
            - signer
          additionalProperties: false
          description: |-
            The data integrity proof.

            For standard, this is the signature of the attestation.
            For BBS, this is the actual BBS signature.
          type: object
        proofOfIssuance:
          properties:
            message:
              description: The message of the proof of issuance.
              type: string
            signature:
              description: The signature of the proof of issuance.
              type: string
              examples: *ref_16
            signer:
              description: The signer of the proof of issuance.
              type: string
              examples: *ref_17
            publicKey:
              description: The public key of the signer (if needed)
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            The proof of issuance. Must be provided for BBS. Leave blank for
            standard.
          type: object
      required:
        - scheme
        - messages
        - messageFormat
      additionalProperties: false
      type: object
    iVerifyAttestationSuccessResponse:
      properties:
        success:
          type: boolean
      required:
        - success
      additionalProperties: false
      type: object
    iCreateSIWBBRequestPayload:
      properties:
        response_type:
          description: The response type for the SIWBB request.
          type: string
        scopes:
          items:
            $ref: '#/components/schemas/OAuthScopeDetails'
          description: The scopes to request.
          type: array
        name:
          description: The name of the SIWBB request for display purposes.
          type: string
          examples: *ref_13
        description:
          description: The description of the SIWBB request for display purposes.
          type: string
          examples: *ref_9
        image:
          description: The image of the SIWBB request for display purposes.
          type: string
          examples: *ref_12
        attestations:
          items:
            $ref: '#/components/schemas/iAttestationsProof'
          description: >-
            If required, you can additionally add proof of attestations to the
            authentication flow.

            This proves sensitive information (e.g. GPAs, SAT scores, etc.)
            without revealing the information itself.
          type: array
        client_id:
          description: Client ID for the SIWBB request.
          type: string
        redirect_uri:
          description: Redirect URI if redirected after successful sign-in.
          type: string
        state:
          description: State to be passed back to the redirect URI.
          type: string
        code_challenge:
          description: The code challenge for the SIWBB request.
          type: string
        code_challenge_method:
          enum:
            - S256
            - plain
          description: The code challenge method for the SIWBB request.
          type: string
      required:
        - response_type
        - scopes
        - client_id
      additionalProperties: false
      type: object
    iCreateSIWBBRequestSuccessResponse:
      properties:
        code:
          description: Secret code which can be exchanged for the SIWBB request details.
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    iRotateSIWBBRequestPayload:
      properties:
        code:
          description: The code of the SIWBB request to rotate.
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    iRotateSIWBBRequestSuccessResponse:
      properties:
        code:
          description: The new code for the SIWBB request.
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    iGetSIWBBRequestsForDeveloperAppPayload:
      properties:
        bookmark:
          description: The bookmark for pagination.
          type: string
        clientId:
          description: The client ID to fetch for
          type: string
      required:
        - clientId
      additionalProperties: false
      type: object
    iGetSIWBBRequestsForDeveloperAppSuccessResponse:
      properties:
        siwbbRequests:
          items:
            $ref: '#/components/schemas/iSIWBBRequestDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - siwbbRequests
        - pagination
      additionalProperties: false
      type: object
    iExchangeSIWBBAuthorizationCodePayload:
      properties:
        code:
          description: The SIWBB request.
          type: string
        options:
          description: >-
            We attempt to verify the current status with each request. You can
            provide additional options for verification here.
          $ref: '#/components/schemas/VerifySIWBBOptions'
        client_secret:
          description: Client secret for the SIWBB request.
          type: string
        client_id:
          description: Client ID for the SIWBB request.
          type: string
        redirect_uri:
          description: >-
            The redirect URI for the SIWBB request. Only required if the code
            was created with a redirect URI.
          type: string
        grant_type:
          enum:
            - authorization_code
            - refresh_token
          description: The grant type for the SIWBB request.
          type: string
        refresh_token:
          description: The refresh token to use for the SIWBB request.
          type: string
        code_verifier:
          description: The code verifier for the SIWBB request (if used with PKCE).
          type: string
      additionalProperties: false
      type: object
    iExchangeSIWBBAuthorizationCodeSuccessResponse:
      properties:
        address:
          description: The user's address
          type: string
        chain:
          description: The chain of the address
          $ref: '#/components/schemas/SupportedChain'
        ownershipRequirements:
          description: The ownership requirements for the user
          $ref: '#/components/schemas/AssetConditionGroup'
        bitbadgesAddress:
          description: >-
            The converted BitBadges address of params.address. This can be used
            as the

            unique identifier for the user (e.g. avoid duplicate sign ins from
            equivalent 0x and bb1 addresses).
          examples: *ref_8
          $ref: '#/components/schemas/BitBadgesAddress'
        verificationResponse:
          properties:
            success:
              description: >-
                Returns whether the current (message, signature) pair is valid
                and verified (i.e. signature is valid and any assets are owned).
              type: boolean
            errorMessage:
              description: Returns the response message returned from verification.
              type: string
          required:
            - success
          additionalProperties: false
          description: Verification response
          type: object
        attestations:
          items:
            $ref: '#/components/schemas/iAttestationsProof'
          description: Derived data integrity proofs for any attestations requested.
          type: array
        access_token:
          description: The access token to use for the SIWBB request.
          type: string
        token_type:
          description: The token type
          type: string
        access_token_expires_at:
          description: The time at which the access token expires.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        refresh_token:
          description: The refresh token to use for the SIWBB request.
          type: string
        refresh_token_expires_at:
          description: The time at which the refresh token expires.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - address
        - chain
        - bitbadgesAddress
        - access_token
        - token_type
      additionalProperties: false
      description: ''
      type: object
    iDeleteSIWBBRequestPayload:
      properties:
        code:
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    iDeleteSIWBBRequestSuccessResponse:
      additionalProperties: false
      type: object
    iGenerateAppleWalletPassPayload:
      properties:
        code:
          description: The authentication code.
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    iGenerateAppleWalletPassSuccessResponse:
      properties:
        type:
          type: string
        data:
          type: string
      required:
        - type
        - data
      additionalProperties: false
      type: object
    iGenerateGoogleWalletPayload:
      properties:
        code:
          description: The authentication code.
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    iGenerateGoogleWalletSuccessResponse:
      properties:
        saveUrl:
          type: string
      required:
        - saveUrl
      additionalProperties: false
      type: object
    iCreateDeveloperAppPayload:
      properties:
        name:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        description:
          description: Description of the app.
          type: string
          examples: *ref_9
        image:
          description: Image for the app.
          type: string
          examples: *ref_12
        redirectUris:
          items:
            type: string
          description: Redirect URIs for the app.
          type: array
      required:
        - name
        - description
        - image
        - redirectUris
      additionalProperties: false
      type: object
    iCreateDeveloperAppSuccessResponse:
      properties:
        clientId:
          description: Client ID for the app.
          type: string
        clientSecret:
          description: Client secret for the app.
          type: string
      required:
        - clientId
        - clientSecret
      additionalProperties: false
      type: object
    iGetActiveAuthorizationsPayload:
      additionalProperties: false
      type: object
    iGetActiveAuthorizationsSuccessResponse:
      properties:
        authorizations:
          items:
            $ref: '#/components/schemas/iAccessTokenDoc'
          type: array
        developerApps:
          items:
            $ref: '#/components/schemas/iDeveloperAppDoc'
          description: |-
            Developer app docs for each authorization.

            Undefined if deleted.
          type: array
      required:
        - authorizations
        - developerApps
      additionalProperties: false
      type: object
    iSearchDeveloperAppsPayload:
      properties:
        bookmark:
          description: Bookmark for pagination of the apps. Not compatible with clientId.
          type: string
      additionalProperties: false
      type: object
    iGetDeveloperAppPayload:
      additionalProperties: false
      type: object
    iGetDeveloperAppSuccessResponse:
      properties:
        developerApp:
          $ref: '#/components/schemas/iDeveloperAppDoc'
      required:
        - developerApp
      additionalProperties: false
      type: object
    iGetDeveloperAppsPayload:
      properties:
        clientId:
          description: >-
            If you want to get a specific app, specify the client ID here (will
            not return the client secret).
          type: string
      additionalProperties: false
      type: object
    iGetDeveloperAppsSuccessResponse:
      properties:
        developerApps:
          items:
            $ref: '#/components/schemas/iDeveloperAppDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - developerApps
        - pagination
      additionalProperties: false
      type: object
    iSearchDeveloperAppsSuccessResponse:
      properties:
        developerApps:
          items:
            $ref: '#/components/schemas/iDeveloperAppDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - developerApps
        - pagination
      additionalProperties: false
      type: object
    iDeleteDeveloperAppPayload:
      properties:
        clientId:
          description: The client ID of the app to delete.
          type: string
        clientSecret:
          description: >-
            The client secret of the app to delete. This is only needed for
            temporary developer apps (not linked to a user).

            For non-temporary developer apps, the client secret is not needed,
            but you must be signed in and the owner of the app.
          type: string
      required:
        - clientId
      additionalProperties: false
      type: object
    iDeleteDeveloperAppSuccessResponse:
      additionalProperties: false
      type: object
    iUpdateDeveloperAppPayload:
      properties:
        clientId:
          description: Client ID for the app to update.
          type: string
        name:
          description: >-
            Metadata for for display purposes. Note this should not contain
            anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        description:
          description: Description of the app.
          type: string
          examples: *ref_9
        image:
          description: Image for the app.
          type: string
          examples: *ref_12
        redirectUris:
          items:
            type: string
          description: Redirect URIs for the app.
          type: array
        rotateClientSecret:
          description: Rotate the client secret?
          type: boolean
      required:
        - clientId
      additionalProperties: false
      type: object
    iUpdateDeveloperAppSuccessResponse:
      properties:
        success:
          type: boolean
        clientSecret:
          type: string
      required:
        - success
      additionalProperties: false
      type: object
    PluginVersionConfigPayload:
      properties:
        finalized:
          description: Finalized
          type: boolean
        stateFunctionPreset:
          description: Preset type for how the plugin state is to be maintained.
        duplicatesAllowed:
          description: Whether it makes sense for multiple of this plugin to be allowed
          type: boolean
        receiveStatusWebhook:
          description: Whether the plugin should receive status webhooks
          type: boolean
        skipProcessingWebhook:
          description: >-
            Whether the plugin should skip processing webhooks. We will just
            auto-treat it as successful.
          type: boolean
        ignoreSimulations:
          description: Ignore simulations?
          type: boolean
        reuseForNonIndexed:
          description: Reuse for non-indexed?
          type: boolean
        requiresUserInputs:
          description: >-
            This is a flag for being compatible with auto-triggered claims,
            meaning no user interaction is needed.
          type: boolean
        userInputRedirect:
          properties:
            baseUri:
              description: >-
                The base URI for user inputs. Note: This is experimental and not
                fully supported yet.
              type: string
            tutorialUri:
              description: The tutorial URI for user inputs.
              type: string
          additionalProperties: false
          description: The redirect URI for user inputs.
          type: object
        userInputsSchema:
          items:
            $ref: '#/components/schemas/JsonBodyInputSchema'
          type: array
        claimCreatorRedirect:
          properties:
            toolUri:
              description: >-
                The tool URI for claim creators. Note: This is experimental and
                not fully supported yet.
              type: string
            tutorialUri:
              description: The tutorial URI for claim creators.
              type: string
            testerUri:
              description: >-
                The tester URI for claim creators. Note: This is experimental
                and not fully supported yet.
              type: string
          additionalProperties: false
          description: The redirect URI for claim creators.
          type: object
        publicParamsSchema:
          items:
            $ref: '#/components/schemas/JsonBodyInputSchema'
          type: array
        privateParamsSchema:
          items:
            $ref: '#/components/schemas/JsonBodyInputSchema'
          type: array
        verificationCall:
          properties:
            uri:
              type: string
              examples: *ref_1
            method:
              enum:
                - POST
                - GET
                - PUT
                - DELETE
              type: string
            hardcodedInputs:
              items:
                $ref: '#/components/schemas/JsonBodyInputWithValue'
              type: array
            passAddress:
              type: boolean
            passDiscord:
              type: boolean
            passEmail:
              type: boolean
            passTwitter:
              type: boolean
            passGoogle:
              type: boolean
            passYoutube:
              type: boolean
            passGithub:
              type: boolean
            passStrava:
              type: boolean
            passTwitch:
              type: boolean
            passReddit:
              type: boolean
            passMeetup:
              type: boolean
            passFacebook:
              type: boolean
            passTelegram:
              type: boolean
            passFarcaster:
              type: boolean
            passSlack:
              type: boolean
            passShopify:
              type: boolean
            passBluesky:
              type: boolean
            postProcessingJs:
              type: string
          required:
            - uri
            - method
            - hardcodedInputs
            - postProcessingJs
          additionalProperties: false
          description: The verification URL
          type: object
        requireSignIn:
          description: Require BitBadges sign-in to use the plugin?
          type: boolean
        customDetailsDisplay:
          description: >-
            Custom details display for the plugin. Use {{publicParamKey}} to
            dynamically display the values of public parameters.
          type: string
      required:
        - finalized
        - stateFunctionPreset
        - duplicatesAllowed
        - receiveStatusWebhook
        - reuseForNonIndexed
        - requiresUserInputs
      additionalProperties: false
      type: object
    iCreatePluginPayload:
      properties:
        pluginId:
          description: The unique plugin ID
          type: string
        inviteCode:
          description: Invite code for the plugin
          type: string
        metadata:
          properties:
            name:
              description: The name of the plugin
              type: string
              examples: *ref_13
            description:
              description: Description of the plugin
              type: string
              examples: *ref_9
            image:
              description: The image of the plugin
              type: string
              examples: *ref_12
            documentation:
              description: Documentation for the plugin
              type: string
            parentApp:
              description: >-
                Parent app of the plugin. If blank, treated as its own app /
                entity.
              type: string
            sourceCode:
              description: Source code for the plugin
              type: string
            supportLink:
              description: Support link for the plugin
              type: string
            createdBy:
              $ref: '#/components/schemas/BitBadgesAddress'
              description: The creator of the plugin
          required:
            - name
            - description
            - image
            - createdBy
          additionalProperties: false
          type: object
        toPublish:
          description: >-
            To publish in the directory. This will trigger the start of the
            review process.
          type: boolean
        approvedUsers:
          items:
            $ref: '#/components/schemas/NativeAddress'
          description: The addresses that are allowed to use this plugin.
          type: array
        initialVersion:
          description: The initial version configuration
          $ref: '#/components/schemas/PluginVersionConfigPayload'
        locale:
          description: >-
            Locale that is supported by the plugin. By default, we assume 'en'
            is supported if not specified.
          type: string
      required:
        - pluginId
        - metadata
        - toPublish
        - initialVersion
      additionalProperties: false
      type: object
    iCreatePluginSuccessResponse:
      additionalProperties: false
      type: object
    iUpdatePluginPayload:
      properties:
        pluginId:
          description: The unique plugin ID
          type: string
        inviteCode:
          description: Invite code for the plugin
          type: string
        removeSelfFromApprovedUsers:
          description: Remove self from approved users?
          type: boolean
        metadata:
          properties:
            name:
              description: The name of the plugin
              type: string
              examples: *ref_13
            description:
              description: Description of the plugin
              type: string
              examples: *ref_9
            image:
              description: The image of the plugin
              type: string
              examples: *ref_12
            documentation:
              description: Documentation for the plugin
              type: string
            parentApp:
              description: >-
                Parent app of the plugin. If blank, treated as its own app /
                entity.
              type: string
            sourceCode:
              description: Source code for the plugin
              type: string
            supportLink:
              description: Support link for the plugin
              type: string
            createdBy:
              description: Creator of the plugin
              type: string
          required:
            - name
            - description
            - image
          additionalProperties: false
          type: object
        toPublish:
          description: >-
            To publish in the directory. This will trigger the start of the
            review process.
          type: boolean
        approvedUsers:
          items:
            $ref: '#/components/schemas/NativeAddress'
          description: The addresses that are allowed to use this plugin.
          type: array
        rotatePluginSecret:
          description: Rotate the plugin secret?
          type: boolean
        versionUpdates:
          items:
            properties:
              version:
                description: The version to update or create
                $ref: '#/components/schemas/NumberType'
              config:
                properties:
                  finalized:
                    description: Finalized
                    type: boolean
                  stateFunctionPreset:
                    description: Preset type for how the plugin state is to be maintained.
                  duplicatesAllowed:
                    description: >-
                      Whether it makes sense for multiple of this plugin to be
                      allowed
                    type: boolean
                  receiveStatusWebhook:
                    description: Whether the plugin should receive status webhooks
                    type: boolean
                  skipProcessingWebhook:
                    description: >-
                      Whether the plugin should skip processing webhooks. We
                      will just auto-treat it as successful.
                    type: boolean
                  ignoreSimulations:
                    description: Ignore simulations?
                    type: boolean
                  reuseForNonIndexed:
                    description: Reuse for non-indexed?
                    type: boolean
                  requiresUserInputs:
                    description: >-
                      This is a flag for being compatible with auto-triggered
                      claims, meaning no user interaction is needed.
                    type: boolean
                  userInputRedirect:
                    properties:
                      baseUri:
                        description: >-
                          The base URI for user inputs. Note: This is
                          experimental and not fully supported yet.
                        type: string
                      tutorialUri:
                        description: The tutorial URI for user inputs.
                        type: string
                    additionalProperties: false
                    description: The redirect URI for user inputs.
                    type: object
                  userInputsSchema:
                    items:
                      $ref: '#/components/schemas/JsonBodyInputSchema'
                    type: array
                  claimCreatorRedirect:
                    properties:
                      toolUri:
                        description: >-
                          The tool URI for claim creators. Note: This is
                          experimental and not fully supported yet.
                        type: string
                      tutorialUri:
                        description: The tutorial URI for claim creators.
                        type: string
                      testerUri:
                        description: >-
                          The tester URI for claim creators. Note: This is
                          experimental and not fully supported yet.
                        type: string
                    additionalProperties: false
                    description: The redirect URI for claim creators.
                    type: object
                  publicParamsSchema:
                    items:
                      $ref: '#/components/schemas/JsonBodyInputSchema'
                    type: array
                  privateParamsSchema:
                    items:
                      $ref: '#/components/schemas/JsonBodyInputSchema'
                    type: array
                  verificationCall:
                    properties:
                      uri:
                        type: string
                        examples: *ref_1
                      method:
                        enum:
                          - POST
                          - GET
                          - PUT
                          - DELETE
                        type: string
                      hardcodedInputs:
                        items:
                          $ref: '#/components/schemas/JsonBodyInputWithValue'
                        type: array
                      passAddress:
                        type: boolean
                      passDiscord:
                        type: boolean
                      passEmail:
                        type: boolean
                      passTwitter:
                        type: boolean
                      passGoogle:
                        type: boolean
                      passYoutube:
                        type: boolean
                      passGithub:
                        type: boolean
                      passStrava:
                        type: boolean
                      passTwitch:
                        type: boolean
                      passReddit:
                        type: boolean
                      passMeetup:
                        type: boolean
                      passFacebook:
                        type: boolean
                      passTelegram:
                        type: boolean
                      passFarcaster:
                        type: boolean
                      passSlack:
                        type: boolean
                      passShopify:
                        type: boolean
                      passBluesky:
                        type: boolean
                      postProcessingJs:
                        type: string
                    required:
                      - uri
                      - method
                      - hardcodedInputs
                      - postProcessingJs
                    additionalProperties: false
                    description: The verification URL
                    type: object
                  requireSignIn:
                    description: Require BitBadges sign-in to use the plugin?
                    type: boolean
                  customDetailsDisplay:
                    description: >-
                      Custom details display for the plugin. Use
                      {{publicParamKey}} to dynamically display the values of
                      public parameters.
                    type: string
                additionalProperties: false
                description: The configuration for this version
                type: object
            required:
              - version
              - config
            additionalProperties: false
            type: object
          description: Update an existing version
          type: array
        versionCreate:
          description: Create a new version
          $ref: '#/components/schemas/PluginVersionConfigPayload'
        locale:
          description: >-
            Locale that is supported by the plugin. By default, we assume 'en'
            is supported if not specified.
          type: string
      required:
        - pluginId
      additionalProperties: false
      type: object
    iUpdatePluginSuccessResponse:
      additionalProperties: false
      type: object
    iDeletePluginPayload:
      properties:
        pluginId:
          description: The unique plugin ID
          type: string
      required:
        - pluginId
      additionalProperties: false
      type: object
    iDeletePluginSuccessResponse:
      additionalProperties: false
      type: object
    iSearchPluginsPayload:
      properties:
        pluginsForSignedInUser:
          description: >-
            If true, we will fetch all plugins for the authenticated user (with
            plugin secrets).


            This will include plugins created by the signed in user and also
            those where they are explicitly approved / invited.
          type: boolean
        bookmark:
          description: >-
            Bookmark for pagination of the plugins (obtained from a previous
            call to this endpoint).
          type: string
        searchValue:
          description: Search value
          type: string
        locale:
          description: >-
            Locale to restrict results to. By default, we assume 'en'. This is
            not applicable if you specify createdPluginsOnly, speciifc
            pluginIds, or an invite code.
          type: string
      additionalProperties: false
      type: object
    iGetPluginsPayload:
      properties:
        pluginIds:
          items:
            type: string
          description: >-
            If true, we will fetch only the specific plugin with the plugin ID
            (no secrets).
          type: array
        inviteCode:
          description: Invite code to fetch the plugin with.
          type: string
      required:
        - pluginIds
      additionalProperties: false
      type: object
    iGetPluginPayload:
      additionalProperties: false
      type: object
    iCreatePaymentIntentPayload:
      properties:
        amount:
          description: The amount in USD to pay
          type: number
        purpose:
          enum:
            - credits
            - deposit
          description: Purpose of the payment
          type: string
        affiliateCode:
          description: The affiliate code to use for the payment
          type: string
      required:
        - amount
        - purpose
      additionalProperties: false
      type: object
    iCreatePaymentIntentSuccessResponse:
      properties:
        clientSecret:
          description: The payment intent client secret
          type: string
      required:
        - clientSecret
      additionalProperties: false
      type: object
    iGetPluginSuccessResponse:
      properties:
        plugin:
          $ref: '#/components/schemas/iPluginDoc'
      required:
        - plugin
      additionalProperties: false
      type: object
    iGetPluginsSuccessResponse:
      properties:
        plugins:
          items:
            $ref: '#/components/schemas/iPluginDoc'
          type: array
        bookmark:
          description: >-
            Bookmark for pagination of the plugins. Only applicable if fetching
            the directory.
          type: string
      required:
        - plugins
      additionalProperties: false
      type: object
    iSearchPluginsSuccessResponse:
      properties:
        plugins:
          items:
            $ref: '#/components/schemas/iPluginDoc'
          type: array
        bookmark:
          description: >-
            Bookmark for pagination of the plugins. Only applicable if fetching
            the directory.
          type: string
      required:
        - plugins
      additionalProperties: false
      type: object
    iDeleteClaimPayload:
      properties:
        claimIds:
          items:
            type: string
          description: The claim ID to delete.
          type: array
      required:
        - claimIds
      additionalProperties: false
      type: object
    iDeleteClaimSuccessResponse:
      additionalProperties: false
      type: object
    iUpdateClaimPayload:
      properties:
        claims:
          items:
            $ref: '#/components/schemas/UpdateClaimRequest'
          type: array
      required:
        - claims
      additionalProperties: false
      type: object
    iUpdateClaimSuccessResponse:
      additionalProperties: false
      type: object
    iCreateClaimPayload:
      properties:
        claims:
          items:
            $ref: '#/components/schemas/CreateClaimRequest'
          description: >-
            The claims to create.


            By default, it will create standalone (non-test claims) or list /
            collection linked claims if the

            corresponding fields are specified in the claim (listId,
            collectionId, ...).


            Note that collection / list linked claims require the proper
            permissions and have special setup

            required.


            For test claims, you must specify the `testClaims` field to be true.
          type: array
        testClaims:
          description: >-
            Create test claims (e.g. the claim tester). Used for frontend
            testing. Test claims are auto-deleted

            after the browser session is terminated and do not show up in search
            results.
          type: boolean
      required:
        - claims
      additionalProperties: false
      type: object
    iCreateClaimSuccessResponse:
      additionalProperties: false
      type: object
    iOauthRevokePayload:
      properties:
        token:
          description: The OAuth token to revoke.
          type: string
      required:
        - token
      additionalProperties: false
      type: object
    iOauthRevokeSuccessResponse:
      additionalProperties: false
      type: object
    iGetGatedContentForClaimPayload:
      additionalProperties: false
      type: object
    iGetGatedContentForClaimSuccessResponse:
      properties:
        rewards:
          items:
            $ref: '#/components/schemas/iClaimReward'
          type: array
      required:
        - rewards
      additionalProperties: false
      type: object
    iCreateDynamicDataStorePayload:
      properties:
        handlerId:
          description: The handler ID for the dynamic data store
          type: string
          examples: *ref_27
        label:
          description: The label of the dynamic data store
          type: string
      required:
        - handlerId
        - label
      additionalProperties: false
      type: object
    iCreateDynamicDataStoreSuccessResponse:
      properties:
        doc:
          $ref: '#/components/schemas/iDynamicDataDoc'
      required:
        - doc
      additionalProperties: false
      type: object
    iSearchDynamicDataStoresPayload:
      properties:
        bookmark:
          description: The pagination bookmark to start from
          type: string
      additionalProperties: false
      type: object
    iGetDynamicDataStoreValuesPaginatedPayload:
      properties:
        dataSecret:
          description: >-
            The data secret to fetch. Only needed if you are not signed in as
            creator.
          type: string
        bookmark:
          description: The pagination bookmark to start from
          type: string
        lookupType:
          enum:
            - id
            - username
          description: The lookup type to fetch (if you need to specify).
          type: string
      additionalProperties: false
      type: object
    iGetDynamicDataStoreValuesPaginatedSuccessResponse:
      properties:
        lookupValues:
          items:
            properties:
              key:
                description: The key of the lookup value
                type: string
              lookupType:
                enum:
                  - id
                  - username
                description: The lookup type of the lookup value
                type: string
              inStore:
                description: Whether the lookup value is in the store
                type: boolean
            required:
              - key
              - inStore
            additionalProperties: false
            type: object
          description: The lookup values for the dynamic data store
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - lookupValues
        - pagination
      additionalProperties: false
      type: object
    iGetDynamicDataStoreValuePayload:
      properties:
        key:
          description: The key to fetch.
          type: string
        dataSecret:
          description: >-
            The data secret to fetch. Only needed if you are not signed in as
            creator.
          type: string
        lookupType:
          enum:
            - id
            - username
          description: The lookup type to fetch (if you need to specify).
          type: string
      required:
        - key
      additionalProperties: false
      type: object
    iGetDynamicDataStoreValueSuccessResponse:
      properties:
        key:
          type: string
        lookupType:
          enum:
            - id
            - username
          type: string
        inStore:
          type: boolean
      required:
        - key
        - inStore
      additionalProperties: false
      type: object
    iGetDynamicDataStorePayload:
      properties:
        dataSecret:
          description: >-
            The data secret to fetch. Only needed if you are not signed in as
            creator.
          type: string
      additionalProperties: false
      type: object
    iGetDynamicDataStoreSuccessResponse:
      properties:
        doc:
          $ref: '#/components/schemas/iDynamicDataDoc'
      required:
        - doc
      additionalProperties: false
      type: object
    iGetDynamicDataStoresPayload:
      properties:
        dynamicDataIds:
          items:
            type: string
          description: >-
            The IDs to fetch. If not provided, all dynamic data stores will be
            fetched for the current signed in address without any data
            populated.
          type: array
        dataSecret:
          description: >-
            The data secret to fetch. Only needed if you are not signed in as
            creator.
          type: string
      required:
        - dynamicDataIds
      additionalProperties: false
      type: object
    iGetDynamicDataStoresSuccessResponse:
      properties:
        docs:
          items:
            $ref: '#/components/schemas/iDynamicDataDoc'
          type: array
        pagination:
          properties:
            bookmark:
              type: string
            hasMore:
              type: boolean
          required:
            - bookmark
            - hasMore
          additionalProperties: false
          type: object
      required:
        - docs
        - pagination
      additionalProperties: false
      type: object
    iSearchDynamicDataStoresSuccessResponse:
      properties:
        docs:
          items:
            $ref: '#/components/schemas/iDynamicDataDoc'
          type: array
        pagination:
          properties:
            bookmark:
              type: string
            hasMore:
              type: boolean
          required:
            - bookmark
            - hasMore
          additionalProperties: false
          type: object
      required:
        - docs
        - pagination
      additionalProperties: false
      type: object
    iUpdateDynamicDataStorePayload:
      properties:
        dynamicDataId:
          description: The dynamic data ID to update
          type: string
        rotateDataSecret:
          description: Whether to rotate the data secret
          type: boolean
        label:
          description: The new label
          type: string
      required:
        - dynamicDataId
      additionalProperties: false
      type: object
    iUpdateDynamicDataStoreSuccessResponse:
      properties:
        doc:
          $ref: '#/components/schemas/iDynamicDataDoc'
      required:
        - doc
      additionalProperties: false
      type: object
    iDeleteDynamicDataStorePayload:
      properties:
        dynamicDataId:
          description: The dynamic data ID to delete
          type: string
      required:
        - dynamicDataId
      additionalProperties: false
      type: object
    iDeleteDynamicDataStoreSuccessResponse:
      properties:
        message:
          type: string
      required:
        - message
      additionalProperties: false
      type: object
    iPerformStoreActionSingleWithBodyAuthPayload:
      properties:
        _isSimulation:
          description: Whether to simulate the action
          type: boolean
        dynamicDataId:
          description: The dynamic data ID
          type: string
        dataSecret:
          description: The data secret. Needed if you are not signed in as creator.
          type: string
        actionName:
          description: The name of the action to perform
          type: string
          examples: *ref_28
        payload:
          description: The payload for this specific action
          $ref: '#/components/schemas/iPerformStoreActionPayload'
      required:
        - dynamicDataId
        - actionName
        - payload
      additionalProperties: false
      type: object
    iPerformStoreActionSingleWithBodyAuthSuccessResponse:
      additionalProperties: false
      type: object
    iPerformStoreActionBatchWithBodyAuthPayload:
      properties:
        _isSimulation:
          description: Whether to simulate the action
          type: boolean
        dynamicDataId:
          description: The dynamic data ID
          type: string
        dataSecret:
          description: The data secret. Needed if you are not signed in as creator.
          type: string
        actions:
          items:
            properties:
              actionName:
                description: The name of the action to perform
                type: string
                examples: *ref_28
              payload:
                $ref: '#/components/schemas/iPerformStoreActionPayload'
                description: The payload for this specific action
            required:
              - actionName
              - payload
            additionalProperties: false
            type: object
          description: The actions to perform
          type: array
      required:
        - dynamicDataId
        - actions
      additionalProperties: false
      type: object
    iPerformStoreActionBatchWithBodyAuthSuccessResponse:
      additionalProperties: false
      type: object
    iPerformStoreActionPayload:
      additionalProperties: {}
      type: object
    iPerformStoreActionSuccessResponse:
      additionalProperties: false
      type: object
    iBatchStoreActionSuccessResponse:
      additionalProperties: false
      type: object
    iGetDynamicDataActivityPayload:
      properties:
        dynamicDataId:
          description: The dynamic data ID to fetch activity for
          type: string
        bookmark:
          description: The pagination bookmark to start from
          type: string
        dataSecret:
          description: >-
            The data secret to fetch activity for. Needed if you are not signed
            in as creator.
          type: string
      required:
        - dynamicDataId
      additionalProperties: false
      type: object
    iGetDynamicDataActivitySuccessResponse:
      properties:
        pending:
          items:
            properties:
              dynamicDataId:
                type: string
              handlerId:
                type: string
                examples: *ref_27
              actions:
                items: {}
                type: array
              lastFetchedAt:
                type: number
              numRetries:
                type: number
              nextFetchTime:
                type: number
              error:
                type: string
            required:
              - dynamicDataId
              - handlerId
              - actions
              - lastFetchedAt
              - numRetries
              - nextFetchTime
              - error
            additionalProperties: false
            type: object
          type: array
        history:
          properties:
            docs:
              items:
                properties:
                  dynamicDataId:
                    type: string
                  updatedAt:
                    type: number
                  actions:
                    items: {}
                    type: array
                required:
                  - dynamicDataId
                  - updatedAt
                  - actions
                additionalProperties: false
                type: object
              type: array
            pagination:
              properties:
                bookmark:
                  type: string
                hasMore:
                  type: boolean
              required:
                - bookmark
                - hasMore
              additionalProperties: false
              type: object
          required:
            - docs
            - pagination
          additionalProperties: false
          type: object
      required:
        - pending
        - history
      additionalProperties: false
      type: object
    iGetApiKeysPayload:
      properties:
        bookmark:
          description: The pagination bookmark to start from
          type: string
      additionalProperties: false
      type: object
    iGetApiKeysSuccessResponse:
      properties:
        docs:
          items:
            $ref: '#/components/schemas/iApiKeyDoc'
          type: array
        pagination:
          properties:
            bookmark:
              type: string
            hasMore:
              type: boolean
          required:
            - bookmark
            - hasMore
          additionalProperties: false
          type: object
      required:
        - docs
        - pagination
      additionalProperties: false
      type: object
    iCreateApiKeyPayload:
      properties:
        label:
          description: The label for the API key
          type: string
        intendedUse:
          description: The intended use for the API key
          type: string
      required:
        - label
        - intendedUse
      additionalProperties: false
      type: object
    iCreateApiKeySuccessResponse:
      properties:
        key:
          type: string
      required:
        - key
      additionalProperties: false
      type: object
    iRotateApiKeyPayload:
      properties:
        docId:
          description: The doc ID to rotate
          type: string
      required:
        - docId
      additionalProperties: false
      type: object
    iRotateApiKeySuccessResponse:
      properties:
        key:
          type: string
      required:
        - key
      additionalProperties: false
      type: object
    iDeleteApiKeyPayload:
      properties:
        key:
          description: The API key to delete
          type: string
        _docId:
          description: The doc ID to delete
          type: string
      additionalProperties: false
      type: object
    iDeleteApiKeySuccessResponse:
      additionalProperties: false
      type: object
    iSearchApplicationsPayload:
      properties:
        bookmark:
          description: The search value to search for
          type: string
      additionalProperties: false
      type: object
    iGetApplicationPayload:
      additionalProperties: false
      type: object
    iGetApplicationSuccessResponse:
      properties:
        application:
          $ref: '#/components/schemas/iApplicationDoc'
      required:
        - application
      additionalProperties: false
      type: object
    iGetApplicationsPayload:
      properties:
        applicationIds:
          items:
            type: string
          description: The specific IDs to fetch
          type: array
      required:
        - applicationIds
      additionalProperties: false
      type: object
    iGetApplicationsSuccessResponse:
      properties:
        docs:
          items:
            $ref: '#/components/schemas/iApplicationDoc'
          type: array
        pagination:
          properties:
            bookmark:
              type: string
            hasMore:
              type: boolean
          required:
            - bookmark
            - hasMore
          additionalProperties: false
          type: object
      required:
        - docs
        - pagination
      additionalProperties: false
      type: object
    iSearchApplicationsSuccessResponse:
      properties:
        docs:
          items:
            $ref: '#/components/schemas/iApplicationDoc'
          type: array
        pagination:
          properties:
            bookmark:
              type: string
            hasMore:
              type: boolean
          required:
            - bookmark
            - hasMore
          additionalProperties: false
          type: object
      required:
        - docs
        - pagination
      additionalProperties: false
      type: object
    iCreateApplicationPayload:
      properties:
        metadata:
          description: The overall metadata for the application
          $ref: '#/components/schemas/iMetadataWithoutInternals'
        pages:
          items:
            $ref: '#/components/schemas/iApplicationPage'
          description: The pages in the application
          type: array
      required:
        - metadata
        - pages
      additionalProperties: false
      type: object
    iCreateApplicationSuccessResponse:
      properties:
        doc:
          $ref: '#/components/schemas/iApplicationDoc'
      required:
        - doc
      additionalProperties: false
      type: object
    iUpdateApplicationPayload:
      properties:
        applicationId:
          description: The application ID to update
          type: string
        metadata:
          description: The overall metadata for the application
          $ref: '#/components/schemas/iMetadataWithoutInternals'
        pages:
          items:
            $ref: '#/components/schemas/iApplicationPage'
          description: The pages in the application
          type: array
      required:
        - applicationId
        - metadata
        - pages
      additionalProperties: false
      type: object
    iUpdateApplicationSuccessResponse:
      properties:
        doc:
          $ref: '#/components/schemas/iApplicationDoc'
      required:
        - doc
      additionalProperties: false
      type: object
    iDeleteApplicationPayload:
      properties:
        applicationId:
          description: The application ID to delete
          type: string
      required:
        - applicationId
      additionalProperties: false
      type: object
    iDeleteApplicationSuccessResponse:
      additionalProperties: false
      type: object
    iCalculatePointsPayload:
      properties:
        applicationId:
          description: The application ID to calculate points for
          type: string
        pageId:
          description: The page ID to calculate points for
          type: string
        address:
          description: The address to calculate points for
          $ref: '#/components/schemas/NativeAddress'
        bookmark:
          description: The pagination bookmark to start from
          type: string
        skipCache:
          description: Skip the cache and calculate points from scratch
          type: boolean
      required:
        - applicationId
        - pageId
      additionalProperties: false
      type: object
    iPointsValue:
      properties:
        address:
          $ref: '#/components/schemas/BitBadgesAddress'
        points:
          type: number
        lastCalculatedAt:
          type: number
        claimSuccessCounts:
          additionalProperties:
            type: number
          type: object
      required:
        - address
        - points
        - lastCalculatedAt
      additionalProperties: false
      type: object
    iCalculatePointsSuccessResponse:
      properties:
        values:
          items:
            $ref: '#/components/schemas/iPointsValue'
          type: array
        pagination:
          properties:
            bookmark:
              type: string
            hasMore:
              type: boolean
          required:
            - bookmark
            - hasMore
          additionalProperties: false
          type: object
      required:
        - values
        - pagination
      additionalProperties: false
      type: object
    iGetPointsActivityPayload:
      properties:
        applicationId:
          description: The application ID to get points activity for
          type: string
        pageId:
          description: The page ID to get points activity for
          type: string
        bookmark:
          description: The pagination bookmark to start from
          type: string
        address:
          description: The specific address to get points activity for
          $ref: '#/components/schemas/NativeAddress'
      required:
        - applicationId
        - pageId
      additionalProperties: false
      type: object
    iGetPointsActivitySuccessResponse:
      properties:
        docs:
          items:
            $ref: '#/components/schemas/iPointsActivityDoc'
          type: array
        pagination:
          properties:
            bookmark:
              type: string
            hasMore:
              type: boolean
          required:
            - bookmark
            - hasMore
          additionalProperties: false
          type: object
      required:
        - docs
        - pagination
      additionalProperties: false
      type: object
    iSearchUtilityPagesPayload:
      properties:
        bookmark:
          description: The pagination bookmark to start from
          type: string
      additionalProperties: false
      type: object
    iGetUtilityPagePayload:
      additionalProperties: false
      type: object
    iGetUtilityPageSuccessResponse:
      properties:
        listing:
          $ref: '#/components/schemas/iUtilityPageDoc'
      required:
        - listing
      additionalProperties: false
      type: object
    iGetUtilityPagesPayload:
      properties:
        listingIds:
          items:
            type: string
          description: The specific IDs to fetch
          type: array
      required:
        - listingIds
      additionalProperties: false
      type: object
    iGetUtilityPagesSuccessResponse:
      properties:
        docs:
          items:
            $ref: '#/components/schemas/iUtilityPageDoc'
          type: array
        pagination:
          properties:
            bookmark:
              type: string
            hasMore:
              type: boolean
          required:
            - bookmark
            - hasMore
          additionalProperties: false
          type: object
      required:
        - docs
        - pagination
      additionalProperties: false
      type: object
    iSearchUtilityPagesSuccessResponse:
      properties:
        docs:
          items:
            $ref: '#/components/schemas/iUtilityPageDoc'
          type: array
        pagination:
          properties:
            bookmark:
              type: string
            hasMore:
              type: boolean
          required:
            - bookmark
            - hasMore
          additionalProperties: false
          type: object
      required:
        - docs
        - pagination
      additionalProperties: false
      type: object
    iCreateUtilityPagePayload:
      properties:
        metadata:
          description: The overall metadata for the listing
          $ref: '#/components/schemas/iMetadataWithoutInternals'
        content:
          items:
            $ref: '#/components/schemas/iUtilityPageContent'
          description: The content for the listing
          type: array
        links:
          items:
            $ref: '#/components/schemas/iUtilityPageLink'
          description: The links for the listing
          type: array
        type:
          description: The type of the listing
          type: string
        visibility:
          enum:
            - public
            - private
            - unlisted
          description: The visibility of the listing
          type: string
        displayTimes:
          description: >-
            The display times of the listing. Optionally specify when to show vs
            not show the listing.
          $ref: '#/components/schemas/iUintRange'
        directLink:
          description: >-
            The direct link for the listing. If specified, we will skip the
            entire content / listing page. Thus, content and links should be
            empty [].
          type: string
        categories:
          items:
            type: string
          description: The categories of the listing
          type: array
        linkedTo:
          description: >-
            The details for if this listing is linked to a specific collection
            or list (displayed in Utility tab)
          $ref: '#/components/schemas/iLinkedTo'
        inheritMetadataFrom:
          description: Where to inherit metadata from? Only one can be specified.
          $ref: '#/components/schemas/iInheritMetadataFrom'
        locale:
          description: 'Locale (ex: es, fr, etc.). If not specified, we assume en.'
          type: string
        estimatedCost:
          description: The estimated cost for this utility/service
          $ref: '#/components/schemas/iEstimatedCost'
        estimatedTime:
          description: The estimated time to complete or deliver this utility/service
          type: string
      required:
        - metadata
        - content
        - links
        - type
        - visibility
        - categories
      additionalProperties: false
      type: object
    iCreateUtilityPageSuccessResponse:
      properties:
        doc:
          $ref: '#/components/schemas/iUtilityPageDoc'
      required:
        - doc
      additionalProperties: false
      type: object
    iUpdateUtilityPagePayload:
      properties:
        listingId:
          description: The listing ID to update
          type: string
        metadata:
          description: The overall metadata for the listing
          $ref: '#/components/schemas/iMetadataWithoutInternals'
        content:
          items:
            $ref: '#/components/schemas/iUtilityPageContent'
          description: >-
            The content for the listing. This is only used for a dedicated
            listing page (not compatible with direct link or inherited
            metadata).
          type: array
        links:
          items:
            $ref: '#/components/schemas/iUtilityPageLink'
          description: >-
            The links for the listing. This is only used for a dedicated listing
            page (not compatible with direct link or inherited metadata).
          type: array
        visibility:
          enum:
            - public
            - private
            - unlisted
          description: The visibility of the listing
          type: string
        displayTimes:
          description: >-
            The display times of the listing. Optionally specify when to show vs
            not show the listing.
          $ref: '#/components/schemas/iUintRange'
        directLink:
          description: >-
            The direct link for the listing. If specified, we will skip the
            entire content / listing page. Thus, content and links should be
            empty [].


            This is incompatible with inherited metadata.
          type: string
        categories:
          items:
            type: string
          description: The categories of the listing
          type: array
        linkedTo:
          description: >-
            The details for if this listing is linked to a specific collection
            or list (displayed in Utility tab)
          $ref: '#/components/schemas/iLinkedTo'
        inheritMetadataFrom:
          description: >-
            Where to inherit metadata from? Only one can be specified.


            If specified, we automatically override the metadata from what is
            specified and

            automatically set a direct link to the page.


            Ex: Inherit claim metadata and direct link to the claim page.
          $ref: '#/components/schemas/iInheritMetadataFrom'
        locale:
          description: >-
            Locale (ex: es, fr, etc.). If not specified, we assume "en"
            (English).
          type: string
        estimatedCost:
          description: The estimated cost for this utility/service
          $ref: '#/components/schemas/iEstimatedCost'
        estimatedTime:
          description: The estimated time to complete or deliver this utility/service
          type: string
      required:
        - listingId
        - metadata
        - content
        - links
        - visibility
        - categories
      additionalProperties: false
      type: object
    iUpdateUtilityPageSuccessResponse:
      properties:
        doc:
          $ref: '#/components/schemas/iUtilityPageDoc'
      required:
        - doc
      additionalProperties: false
      type: object
    iDeleteUtilityPagePayload:
      properties:
        listingId:
          description: The listing ID to delete
          type: string
      required:
        - listingId
      additionalProperties: false
      type: object
    iDeleteUtilityPageSuccessResponse:
      additionalProperties: false
      type: object
    iGetPostActionStatusesPayload:
      additionalProperties: false
      type: object
    iGetPostActionStatusesSuccessResponse:
      properties:
        postActionStatuses:
          items:
            properties:
              lastFetchedAt:
                $ref: '#/components/schemas/UNIXMilliTimestamp'
              claimId:
                type: string
              bitbadgesAddress:
                type: string
                examples: *ref_8
              pluginId:
                type: string
              claimAttemptId:
                type: string
              numRetries:
                $ref: '#/components/schemas/NumberType'
              nextFetchTime:
                $ref: '#/components/schemas/UNIXMilliTimestamp'
            required:
              - lastFetchedAt
              - claimId
              - bitbadgesAddress
              - pluginId
              - claimAttemptId
              - numRetries
              - nextFetchTime
            additionalProperties: false
            type: object
          type: array
      required:
        - postActionStatuses
      additionalProperties: false
      type: object
    iGetPluginErrorsPayload:
      properties:
        pluginId:
          description: The plugin ID to get errors for
          type: string
        bookmark:
          description: The pagination bookmark to start from
          type: string
      required:
        - pluginId
      additionalProperties: false
      type: object
    PluginErrorDoc:
      properties:
        _docId:
          type: string
        _id:
          type: string
        pluginId:
          type: string
        timestamp:
          type: number
        error:
          type: string
        context: {}
      required:
        - _docId
        - pluginId
        - timestamp
        - error
      additionalProperties: false
      type: object
    iGetPluginErrorsSuccessResponse:
      properties:
        docs:
          items:
            $ref: '#/components/schemas/PluginErrorDoc'
          type: array
        bookmark:
          type: string
        total:
          type: number
      required:
        - docs
      additionalProperties: false
      type: object
    iGetOrCreateEmbeddedWalletPayload:
      additionalProperties: false
      type: object
    iGetOrCreateEmbeddedWalletSuccessResponse:
      properties:
        address:
          type: string
      required:
        - address
      additionalProperties: false
      type: object
    iScheduleTokenRefreshPayload:
      properties:
        provider:
          type: string
        claimId:
          type: string
        instanceId:
          type: string
      required:
        - provider
      additionalProperties: false
      type: object
    iScheduleTokenRefreshSuccessResponse:
      properties:
        message:
          type: string
        docId:
          type: string
      required:
        - message
        - docId
      additionalProperties: false
      type: object
    iSignWithEmbeddedWalletPayload:
      properties:
        message:
          type: string
      required:
        - message
      additionalProperties: false
      type: object
    iSignWithEmbeddedWalletSuccessResponse:
      properties:
        signature:
          type: string
          examples: *ref_16
      required:
        - signature
      additionalProperties: false
      type: object
    iCheckClaimSuccessPayload:
      additionalProperties: false
      type: object
    iCheckClaimSuccessSuccessResponse:
      properties:
        successCount:
          type: number
        claimNumbers:
          items:
            type: number
          description: >-
            If indexed, the claim numbers that were successfully completed
            (zero-based)
          type: array
      required:
        - successCount
      additionalProperties: false
      type: object
    iGetCollectionAmountTrackerByIdPayload:
      additionalProperties: false
      type: object
    iGetCollectionAmountTrackerByIdSuccessResponse:
      properties:
        amountTracker:
          $ref: '#/components/schemas/iApprovalTrackerDoc'
      required:
        - amountTracker
      additionalProperties: false
      type: object
    iGetCollectionChallengeTrackerByIdPayload:
      additionalProperties: false
      type: object
    iGetCollectionChallengeTrackerByIdSuccessResponse:
      properties:
        challengeTracker:
          $ref: '#/components/schemas/iApprovalTrackerDoc'
      required:
        - challengeTracker
      additionalProperties: false
      type: object
    iGetMapsPayload:
      properties:
        mapIds:
          items:
            type: string
          description: The IDs of the maps to fetch.
          type: array
      required:
        - mapIds
      additionalProperties: false
      type: object
    iGetMapsSuccessResponse:
      properties:
        maps:
          items:
            $ref: '#/components/schemas/iMapWithValues'
          type: array
      required:
        - maps
      additionalProperties: false
      type: object
    iGetMapValuesPayload:
      properties:
        mapId:
          description: The map ID to fetch.
          type: string
        keys:
          items:
            type: string
          description: The values to fetch for each map.
          type: array
      required:
        - mapId
        - keys
      additionalProperties: false
      type: object
    iGetMapValuesSuccessResponse:
      properties:
        values:
          items:
            properties:
              mapId:
                type: string
              values:
                additionalProperties:
                  $ref: '#/components/schemas/iValueStore'
                type: object
            required:
              - mapId
              - values
            additionalProperties: false
            type: object
          type: array
      required:
        - values
      additionalProperties: false
      type: object
    iGetMapPayload:
      additionalProperties: false
      type: object
    iGetMapSuccessResponse:
      properties:
        map:
          $ref: '#/components/schemas/iMapWithValues'
      required:
        - map
      additionalProperties: false
      type: object
    iGetMapValuePayload:
      additionalProperties: false
      type: object
    iGetMapValueSuccessResponse:
      properties:
        key:
          type: string
        value:
          type: string
        lastSetBy:
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - key
        - value
        - lastSetBy
      additionalProperties: false
      description: ''
      type: object
    iBitBadgesCollection:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/CollectionId'
        collectionMetadataTimeline:
          allOf:
            - items:
                $ref: '#/components/schemas/iCollectionMetadataTimeline'
              description: The collection metadata timeline
              type: array
            - items:
                $ref: '#/components/schemas/iCollectionMetadataTimeline'
              description: >-
                The collection metadata timeline for this collection, with
                off-chain metadata populated.
              type: array
        badgeMetadataTimeline:
          allOf:
            - items:
                $ref: '#/components/schemas/iBadgeMetadataTimeline'
              description: The token metadata timeline
              type: array
            - items:
                $ref: '#/components/schemas/iBadgeMetadataTimeline'
              description: >-
                The token metadata timeline for this collection, with off-chain
                metadata populated.
              type: array
        balancesType:
          enum:
            - Standard
            - Off-Chain - Indexed
            - Non-Public
            - Off-Chain - Non-Indexed
          description: >-
            The type of balances (i.e. "Standard", "Off-Chain - Indexed",
            "Non-Public, "Off-Chain - Non-Indexed")
          type: string
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          description: The off-chain balances metadata timeline
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
          description: The custom data timeline
          type: array
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          description: The manager timeline
          type: array
        collectionApprovals:
          allOf:
            - items:
                $ref: '#/components/schemas/iCollectionApproval'
              description: The collection approved transfers timeline
              type: array
            - items:
                $ref: '#/components/schemas/iCollectionApproval'
              description: >-
                The collection approvals for this collection, with off-chain
                metadata populated.
              type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
          description: The standards timeline
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
          description: The is archived timeline
          type: array
        createdBy:
          description: The BitBadges address of the user who created this collection
          $ref: '#/components/schemas/BitBadgesAddress'
        createdBlock:
          description: The block number when this collection was created
          $ref: '#/components/schemas/NumberType'
        createdTimestamp:
          description: >-
            The timestamp when this collection was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this collection
          type: array
        validBadgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: Valid token IDs for the collection
          type: array
        collectionPermissions:
          description: >-
            The collection permissions for this collection, with off-chain
            metadata populated.
          $ref: '#/components/schemas/iCollectionPermissions'
        defaultBalances:
          description: >-
            The default balances for users upon genesis, with off-chain metadata
            populated.
          $ref: '#/components/schemas/iUserBalanceStore'
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          description: >-
            The fetched activity for this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          description: >-
            The fetched owners of this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        challengeTrackers:
          items:
            $ref: '#/components/schemas/iMerkleChallengeTrackerDoc'
          description: >-
            The fetched merkle challenge trackers for this collection. Returned
            collections will only fetch the current page. Use the pagination to
            fetch more. To be used in conjunction with views.
          type: array
        approvalTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
          description: >-
            The fetched approval trackers for this collection. Returned
            collections will only fetch the current page. Use the pagination to
            fetch more. To be used in conjunction with views.
          type: array
        listings:
          items:
            $ref: '#/components/schemas/iUtilityPageDoc'
          description: The listings for this collection.
          type: array
        nsfw:
          description: The token IDs in this collection that are marked as NSFW.
          $ref: '#/components/schemas/iCollectionNSFW'
        reported:
          description: The token IDs in this collection that have been reported.
          $ref: '#/components/schemas/iCollectionNSFW'
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                type: array
              type:
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          description: >-
            The views for this collection and their pagination Doc. Views will
            only include the doc _ids. Use the pagination to fetch more. For
            example, if you want to fetch the activity for a view, you would use
            the view's pagination to fetch the doc _ids, then use the
            corresponding activity array to find the matching docs.
          type: object
        claims:
          items:
            $ref: '#/components/schemas/iClaimDetails'
          description: >-
            Details about any off-chain claims for this collection. Only
            applicable when outsourced to BitBadges.
          type: array
      required:
        - _docId
        - collectionId
        - collectionMetadataTimeline
        - badgeMetadataTimeline
        - balancesType
        - offChainBalancesMetadataTimeline
        - customDataTimeline
        - managerTimeline
        - collectionApprovals
        - standardsTimeline
        - isArchivedTimeline
        - createdBy
        - createdBlock
        - createdTimestamp
        - updateHistory
        - validBadgeIds
        - collectionPermissions
        - defaultBalances
        - activity
        - owners
        - challengeTrackers
        - approvalTrackers
        - listings
        - views
        - claims
      additionalProperties: false
      description: ''
      type: object
    iCollectionNSFW:
      properties:
        badgeIds:
          examples: *ref_18
        reason:
          type: string
      required:
        - badgeIds
        - reason
      additionalProperties: false
      type: object
    iGetCollectionsPayload:
      properties:
        collectionsToFetch:
          items:
            $ref: '#/components/schemas/GetCollectionRequestBody'
          type: array
      required:
        - collectionsToFetch
      additionalProperties: false
      type: object
    iGetCollectionsSuccessResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
          type: array
      required:
        - collections
      additionalProperties: false
      type: object
    iSiwbbChallenge:
      properties:
        address:
          description: The user's address
          type: string
        chain:
          description: The chain of the address
          $ref: '#/components/schemas/SupportedChain'
        ownershipRequirements:
          description: The ownership requirements for the user
          $ref: '#/components/schemas/AssetConditionGroup'
        bitbadgesAddress:
          description: >-
            The converted BitBadges address of params.address. This can be used
            as the

            unique identifier for the user (e.g. avoid duplicate sign ins from
            equivalent 0x and bb1 addresses).
          examples: *ref_8
          $ref: '#/components/schemas/BitBadgesAddress'
        verificationResponse:
          properties:
            success:
              description: >-
                Returns whether the current (message, signature) pair is valid
                and verified (i.e. signature is valid and any assets are owned).
              type: boolean
            errorMessage:
              description: Returns the response message returned from verification.
              type: string
          required:
            - success
          additionalProperties: false
          description: Verification response
          type: object
        attestations:
          items:
            $ref: '#/components/schemas/iAttestationsProof'
          description: Derived data integrity proofs for any attestations requested.
          type: array
      required:
        - address
        - chain
        - bitbadgesAddress
      additionalProperties: false
      type: object
    VerifySIWBBOptions:
      properties:
        issuedAtTimeWindowMs:
          description: >-
            How recent the challenge must be in milliseconds. Defaults to 10
            minutes. If 0, we will not check the time.
          type: number
        skipAssetVerification:
          description: >-
            Skip asset verification. This may be useful for simulations or
            testing.

            @deprecated Please do not use. Check requirements a claim or other
            means.
          type: boolean
      additionalProperties: false
      type: object
    AdditionalQueryParams:
      properties:
        claimId:
          description: >-
            We will display this claim on the authorize screen. Just for display
            purpses. This is still to be checked by you post-authentication.
          type: string
        hideIfAlreadyClaimed:
          description: >-
            For the claimId, we will hide the claim if the user has already
            completed it (successCount >= 1).
          type: boolean
        expectVerifySuccess:
          description: >-
            We will expect the claim verification to succeed. If false, we will
            not let user attempt to sign in.


            Note: This is not a replacement for checking the claim on your side
            because users can manipulate the client-side URL parameters.
          type: boolean
        expectAttestations:
          description: >-
            We will expect the user to provide attestations. Consider adding an
            additional instructions to the user for which ones

            to present. You still need to check the attestations on your side.

            @deprecated It is preferred to receive attestations via claims
            instead.
          type: boolean
      additionalProperties: false
      type: object
    CodeGenQueryParams:
      properties:
        claimId:
          description: >-
            We will display this claim on the authorize screen. Just for display
            purpses. This is still to be checked by you post-authentication.
          type: string
        hideIfAlreadyClaimed:
          description: >-
            For the claimId, we will hide the claim if the user has already
            completed it (successCount >= 1).
          type: boolean
        expectVerifySuccess:
          description: >-
            We will expect the claim verification to succeed. If false, we will
            not let user attempt to sign in.


            Note: This is not a replacement for checking the claim on your side
            because users can manipulate the client-side URL parameters.
          type: boolean
        expectAttestations:
          description: >-
            We will expect the user to provide attestations. Consider adding an
            additional instructions to the user for which ones

            to present. You still need to check the attestations on your side.

            @deprecated It is preferred to receive attestations via claims
            instead.
          type: boolean
        redirect_uri:
          description: >-
            The redirect URI to redirect to after the user signs in. Must match
            the one in developer portal.
          type: string
        client_id:
          description: >-
            The client ID to use for the SIWBB request. Must match the one in
            developer portal.
          type: string
        state:
          description: The state to use for the SIWBB request.
          type: string
        scope:
          description: >-
            The scopes to request (e.g.
            `completeClaims,approveSignInWithBitBadges`).
          type: string
      required:
        - client_id
      additionalProperties: false
      type: object
    iOffChainBalancesMap:
      additionalProperties:
        items:
          $ref: '#/components/schemas/iBalance'
        type: array
      type: object
    iTransferWithIncrements:
      properties:
        from:
          description: The address to transfer from.
          $ref: '#/components/schemas/BitBadgesAddress'
        toAddresses:
          items:
            $ref: '#/components/schemas/BitBadgesAddress'
          description: The addresses to transfer to.
          type: array
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The balances to transfer.
          type: array
        precalculateBalancesFromApproval:
          description: >-
            If specified, we will precalculate from this approval and override
            the balances. This can only be used when the specified approval has
            predeterminedBalances set.
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
        merkleProofs:
          items:
            $ref: '#/components/schemas/iMerkleProof'
          description: >-
            The merkle proofs that satisfy the mkerkle challenges in the
            approvals. If the transfer deducts from multiple approvals, we check
            all the merkle proofs and assert at least one is valid for every
            challenge.
          type: array
        memo:
          description: Arbitrary memo for the transfer.
          type: string
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            The prioritized approvals to use for the transfer. If specified, we
            will check these first.
          type: array
        onlyCheckPrioritizedCollectionApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "collection" level approvals specified.
          type: boolean
        onlyCheckPrioritizedIncomingApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "incoming" level approvals specified.
          type: boolean
        onlyCheckPrioritizedOutgoingApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "outgoing" level approvals specified.
          type: boolean
        toAddressesLength:
          description: >-
            The number of addresses to send the tokens to. This takes priority
            over toAddresses.length (used when you don't know exact addresses
            (i.e. you know number of codes)).
          $ref: '#/components/schemas/NumberType'
        incrementBadgeIdsBy:
          description: The number to increment the badgeIDs by for each transfer.
          $ref: '#/components/schemas/NumberType'
        incrementOwnershipTimesBy:
          description: The number to increment the ownershipTimes by for each transfer.
          $ref: '#/components/schemas/NumberType'
        durationFromTimestamp:
          description: The number of unix milliseconds to approve starting from now.
          $ref: '#/components/schemas/NumberType'
      required:
        - from
        - toAddresses
        - balances
      additionalProperties: false
      type: object
    iBatchTokenDetails:
      properties:
        collectionId:
          description: The collection ID of this element's token details.
          $ref: '#/components/schemas/CollectionId'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The corresponding token IDs for this collection ID.
          type: array
          examples: *ref_18
      required:
        - collectionId
        - badgeIds
      additionalProperties: false
      type: object
    iChallengeDetails:
      properties:
        leaves:
          items:
            type: string
          description: >-
            The leaves of the Merkle tree. Leaves should be considered public.
            Use preimages for the private codes + isHashed. For whitelist trees,
            these can be the plaintext BitBadges addresses.
          type: array
        isHashed:
          description: True if the leaves are hashed. Hash(preimage[i]) = leaves[i]
          type: boolean
        preimages:
          items:
            type: string
          description: >-
            The preimages of the leaves (only used if isHashed = true).
            Oftentimes, this is used for private codes so should not be present
            when user-facing.
          type: array
        seedCode:
          description: Seed code for generating the leaves
          type: string
        tree:
          description: The Merkle tree
        treeOptions:
          description: The Merkle tree options for how to build it
        numLeaves:
          description: >-
            The number of leaves in the Merkle tree. This takes priority over
            leaves.length if defined (used for buffer time between leaf
            generation and leaf length select)
          $ref: '#/components/schemas/NumberType'
        currCode:
          description: >-
            The current code being used for the challenge. Used behind the
            scenes
          $ref: '#/components/schemas/NumberType'
      required:
        - leaves
        - isHashed
      additionalProperties: false
      examples:
        - >-
          Codes

          1. Generate N codes privately

          2. Hash each code

          3. Store the hashed codes publicly on IPFS via this struct

          4. When a user enters a code, we hash it and check if it matches any
          of the hashed codes. This way, the codes are never stored publicly on
          IPFS and only known by the generator of the codes.
        - >-
          Whitelist

          For storing a public whitelist of addresses (with
          useCreatorAddressAsLeaf = true), hashing complicates everything
          because the whitelist can be stored publicly.

          1. Generate N whitelist addresses

          2. Store the addresses publicly on IPFS via this struct

          3. When a user enters an address, we check if it matches any of the
          addresses.
      type: object
    iChallengeInfoDetails:
      properties:
        challengeDetails:
          description: The challenge details of the claim / approval
          $ref: '#/components/schemas/iChallengeDetails'
        claim:
          $ref: '#/components/schemas/iClaimDetails'
      required:
        - challengeDetails
      additionalProperties: false
      type: object
    iChallengeInfoDetailsUpdate:
      properties:
        challengeDetails:
          description: The challenge details of the claim / approval
          $ref: '#/components/schemas/iChallengeDetails'
        claim:
          $ref: '#/components/schemas/CreateClaimRequest'
      required:
        - challengeDetails
      additionalProperties: false
      type: object
    iApprovalInfoDetails:
      properties:
        name:
          description: The name of the claim
          type: string
          examples: *ref_13
        description:
          description: >-
            The description of the claim. This describes how to earn and claim
            the badge.
          type: string
          examples: *ref_9
        image:
          description: The image of the claim
          type: string
          examples: *ref_12
      required:
        - name
        - description
        - image
      additionalProperties: false
      type: object
    iCosmosCoin:
      properties:
        amount:
          description: The amount of the coin.
          $ref: '#/components/schemas/NumberType'
        denom:
          description: The denomination of the coin (e.g. "badge").
          type: string
      required:
        - amount
        - denom
      additionalProperties: false
      type: object
    PermissionNameString:
      enum:
        - canDeleteCollection
        - canArchiveCollection
        - canUpdateOffChainBalancesMetadata
        - canUpdateBadgeMetadata
        - canUpdateCollectionMetadata
        - canUpdateValidBadgeIds
        - canUpdateCollectionApprovals
        - canUpdateAutoApproveSelfInitiatedIncomingTransfers
        - canUpdateAutoApproveSelfInitiatedOutgoingTransfers
        - canUpdateAutoApproveAllIncomingTransfers
        - canUpdateStandards
        - canUpdateCustomData
        - canUpdateManager
      type: string
    VerifyAttestationSignaturesParameters:
      properties:
        scheme:
          description: Must be 'bbs' or 'standard'
          type: string
        messages:
          items:
            type: string
          description: The messages to attest to. Must be length 1 for standard
          type: array
          examples: *ref_26
        messageFormat:
          enum:
            - json
            - plaintext
          type: string
        dataIntegrityProof:
          properties:
            signature:
              description: The signature of the attestation.
              type: string
              examples: *ref_16
            signer:
              description: The signer of the attestation.
              type: string
              examples: *ref_17
            publicKey:
              description: The public key of the signer (if needed)
              type: string
              examples: *ref_15
            isDerived:
              description: Whether the proof is derived. Only applicable for BBS.
              type: boolean
          required:
            - signature
            - signer
          additionalProperties: false
          description: |-
            The data integrity proof.

            For standard, this is the signature of the attestation.
            For BBS, this is the actual BBS signature.
          type: object
        proofOfIssuance:
          properties:
            message:
              description: The message of the proof of issuance.
              type: string
            signature:
              description: The signature of the proof of issuance.
              type: string
              examples: *ref_16
            signer:
              description: The signer of the proof of issuance.
              type: string
              examples: *ref_17
            publicKey:
              description: The public key of the signer (if needed)
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            The proof of issuance. Must be provided for BBS. Leave blank for
            standard.
          type: object
      required:
        - scheme
        - messages
        - messageFormat
      additionalProperties: false
      type: object
    Validator:
      properties:
        commission:
          properties:
            commission_rates:
              properties:
                max_change_rate:
                  type: string
                max_rate:
                  type: string
                rate:
                  type: string
              required:
                - max_change_rate
                - max_rate
                - rate
              additionalProperties: false
              type: object
            update_time:
              type: string
          required:
            - commission_rates
            - update_time
          additionalProperties: false
          type: object
        consensus_pubkey:
          properties:
            "'@type'":
              type: string
            key:
              type: string
          required:
            - "'@type'"
            - key
          additionalProperties: false
          type: object
        delegator_shares:
          type: string
        description:
          properties:
            details:
              type: string
            identity:
              type: string
            moniker:
              type: string
            security_contact:
              type: string
            website:
              type: string
          required:
            - details
            - identity
            - moniker
            - security_contact
            - website
          additionalProperties: false
          type: object
          examples: *ref_9
        jailed:
          type: boolean
        min_self_delegation:
          type: string
        operator_address:
          type: string
        status:
          type: string
        tokens:
          type: string
        unbonding_height:
          type: string
        unbonding_time:
          type: string
      required:
        - commission
        - consensus_pubkey
        - delegator_shares
        - description
        - jailed
        - min_self_delegation
        - operator_address
        - status
        - tokens
        - unbonding_height
        - unbonding_time
      additionalProperties: false
      type: object
    GetValidatorsResponse:
      properties:
        validators:
          items:
            $ref: '#/components/schemas/Validator'
          type: array
        pagination:
          properties:
            next_key:
              type: string
            total:
              type: number
          required:
            - next_key
            - total
          additionalProperties: false
          type: object
      required:
        - validators
        - pagination
      additionalProperties: false
      type: object
    UndelegationResponse:
      properties:
        delegator_address:
          type: string
        validator_address:
          type: string
        entries:
          items:
            - properties:
                creation_height:
                  type: string
                completion_time:
                  type: string
                initial_balance:
                  type: string
                balance:
                  type: string
              required:
                - creation_height
                - completion_time
                - initial_balance
                - balance
              additionalProperties: false
              type: object
          additionalItems: false
          minItems: 1
          type: array
      required:
        - delegator_address
        - validator_address
        - entries
      additionalProperties: false
      type: object
    GetUndelegationsResponse:
      properties:
        unbonding_responses:
          items:
            $ref: '#/components/schemas/UndelegationResponse'
          type: array
        pagination:
          properties:
            next_key:
              type: string
            total:
              type: string
          required:
            - next_key
            - total
          additionalProperties: false
          type: object
      required:
        - unbonding_responses
        - pagination
      additionalProperties: false
      type: object
    CounterParty:
      properties:
        port_id:
          type: string
        channel_id:
          type: string
      required:
        - port_id
        - channel_id
      additionalProperties: false
      type: object
    Channel:
      properties:
        state:
          type: string
        ordering:
          type: string
        counterparty:
          $ref: '#/components/schemas/CounterParty'
        connection_hops:
          items:
            type: string
          type: array
        version:
          type: string
        port_id:
          type: string
        channel_id:
          type: string
      required:
        - state
        - ordering
        - counterparty
        - connection_hops
        - version
        - port_id
        - channel_id
      additionalProperties: false
      type: object
    ChannelsResponse:
      properties:
        channels:
          items:
            $ref: '#/components/schemas/Channel'
          type: array
        pagination:
          properties:
            next_key:
              type: string
            total:
              type: string
          required:
            - total
          additionalProperties: false
          type: object
        height:
          properties:
            revision_number:
              type: string
            revision_height:
              type: string
          required:
            - revision_number
            - revision_height
          additionalProperties: false
          type: object
      required:
        - channels
        - pagination
        - height
      additionalProperties: false
      type: object
    TallyResponse:
      properties:
        tally:
          properties:
            'yes':
              type: string
            abstain:
              type: string
            'no':
              type: string
            no_with_veto:
              type: string
          required:
            - 'yes'
            - abstain
            - 'no'
            - no_with_veto
          additionalProperties: false
          type: object
      required:
        - tally
      additionalProperties: false
      type: object
    AccountResponse:
      properties:
        account:
          properties:
            "'@type'":
              type: string
            base_account:
              properties:
                address:
                  type: string
                pub_key:
                  properties:
                    "'@type'":
                      type: string
                    key:
                      type: string
                  required:
                    - "'@type'"
                    - key
                  additionalProperties: false
                  type: object
                account_number:
                  type: string
                sequence:
                  type: string
              required:
                - address
                - account_number
                - sequence
              additionalProperties: false
              type: object
          required:
            - "'@type'"
            - base_account
          additionalProperties: false
          type: object
      required:
        - account
      additionalProperties: false
      type: object
    BroadcastPostBody:
      properties:
        tx_bytes: {}
        mode:
          type: string
      required:
        - tx_bytes
        - mode
      additionalProperties: false
      type: object
    EncodeObject:
      properties:
        typeUrl:
          type: string
        value: {}
      required:
        - typeUrl
        - value
      additionalProperties: false
      description: Must convert to a Thorchain address. Throws when cannot convert.
      type: object
    AminoConverter:
      properties:
        aminoType:
          type: string
        toAmino: {}
        fromAmino: {}
      required:
        - aminoType
        - toAmino
        - fromAmino
      additionalProperties: false
      type: object
    AminoConverters:
      description: >-
        A map from protobuf type URL to the AminoConverter implementation if
        supported on chain
    TxContext:
      properties:
        testnet:
          description: Use the BitBadges testnet? Usee mainnet by default.
          type: boolean
        chainIdOverride:
          description: >-
            Override the chain ID to a custom value. Uses BitBadges mainnet by
            default.
          type: string
        sender:
          properties:
            address:
              $ref: '#/components/schemas/NativeAddress'
            sequence:
              type: number
            accountNumber:
              type: number
            publicKey:
              type: string
              examples: *ref_15
          required:
            - address
            - sequence
            - accountNumber
          additionalProperties: false
          description: >-
            Details about the sender of this transaction. Address should be in
            their NATIVE format.

            We use this to determine the approach.


            Public key is ONLY needed for Cosmos based signatures.
          type: object
        fee:
          $ref: '#/components/schemas/Fee'
        memo:
          type: string
      required:
        - sender
        - fee
      additionalProperties: false
      description: LegacyTxContext is the transaction context for the transaction payload.
      type: object
    EIP712ToSign:
      properties:
        types:
          type: object
        primaryType:
          type: string
        domain:
          properties:
            name:
              type: string
              examples: *ref_13
            version:
              type: string
            chainId:
              type: number
            verifyingContract:
              type: string
            salt:
              type: string
          required:
            - name
            - version
            - chainId
            - verifyingContract
            - salt
          additionalProperties: false
          type: object
          examples: *ref_0
        message:
          type: object
      required:
        - types
        - primaryType
        - domain
        - message
      additionalProperties: false
      description: >-
        EI712ToSign represents a signable EIP-712 payload that can be signed
        using MetaMask or Keplr.
      type: object
    Fee:
      properties:
        amount:
          type: string
        denom:
          type: string
        gas:
          type: string
      required:
        - amount
        - denom
        - gas
      additionalProperties: false
      description: Fee represents a Cosmos SDK transaction fee object.
      type: object
    Sender:
      properties:
        accountAddress:
          $ref: '#/components/schemas/BitBadgesAddress'
        sequence:
          type: number
        accountNumber:
          type: number
        pubkey:
          type: string
      required:
        - accountAddress
        - sequence
        - accountNumber
        - pubkey
      additionalProperties: false
      description: >-
        Sender represents a Cosmos SDK Transaction signer.

        @remarks A sender object is used to populate the Cosmos SDK's SignerInfo
        field,

        which is used to declare transaction signers.
      type: object
    Chain:
      properties:
        chainId:
          type: number
        cosmosChainId:
          type: string
        chain:
          $ref: '#/components/schemas/SupportedChain'
      required:
        - chainId
        - cosmosChainId
        - chain
      additionalProperties: false
      description: Chain represents the base chain's chainID.
      type: object
    AminoMsg:
      properties:
        type:
          type: string
        value: {}
      required:
        - type
        - value
      additionalProperties: false
      type: object
    StdFee:
      properties:
        amount: {}
        gas:
          type: string
        granter:
          description: The granter address that is used for paying with feegrants
          type: string
        payer:
          description: The fee payer address. The payer must have signed the transaction.
          type: string
      required:
        - amount
        - gas
      additionalProperties: false
      type: object
    StdSignDoc:
      properties:
        chain_id:
          type: string
        account_number:
          type: string
        sequence:
          type: string
        fee:
          $ref: '#/components/schemas/StdFee'
        msgs: {}
        memo:
          type: string
        timeout_height:
          type: string
      required:
        - chain_id
        - account_number
        - sequence
        - fee
        - msgs
        - memo
      additionalProperties: false
      description: >-
        The document to be signed


        @see https
        ://docs.cosmos.network/master/modules/auth/03_types.html#stdsigndoc
      type: object
    iMsgInstantiateContractCompat:
      properties:
        sender:
          description: The sender of the transaction.
          type: string
        codeId:
          description: The code ID of the contract to instantiate.
          type: string
        label:
          description: The human-readable label of the contract.
          type: string
        funds:
          description: The amount of funds to send to the contract on instantiation.
          type: string
      required:
        - sender
        - codeId
        - label
        - funds
      additionalProperties: false
      type: object
    iMsgStoreCodeCompat:
      properties:
        sender:
          description: The sender of the transaction.
          type: string
        hexWasmByteCode:
          description: >-
            The contract byte code in hexadecimal format. See BitBadges CosmWASM
            tutorial for more details.
          type: string
      required:
        - sender
        - hexWasmByteCode
      additionalProperties: false
      type: object
    iMsgExecuteContractCompat:
      properties:
        sender:
          description: The sender of the transaction.
          type: string
        contract:
          description: The contract address to execute.
          type: string
        msg:
          description: The message to pass to the contract. Must be a valid JSON string.
          type: string
        funds:
          description: The funds to send to the contract. Must be a valid JSON string.
          type: string
      required:
        - sender
        - contract
        - msg
        - funds
      additionalProperties: false
      type: object
    iValueStore:
      properties:
        key:
          type: string
        value:
          type: string
        lastSetBy:
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - key
        - value
        - lastSetBy
      additionalProperties: false
      type: object
    iMapUpdateCriteria:
      properties:
        managerOnly:
          type: boolean
        collectionId:
          $ref: '#/components/schemas/NumberType'
        creatorOnly:
          type: boolean
        firstComeFirstServe:
          type: boolean
      required:
        - managerOnly
        - collectionId
        - creatorOnly
        - firstComeFirstServe
      additionalProperties: false
      type: object
    iValueOptions:
      properties:
        noDuplicates:
          type: boolean
        permanentOnceSet:
          type: boolean
        expectUint:
          type: boolean
        expectBoolean:
          type: boolean
        expectAddress:
          type: boolean
        expectUri:
          type: boolean
      required:
        - noDuplicates
        - permanentOnceSet
        - expectUint
        - expectBoolean
        - expectAddress
        - expectUri
      additionalProperties: false
      type: object
    iMapPermissions:
      properties:
        canUpdateMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          type: array
        canUpdateManager:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          type: array
        canDeleteMap:
          items:
            $ref: '#/components/schemas/iActionPermission'
          type: array
      required:
        - canUpdateMetadata
        - canUpdateManager
        - canDeleteMap
      additionalProperties: false
      type: object
    iMap:
      properties:
        creator:
          $ref: '#/components/schemas/BitBadgesAddress'
        mapId:
          type: string
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          type: array
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
        defaultValue:
          type: string
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
          type: array
      required:
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - permissions
        - metadataTimeline
      additionalProperties: false
      type: object
    iMapMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
          examples: &ref_34
            - - start: '1713301889'
                end: '2000000000'
            - - start: '1'
                end: '18446744073709551615'
        metadata:
          $ref: '#/components/schemas/iCollectionMetadata'
      required:
        - timelineTimes
        - metadata
      additionalProperties: false
      type: object
    iMsgCreateMap:
      properties:
        creator:
          $ref: '#/components/schemas/BitBadgesAddress'
        mapId:
          type: string
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          type: array
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
        defaultValue:
          type: string
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
          type: array
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
      required:
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - metadataTimeline
        - permissions
      additionalProperties: false
      type: object
    iMsgUpdateMap:
      properties:
        creator:
          $ref: '#/components/schemas/BitBadgesAddress'
        mapId:
          type: string
        updateManagerTimeline:
          type: boolean
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          type: array
        updateMetadataTimeline:
          type: boolean
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
          type: array
        updatePermissions:
          type: boolean
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
      required:
        - creator
        - mapId
        - updateManagerTimeline
        - managerTimeline
        - updateMetadataTimeline
        - metadataTimeline
        - updatePermissions
        - permissions
      additionalProperties: false
      type: object
    iMsgDeleteMap:
      properties:
        creator:
          $ref: '#/components/schemas/BitBadgesAddress'
        mapId:
          type: string
      required:
        - creator
        - mapId
      additionalProperties: false
      type: object
    iMsgSetValue:
      properties:
        creator:
          $ref: '#/components/schemas/BitBadgesAddress'
        mapId:
          type: string
        key:
          type: string
        value:
          type: string
        options:
          $ref: '#/components/schemas/iSetOptions'
      required:
        - creator
        - mapId
        - key
        - value
        - options
      additionalProperties: false
      type: object
    iSetOptions:
      properties:
        useMostRecentCollectionId:
          type: boolean
      required:
        - useMostRecentCollectionId
      additionalProperties: false
      type: object
    iMsgCreateCollection:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/BitBadgesAddress'
        balancesType:
          description: >-
            The balances type. Either "Standard", "Off-Chain - Indexed",
            "Off-Chain - Non-Indexed" or "Non-Public"
          type: string
        defaultBalances:
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only can be set on initial creation. Only used if
            collection has "Standard" balance type.
          $ref: '#/components/schemas/iUserBalanceStore'
        validBadgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: >-
            The tokens to create. Newly created tokens will be sent to the
            "Mint" address. Must have necessary permissions in future
            transactions to update. However, no restrictions in this genesis
            Msg. Only used if collection has "Standard" balance type.
          type: array
        collectionPermissions:
          description: >-
            The new collection permissions. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg.
          $ref: '#/components/schemas/iCollectionPermissions'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          description: >-
            The new manager timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
          description: >-
            The new collection metadata timeline. Must have the necessary
            permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
          description: >-
            The new token metadata timeline. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg. Note we take first-match only for token IDs, so do not
            define duplicates.
          type: array
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          description: >-
            The new off-chain balances metadata timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg. Only used if "Off-Chain - Indexed"
            or "Off-Chain - Non-Indexed" balance type.
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
          description: >-
            The new custom data timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
          description: >-
            The new collection approved transfers timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
          description: >-
            The new standards timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
          description: >-
            The new is archived timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        creatorOverride:
          description: Creator override. Internal only. Only used for CosmWasm purposes.
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - creator
        - creatorOverride
      additionalProperties: false
      type: object
    iMsgDeleteCollection:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/BitBadgesAddress'
        collectionId:
          description: The ID of the collection to delete.
          $ref: '#/components/schemas/CollectionId'
        creatorOverride:
          description: Creator override. Internal only. Only used for CosmWasm purposes.
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - creator
        - collectionId
        - creatorOverride
      additionalProperties: false
      type: object
    iMsgTransferBadges:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/BitBadgesAddress'
        collectionId:
          description: The ID of the collection to transfer tokens from.
          $ref: '#/components/schemas/CollectionId'
        transfers:
          items:
            $ref: '#/components/schemas/iTransfer'
          description: The transfers to perform.
          type: array
        creatorOverride:
          description: Creator override. Internal only. Only used for CosmWasm purposes.
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - creator
        - collectionId
        - transfers
        - creatorOverride
      additionalProperties: false
      type: object
    iMsgUniversalUpdateCollection:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/BitBadgesAddress'
        balancesType:
          description: >-
            The balances type. Either "Standard", "Off-Chain - Indexed",
            "Off-Chain - Non-Indexed" or "Non-Public"
          type: string
        defaultBalances:
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only can be set on initial creation. Only used if
            collection has "Standard" balance type.
          $ref: '#/components/schemas/iUserBalanceStore'
        validBadgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: >-
            The tokens to create. Newly created tokens will be sent to the
            "Mint" address. Must have necessary permissions in future
            transactions to update. However, no restrictions in this genesis
            Msg. Only used if collection has "Standard" balance type.
          type: array
        collectionPermissions:
          description: >-
            The new collection permissions. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg.
          $ref: '#/components/schemas/iCollectionPermissions'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          description: >-
            The new manager timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
          description: >-
            The new collection metadata timeline. Must have the necessary
            permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
          description: >-
            The new token metadata timeline. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg. Note we take first-match only for token IDs, so do not
            define duplicates.
          type: array
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          description: >-
            The new off-chain balances metadata timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg. Only used if "Off-Chain - Indexed"
            or "Off-Chain - Non-Indexed" balance type.
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
          description: >-
            The new custom data timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
          description: >-
            The new collection approved transfers timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
          description: >-
            The new standards timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
          description: >-
            The new is archived timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        creatorOverride:
          description: Creator override. Internal only. Only used for CosmWasm purposes.
          $ref: '#/components/schemas/BitBadgesAddress'
        collectionId:
          description: The ID of the collection to update.
          $ref: '#/components/schemas/CollectionId'
        updateCollectionPermissions:
          description: Whether or not to update the collection permissions.
          type: boolean
        updateManagerTimeline:
          description: Whether or not to update the manager timeline.
          type: boolean
        updateCollectionMetadataTimeline:
          description: Whether or not to update the collection metadata timeline.
          type: boolean
        updateBadgeMetadataTimeline:
          description: Whether or not to update the token metadata timeline.
          type: boolean
        updateOffChainBalancesMetadataTimeline:
          description: Whether or not to update the off-chain balances metadata timeline.
          type: boolean
        updateCustomDataTimeline:
          description: Whether or not to update the custom data timeline.
          type: boolean
        updateCollectionApprovals:
          description: Whether or not to update the collection approved transfers timeline.
          type: boolean
        updateStandardsTimeline:
          description: Whether or not to update the standards timeline.
          type: boolean
        updateIsArchivedTimeline:
          description: Whether or not to update the is archived timeline.
          type: boolean
        updateValidBadgeIds:
          description: Whether or not to update the valid token IDs.
          type: boolean
      required:
        - creator
        - creatorOverride
        - collectionId
      additionalProperties: false
      type: object
    iMsgUpdateCollection:
      additionalProperties: false
      type: object
    iMsgUpdateUserApprovals:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/BitBadgesAddress'
        collectionId:
          description: The ID of the collection to transfer tokens from.
          $ref: '#/components/schemas/CollectionId'
        updateOutgoingApprovals:
          description: Whether or not to update the outgoing approvals.
          type: boolean
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: >-
            The new outgoing approvals. Must have the necessary permissions to
            update.
          type: array
        updateIncomingApprovals:
          description: Whether or not to update the incoming approvals.
          type: boolean
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: >-
            The new incoming approvals. Must have the necessary permissions to
            update.
          type: array
        updateAutoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether or not to update the auto approve self initiated outgoing
            transfers (i.e. from == the user and initiator == the user).
          type: boolean
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            The new auto approve self initiated outgoing transfers. Must have
            the necessary permissions to update.
          type: boolean
        updateAutoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether or not to update the auto approve self initiated incoming
            transfers (i.e. to == the user and initiator == the user).
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            The new auto approve self initiated incoming transfers. Must have
            the necessary permissions to update.
          type: boolean
        updateAutoApproveAllIncomingTransfers:
          description: Whether or not to update the auto approve all incoming transfers.
          type: boolean
        autoApproveAllIncomingTransfers:
          description: >-
            The new auto approve all incoming transfers. Must have the necessary
            permissions to update.
          type: boolean
        updateUserPermissions:
          description: Whether or not to update the user permissions.
          type: boolean
        userPermissions:
          description: >-
            The new user permissions. Must have the necessary permissions to
            update.
          $ref: '#/components/schemas/iUserPermissions'
        creatorOverride:
          description: Creator override. Internal only. Only used for CosmWasm purposes.
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - creator
        - collectionId
        - creatorOverride
      additionalProperties: false
      type: object
    ParsedQs:
      additionalProperties:
        anyOf:
          - type: string
          - items:
              type: string
            type: array
          - $ref: '#/components/schemas/ParsedQs'
          - items:
              $ref: '#/components/schemas/ParsedQs'
            type: array
      type: object
    ConvertOptions:
      properties:
        keepOriginalObject:
          description: >-
            Same object as the one passed in the convert function.


            By default, we create a deep copy of the object, but you can specify
            this if you are okay updating in-place.

            This increases performance by a lot at scale since we don't need to
            deep copy the object.
          type: boolean
      additionalProperties: false
      type: object
    SupportedChainType:
      enum:
        - Bitcoin
        - Ethereum
        - Cosmos
        - Solana
        - Thorchain
        - Unknown
      description: >-
        Safe adds two uints and returns an error if the result is invalid. Keeps
        the right type.
      type: string
    NumberType:
      anyOf:
        - type: number
        - type: string
    JSPrimitiveNumberType:
      $ref: '#/components/schemas/NumberType'
    iUserPermissions:
      properties:
        canUpdateOutgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApprovalPermission'
          description: The list of permissions for updating approved outgoing transfers.
          type: array
        canUpdateIncomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApprovalPermission'
          description: The list of permissions for updating approved incoming transfers.
          type: array
        canUpdateAutoApproveSelfInitiatedOutgoingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: >-
            The permissions for updating auto-approving self-initiated outgoing
            transfers. If auto-approve is enabled, then the user will be
            approved by default for all outgoing transfers that are
            self-initiated.
          type: array
        canUpdateAutoApproveSelfInitiatedIncomingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: >-
            The permissions for updating auto-approving self-initiated incoming
            transfers. If auto-approve is enabled, then the user will be
            approved by default for all incoming transfers that are
            self-initiated.
          type: array
        canUpdateAutoApproveAllIncomingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: >-
            The permissions for updating auto-approving all incoming transfers.
            If auto-approve is enabled, then the user will be approved by
            default for all incoming transfers.
          type: array
      required:
        - canUpdateOutgoingApprovals
        - canUpdateIncomingApprovals
        - canUpdateAutoApproveSelfInitiatedOutgoingTransfers
        - canUpdateAutoApproveSelfInitiatedIncomingTransfers
        - canUpdateAutoApproveAllIncomingTransfers
      additionalProperties: false
      type: object
    iUserOutgoingApprovalPermission:
      properties:
        toListId:
          description: The list ID of the to addresses of the approved outgoing transfers.
          type: string
          examples: &ref_36
            - customOrReservedListId
            - Mint
            - All
            - bb1...
        toList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: >-
            The list ID of the initiatedBy addresses of the approved outgoing
            transfers.
          type: string
          examples: &ref_30
            - customOrReservedListId
            - Mint
            - All
            - bb1...
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The transfer times of the approved outgoing transfers.
          type: array
          examples: &ref_31
            - - start: '1713301889'
                end: '2000000000'
            - - start: '1'
                end: '18446744073709551615'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs of the approved outgoing transfers.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the approved outgoing transfers.
          type: array
          examples: *ref_29
        approvalId:
          description: >-
            The approval ID of the approved outgoing transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the approved outgoing transfers.
          type: array
          examples: &ref_32
            - - start: '1713301889'
                end: '2000000000'
            - - start: '1'
                end: '18446744073709551615'
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the approved outgoing transfers.
          type: array
          examples: &ref_33
            - - start: '1713301889'
                end: '2000000000'
            - - start: '1'
                end: '18446744073709551615'
      required:
        - toListId
        - toList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iUserIncomingApprovalPermission:
      properties:
        fromListId:
          description: >-
            The list ID of the from addresses of the approved incoming
            transfers.
          type: string
          examples: &ref_35
            - customOrReservedListId
            - Mint
            - All
            - bb1...
        fromList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: >-
            The list ID of the initiatedBy addresses of the approved incoming
            transfers.
          type: string
          examples: *ref_30
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The transfer times of the approved incoming transfers.
          type: array
          examples: *ref_31
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs of the approved incoming transfers.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the approved incoming transfers.
          type: array
          examples: *ref_29
        approvalId:
          description: >-
            The approval ID of the approved incoming transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the approved incoming transfers.
          type: array
          examples: *ref_32
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the approved incoming transfers.
          type: array
          examples: *ref_33
      required:
        - fromListId
        - fromList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iCollectionPermissions:
      properties:
        canDeleteCollection:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: The permissions for deleting the collection.
          type: array
        canArchiveCollection:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for archiving the collection.
          type: array
        canUpdateOffChainBalancesMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the off-chain balances metadata.
          type: array
        canUpdateStandards:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the standards.
          type: array
        canUpdateCustomData:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the custom data.
          type: array
        canUpdateManager:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the manager.
          type: array
        canUpdateCollectionMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the collection metadata.
          type: array
        canUpdateValidBadgeIds:
          items:
            $ref: '#/components/schemas/iBadgeIdsActionPermission'
          description: The permissions for creating more tokens.
          type: array
        canUpdateBadgeMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdateWithBadgeIdsPermission'
          description: The permissions for updating the token metadata.
          type: array
        canUpdateCollectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApprovalPermission'
          description: The permissions for updating the collection approved transfers.
          type: array
      required:
        - canDeleteCollection
        - canArchiveCollection
        - canUpdateOffChainBalancesMetadata
        - canUpdateStandards
        - canUpdateCustomData
        - canUpdateManager
        - canUpdateCollectionMetadata
        - canUpdateValidBadgeIds
        - canUpdateBadgeMetadata
        - canUpdateCollectionApprovals
      additionalProperties: false
      type: object
    iActionPermission:
      properties:
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
          examples: *ref_32
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
          examples: *ref_33
      required:
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iTimedUpdatePermission:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The timeline times that the permission applies to.
          type: array
          examples: *ref_34
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
          examples: *ref_32
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
          examples: *ref_33
      required:
        - timelineTimes
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iBadgeIdsActionPermission:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs that the permission applies to.
          type: array
          examples: *ref_18
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
          examples: *ref_32
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
          examples: *ref_33
      required:
        - badgeIds
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iTimedUpdateWithBadgeIdsPermission:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The timeline times that the permission applies to.
          type: array
          examples: *ref_34
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs that the permission applies to.
          type: array
          examples: *ref_18
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
          examples: *ref_32
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
          examples: *ref_33
      required:
        - timelineTimes
        - badgeIds
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iCollectionApprovalPermission:
      properties:
        fromListId:
          description: The list ID of the from addresses of the approved transfers.
          type: string
          examples: *ref_35
        fromList:
          $ref: '#/components/schemas/iAddressList'
        toListId:
          description: The list ID of the to addresses of the approved transfers.
          type: string
          examples: *ref_36
        toList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: The list ID of the initiatedBy addresses of the approved transfers.
          type: string
          examples: *ref_30
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The transfer times of the approved transfers.
          type: array
          examples: *ref_31
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs of the approved transfers.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the approved transfers.
          type: array
          examples: *ref_29
        approvalId:
          description: >-
            The approval ID of the approved transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of this permission.
          type: array
          examples: *ref_32
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of this permission.
          type: array
          examples: *ref_33
      required:
        - fromListId
        - fromList
        - toListId
        - toList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iUintRange:
      properties:
        start:
          description: The start of the range.
          $ref: '#/components/schemas/NumberType'
        end:
          description: The end of the range, inclusive.
          $ref: '#/components/schemas/NumberType'
      required:
        - start
        - end
      additionalProperties: false
      type: object
    iBadgeMetadata:
      properties:
        uri:
          description: The URI where to fetch the token metadata from.
          type: string
          examples: *ref_1
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs corresponding to the URI.
          type: array
          examples: *ref_18
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - badgeIds
        - customData
      additionalProperties: false
      type: object
    iCollectionMetadata:
      properties:
        uri:
          description: The URI where to fetch the collection metadata from.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - customData
      additionalProperties: false
      type: object
    iOffChainBalancesMetadata:
      properties:
        uri:
          description: The URI where to fetch the off-chain balances metadata from.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - customData
      additionalProperties: false
      type: object
    iAttestationsProof:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the messages.
          type: string
        createdBy:
          description: >-
            The address of the user who created the attestation on BitBadges.
            Note this is used for permissions on BitBadges end and may not align
            with the signer / issuer of the attestation.
          $ref: '#/components/schemas/BitBadgesAddress'
        createdAt:
          description: When the attestation was created.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        entropies:
          items:
            type: string
          description: >-
            Entropies used for certain data integrity proofs on-chain (e.g.
            HASH(message + entropy) = on-chain value)
          type: array
        publicVisibility:
          description: >-
            Whether or not the attestation is displayable on the user's profile.
            if true, the attestation can be queried by anyone with the ID.
          type: boolean
        proofOfIssuance:
          properties:
            message:
              type: string
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this attestation signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        attestationId:
          description: >-
            The attestation ID. This is the constant ID that is given to the
            attestation.
          type: string
        inviteCode:
          description: >-
            The inviteCode is used to add the attestation to the user's wallet.
            Anyone with the key can query it, so keep this safe and secure.
          type: string
        scheme:
          description: >-
            The scheme of the attestation. BBS+ signatures are supported and can
            be used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        originalProvider:
          description: >-
            The original provider of the attestation. Used for third-party
            attestation providers.
          type: string
        messages:
          items:
            type: string
          description: >-
            Thesse are the attestations that are signed.

            For BBS+ signatures, there can be >1 messages, and the signer can
            selectively disclose the attestations.

            For standard signatures, there is only 1 attestationMessage.
          type: array
          examples: *ref_26
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
            isDerived:
              type: boolean
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the messages. The
            siganture maintains the integrity of the messages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.


            For custom schemes, this is often left blank (because the proof is
            already included in the message).
          type: object
        name:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_12
        description:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_9
        holders:
          items:
            type: string
          description: Holders are the addresses that have been given the attestation.
          type: array
        allHolders:
          items:
            type: string
          description: >-
            All holders are the addresses that have been given the attestation
            at any point in time.

            Used internally as an append-only audit log.
          type: array
        anchors:
          items:
            properties:
              txHash:
                type: string
                examples: *ref_7
              message:
                type: string
            additionalProperties: false
            type: object
          description: >-
            Anchors are on-chain transactions used to prove certain things

            about the attestation. For example, you can anchor the attestation
            to a

            transaction hash to prove that the attestation existed at a certain
            time.
          type: array
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          type: array
      required:
        - _docId
        - messageFormat
        - createdBy
        - createdAt
        - entropies
        - attestationId
        - inviteCode
        - scheme
        - messages
        - name
        - image
        - description
        - holders
        - anchors
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    iAttestation:
      properties:
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the messages.
          type: string
        createdBy:
          description: >-
            The address of the user who created the attestation on BitBadges.
            Note this is used for permissions on BitBadges end and may not align
            with the signer / issuer of the attestation.
          $ref: '#/components/schemas/BitBadgesAddress'
        createdAt:
          description: When the attestation was created.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        entropies:
          items:
            type: string
          description: >-
            Entropies used for certain data integrity proofs on-chain (e.g.
            HASH(message + entropy) = on-chain value)
          type: array
        publicVisibility:
          description: >-
            Whether or not the attestation is displayable on the user's profile.
            if true, the attestation can be queried by anyone with the ID.
          type: boolean
        proofOfIssuance:
          properties:
            message:
              type: string
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this attestation signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        attestationId:
          description: >-
            The attestation ID. This is the constant ID that is given to the
            attestation.
          type: string
        inviteCode:
          description: >-
            The inviteCode is used to add the attestation to the user's wallet.
            Anyone with the key can query it, so keep this safe and secure.
          type: string
        scheme:
          description: >-
            The scheme of the attestation. BBS+ signatures are supported and can
            be used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        originalProvider:
          description: >-
            The original provider of the attestation. Used for third-party
            attestation providers.
          type: string
        messages:
          items:
            type: string
          description: >-
            Thesse are the attestations that are signed.

            For BBS+ signatures, there can be >1 messages, and the signer can
            selectively disclose the attestations.

            For standard signatures, there is only 1 attestationMessage.
          type: array
          examples: *ref_26
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
            isDerived:
              type: boolean
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the messages. The
            siganture maintains the integrity of the messages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.


            For custom schemes, this is often left blank (because the proof is
            already included in the message).
          type: object
        name:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_12
        description:
          description: >-
            Metadata for the attestation for display purposes. Note this should
            not contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_9
        holders:
          items:
            type: string
          description: Holders are the addresses that have been given the attestation.
          type: array
        allHolders:
          items:
            type: string
          description: >-
            All holders are the addresses that have been given the attestation
            at any point in time.

            Used internally as an append-only audit log.
          type: array
        anchors:
          items:
            properties:
              txHash:
                type: string
                examples: *ref_7
              message:
                type: string
            additionalProperties: false
            type: object
          description: >-
            Anchors are on-chain transactions used to prove certain things

            about the attestation. For example, you can anchor the attestation
            to a

            transaction hash to prove that the attestation existed at a certain
            time.
          type: array
      required:
        - messageFormat
        - createdBy
        - createdAt
        - entropies
        - attestationId
        - inviteCode
        - scheme
        - messages
        - name
        - image
        - description
        - holders
        - anchors
      additionalProperties: false
      type: object
    iMustOwnBadges:
      properties:
        collectionId:
          description: The collection IDs to own.
          $ref: '#/components/schemas/CollectionId'
        amountRange:
          description: >-
            The min/max acceptable amount of tokens that must be owned (can be
            any values, including 0-0).
          $ref: '#/components/schemas/iUintRange'
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The range of the times that the tokens must be owned.
          type: array
          examples: *ref_29
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The range of the token IDs that must be owned.
          type: array
          examples: *ref_18
        overrideWithCurrentTime:
          description: Whether or not to override the ownershipTimes with the current time.
          type: boolean
        mustSatisfyForAllAssets:
          description: >-
            Whether or not the user must own all the specified tokens. If false,
            we will accept if they meet criteria for at least one token.
          type: boolean
      required:
        - collectionId
        - amountRange
        - ownershipTimes
        - badgeIds
        - overrideWithCurrentTime
        - mustSatisfyForAllAssets
      additionalProperties: false
      type: object
    iBalance:
      properties:
        amount:
          description: The amount or balance of the owned token.
          $ref: '#/components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs corresponding to the balance.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times that the token is owned from.
          type: array
          examples: *ref_29
      required:
        - amount
        - badgeIds
        - ownershipTimes
      additionalProperties: false
      type: object
    iAddressList:
      properties:
        listId:
          description: The ID of the address list.
          type: string
          examples: *ref_11
        addresses:
          items:
            type: string
          description: >-
            The addresses of the address list. If this is a tracker list, the
            addresses are the tracker IDs.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
          examples: *ref_1
        customData:
          description: >-
            Arbitrary custom data that can be stored. Leave blank for no custom
            data.
          type: string
        createdBy:
          description: The address that created the address list. Handled internally.
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
      additionalProperties: false
      type: object
    iTransfer:
      properties:
        from:
          description: The address to transfer from.
          $ref: '#/components/schemas/BitBadgesAddress'
        toAddresses:
          items:
            $ref: '#/components/schemas/BitBadgesAddress'
          description: The addresses to transfer to.
          type: array
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The balances to transfer.
          type: array
        precalculateBalancesFromApproval:
          description: >-
            If specified, we will precalculate from this approval and override
            the balances. This can only be used when the specified approval has
            predeterminedBalances set.
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
        merkleProofs:
          items:
            $ref: '#/components/schemas/iMerkleProof'
          description: >-
            The merkle proofs that satisfy the mkerkle challenges in the
            approvals. If the transfer deducts from multiple approvals, we check
            all the merkle proofs and assert at least one is valid for every
            challenge.
          type: array
        memo:
          description: Arbitrary memo for the transfer.
          type: string
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            The prioritized approvals to use for the transfer. If specified, we
            will check these first.
          type: array
        onlyCheckPrioritizedCollectionApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "collection" level approvals specified.
          type: boolean
        onlyCheckPrioritizedIncomingApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "incoming" level approvals specified.
          type: boolean
        onlyCheckPrioritizedOutgoingApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "outgoing" level approvals specified.
          type: boolean
      required:
        - from
        - toAddresses
        - balances
      additionalProperties: false
      type: object
    iApprovalIdentifierDetails:
      properties:
        approvalId:
          description: The approval ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
          examples: *ref_14
        approverAddress:
          description: >-
            The address of the approval to check. If approvalLevel is
            "collection", this is blank "".
          $ref: '#/components/schemas/BitBadgesAddress'
        version:
          description: The version of the approval.
          $ref: '#/components/schemas/NumberType'
      required:
        - approvalId
        - approvalLevel
        - approverAddress
        - version
      additionalProperties: false
      type: object
    iCoinTransfer:
      properties:
        to:
          description: >-
            The recipient of the coin transfer. This should be a Bech32
            BitBadges address.
          $ref: '#/components/schemas/BitBadgesAddress'
        coins:
          items:
            $ref: '#/components/schemas/iCosmosCoin'
          description: The coins
          type: array
        overrideFromWithApproverAddress:
          description: >-
            Whether or not to override the from address with the approver
            address.
          type: boolean
        overrideToWithInitiator:
          description: >-
            Whether or not to override the to address with the initiator of the
            transaction.
          type: boolean
      required:
        - to
        - coins
        - overrideFromWithApproverAddress
        - overrideToWithInitiator
      additionalProperties: false
      type: object
    CollectionId:
      type: string
    iAmountTrackerIdDetails:
      properties:
        collectionId:
          description: The collection ID for the approval.
          $ref: '#/components/schemas/CollectionId'
        approvalId:
          description: The approval ID
          type: string
        amountTrackerId:
          description: The amount tracker ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
          examples: *ref_14
        approverAddress:
          description: The address of the approval to check.
          $ref: '#/components/schemas/BitBadgesAddress'
        trackerType:
          description: >-
            The type of tracker to check "overall", "to", "from", or
            "initiatedBy".
          type: string
        approvedAddress:
          description: The address to check for the approval.
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - collectionId
        - approvalId
        - amountTrackerId
        - approvalLevel
        - approverAddress
        - trackerType
        - approvedAddress
      additionalProperties: false
      type: object
    iMerkleChallenge:
      properties:
        root:
          description: The root of the merkle tree.
          type: string
        expectedProofLength:
          description: The expected proof length of the merkle proof.
          $ref: '#/components/schemas/NumberType'
        useCreatorAddressAsLeaf:
          description: >-
            Whether or not to override any leaf value and use the creator
            address as the leaf. Used for whitelist trees.
          type: boolean
        maxUsesPerLeaf:
          description: >-
            Whether or not to enforce max uses per leaf. Used to prevent replay
            attacks.
          $ref: '#/components/schemas/NumberType'
        uri:
          description: The URI where to fetch the merkle challenge metadata from.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        challengeTrackerId:
          description: Tracker ID details for the merkle challenge.
          type: string
      required:
        - root
        - expectedProofLength
        - useCreatorAddressAsLeaf
        - maxUsesPerLeaf
        - uri
        - customData
        - challengeTrackerId
      additionalProperties: false
      type: object
    iMerklePathItem:
      properties:
        aunt:
          description: The aunt of the merkle path item.
          type: string
        onRight:
          description: Indicates whether the aunt node is on the right side of the path.
          type: boolean
      required:
        - aunt
        - onRight
      additionalProperties: false
      type: object
    iMerkleProof:
      properties:
        aunts:
          items:
            $ref: '#/components/schemas/iMerklePathItem'
          description: The aunts of the merkle proof.
          type: array
        leaf:
          description: >-
            The leaf of the merkle proof. If useCreatorAddressAsLeaf is true,
            this will be populated with the creator BitBadges address.
          type: string
      required:
        - aunts
        - leaf
      additionalProperties: false
      type: object
    iTimelineItem:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_34
      required:
        - timelineTimes
      additionalProperties: false
      type: object
    iManagerTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_34
        manager:
          description: The manager of the collection.
          $ref: '#/components/schemas/BitBadgesAddress'
      required:
        - timelineTimes
        - manager
      additionalProperties: false
      type: object
    iCollectionMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_34
        collectionMetadata:
          description: The collection metadata, with off-chain details populated.
          $ref: '#/components/schemas/iCollectionMetadataDetails'
      required:
        - timelineTimes
        - collectionMetadata
      additionalProperties: false
      type: object
    iBadgeMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_34
        badgeMetadata:
          items:
            $ref: '#/components/schemas/iBadgeMetadataDetails'
          description: The token metadata, with off-chain details populated.
          type: array
      required:
        - timelineTimes
        - badgeMetadata
      additionalProperties: false
      type: object
    iOffChainBalancesMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_34
        offChainBalancesMetadata:
          description: The off-chain balances metadata.
          $ref: '#/components/schemas/iOffChainBalancesMetadata'
      required:
        - timelineTimes
        - offChainBalancesMetadata
      additionalProperties: false
      type: object
    iCustomDataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_34
        customData:
          description: Arbitrary custom data.
          type: string
      required:
        - timelineTimes
        - customData
      additionalProperties: false
      type: object
    iStandardsTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_34
        standards:
          items:
            type: string
          description: The standards.
          type: array
      required:
        - timelineTimes
        - standards
      additionalProperties: false
      type: object
    iIsArchivedTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_34
        isArchived:
          description: Whether the collection is archived.
          type: boolean
      required:
        - timelineTimes
        - isArchived
      additionalProperties: false
      type: object
    iUserOutgoingApproval:
      properties:
        toListId:
          description: >-
            The list ID for the user(s) who is sending the tokens. The ID is
            either registered on-chain for reusability or follows the reserved
            ID system.
          type: string
          examples: *ref_36
        toList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: >-
            The list ID for the user(s) who initiate the transfer. The ID is
            either registered on-chain for reusability or follows the reserved
            ID system.
          type: string
          examples: *ref_30
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times allowed for the transfer transaction.
          type: array
          examples: *ref_31
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs to be transferred.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The ownership times of the tokens being transferred.
          type: array
          examples: *ref_29
        approvalId:
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        uri:
          description: The URI of the approval.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          description: >-
            The criteria to be met. These represent the restrictions that must
            be obeyed such as the total amount approved, max num transfers,
            merkle challenges, must own tokens, etc.
          $ref: '#/components/schemas/iOutgoingApprovalCriteria'
        version:
          description: The version of the approval.
          $ref: '#/components/schemas/NumberType'
      required:
        - toListId
        - toList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - version
      additionalProperties: false
      type: object
    iOutgoingApprovalCriteria:
      properties:
        coinTransfers:
          items:
            $ref: '#/components/schemas/iCoinTransfer'
          description: The $BADGE transfers to be executed upon every approval.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallenge'
          description: The list of merkle challenges that need valid proofs to be approved.
          type: array
        predeterminedBalances:
          description: >-
            The predetermined balances for each transfer. These allow approvals
            to use predetermined balance amounts rather than an incrementing
            tally system.
          $ref: '#/components/schemas/iPredeterminedBalances'
        approvalAmounts:
          description: The maximum approved amounts for this approval.
          $ref: '#/components/schemas/iApprovalAmounts'
        maxNumTransfers:
          description: The max num transfers for this approval.
          $ref: '#/components/schemas/iMaxNumTransfers'
        requireToEqualsInitiatedBy:
          description: Whether the to address must equal the initiatedBy address.
          type: boolean
        requireToDoesNotEqualInitiatedBy:
          description: Whether the to address must not equal the initiatedBy  address.
          type: boolean
      additionalProperties: false
      type: object
    iPredeterminedBalances:
      properties:
        manualBalances:
          items:
            $ref: '#/components/schemas/iManualBalances'
          description: >-
            Manually define the balances for each transfer. Cannot be used with
            incrementedBalances. Order number corresponds to the index of the
            balance in the array.
          type: array
        incrementedBalances:
          description: >-
            Define a starting balance and increment the token IDs and owned
            times by a certain amount after each transfer. Cannot be used with
            manualBalances. Order number corresponds to number of times we
            increment.
          $ref: '#/components/schemas/iIncrementedBalances'
        orderCalculationMethod:
          description: The order calculation method.
          $ref: '#/components/schemas/iPredeterminedOrderCalculationMethod'
      required:
        - manualBalances
        - incrementedBalances
        - orderCalculationMethod
      additionalProperties: false
      type: object
    iManualBalances:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: >-
            The list of balances for each transfer. Order number corresponds to
            the index of the balance in the array.
          type: array
      required:
        - balances
      additionalProperties: false
      type: object
    iIncrementedBalances:
      properties:
        startBalances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: >-
            The starting balances for each transfer. Order number corresponds to
            the number of times we increment.
          type: array
        incrementBadgeIdsBy:
          description: The amount to increment the token IDs by after each transfer.
          $ref: '#/components/schemas/NumberType'
        incrementOwnershipTimesBy:
          description: >-
            The amount to increment the owned times by after each transfer.
            Incompatible with durationFromTimestamp.
          $ref: '#/components/schemas/NumberType'
        durationFromTimestamp:
          description: >-
            The number of unix milliseconds to approve starting from now.
            Incompatible with incrementOwnershipTimesBy.
          $ref: '#/components/schemas/NumberType'
      required:
        - startBalances
        - incrementBadgeIdsBy
        - incrementOwnershipTimesBy
        - durationFromTimestamp
      additionalProperties: false
      type: object
    iPredeterminedOrderCalculationMethod:
      properties:
        useOverallNumTransfers:
          description: >-
            Use the overall number of transfers this approval has been used with
            as the order number. Ex: If this approval has been used 2 times by
            ANY address, then the order number for the next transfer will be 3.
          type: boolean
        usePerToAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each to
            address as the order number. Ex: If this approval has been used 2
            times by to address A, then the order number for the next transfer
            by to address A will be 3.
          type: boolean
        usePerFromAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each from
            address as the order number. Ex: If this approval has been used 2
            times by from address A, then the order number for the next transfer
            by from address A will be 3.
          type: boolean
        usePerInitiatedByAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each
            initiated by address as the order number. Ex: If this approval has
            been used 2 times by initiated by address A, then the order number
            for the next transfer by initiated by address A will be 3.
          type: boolean
        useMerkleChallengeLeafIndex:
          description: >-
            Use the merkle challenge leaf index as the order number. Must
            specify ONE merkle challenge with the useLeafIndexForTransferOrder
            flag set to true. If so, we will use the leaf index of each merkle
            proof to calculate the order number. This is used to reserve
            specific balances for specific leaves (such as codes or whitelist
            address leafs)
          type: boolean
        challengeTrackerId:
          description: >-
            Use the merkle challenge leaf index as the order number. Must
            specify ONE merkle challenge with the useLeafIndexForTransferOrder
            flag set to true. If so, we will use the leaf index of each merkle
            proof to calculate the order number. This is used to reserve
            specific balances for specific leaves (such as codes or whitelist
            address leafs)
          type: string
      required:
        - useOverallNumTransfers
        - usePerToAddressNumTransfers
        - usePerFromAddressNumTransfers
        - usePerInitiatedByAddressNumTransfers
        - useMerkleChallengeLeafIndex
        - challengeTrackerId
      additionalProperties: false
      type: object
    iApprovalAmounts:
      properties:
        overallApprovalAmount:
          description: >-
            The overall maximum amount approved for the badgeIDs and
            ownershipTimes. Running tally that includes all transfers that match
            this approval.
          $ref: '#/components/schemas/NumberType'
        perToAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each to address. Running tally that includes all transfers from each
            unique to address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perFromAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each from address. Running tally that includes all transfers from
            each unique from address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perInitiatedByAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each initiated by address. Running tally that includes all transfers
            from each unique initiated by address that match this approval.
          $ref: '#/components/schemas/NumberType'
        amountTrackerId:
          description: >-
            The ID of the approval tracker. This is the key used to track
            tallies.
          type: string
      required:
        - overallApprovalAmount
        - perToAddressApprovalAmount
        - perFromAddressApprovalAmount
        - perInitiatedByAddressApprovalAmount
        - amountTrackerId
      additionalProperties: false
      type: object
    iMaxNumTransfers:
      properties:
        overallMaxNumTransfers:
          description: >-
            The overall maximum number of transfers for the badgeIDs and
            ownershipTimes. Running tally that includes all transfers that match
            this approval.
          $ref: '#/components/schemas/NumberType'
        perToAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each to address. Running tally that includes all transfers from
            each unique to address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perFromAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each from address. Running tally that includes all transfers
            from each unique from address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perInitiatedByAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each initiated by address. Running tally that includes all
            transfers from each unique initiated by address that match this
            approval.
          $ref: '#/components/schemas/NumberType'
        amountTrackerId:
          description: >-
            The ID of the approval tracker. This is the key used to track
            tallies.
          type: string
      required:
        - overallMaxNumTransfers
        - perToAddressMaxNumTransfers
        - perFromAddressMaxNumTransfers
        - perInitiatedByAddressMaxNumTransfers
        - amountTrackerId
      additionalProperties: false
      type: object
    iUserIncomingApproval:
      properties:
        fromListId:
          description: >-
            The list ID for the user(s) who is sending the tokens. The ID is
            either registered on-chain for reusability or follows the reserved
            ID system.
          type: string
          examples: *ref_35
        fromList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: >-
            The list ID for the user(s) who initiate the transfer. The ID is
            either registered on-chain for reusability or follows the reserved
            ID system.
          type: string
          examples: *ref_30
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times allowed for the transfer transaction.
          type: array
          examples: *ref_31
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs to be transferred.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The ownership times of the tokens being transferred.
          type: array
          examples: *ref_29
        approvalId:
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        uri:
          description: The URI of the approval.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          description: >-
            The criteria to be met. These represent the restrictions that must
            be obeyed such as the total amount approved, max num transfers,
            merkle challenges, must own tokens, etc.
          $ref: '#/components/schemas/iIncomingApprovalCriteria'
        version:
          description: The version of the approval.
          $ref: '#/components/schemas/NumberType'
      required:
        - fromListId
        - fromList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - version
      additionalProperties: false
      type: object
    iIncomingApprovalCriteria:
      properties:
        coinTransfers:
          items:
            $ref: '#/components/schemas/iCoinTransfer'
          description: The $BADGE transfers to be executed upon every approval.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallenge'
          description: The list of merkle challenges that need valid proofs to be approved.
          type: array
        predeterminedBalances:
          description: The predetermined balances for each transfer using this approval.
          $ref: '#/components/schemas/iPredeterminedBalances'
        approvalAmounts:
          description: The maximum approved amounts for this approval.
          $ref: '#/components/schemas/iApprovalAmounts'
        maxNumTransfers:
          description: The max num transfers for this approval.
          $ref: '#/components/schemas/iMaxNumTransfers'
        requireFromEqualsInitiatedBy:
          description: Whether the from address must equal the initiatedBy address.
          type: boolean
        requireFromDoesNotEqualInitiatedBy:
          description: Whether the from address must not equal the initiatedBy address.
          type: boolean
      additionalProperties: false
      type: object
    iCollectionApproval:
      properties:
        toListId:
          description: >-
            The list ID for the user(s) who is receiving the tokens. The ID is
            either registered on-chain for reusability or follows the reserved
            ID system.
          type: string
          examples: *ref_36
        toList:
          $ref: '#/components/schemas/iAddressList'
        fromListId:
          description: >-
            The list ID for the user(s) who is sending the tokens. The ID is
            either registered on-chain for reusability or follows the reserved
            ID system.
          type: string
          examples: *ref_35
        fromList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: >-
            The list ID for the user(s) who initiate the transfer. The ID is
            either registered on-chain for reusability or follows the reserved
            ID system.
          type: string
          examples: *ref_30
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times allowed for the transfer transaction.
          type: array
          examples: *ref_31
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The token IDs to be transferred.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The ownership times of the tokens being transferred.
          type: array
          examples: *ref_29
        approvalId:
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        uri:
          description: The URI of the approval.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          description: >-
            The criteria to be met. These represent the restrictions that must
            be obeyed such as the total amount approved, max num transfers,
            merkle challenges, must own tokens, etc.
          $ref: '#/components/schemas/iApprovalCriteria'
        version:
          description: The version of the approval.0
          $ref: '#/components/schemas/NumberType'
      required:
        - toListId
        - toList
        - fromListId
        - fromList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - version
      additionalProperties: false
      type: object
    iApprovalCriteria:
      properties:
        coinTransfers:
          items:
            $ref: '#/components/schemas/iCoinTransfer'
          description: The $BADGE transfers to be executed upon every approval.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallenge'
          description: The list of merkle challenges that need valid proofs to be approved.
          type: array
        predeterminedBalances:
          description: >-
            The predetermined balances for each transfer. These allow approvals
            to use predetermined balance amounts rather than an incrementing
            tally system.
          $ref: '#/components/schemas/iPredeterminedBalances'
        approvalAmounts:
          description: The maximum approved amounts for this approval.
          $ref: '#/components/schemas/iApprovalAmounts'
        maxNumTransfers:
          description: The max num transfers for this approval.
          $ref: '#/components/schemas/iMaxNumTransfers'
        requireToEqualsInitiatedBy:
          description: Whether the to address must equal the initiatedBy address.
          type: boolean
        requireFromEqualsInitiatedBy:
          description: Whether the from address must equal the initiatedBy address.
          type: boolean
        requireToDoesNotEqualInitiatedBy:
          description: Whether the to address must not equal the initiatedBy address.
          type: boolean
        requireFromDoesNotEqualInitiatedBy:
          description: Whether the from address must not equal the initiatedBy address.
          type: boolean
        overridesFromOutgoingApprovals:
          description: >-
            Whether this approval overrides the from address's approved outgoing
            transfers.
          type: boolean
        overridesToIncomingApprovals:
          description: >-
            Whether this approval overrides the to address's approved incoming
            transfers.
          type: boolean
      additionalProperties: false
      type: object
    iUserBalanceStore:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          description: The user's permissions.
          $ref: '#/components/schemas/iUserPermissions'
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        autoApproveAllIncomingTransfers:
          description: >-
            Whether the user's all incoming transfers are auto-approved. If not,
            they must be explicitly approved using the incoming approvals.
          type: boolean
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - autoApproveAllIncomingTransfers
      additionalProperties: false
      description: >-
        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.
      type: object
    OauthAppName:
      enum:
        - twitter
        - github
        - google
        - email
        - discord
        - twitch
        - strava
        - youtube
        - reddit
        - facebook
        - mailchimp
        - bluesky
        - googleCalendar
        - telegram
        - farcaster
        - slack
        - linkedIn
        - shopify
      type: string
    iBaseQueryParams:
      properties:
        bookmark:
          type: string
        oldestFirst:
          type: boolean
      additionalProperties: false
      type: object
    iBaseSuccessResponse:
      properties:
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - pagination
      additionalProperties: false
      type: object
