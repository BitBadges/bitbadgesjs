openapi: 3.1.0
info:
  title: BitBadges API
  description: >-
    The BitBadges API is a RESTful API that allows developers to interact with
    the BitBadges blockchain and indexer. The API provides endpoints for
    retrieving account details, collections, badges, and more. The API requires
    an API key for authentication.


    ```tsx

    import { BigIntify, Stringify, Numberify, BitBadgesAPI } from
    "bitbadgesjs-sdk";

    const BitBadgesApi = new BitBadgesAPI({ convertFunction: BigIntify, ....})

    const collections = await BitBadgesApi.getCollections(...);

    ```


    See the
    [documentation](https://docs.bitbadges.io/for-developers/bitbadges-api/api)
    for information on how to use the API.


    You can go to [the developer portal](https://bitbadges.io/developer) to
    create your API key.
  version: '0.1'
servers:
  - url: https://api.bitbadges.io/api/v0
    description: Official API
paths:
  /users:
    post:
      operationId: getAccounts
      summary: Get Accounts
      description: >
        Retrieves accounts and accompanying details.


        ```tsx

        const accountsRes = await BitBadgesApi.getAccounts({
          accountsToFetch: [
            {
              //example
              address: 'cosmos...',
              fetchSequence: true,
              fetchBalance: true,
              viewsToFetch: [
                {
                  viewType: 'badgesCollected',
                  viewId: 'badgesCollected',
                  bookmark: '',
                },
              ],
            },
          ],
        })

        const account = accountsRes.accounts[0]

        ```

        Documentation References / Tutorials:

        - **[Fetching
        Accounts](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/fetching-accounts)**
      tags:
        - Accounts
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAccountsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      x-internal: false
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAccountsPayload'
  /collections:
    post:
      operationId: getCollectionsBatch
      summary: Get Collections
      tags:
        - Badges
      description: >-
        Retrieves badge collections and associated details.
          ```tsx
        const res = await BitBadgesApi.getCollections({
          collectionsToFetch: [
            {
              collectionId: 1n,
              metadataToFetch: {
                badgeIds: [{ start: 1n, end: 10n }],
              },
              fetchTotalAndMintBalances: true,
              viewsToFetch: [
                {
                  viewType: 'owners',
                  viewId: 'owners',
                  bookmark: '',
                },
              ],
            },
          ],
        })

        const collection = res.collections[0]

        ```

        Documentation References / Tutorials:

        - **[Fetching
        Collections](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/fetching-collections)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetCollectionsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetCollectionsPayload'
  /collection/{collectionId}/balance/{cosmosAddress}:
    post:
      operationId: getBadgeBalanceByAddress
      summary: Get Badge Balances
      description: >-
        Retrieves the balance of a specific address for a collection.


        ```tsx

        const res = await BitBadgesApi.getBadgeBalanceByAddress(...);

        ```


        Documentation References / Tutorials:

        - **[Fetching
        Balances](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/fetching-balances)**
      tags:
        - Badges
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: cosmosAddress
          in: path
          description: The Cosmos address for which the badge balance is to be retrieved.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeBalanceByAddressSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBadgeBalanceByAddressPayload'
  /status:
    post:
      operationId: getStatus
      summary: Get Status
      description: >-
        Gets the current status details about the blockchain / indexer (gas,
        block height, etc).
          ```tsx
          const res = await BitBadgesApi.getStatus();
          ```
      tags:
        - Miscellanous
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetStatusSuccessResponse'
          description: Returns the current status of the blockchain / indexer
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /search/{searchValue}:
    post:
      operationId: searchByValue
      summary: Search
      description: |-
        description: |
          Searches for collections, badges, accounts, and address lists based on the provided search value.
          ```tsx
          const res = await BitBadgesApi.getSearchResults(searchValue, { ... });
        ```
      tags:
        - Miscellanous
      parameters:
        - name: searchValue
          in: path
          description: The value to search for.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSearchPayload'
  /collection/{collectionId}/{badgeId}/owners:
    post:
      operationId: getOwnersForBadge
      summary: Get Badge Owners
      tags:
        - Badges
      description: >-
        Retrieves the owners in a paginated format for a specific badge in a
        collection.


        ```tsx

        const res = await BitBadgesApi.getOwnersForBadge(...);

        ```


        Documentation References / Tutorials:

        - **[Fetching
        Balances](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/fetching-balances)**
      parameters:
        - name: collectionId
          in: path
          description: The numeric collection ID.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The numeric badge ID to retrieve owners for.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetOwnersForBadgeSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetOwnersForBadgePayload'
  /collection/{collectionId}/{badgeId}/activity:
    post:
      operationId: getBadgeActivity
      summary: Get Badge Activity
      description: >-
        Retrieves the activity in a paginated format for a specific badge in a
        collection.

        ```tsx

        const res = await BitBadgesApi.getBadgeActivity(...);

        ```
      tags:
        - Badges
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection containing the badge.
          required: true
          schema:
            type: integer
        - name: badgeId
          in: path
          description: The ID of the badge for which activity is to be retrieved.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBadgeActivitySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBadgeActivityPayload'
  /collection/{collectionId}/refresh:
    post:
      operationId: refreshMetadata
      summary: Refresh Metadata
      tags:
        - Badges
      description: >-
        Triggers a metadata refresh for a specific collection. BitBadges API
        uses a refresh queue system for fetching anything off-chain.

        This will refetch any details for the collection (such as metadata,
        balances, approval details, etc). Note it will reject if recently
        refreshed.

        Uses a cooldown of 5 minutes.


        ```tsx

        const res = await BitBadgesApi.refreshMetadata(...);

        ```
      parameters:
        - name: collectionId
          in: path
          description: The ID of the collection to trigger metadata refresh.
          required: true
          schema:
            type: integer
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshMetadataPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshMetadataSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: true
  /claims/complete/{claimId}/{cosmosAddress}:
    post:
      operationId: completeClaim
      summary: Complete Claim
      tags:
        - Claims
      description: >-
        Completes a claim for a specific address. First, we simulate the claim
        and fail immediately if simulation does not pass.

        If simulation is successful, we put the claim attempt into the queue amd
        return its ID.

        You can then fetch its status via the claim attempt status endpoint.



        ```tsx

        const res = await BitBadgesApi.completeClaim(claimId, address, { ...body
        }); //This route

        console.log(res.claimAttemptId);


        //Sleep 2 seconds


        const res = await
        BitBadgesApi.getClaimAttemptStatus(res.claimAttemptId);

        console.log(res) // { success: true }

        ```


        Documentation References / Tutorials:

        - **[Getting
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**

        - **[Managing
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: cosmosAddress
          in: path
          description: The Cosmos address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCompleteClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /claims/simulate/{claimId}/{cosmosAddress}:
    post:
      operationId: simulateClaim
      summary: Simulate Claim
      tags:
        - Claims
      description: >-
        Simulates a claim for a user. This will check if the claim is valid and
        that all criteria is satisfied. Note that it returns a fake ID for
        compatibility

        with certain integrations. A successful response means simulation
        passed.


        ```tsx

        const res = await BitBadgesApi.simulateClaim(...);

        ```



        Documentation References / Tutorials:

        - **[Getting
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**

        - **[Managing
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: cosmosAddress
          in: path
          description: The Cosmos address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SimulateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
  /claims/reserved/{claimId}/{cosmosAddress}:
    post:
      operationId: getReservedCodes
      summary: Get Reserved Claim Codes
      tags:
        - Claims
      description: >-
        Retrieves the reserved codes for a claim. For on-chain approvals, we use
        a claim code reserve

        system where the claim code is to be used in the eventual blockchain
        transaction.

        This is used to bridge the gap between the off-chain claim and on-chain
        approval / transfer.


        ```tsx

        const res = await BitBadgesApi.getReservedCodes(...);

        ```



        Documentation References / Tutorials:

        - **[Getting
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**

        - **[Managing
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**
      parameters:
        - name: claimId
          in: path
          description: The ID of the claim.
          required: true
          schema:
            type: string
        - name: cosmosAddress
          in: path
          description: The Cosmos address of the user making the claim.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetReservedCodesSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetReservedCodesPayload'
  /claims/status/{claimAttemptId}:
    post:
      operationId: getClaimAttemptStatus
      tags:
        - Claims
      summary: Get Claim Attempt Status
      description: >-
        Retrieves the status of a claim attempt by the ID received when
        submitting.


        ```tsx

        const res = await BitBadgesApi.getClaimAttemptStatus(...);

        ```


        Documentation References / Tutorials:

        - **[Getting
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**

        - **[Managing
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**
      parameters:
        - name: claimAttemptId
          in: path
          description: The transaction ID of the claim attempt.
          required: true
          schema:
            type: string
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimAttemptStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /user/updateAccount:
    post:
      operationId: updateAccountInfo
      summary: Update Profile
      tags:
        - Accounts
      description: >-
        Updates the profile/account information for a user. Only the provided
        fields will be updated.

        ```tsx

        const res = await BitBadgesApi.updateAccountInfo(...);

        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAccountInfoPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAccountInfoSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
      x-internal: true
  /browse:
    post:
      operationId: getBrowseCollections
      summary: Get Browse Collections
      tags:
        - Miscellanous
      description: |-
        Gets details for a browse/explore page.
        ```tsx
        const res = await BitBadgesApi.getBrowseCollections(...);
        ```
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetBrowseCollectionsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      x-internal: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetBrowseCollectionsPayload'
  /broadcast:
    post:
      operationId: broadcastTx
      tags:
        - Transactions
      summary: Broadcast Transaction
      description: >-
        Broadcasts a transaction to the blockchain.


        ```tsx

        const res = await BitBadgesApi.broadcastTx(...);

        ```



        Documentation References / Tutorials:

        - **[Create, Genereate, and Sign
        Txs](https://docs.bitbadges.io/for-developers/create-and-broadcast-txs)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/BroadcastTxPayload'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iBroadcastTxSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /simulate:
    post:
      operationId: simulateTx
      summary: Simulate Transaction
      description: >-
        Simulates a transaction on the blockchain.

        ```tsx

        const res = await BitBadgesApi.simulateTx(...);

        ```


        Documentation References / Tutorials:

        - **[Create, Genereate, and Sign
        Txs](https://docs.bitbadges.io/for-developers/create-and-broadcast-txs)**
      tags:
        - Transactions
      requestBody:
        required: true
        content:
          application/json:
            schema:
              oneOf:
                - $ref: '#/components/schemas/SimulateTxPayload'
                - type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSimulateTxSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /addressLists:
    put:
      operationId: updateAddressLists
      tags:
        - Address Lists
      summary: Update Address Lists
      description: |-
        Updates off-chain address lists.

        ```tsx
        const res = await BitBadgesApi.updateAddressLists(...);
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressListsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
    post:
      operationId: createAddressLists
      summary: Creates Address Lists
      tags:
        - Address Lists
      description: |-
        Creates address lists stored by BitBadges centralized servers.

        ```tsx
        const res = await BitBadgesApi.createAddressLists(...);
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateAddressListsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
    delete:
      operationId: deleteAddressLists
      summary: Delete Address Lists
      tags:
        - Address Lists
      description: |-
        Deletes address lists. Must be created off-chain.
        ```tsx
        const res = await BitBadgesApi.deleteAddressLists(...);

        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteAddressListsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userIsOwner: []
          userSignedIn: []
  /addressLists/fetch:
    post:
      operationId: getAddressLists
      summary: Get Address Lists
      tags:
        - Address Lists
      description: >-
        Gets address lists. Can be on-chain or off-chain.

        ```tsx

        const listsRes = await BitBadgesApi.getAddressLists([{
            //example
            listId: "...",
            viewsToFetch: [{
                viewType: 'listActivity',
                viewId: 'listActivity',
                bookmark: ''
            }]
        }])


        const list = listsRes[0];

        ```



        Documentation References / Tutorials:

        - **[Fetching
        Lists](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/fetching-lists)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAddressListsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userMaybeSignedIn: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAddressListsPayload'
  /siwbbRequest/fetch:
    post:
      operationId: getAndVerifySIWBBRequest
      summary: Get And Verify Siwbb Request
      tags:
        - Sign In with BitBadges
      description: >-
        This endpoint handles the exchange of the code for the Sign In with
        BitBadges details

        such as the Blockin message, signature, etc for the user.


        ```tsx

        import { BlockinChallenge, BigIntify, BitBadgesApi, SecretsProof } from
        "bitbadgesjs-sdk";



        const options: VerifyChallengeOptions = { ... }

        const res = await BitBadgesApi.getAndVerifySIWBBRequest({
            code,
            options,
            clientSecret: '...',
            clientId: '...',
            redirectUri: '...' //only needed if redirected
        });

        const blockinChallenge = res.blockin;

        const { params, address, chain, verificationResponse, publicKey,
        otherSignIns, message, signature, secretsPresentations } =
        blockinChallenge;

        if (!verificationResponse.success) {
            console.log(verificationResponse.errorMessage);
            throw new Error("Not authenticated");
        }

        ```
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetAndVerifySIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetAndVerifySIWBBRequestPayload'
  /siwbbRequest:
    delete:
      operationId: deleteSIWBBRequest
      summary: Delete Siwbb Request
      tags:
        - Sign In with BitBadges
      description: |-
        Deletes a authentication code from the user's account.

        ```tsx
        const res = await BitBadgesApi.deleteSIWBBRequest(...);
        ```
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    post:
      operationId: createSIWBBRequest
      summary: Create Siwbb Request
      tags:
        - Sign In with BitBadges
      description: >-
        Creates a Blockin authentication code. This is used for the Sign In wtih
        BitBadges flow.


        ```tsx

        const res = await BitBadgesApi.createSIWBBRequest(...);

        ```
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSIWBBRequestPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateSIWBBRequestSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
  /developerApp/siwbbRequests:
    post:
      operationId: getSIWBBRequestsForDeveloperApp
      summary: Get Siwbb Requests For Auth App
      tags:
        - Sign In with BitBadges
      description: >-
        Gets all saved docs for the Sign In with BitBadges flow for a specific
        app. This is useful, for example,

        if you are authenticating in-person and want to pre-fetch all
        authentication details

        to avoid doing it at verification time.


        This will return the actual authentication details, not just the codes.


        ```tsx

        const res = await BitBadgesApi.getSIWBBRequestsForDeveloperApp(...);

        ```
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetAndVerifySIWBBRequestsForDeveloperAppSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: >-
                #/components/schemas/GetAndVerifySIWBBRequestsForDeveloperAppPayload
  /siwbbRequest/verify:
    post:
      operationId: verifySIWBBRequest
      summary: Verify SIWBB Request
      tags:
        - Sign In with BitBadges
        - API Authentication
      description: >-
        A generic route for verifying sign-in requests. This is just a helper
        route

        that will handle verification + checking asset ownership requirements
        for you.

        Note that you can also implement this yourself or use the
        getAndVerifySIWBBRequest route.



        ```tsx

        const res = await BitBadgesApi.verifySIWBBRequest(...);

        ```



        Documentation References / Tutorials:

        - **[Sign In with
        BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenericBlockinVerifySuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericBlockinVerifyPayload'
  /verifyOwnershipRequirements:
    post:
      operationId: verifyOwnershipRequirements
      summary: Verify Ownership Requirements
      tags:
        - Badges
      description: >-
        A generic route for verifying a custom set of asset ownership
        requirements. This supports badges, address lists, and Ethereum /
        Polygon NFTs.


        ```tsx

        const res = await BitBadgesApi.verifyOwnershipRequirements(...);

        ```


        Documentation References / Tutorials:

        - **[Sign In with
        BitBadges](https://docs.bitbadges.io/for-developers/authenticating-with-bitbadges)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenericVerifyAssetsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenericVerifyAssetsPayload'
  /claimAlerts/send:
    post:
      operationId: sendClaimAlert
      summary: Sends Claim Alert
      tags:
        - Claim Alerts
      description: >-
        Sends claim alert notifications out. Claim alerts are in-app
        notifications to alert a user.


        ```tsx

        const res = await BitBadgesApi.sendClaimAlert(...);

        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendClaimAlertsPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iSendClaimAlertsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /follow-protocol:
    post:
      operationId: getFollowDetails
      summary: Get Follow Protocol Details
      tags:
        - Maps and Protocols
      description: >-
        Gets the follow details for a user according to the BitBadges follow
        protocol.


        ```tsx

        const res = await BitBadgesApi.getFollowDetails(...);

        ```
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetFollowDetailsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetFollowDetailsPayload'
  /claimAlerts:
    post:
      operationId: getClaimAlerts
      summary: Get Claim Alerts
      tags:
        - Claim Alerts
      description: |-
        Gets claim alerts for a collection.
        ```tsx
        const res = await BitBadgesApi.getClaimAlerts(...);
        ```
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: >-
                  #/components/schemas/iGetClaimAlertsForCollectionSuccessResponse
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userSignedIn: []
          userIsManager: []
      x-internal: true
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetClaimAlertsForCollectionPayload'
  /collection/{collectionId}/refreshStatus:
    post:
      operationId: getRefreshStatus
      summary: Get Refresh Status
      tags:
        - Badges
      description: >-
        Gets the refresh status for a collection. Used to track if any errors
        occur during a refresh, or if it is in the queue or not.


        ```tsx

        const res = await BitBadgesApi.getRefreshStatus(...);

        ```
      parameters:
        - name: collectionId
          in: path
          description: The collection ID
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iRefreshStatusSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /maps:
    post:
      operationId: getMaps
      summary: Get Maps
      tags:
        - Maps and Protocols
      description: |-
        Gets maps for a collection.

        ```tsx
        const res = await BitBadgesApi.getMaps(...);
        ```
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetMapsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: true
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetMapsPayload'
  /secret/fetch:
    post:
      operationId: getSecret
      summary: Get Secret
      tags:
        - Verifiable Secrets
      description: >-
        Gets a verifiable secret.


        ```tsx

        const res = await BitBadgesApi.getSecret(...);

        ```



        Documentation References / Tutorials:

        - **[Verifiable
        Secrets](https://docs.bitbadges.io/for-developers/core-concepts/verifiable-secrets)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetSecretSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetSecretPayload'
  /secret:
    post:
      operationId: createSecret
      tags:
        - Verifiable Secrets
      summary: Create Secret
      description: >-
        Creates a secret.

        ```tsx

        const res = await BitBadgesApi.createSecret(...);

        ```


        Documentation References / Tutorials:

        - **[Verifiable
        Secrets](https://docs.bitbadges.io/for-developers/core-concepts/verifiable-secrets)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateSecretPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateSecretSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
    put:
      operationId: updateSecret
      tags:
        - Verifiable Secrets
      summary: Update Secret
      description: |-
        Updates a secret.
        ```tsx
        const res = await BitBadgesApi.updateSecret(...);
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateSecretPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateSecretSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
    delete:
      tags:
        - Verifiable Secrets
      operationId: deleteSecret
      summary: Delete Secret
      description: |-
        Deletes a secret.
        ```tsx
        const res = await BitBadgesApi.deleteSecret(...);
        ```
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteSecretPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteSecretSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
  /collections/{collectionId}/filter:
    post:
      tags:
        - Badges
      operationId: filterBadgesInCollection
      summary: Custom Filter Badges
      description: |-
        Filter badges in a collection based on filter values.

        ```tsx
        const res = await BitBadgesApi.filterBadgesInCollection(...);
        ```
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iFilterBadgesInCollectionSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: true
      parameters:
        - name: collectionId
          in: path
          schema:
            description: The collection ID to filter.
            $ref: '#/components/schemas/NumberType'
          required: true
        - name: badgeIds
          in: query
          schema: &ref_24
            items:
              $ref: '#/components/schemas/iUintRange'
            description: >-
              Limit to specific badge IDs. Leave undefined to not filter by
              badge ID.
            type: array
            examples: &ref_18
              - - start: '1'
                  end: '10'
          required: false
        - name: categories
          in: query
          schema: &ref_25
            items:
              type: string
            description: Limit to specific lists. Leave undefined to not filter by list.
            type: array
          required: false
        - name: tags
          in: query
          schema: &ref_26
            items:
              type: string
            description: Limit to specific lists. Leave undefined to not filter by list.
            type: array
          required: false
        - name: mostViewed
          in: query
          schema: &ref_27
            enum:
              - daily
              - allTime
              - weekly
              - monthly
              - yearly
            description: >-
              mostViewed is a special view that sorts by most viewed badges. May
              be incompatible with other filters.
            type: string
          required: false
        - name: bookmark
          in: query
          schema: &ref_28
            description: Pagination bookmark. Leave undefined or "" for first request.
            type: string
          required: false
        - name: attributes
          in: query
          schema: &ref_29
            items:
              properties:
                name:
                  type: string
                  examples: &ref_13
                    - Name
                value:
                  anyOf:
                    - type: string
                    - type: number
                    - type: boolean
              required:
                - name
                - value
              additionalProperties: false
              type: object
            description: Attribute queries
            type: array
          required: false
  /claims/fetch:
    post:
      operationId: getClaims
      summary: Get Claims
      tags:
        - Claims
      description: >-
        Retrieve claims by ID(s). If the claim is for a private list, you must
        also prove knowledge of the list ID.


        ```tsx

        const res = await BitBadgesApi.getClaims(...);

        ```


        Documentation References / Tutorials:

        - **[Getting
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**

        - **[Managing
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGetClaimsSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
          userMaybeSignedIn: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GetClaimsPayload'
  /claims:
    post:
      operationId: createClaim
      summary: Create Claim
      tags:
        - Claims
      description: >-
        Creates a new claim. Creating and maintaining claims are typically
        recommended

        to be done through the site, not the API, because they require special
        configuration.


        ```tsx

        const res = await BitBadgesApi.createClaim(...);

        ```


        Documentation References / Tutorials:

        - **[Getting
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**

        - **[Managing
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iCreateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    put:
      operationId: updateClaim
      summary: Update Claim
      tags:
        - Claims
      description: >-
        Updates an existing claim. Creating and maintaining claims are typically
        recommended

        to be done through the site, not the API, because they require special
        configuration.


        ```tsx

        const res = await BitBadgesApi.updateClaim(...);

        ```


        Documentation References / Tutorials:

        - **[Getting
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**

        - **[Managing
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iUpdateClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
    delete:
      operationId: deleteClaim
      summary: Delete Claim
      tags:
        - Claims
      description: >-
        Deletes a claim. Creating and maintaining claims are typically
        recommended

        to be done through the site, not the API, because they require special
        configuration.

        Claim deletion is a soft delete (i.e. the claim will become inactive and
        not displayed but can be reinstated with same ID later on).


        ```tsx

        const res = await BitBadgesApi.deleteClaim(...);

        ```


        Documentation References / Tutorials:

        - **[Getting
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/getting-claims)**

        - **[Managing
        Claims](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/managing-claims)**

        - **[Completing
        Claims](https://docs.bitbadges.io/for-developers/claim-builder/auto-complete-claims-w-bitbadges-api)**

        - **[All About BitBadges
        Claims](https://docs.bitbadges.io/for-developers/claim-builder)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteClaimPayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iDeleteClaimSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      parameters:
        - name: x-api-key
          in: header
          description: BitBadges API Key for authentication
          required: true
          schema:
            type: string
      security:
        - apiKey: []
          userSignedIn: []
  /siwbbRequest/appleWalletPass:
    post:
      operationId: generateAppleWalletPass
      summary: Generate Apple Wallet Pass
      tags:
        - Sign In with BitBadges
      description: |
        Generate an Apple Wallet pass based on the provided request body.
        ```tsx
         <a
              onClick={async () => {
                const res = await BitBadgesApi.generateAppleWalletPass({
                  ...
                });
                const pass = Buffer.from(res.data);

                const blob = new Blob([pass], { type: 'application/vnd.apple.pkpass' });
                const url = window.URL.createObjectURL(blob);
                if (url) {
                  const link = document.createElement('a');
                  link.href = url;
                  link.download = 'bitbadges.pkpass';
                  link.click();
                }
              }}>
              <img src="/images/add_to_apple_wallet.svg" style={{ width: 150 }} />
            </a>
        ```
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iGenerateAppleWalletPassSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      x-internal: true
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateAppleWalletPassPayload'
  /oauth/token:
    post:
      operationId: getOauthAccessToken
      summary: Get OAuth Access Token
      tags:
        - OAuth API Authorization
      description: >-
        Exchange either a refresh token or OAuth authorization code for a new
        access token. The initial access

        token can be received by setting up an OAuth app + redirect URI. See
        authorization documentation

        for more information. This should be called from your redirect handler.


        IMPORTANT: Keep your client secret safe and secure.


        This is not applicable to the Sign In with BitBadges flow. This is for
        BitBadges API authorization.


        ```tsx

        // POST https://api.bitbadges.io/api/v0/oauth/token

        const res = await BitBadgesApi.getOauthAccessToken({
            client_id,
            client_secret,
            grant_type: 'authorization_code',
            redirect_uri,
            code, //the received authorization code
        })

        ```


        Documentation References / Tutorials:

        - **[API
        Authorization](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/authentication)**



        Refresh Example

        ```tsx

        const res = await BitBadgesApi.getOauthAccessToken({
            client_id,
            client_secret,
            grant_type: 'refresh_token',
            redirect_uri,
            refresh_token
        })

        ```
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iOauthTokenSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OauthTokenPayload'
  /oauth/token/revoke:
    post:
      operationId: revokeOauthAuthorization
      summary: Revoke Authorization
      tags:
        - OAuth API Authorization
      description: >-
        Revokes the authorization. The token can either be an access token or a
        refresh token.

        This endpoint revokes all tokens associated with the procided token
        (thus revoking the entire authorization).

        This can be called by the user or the authorized application.


        This is not applicable to the Sign In with BitBadges flow. This is for
        BitBadges API authorization.


        ```tsx

        await BitBadgesApi.revokeOauthAuthorization({ token });

        ```



        Documentation References / Tutorials:

        - **[API
        Authorization](https://docs.bitbadges.io/for-developers/bitbadges-api/tutorials/authentication)**
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OauthRevokePayload'
      responses:
        '200':
          description: Success response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/iOauthRevokeSuccessResponse'
        '400':
          $ref: '#/components/responses/BadRequestResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedResponse'
        '500':
          $ref: '#/components/responses/InternalServerErrorResponse'
      security:
        - apiKey: []
components:
  responses:
    ErrorResponse:
      description: An error response
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    BadRequestResponse:
      description: Bad Request - Invalid configuration or request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    UnauthorizedResponse:
      description: >-
        Unauthorized - Does not meet authentication requirements. This can be
        due to an invalid API key, CORS origin, or session cookie.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    InternalServerErrorResponse:
      description: Internal Server Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    apiKey:
      type: apiKey
      in: header
      name: x-api-key
      description: Requires a BitBadges API key. This is true for all requests.
      x-type: string
    frontendOnly:
      type: apiKey
      in: header
      name: Origin
      description: >-
        Can only be called by the official BitBadges frontend. Not for developer
        use.
    userSignedIn:
      type: http
      scheme: cookie
      description: User must be signed in with a valid session and correct scopes.
    userMaybeSignedIn:
      type: http
      scheme: cookie
      description: >-
        User must be signed in for certain requests that fetch sensitive
        information, but certain requests can be made without being signed in.
    userIsManager:
      type: http
      scheme: cookie
      description: User must be signed in and be the manager of the requested collection.
    userIsOwner:
      type: http
      scheme: cookie
      description: User must be signed in and must be the owner of the requested object.
  schemas:
    NumberType:
      example: '1'
      description: >-
        A numeric or stringified number. See SDK docs for NumberType
        conversions. Stringified numbers are used to avoid precision loss.
    SupportedChain:
      enum:
        - Bitcoin
        - Ethereum
        - Cosmos
        - Solana
        - Unknown
      type: string
    AssetDetails:
      properties:
        chain:
          type: string
        collectionId:
          $ref: '#/components/schemas/NumberType'
        assetIds:
          items:
            anyOf:
              - type: string
              - $ref: '#/components/schemas/iUintRange'
          type: array
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
          examples: &ref_31
            - - start: '1713301889'
                end: '2000000000'
            - - start: '1'
                end: '18446744073709551615'
        mustOwnAmounts:
          $ref: '#/components/schemas/iUintRange'
        additionalCriteria:
          type: string
      required:
        - chain
        - collectionId
        - assetIds
        - ownershipTimes
        - mustOwnAmounts
      additionalProperties: false
      type: object
    AndGroup:
      properties:
        $and:
          items:
            $ref: '#/components/schemas/AssetConditionGroup'
          type: array
      required:
        - $and
      additionalProperties: false
      type: object
    OrGroup:
      properties:
        $or:
          items:
            $ref: '#/components/schemas/AssetConditionGroup'
          type: array
      required:
        - $or
      additionalProperties: false
      type: object
    AssetConditionGroup:
      anyOf:
        - $ref: '#/components/schemas/AndGroup'
        - $ref: '#/components/schemas/OrGroup'
        - $ref: '#/components/schemas/OwnershipRequirements'
      examples:
        - $and:
            - assets:
                - chain: BitBadges
                  collectionId: '1'
                  assetIds:
                    - start: '1'
                      end: '1'
                  mustOwnAmounts:
                    start: '1'
                    end: '1'
                  ownershipTimes: []
    OwnershipRequirements:
      properties:
        assets:
          items:
            $ref: '#/components/schemas/AssetDetails'
          type: array
        options:
          properties:
            numMatchesForVerification:
              $ref: '#/components/schemas/NumberType'
          additionalProperties: false
          type: object
      required:
        - assets
      additionalProperties: false
      type: object
    ChallengeParams:
      properties:
        domain:
          type: string
          examples: &ref_0
            - https://example.com
            - ipfs://Qm...
        statement:
          type: string
        address:
          type: string
        uri:
          type: string
          examples: &ref_1
            - https://example.com
            - ipfs://Qm...
        nonce:
          type: string
        version:
          type: string
        chainId:
          type: string
        issuedAt:
          type: string
          examples: &ref_2
            - '2022-01-01T00:00:00Z'
        expirationDate:
          type: string
          examples: &ref_3
            - '2022-01-01T00:00:00Z'
        notBefore:
          type: string
          examples: &ref_4
            - '2022-01-01T00:00:00Z'
        resources:
          items:
            type: string
          type: array
          examples: &ref_5
            - - 'Full Access: Full access to all features.'
        assetOwnershipRequirements:
          examples: &ref_6
            - assets:
                - chain: BitBadges
                  collectionId: '1'
                  assetIds:
                    - start: '1'
                      end: '1'
                  mustOwnAmounts:
                    start: '1'
                    end: '1'
                  ownershipTimes: []
          $ref: '#/components/schemas/AssetConditionGroup'
      required:
        - domain
        - statement
        - address
        - uri
        - nonce
      additionalProperties: false
      type: object
    VerifyChallengeOptions:
      properties:
        expectedChallengeParams:
          properties:
            domain:
              type: string
              examples: *ref_0
            statement:
              type: string
            address:
              type: string
            uri:
              type: string
              examples: *ref_1
            nonce:
              type: string
            version:
              type: string
            chainId:
              type: string
            issuedAt:
              type: string
              examples: *ref_2
            expirationDate:
              type: string
              examples: *ref_3
            notBefore:
              type: string
              examples: *ref_4
            resources:
              items:
                type: string
              type: array
              examples: *ref_5
            assetOwnershipRequirements:
              $ref: '#/components/schemas/AssetConditionGroup'
              examples: *ref_6
          additionalProperties: false
          description: >-
            Optionally define the expected details to check. If the challenge
            was edited and the details

            do not match, the challenge will fail verification.
          type: object
        balancesSnapshot:
          description: >-
            For verification of assets, instead of dynamically fetching the
            assets, you can specify a snapshot of the assets.


            This is useful if you have a snapshot, balances will not change, or
            you are verifying in an offline manner.
          type: object
        skipTimestampVerification:
          description: >-
            If true, we do not check timestamps (expirationDate / notBefore).
            This is useful if you are verifying a challenge that is expected to
            be verified at a future time.
          type: boolean
        skipAssetVerification:
          description: >-
            If true, we do not check asset ownership. This is useful if you are
            verifying a challenge that is expected to be verified at a future
            time.
          type: boolean
        earliestIssuedAt:
          description: >-
            The earliest issued At ISO date string that is valid. For example,
            if you want to verify a challenge that was issued within the last
            minute, you can specify this to be 1 minute ago.
          type: string
          examples:
            - '2022-01-01T00:00:00Z'
        issuedAtTimeWindowMs:
          description: >-
            If set, we will verify the issuedAt is within this amount of ms ago
            (i.e. issuedAt >= Date.now() - issuedAtTimeWindowMs)
          type: number
        skipSignatureVerification:
          description: >-
            If true, we do not check the signature. You can pass in an undefined
            ChainDriver
          type: boolean
      additionalProperties: false
      type: object
    Doc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
      required:
        - _docId
      additionalProperties: false
      type: object
    ErrorResponse:
      properties:
        error:
          description: >-
            Serialized error object for debugging purposes. Technical users can
            use this to debug issues.
          type: string
        errorMessage:
          description: >-
            UX-friendly error message that can be displayed to the user. Always
            present if error.
          type: string
        unauthorized:
          description: Authentication error. Present if the user is not authenticated.
          type: boolean
      required:
        - errorMessage
      additionalProperties: false
      description: >-
        If an error occurs, the response will be an ErrorResponse.


        400 - Bad Request (e.g. invalid request body)

        401 - Unauthorized (e.g. invalid session cookie; must sign in with
        Blockin)

        500 - Internal Server Error
      type: object
    PaginationInfo:
      properties:
        bookmark:
          description: >-
            The bookmark for the next page of results. Obtained from previous
            response.
          type: string
        hasMore:
          description: Whether there are more results to fetch.
          type: boolean
      required:
        - bookmark
        - hasMore
      additionalProperties: false
      description: Type for pagination information.
      type: object
    iUpdateHistory:
      properties:
        txHash:
          description: The transaction hash of the on-chain transaction that updated this.
          type: string
          examples: &ref_7
            - CE22D7...
        block:
          description: The block number of the on-chain transaction that updated this.
          $ref: '#/components/schemas/NumberType'
        blockTimestamp:
          description: >-
            The timestamp of the block of the on-chain transaction that updated
            this.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        timestamp:
          description: >-
            The indexer's timestamp of the update. This is provided in some
            cases because the time of indexing may be inconsistent with the time
            of the block.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - txHash
        - block
        - blockTimestamp
        - timestamp
      additionalProperties: false
      type: object
    ErrorDoc:
      properties:
        _docId:
          type: string
        _id:
          type: string
        error:
          type: string
        function:
          type: string
      required:
        - _docId
        - error
        - function
      additionalProperties: false
      type: object
    UNIXMilliTimestamp:
      description: >-
        Numeric timestamp - value is equal to the milliseconds since the UNIX
        epoch.
      examples:
        - '1713301889'
    CosmosAddress:
      description: >-
        All supported addresses map to a Bech32 Cosmos address which is used by
        the BitBadges blockchain behind the scenes.

        For conversion, see the BitBadges documentation. If this type is used,
        we must always convert to a Cosmos address before using it.
      type: string
      examples:
        - cosmos1...
    BlockinMessage:
      description: >-
        BlockinMessage is the sign-in challenge strint to be signed by the user.
        It extends EIP 4361 Sign-In with Ethereum

        and adds additional fields for cross-chain compatibility and native
        asset ownership verification.


        For example, 'https://bitbadges.io wants you to sign in with your
        Ethereum address ...'
      type: string
      examples:
        - https://bitbadges.io wants you to sign in with your Cosmos address....
    NativeAddress:
      description: >-
        A native address is an address that is native to the user's chain. For
        example, an Ethereum address is native to Ethereum (0x...).

        If this type is used, we support any native address type. We do not
        require conversion to a Cosmos address like the CosmosAddress type.
      type: string
      examples:
        - 0x...
        - bc1...
        - cosmos1...
    iSocialConnections:
      properties:
        discord:
          properties:
            username:
              type: string
            id:
              type: string
            discriminator:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        twitter:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        google:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
        github:
          properties:
            username:
              type: string
            id:
              type: string
            lastUpdated:
              $ref: '#/components/schemas/UNIXMilliTimestamp'
          required:
            - username
            - id
            - lastUpdated
          additionalProperties: false
          type: object
      additionalProperties: false
      description: >-
        Social connections are tracked for each user to provide an enhanced
        experience.

        These are kept private from other users or sites using the API.

        Currently, there is no use for these, but they may be used in the
        future.
      type: object
    iNotificationPreferences:
      properties:
        email:
          description: The email to receive push notifications.
          type: string
        discord:
          properties:
            id:
              type: string
            username:
              type: string
            discriminator:
              type: string
            token:
              type: string
          required:
            - id
            - username
            - discriminator
            - token
          additionalProperties: false
          description: The Discord ID to receive push notifications.
          type: object
        emailVerification:
          description: The verification status of the email.
          $ref: '#/components/schemas/iEmailVerificationStatus'
        preferences:
          properties:
            listActivity:
              type: boolean
            transferActivity:
              type: boolean
            claimAlerts:
              type: boolean
            ignoreIfInitiator:
              type: boolean
          additionalProperties: false
          description: >-
            The preferences for the notifications. What type of notifications
            does the user want to receive?
          type: object
      additionalProperties: false
      description: Details about the user's push notification preferences.
      type: object
    iEmailVerificationStatus:
      properties:
        verified:
          description: Whether or not the email has been verified.
          type: boolean
        token:
          description: >-
            The email verification token. This is used for verification and
            unsubscription.
          type: string
        expiry:
          description: The expiry of the token for verification purposes.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        antiPhishingCode:
          description: >-
            A unique code that we will send with all emails to verify that
            BitBadges is the one sending the email.
          type: string
      additionalProperties: false
      description: The verification status of the user's email.
      type: object
    iActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
      required:
        - _docId
        - timestamp
        - block
      additionalProperties: false
      description: The base document interface for all acitivity types.
      type: object
    iReviewDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        review:
          description: The review text (max 2048 characters).
          type: string
        stars:
          description: The number of stars given (1-5).
          $ref: '#/components/schemas/NumberType'
        from:
          description: The user who gave the review.
          $ref: '#/components/schemas/CosmosAddress'
        collectionId:
          description: >-
            The collection ID of the collection that was reviewed. Only
            applicable to collection reviews.
          $ref: '#/components/schemas/NumberType'
        reviewedAddress:
          description: >-
            The Cosmos address of the user who the review is for. Only
            applicable to user reviews.
          $ref: '#/components/schemas/CosmosAddress'
      required:
        - _docId
        - timestamp
        - block
        - review
        - stars
        - from
      additionalProperties: false
      description: ''
      type: object
    iTransferActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        to:
          items:
            $ref: '#/components/schemas/CosmosAddress'
          description: The list of recipients.
          type: array
        from:
          description: The sender of the badges.
          $ref: '#/components/schemas/CosmosAddress'
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The list of balances and badge IDs that were transferred.
          type: array
        collectionId:
          description: The collection ID for the badges that was transferred.
          $ref: '#/components/schemas/NumberType'
        memo:
          description: The memo of the transfer.
          type: string
        precalculateBalancesFromApproval:
          description: Which approval to use to precalculate the balances?
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            The prioritized approvals of the transfer. This is used to check
            certain approvals before others to ensure intended behavior.
          type: array
        initiatedBy:
          description: The user who initiated the transfer transaction.
          $ref: '#/components/schemas/CosmosAddress'
        txHash:
          description: The transaction hash of the activity.
          type: string
          examples: *ref_7
      required:
        - _docId
        - timestamp
        - block
        - to
        - from
        - balances
        - collectionId
        - initiatedBy
      additionalProperties: false
      description: ''
      type: object
    iListActivityDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        listId:
          description: The list ID.
          type: string
          examples: &ref_11
            - customOrReservedListId
            - Mint
            - All
            - cosmos1...
        initiatedBy:
          description: Initiator of the list activity.
          $ref: '#/components/schemas/CosmosAddress'
        addedToList:
          description: Whether or not the address was added to the list or removed.
          type: boolean
        addresses:
          items:
            $ref: '#/components/schemas/CosmosAddress'
          description: The list of addresses that were added or removed from the list.
          type: array
        txHash:
          description: The transaction hash of the activity.
          type: string
          examples: *ref_7
      required:
        - _docId
        - timestamp
        - block
        - listId
        - initiatedBy
      additionalProperties: false
      description: ''
      type: object
    iClaimAlertDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        timestamp:
          description: The timestamp of the activity.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        block:
          description: The block number of the activity.
          $ref: '#/components/schemas/NumberType'
        _notificationsHandled:
          description: >-
            Whether or not the notifications have been handled by the indexer or
            not.
          type: boolean
        from:
          description: The sender
          type: string
        cosmosAddresses:
          items:
            $ref: '#/components/schemas/CosmosAddress'
          description: The cosmos addresses of the users that have been alerted.
          type: array
        collectionId:
          description: The collection ID of the claim alert.
          $ref: '#/components/schemas/NumberType'
        message:
          description: The message of the claim alert.
          type: string
      required:
        - _docId
        - timestamp
        - block
        - from
        - cosmosAddresses
        - collectionId
      additionalProperties: false
      description: ''
      type: object
    iCollectionDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
          description: The collection metadata timeline
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
          description: The badge metadata timeline
          type: array
        balancesType:
          enum:
            - Standard
            - Off-Chain - Indexed
            - Non-Public
            - Off-Chain - Non-Indexed
          description: >-
            The type of balances (i.e. "Standard", "Off-Chain - Indexed",
            "Non-Public, "Off-Chain - Non-Indexed")
          type: string
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          description: The off-chain balances metadata timeline
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
          description: The custom data timeline
          type: array
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          description: The manager timeline
          type: array
        collectionPermissions:
          description: The collection permissions
          $ref: '#/components/schemas/iCollectionPermissions'
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
          description: The collection approved transfers timeline
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
          description: The standards timeline
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
          description: The is archived timeline
          type: array
        defaultBalances:
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only used if collection has "Standard" balance type.
          $ref: '#/components/schemas/iUserBalanceStore'
        createdBy:
          description: The cosmos address of the user who created this collection
          $ref: '#/components/schemas/CosmosAddress'
        createdBlock:
          description: The block number when this collection was created
          $ref: '#/components/schemas/NumberType'
        createdTimestamp:
          description: >-
            The timestamp when this collection was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this collection
          type: array
        aliasAddress:
          description: The alias cosmos address for the collection
          $ref: '#/components/schemas/CosmosAddress'
      required:
        - _docId
        - collectionId
        - collectionMetadataTimeline
        - badgeMetadataTimeline
        - balancesType
        - offChainBalancesMetadataTimeline
        - customDataTimeline
        - managerTimeline
        - collectionPermissions
        - collectionApprovals
        - standardsTimeline
        - isArchivedTimeline
        - defaultBalances
        - createdBy
        - createdBlock
        - createdTimestamp
        - updateHistory
        - aliasAddress
      additionalProperties: false
      description: ''
      type: object
    iAccountDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        publicKey:
          description: The public key of the account
          type: string
          examples: &ref_15
            - AksB.... (base64)
        accountNumber:
          description: The account number of the account
          $ref: '#/components/schemas/NumberType'
        pubKeyType:
          description: The public key type of the account
          type: string
        cosmosAddress:
          description: The Cosmos address of the account
          examples: &ref_10
            - cosmos1...
          $ref: '#/components/schemas/CosmosAddress'
        ethAddress:
          description: The Eth address of the account
          type: string
          examples: &ref_20
            - 0x...
        solAddress:
          description: The Solana address of the account
          type: string
          examples: &ref_9
            - 6H2af6...
        btcAddress:
          description: The Bitcoin address of the account
          type: string
          examples: &ref_21
            - bc1...
        sequence:
          description: The sequence of the account
          $ref: '#/components/schemas/NumberType'
        balance:
          description: The balance of the account
          $ref: '#/components/schemas/iCosmosCoin'
      required:
        - _docId
        - publicKey
        - accountNumber
        - pubKeyType
        - cosmosAddress
        - ethAddress
        - solAddress
        - btcAddress
      additionalProperties: false
      description: ''
      type: object
    iCustomLink:
      properties:
        title:
          description: Title of the link
          type: string
        url:
          description: URL of the link
          type: string
        image:
          description: Description of the link
          type: string
          examples: &ref_14
            - https://example.com/image.png
            - ipfs://Qm...
      required:
        - title
        - url
        - image
      additionalProperties: false
      description: CustomLinks are custom links that can be added to a profile.
      type: object
    iCustomPage:
      properties:
        title:
          description: The title of the custom page
          type: string
        description:
          description: The description of the custom page
          type: string
          examples: &ref_8
            - Brief description.
        items:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
          description: The badge IDs to display on the custom page
          type: array
      required:
        - title
        - description
        - items
      additionalProperties: false
      type: object
    iCustomListPage:
      properties:
        title:
          description: The title of the custom list page
          type: string
        description:
          description: The description of the custom list page
          type: string
          examples: *ref_8
        items:
          items:
            type: string
          description: The list IDs to display on the custom list page
          type: array
      required:
        - title
        - description
        - items
      additionalProperties: false
      description: >-
        CustomListPage is a custom list page that can be added to a profile. The
        items are valid list IDs.
      type: object
    iProfileDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        fetchedProfile:
          description: Whether we have already fetched the profile or not
          type: boolean
        seenActivity:
          description: >-
            The timestamp of the last activity seen for this account
            (milliseconds since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        createdAt:
          description: >-
            The timestamp of when this account was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        discord:
          description: The Discord username of the account
          type: string
        twitter:
          description: The Twitter username of the account
          type: string
        github:
          description: The GitHub username of the account
          type: string
        telegram:
          description: The Telegram username of the account
          type: string
        readme:
          description: The readme of the account
          type: string
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
          description: The custom links of the account
          type: array
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
          description: The hidden badges of the account
          type: array
        hiddenLists:
          items:
            type: string
          description: The hidden lists of the account
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: The custom pages of the account
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: The watched lists of the account's portfolio
          type: object
        profilePicUrl:
          description: The profile picture URL of the account
          type: string
          examples: &ref_19
            - https://example.com
            - ipfs://Qm...
        username:
          description: The username of the account
          type: string
        latestSignedInChain:
          description: The latest chain the user signed in with
          $ref: '#/components/schemas/SupportedChain'
        solAddress:
          description: >-
            The Solana address of the profile, if applicable (bc we need it to
            convert)
          type: string
          examples: *ref_9
        notifications:
          description: The notifications of the account
          $ref: '#/components/schemas/iNotificationPreferences'
        socialConnections:
          description: Social connections stored for the account
          $ref: '#/components/schemas/iSocialConnections'
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            github:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            google:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            twitter:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
          additionalProperties: false
          description: Approved ways to sign in (rather than Blockin)
          type: object
      required:
        - _docId
      additionalProperties: false
      description: ''
      type: object
    iQueueDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        uri:
          description: >-
            The URI of the metadata to be fetched. If {id} is present, it will
            be replaced with each individual ID in badgeIds
          type: string
          examples: *ref_1
        collectionId:
          description: The collection ID of the metadata to be fetched
          $ref: '#/components/schemas/NumberType'
        loadBalanceId:
          description: >-
            The load balance ID of the metadata to be fetched. Only the node
            with the same load balance ID will fetch this metadata
          $ref: '#/components/schemas/NumberType'
        refreshRequestTime:
          description: >-
            The timestamp of when this metadata was requested to be refreshed
            (milliseconds since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        numRetries:
          description: >-
            The number of times this metadata has been tried to be fetched but
            failed
          $ref: '#/components/schemas/NumberType'
        lastFetchedAt:
          description: >-
            The timestamp of when this metadata was last fetched (milliseconds
            since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        error:
          description: The error message if this metadata failed to be fetched
          type: string
        deletedAt:
          description: >-
            The timestamp of when this document was deleted (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        nextFetchTime:
          description: >-
            The timestamp of when this document should be fetched next
            (milliseconds since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        emailMessage:
          type: string
        recipientAddress:
          type: string
        activityDocId:
          type: string
        notificationType:
          type: string
        claimInfo:
          properties:
            session: {}
            body: {}
            claimId:
              type: string
            cosmosAddress:
              $ref: '#/components/schemas/CosmosAddress'
              examples: *ref_10
          required:
            - session
            - body
            - claimId
            - cosmosAddress
          additionalProperties: false
          type: object
      required:
        - _docId
        - uri
        - collectionId
        - loadBalanceId
        - refreshRequestTime
        - numRetries
      additionalProperties: false
      description: ''
      type: object
    iIndexerStatus:
      properties:
        status:
          $ref: '#/components/schemas/iStatusDoc'
      required:
        - status
      additionalProperties: false
      type: object
    iLatestBlockStatus:
      properties:
        height:
          description: The height of the latest block
          $ref: '#/components/schemas/NumberType'
        txIndex:
          description: The transaction index of the latest block
          $ref: '#/components/schemas/NumberType'
        timestamp:
          description: The timestamp of the latest block (milliseconds since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - height
        - txIndex
        - timestamp
      additionalProperties: false
      type: object
    iStatusDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        block:
          description: The latest synced block status (i.e. height, txIndex, timestamp)
          $ref: '#/components/schemas/iLatestBlockStatus'
        nextCollectionId:
          description: The next collection ID to be used
          $ref: '#/components/schemas/NumberType'
        gasPrice:
          description: The current gas price based on the average of the lastXGasAmounts
          type: number
        lastXGasAmounts:
          items:
            $ref: '#/components/schemas/NumberType'
          description: The last X gas prices
          type: array
        lastXGasLimits:
          items:
            $ref: '#/components/schemas/NumberType'
          description: The last X gas limits
          type: array
      required:
        - _docId
        - block
        - nextCollectionId
        - gasPrice
        - lastXGasAmounts
        - lastXGasLimits
      additionalProperties: false
      description: ''
      type: object
    iAddressListEditKey:
      properties:
        key:
          description: The key that can be used to edit the address list
          type: string
        expirationDate:
          description: The expiration date of the key (milliseconds since epoch)
          examples: *ref_3
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        mustSignIn:
          description: True if the user can only add their signed in address to the list
          type: boolean
      required:
        - key
        - expirationDate
      additionalProperties: false
      type: object
    iAddressListDoc:
      properties:
        listId:
          description: The ID of the address list.
          type: string
          examples: *ref_11
        addresses:
          items:
            type: string
          description: >-
            The addresses of the address list. If this is a tracker list, the
            addresses are the tracker IDs.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          description: The address that created the address list.
          $ref: '#/components/schemas/CosmosAddress'
        aliasAddress:
          description: The alias cosmos address of the address list.
          $ref: '#/components/schemas/CosmosAddress'
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this list
          type: array
        createdBlock:
          description: The block number when this list was created
          $ref: '#/components/schemas/NumberType'
        lastUpdated:
          description: >-
            The timestamp of when this list was last updated (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        nsfw:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: The NSFW reason if this list is NSFW
          type: object
        reported:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: The reported reason if this list is reported
          type: object
        private:
          description: True if this list is private and will not show up in search results
          type: boolean
        viewableWithLink:
          description: True if this list is viewable if queried by the list ID directly
          type: boolean
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
        - _docId
        - updateHistory
        - createdBlock
        - lastUpdated
      additionalProperties: false
      description: ''
      type: object
    iBalanceDoc:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          description: The user's permissions.
          $ref: '#/components/schemas/iUserPermissions'
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        cosmosAddress:
          description: The Cosmos address of the user
          examples: *ref_10
          $ref: '#/components/schemas/CosmosAddress'
        onChain:
          description: True if the balances are on-chain
          type: boolean
        uri:
          description: The URI of the off-chain balances
          type: string
          examples: *ref_1
        fetchedAt:
          description: >-
            The timestamp of when the off-chain balances were fetched
            (milliseconds since epoch). For BitBadges indexer, we only populate
            this for Mint and Total docs.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        fetchedAtBlock:
          description: >-
            The block number of when the off-chain balances were fetched. For
            BitBadges indexer, we only populate this for Mint and Total docs.
          $ref: '#/components/schemas/NumberType'
        isPermanent:
          description: True if the off-chain balances are using permanent storage
          type: boolean
        contentHash:
          description: The content hash of the off-chain balances
          type: string
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this balance
          type: array
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - _docId
        - collectionId
        - cosmosAddress
        - onChain
        - updateHistory
      additionalProperties: false
      description: >-
        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.
      type: object
    ClaimIntegrationPluginType:
      type: string
    JsonBodyInputWithValue:
      properties:
        key:
          type: string
        label:
          type: string
        type:
          enum:
            - date
            - url
          type: string
        value:
          anyOf:
            - type: string
            - type: number
            - type: boolean
      required:
        - key
        - label
        - value
      additionalProperties: false
      type: object
    JsonBodyInputSchema:
      properties:
        key:
          type: string
        label:
          type: string
        type:
          enum:
            - date
            - url
            - string
            - number
            - boolean
          type: string
        helper:
          type: string
      required:
        - key
        - label
        - type
      additionalProperties: false
      type: object
    iClaimBuilderDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        cid:
          description: >-
            The CID (content ID) of the document. This is used behind the scenes
            to handle off-chain vs on-chain data races.
          type: string
        createdBy:
          description: The cosmos address of the user who created this password
          $ref: '#/components/schemas/CosmosAddress'
        docClaimed:
          description: True if the document is claimed by the collection
          type: boolean
        collectionId:
          description: The collection ID of the document
          $ref: '#/components/schemas/NumberType'
        trackerDetails:
          description: Which challenge tracker is it tied to
          $ref: '#/components/schemas/iChallengeTrackerIdDetails'
        deletedAt:
          description: Deleted at timestamp
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        plugins:
          items: {}
          description: Dynamic checks to run in the form of plugins
          type: array
        manualDistribution:
          description: >-
            If true, the claim codes are to be distributed manually. This doc
            will only be used for storage purposes.
          type: boolean
        automatic:
          description: >-
            If true, the claim has been designated to be completed automatically
            for users.
          type: boolean
        metadata:
          description: Metadata for the claim
          $ref: '#/components/schemas/iMetadata'
        state:
          additionalProperties: {}
          description: The current state of each plugin
          type: object
        action:
          properties:
            codes:
              items:
                type: string
              type: array
            seedCode:
              type: string
            balancesToSet:
              $ref: '#/components/schemas/iPredeterminedBalances'
            listId:
              type: string
              examples: *ref_11
          additionalProperties: false
          description: Details for the action to perform if the criteria is correct
          type: object
        lastUpdated:
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - _docId
        - cid
        - createdBy
        - docClaimed
        - collectionId
        - plugins
        - state
        - action
        - lastUpdated
      additionalProperties: false
      description: ''
      type: object
    iApprovalTrackerDoc:
      properties:
        collectionId:
          description: The collection ID for the approval.
          $ref: '#/components/schemas/NumberType'
        approvalId:
          description: The approval ID
          type: string
        amountTrackerId:
          description: The amount tracker ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
          examples: &ref_12
            - collection
            - incoming
            - outgoing
        approverAddress:
          description: The address of the approval to check.
          $ref: '#/components/schemas/CosmosAddress'
        trackerType:
          description: >-
            The type of tracker to check "overall", "to", "from", or
            "initiatedBy".
          type: string
        approvedAddress:
          description: The address to check for the approval.
          $ref: '#/components/schemas/CosmosAddress'
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        numTransfers:
          description: The number of transfers. Is an incrementing tally.
          $ref: '#/components/schemas/NumberType'
        amounts:
          items:
            $ref: '#/components/schemas/iBalance'
          description: A tally of the amounts transferred for this approval.
          type: array
      required:
        - collectionId
        - approvalId
        - amountTrackerId
        - approvalLevel
        - approverAddress
        - trackerType
        - approvedAddress
        - _docId
        - numTransfers
        - amounts
      additionalProperties: false
      description: ''
      type: object
    iChallengeTrackerIdDetails:
      properties:
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        approvalId:
          description: The approval ID
          type: string
        challengeTrackerId:
          description: The challenge ID
          type: string
        approvalLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
          examples: *ref_12
        approverAddress:
          description: The approver address (leave blank if approvalLevel = "collection")
          $ref: '#/components/schemas/CosmosAddress'
      required:
        - collectionId
        - approvalId
        - challengeTrackerId
        - approvalLevel
        - approverAddress
      additionalProperties: false
      type: object
    iMerkleChallengeDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        challengeTrackerId:
          description: The challenge ID
          type: string
        approvalId:
          description: The approval ID
          type: string
        approvalLevel:
          enum:
            - collection
            - incoming
            - outgoing
            - ''
          description: The challenge level (i.e. "collection", "incoming", "outgoing")
          type: string
          examples: *ref_12
        approverAddress:
          description: The approver address (leave blank if approvalLevel = "collection")
          $ref: '#/components/schemas/CosmosAddress'
        usedLeafIndices:
          items:
            $ref: '#/components/schemas/iUsedLeafStatus'
          description: >-
            The used leaf indices for each challenge. A leaf index is the leaf
            location in the bottommost layer of the Merkle tree
          type: array
      required:
        - _docId
        - collectionId
        - challengeTrackerId
        - approvalId
        - approvalLevel
        - approverAddress
        - usedLeafIndices
      additionalProperties: false
      description: ''
      type: object
    iUsedLeafStatus:
      properties:
        leafIndex:
          description: The leaf index
          $ref: '#/components/schemas/NumberType'
        usedBy:
          description: The address that used the leaf
          $ref: '#/components/schemas/CosmosAddress'
      required:
        - leafIndex
        - usedBy
      additionalProperties: false
      type: object
    iFetchDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        content:
          anyOf:
            - $ref: '#/components/schemas/iMetadata'
            - $ref: '#/components/schemas/iApprovalInfoDetails'
            - $ref: '#/components/schemas/iOffChainBalancesMap'
            - $ref: '#/components/schemas/iChallengeDetails'
          description: >-
            The content of the fetch document. Note that we store balances in
            BALANCES_DB and not here to avoid double storage.
        fetchedAt:
          description: The time the document was fetched
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        fetchedAtBlock:
          description: The block the document was fetched
          $ref: '#/components/schemas/NumberType'
        db:
          enum:
            - ApprovalInfo
            - Metadata
            - Balances
            - ChallengeInfo
          description: The type of content fetched. This is used for querying purposes
          type: string
        isPermanent:
          description: >-
            True if the document is permanent (i.e. fetched from a permanent URI
            like IPFS)
          type: boolean
      required:
        - _docId
        - fetchedAt
        - fetchedAtBlock
        - db
        - isPermanent
      additionalProperties: false
      description: ''
      type: object
    iRefreshDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        refreshRequestTime:
          description: The time the refresh was requested (Unix timestamp in milliseconds)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - _docId
        - collectionId
        - refreshRequestTime
      additionalProperties: false
      description: ''
      type: object
    iAirdropDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        airdropped:
          description: True if the airdrop has been completed
          type: boolean
        timestamp:
          description: >-
            The timestamp of when the airdrop was completed (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        hash:
          description: The hash of the airdrop transaction
          type: string
      required:
        - _docId
        - airdropped
        - timestamp
      additionalProperties: false
      description: ''
      type: object
    iIPFSTotalsDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        bytesUploaded:
          description: The total bytes uploaded
          $ref: '#/components/schemas/NumberType'
      required:
        - _docId
        - bytesUploaded
      additionalProperties: false
      description: ''
      type: object
    iComplianceDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        badges:
          properties:
            nsfw:
              items:
                $ref: '#/components/schemas/iBatchBadgeDetails'
              type: array
            reported:
              items:
                $ref: '#/components/schemas/iBatchBadgeDetails'
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
        addressLists:
          properties:
            nsfw:
              items:
                properties:
                  listId:
                    type: string
                    examples: *ref_11
                  reason:
                    type: string
                required:
                  - listId
                  - reason
                additionalProperties: false
                type: object
              type: array
            reported:
              items:
                properties:
                  listId:
                    type: string
                    examples: *ref_11
                  reason:
                    type: string
                required:
                  - listId
                  - reason
                additionalProperties: false
                type: object
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
        accounts:
          properties:
            nsfw:
              items:
                properties:
                  cosmosAddress:
                    $ref: '#/components/schemas/CosmosAddress'
                    examples: *ref_10
                  reason:
                    type: string
                required:
                  - cosmosAddress
                  - reason
                additionalProperties: false
                type: object
              type: array
            reported:
              items:
                properties:
                  cosmosAddress:
                    $ref: '#/components/schemas/CosmosAddress'
                    examples: *ref_10
                  reason:
                    type: string
                required:
                  - cosmosAddress
                  - reason
                additionalProperties: false
                type: object
              type: array
          required:
            - nsfw
            - reported
          additionalProperties: false
          type: object
      required:
        - _docId
        - badges
        - addressLists
        - accounts
      additionalProperties: false
      description: ''
      type: object
    iDeveloperAppDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        createdBy:
          description: Creator of the app
          $ref: '#/components/schemas/CosmosAddress'
        name:
          description: The name of the app
          type: string
          examples: *ref_13
        description:
          description: The description of the app
          type: string
          examples: *ref_8
        image:
          description: The image of the app
          type: string
          examples: *ref_14
        clientId:
          description: The client ID of the app
          type: string
        clientSecret:
          description: The client secret of the app
          type: string
        redirectUris:
          items:
            type: string
          description: The redirect URI of the app
          type: array
      required:
        - _docId
        - createdBy
        - name
        - description
        - image
        - clientId
        - clientSecret
        - redirectUris
      additionalProperties: false
      description: ''
      type: object
    iAuthorizationCodeDoc:
      properties:
        _docId:
          type: string
        clientId:
          type: string
        redirectUri:
          type: string
        scopes:
          items:
            type: string
          type: array
        address:
          type: string
        cosmosAddress:
          type: string
          examples: *ref_10
        expiresAt:
          type: number
      required:
        - _docId
        - clientId
        - redirectUri
        - scopes
        - address
        - cosmosAddress
        - expiresAt
      additionalProperties: false
      type: object
    iAccessTokenDoc:
      properties:
        _docId:
          type: string
        accessToken:
          type: string
        tokenType:
          type: string
        clientId:
          type: string
        accessTokenExpiresAt:
          type: number
        refreshToken:
          type: string
        refreshTokenExpiresAt:
          type: number
        cosmosAddress:
          type: string
          examples: *ref_10
        address:
          type: string
        scopes:
          items:
            type: string
          type: array
      required:
        - _docId
        - accessToken
        - tokenType
        - clientId
        - accessTokenExpiresAt
        - refreshToken
        - refreshTokenExpiresAt
        - cosmosAddress
        - address
        - scopes
      additionalProperties: false
      type: object
    iPluginDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        createdBy:
          description: The Cosmos address who created the plugin doc
          $ref: '#/components/schemas/CosmosAddress'
        pluginId:
          description: The unique plugin ID
          type: string
        pluginSecret:
          description: The client secret of the plugin
          type: string
        reviewCompleted:
          description: Review process completed
          type: boolean
        reuseForNonIndexed:
          description: >-
            Reuse for nonindexed balances? Only applicable if is stateless,
            requires no user inputs, and requires no sessions.
          type: boolean
        stateFunctionPreset:
          description: Preset type for how the plugin state is to be maintained.
        duplicatesAllowed:
          description: Whether it makes sense for multiple of this plugin to be allowed
          type: boolean
        requiresSessions:
          description: >-
            This means that the plugin can be used w/o any session cookies or
            authentication.
          type: boolean
        requiresUserInputs:
          description: >-
            This is a flag for being compatible with auto-triggered claims,
            meaning no user interaction is needed.
          type: boolean
        metadata:
          properties:
            createdBy:
              description: Creator of the plugin
              type: string
            name:
              description: The name of the plugin
              type: string
              examples: *ref_13
            description:
              description: Description of the plugin
              type: string
              examples: *ref_8
            image:
              description: The image of the plugin
              type: string
              examples: *ref_14
            documentation:
              description: Documentation for the plugin
              type: string
            sourceCode:
              description: Source code for the plugin
              type: string
            supportLink:
              description: Support link for the plugin
              type: string
          required:
            - createdBy
            - name
            - description
            - image
          additionalProperties: false
          type: object
        frontendCustomization:
          properties:
            customCreateNode:
              type: boolean
            customEditNode:
              type: boolean
            customDisplayNode:
              type: boolean
          additionalProperties: false
          type: object
        userInputsSchema:
          items:
            $ref: '#/components/schemas/JsonBodyInputSchema'
          type: array
        publicParamsSchema:
          items:
            anyOf:
              - $ref: '#/components/schemas/JsonBodyInputSchema'
              - properties:
                  key:
                    type: string
                  label:
                    type: string
                  type:
                    enum:
                      - ownershipRequirements
                    type: string
                required:
                  - key
                  - label
                  - type
                additionalProperties: false
                type: object
          type: array
        privateParamsSchema:
          items:
            anyOf:
              - $ref: '#/components/schemas/JsonBodyInputSchema'
              - properties:
                  key:
                    type: string
                  label:
                    type: string
                  type:
                    enum:
                      - ownershipRequirements
                    type: string
                required:
                  - key
                  - label
                  - type
                additionalProperties: false
                type: object
          type: array
        verificationCall:
          properties:
            uri:
              type: string
              examples: *ref_1
            method:
              enum:
                - POST
                - GET
                - PUT
                - DELETE
              type: string
            hardcodedInputs:
              items:
                $ref: '#/components/schemas/JsonBodyInputWithValue'
              type: array
            passAddress:
              type: boolean
            passDiscord:
              type: boolean
            passTwitter:
              type: boolean
            passGoogle:
              type: boolean
            passGithub:
              type: boolean
          required:
            - uri
            - method
            - hardcodedInputs
            - passAddress
            - passDiscord
            - passTwitter
            - passGoogle
            - passGithub
          additionalProperties: false
          description: The verification URL
          type: object
        lastUpdated:
          $ref: '#/components/schemas/UNIXMilliTimestamp'
      required:
        - _docId
        - createdBy
        - pluginId
        - reviewCompleted
        - reuseForNonIndexed
        - stateFunctionPreset
        - duplicatesAllowed
        - requiresSessions
        - requiresUserInputs
        - metadata
        - userInputsSchema
        - publicParamsSchema
        - privateParamsSchema
        - lastUpdated
      additionalProperties: false
      description: ''
      type: object
    iSIWBBRequestDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        signature:
          description: >-
            The signature of the Blockin message with the Blockin params as the
            params field
          type: string
          examples: &ref_16
            - 0x...
            - 8d42172...
        publicKey:
          description: >-
            The public key for the signed. Only needed for certain chains
            (Cosmos).
          type: string
          examples: *ref_15
        name:
          type: string
          examples: *ref_13
        description:
          type: string
          examples: *ref_8
        image:
          type: string
          examples: *ref_14
        cosmosAddress:
          description: The Cosmos address of the signer
          examples: *ref_10
          $ref: '#/components/schemas/CosmosAddress'
        params:
          description: >-
            The sign-in params. These are all the details in the message that
            was signed.
          $ref: '#/components/schemas/ChallengeParams'
        secretsPresentations:
          items:
            $ref: '#/components/schemas/iSecretsProof'
          description: >-
            If required, you can additionally attach proof of secrets ot the
            auth flow. These can be used to prove sensitive information to
            verifiers.
          type: array
        createdAt:
          description: >-
            The timestamp of when the signature was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        deletedAt:
          description: >-
            If deleted, we still store temporarily for a period of time. We use
            a deletedAt timestamp to determine when to delete.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        clientId:
          description: The client ID of the app that requested the signature
          type: string
        otherSignIns:
          properties:
            discord:
              properties:
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            github:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            google:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            twitter:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
          additionalProperties: false
          description: Other approved sign-ins at the time of this sign-in
          type: object
        redirectUri:
          description: The redirect URI of the app
          type: string
      required:
        - _docId
        - signature
        - name
        - description
        - image
        - cosmosAddress
        - params
        - secretsPresentations
        - createdAt
        - clientId
      additionalProperties: false
      description: ''
      type: object
    iSecretDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the secretMessages.
          type: string
        createdBy:
          description: The address of the user who created the secret.
          $ref: '#/components/schemas/CosmosAddress'
        proofOfIssuance:
          properties:
            message:
              type: string
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: &ref_17
                - 0x...
                - 8d42172...
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this secret signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        secretId:
          description: >-
            The secret ID. This is the ID that is given to the user to query the
            secret. Anyone with the ID can query it, so keep this safe and
            secure.
          type: string
        scheme:
          enum:
            - bbs
            - standard
          description: >-
            The scheme of the secret. BBS+ signatures are supported and can be
            used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        type:
          description: The type of the secret (e.g. credential).
          type: string
        secretMessages:
          items:
            type: string
          description: >-
            Thesse are the secrets that are signed.

            For BBS+ signatures, there can be >1 secretMessages, and the signer
            can selectively disclose the secrets.

            For standard signatures, there is only 1 secretMessage.
          type: array
          examples: &ref_30
            - - secret message 1
              - secret message 2
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the
            secretMessages. The siganture maintains the integrity of the
            secretMessages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.
          type: object
        name:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_14
        description:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_8
        holders:
          items:
            type: string
          description: Holders are the addresses that have been given the secret.
          type: array
        anchors:
          items:
            properties:
              txHash:
                type: string
                examples: *ref_7
              message:
                type: string
            additionalProperties: false
            type: object
          description: |-
            Anchors are on-chain transactions used to prove certain things
            about the secret. For example, you can anchor the secret to a
            transaction hash to prove that the secret existed at a certain time.
          type: array
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          type: array
      required:
        - _docId
        - messageFormat
        - createdBy
        - proofOfIssuance
        - secretId
        - scheme
        - type
        - secretMessages
        - dataIntegrityProof
        - name
        - image
        - description
        - holders
        - anchors
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    iFollowDetailsDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        cosmosAddress:
          description: The Cosmos address of the user
          examples: *ref_10
          $ref: '#/components/schemas/CosmosAddress'
        followingCount:
          description: The number of users that the user is following
          $ref: '#/components/schemas/NumberType'
        followersCount:
          description: The number of users that are following the user
          $ref: '#/components/schemas/NumberType'
        followers:
          items:
            $ref: '#/components/schemas/CosmosAddress'
          description: The followers of the user
          type: array
        following:
          items:
            $ref: '#/components/schemas/CosmosAddress'
          description: The following of the user
          type: array
        followingCollectionId:
          description: The collection ID of the following collection
          $ref: '#/components/schemas/NumberType'
      required:
        - _docId
        - cosmosAddress
        - followingCount
        - followersCount
        - followers
        - following
        - followingCollectionId
      additionalProperties: false
      description: ''
      type: object
    iMapDoc:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        creator:
          $ref: '#/components/schemas/CosmosAddress'
        mapId:
          type: string
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          type: array
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
        defaultValue:
          type: string
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
          type: array
        values:
          additionalProperties:
            $ref: '#/components/schemas/iValueStore'
          description: The (key, value) pairs for the maps that are set.
          type: object
        metadata:
          description: The fetched metadata for the map (if any).
          $ref: '#/components/schemas/iMetadata'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: >-
            The update history for the map. Maps are maintained through
            blockchain transactions.
          type: array
      required:
        - _docId
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - permissions
        - metadataTimeline
        - values
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    iBadgeMetadataDetails:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs that correspond to the metadata
          type: array
          examples: *ref_18
        metadata:
          description: The metadata fetched by the URI
          $ref: '#/components/schemas/iMetadata'
        uri:
          description: >-
            The URI that the metadata was fetched from. This is the original
            on-chain URI, so may still have placeholders (i.e. {id} or
            {address})
          type: string
          examples: *ref_1
        fetchedUri:
          description: >-
            The URI that the metadata was fetched from with placeholders
            replaced.
          type: string
        customData:
          description: Custom data
          type: string
        toUploadToIpfs:
          description: >-
            Flag to denote if the metadata is new and should be updated. Used
            internally.
          type: boolean
      required:
        - badgeIds
        - uri
        - customData
      additionalProperties: false
      type: object
    iCollectionMetadataDetails:
      properties:
        metadata:
          description: The metadata fetched by the URI
          $ref: '#/components/schemas/iMetadata'
        uri:
          description: >-
            The URI that the metadata was fetched from. This is the original
            on-chain URI, so may still have placeholders (i.e. {id} or
            {address})
          type: string
          examples: *ref_1
        fetchedUri:
          description: >-
            The URI that the metadata was fetched from with placeholders
            replaced.
          type: string
        customData:
          description: Custom data
          type: string
        toUploadToIpfs:
          description: >-
            Flag to denote if the metadata is new and should be updated. Used
            internally.
          type: boolean
      required:
        - uri
        - customData
      additionalProperties: false
      type: object
    iMetadata:
      properties:
        name:
          description: The name of the badge or badge collection.
          type: string
          examples: *ref_13
        description:
          description: The description of the badge or badge collection. Supports markdown.
          type: string
          examples: *ref_8
        image:
          description: The image of the badge or badge collection.
          type: string
          examples: *ref_14
        video:
          description: >-
            The video of the badge or badge collection. If a standard video is
            used, this should be a link to the video. We will use image as the
            poster image. If a youtube video is used, we embed it as an iframe.
          type: string
          examples:
            - https://www.youtube.com/embed/VIDEO_ID
            - https://example.com/video.mp4
        category:
          description: >-
            The category of the badge or badge collection (e.g. "Education",
            "Attendance").
          type: string
        externalUrl:
          description: The external URL of the badge or badge collection.
          type: string
        tags:
          items:
            type: string
          description: The tags of the badge or badge collection
          type: array
        socials:
          additionalProperties:
            type: string
          description: The socials of the badge or badge collection
          type: object
        offChainTransferabilityInfo:
          properties:
            host:
              type: string
            assignMethod:
              type: string
          required:
            - host
            - assignMethod
          additionalProperties: false
          description: The off-chain transferability info of the badge or badge collection
          type: object
        attributes:
          items:
            properties:
              type:
                enum:
                  - date
                  - url
                type: string
              name:
                type: string
                examples: *ref_13
              value:
                anyOf:
                  - type: string
                  - type: number
                  - type: boolean
            required:
              - name
              - value
            additionalProperties: false
            type: object
          description: The attributes of the badge or badge collection
          type: array
        fetchedAtBlock:
          description: The block the metadata was fetched at.
          $ref: '#/components/schemas/NumberType'
        fetchedAt:
          description: The time the metadata was fetched.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        _isUpdating:
          description: Whether the metadata is currently being updated.
          type: boolean
      required:
        - name
        - description
        - image
      additionalProperties: false
      type: object
    iBitBadgesAddressList:
      properties:
        listId:
          description: The ID of the address list.
          type: string
          examples: *ref_11
        addresses:
          items:
            type: string
          description: >-
            The addresses of the address list. If this is a tracker list, the
            addresses are the tracker IDs.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          description: The address that created the address list.
          $ref: '#/components/schemas/CosmosAddress'
        aliasAddress:
          description: The alias cosmos address of the address list.
          $ref: '#/components/schemas/CosmosAddress'
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this list
          type: array
        createdBlock:
          description: The block number when this list was created
          $ref: '#/components/schemas/NumberType'
        lastUpdated:
          description: >-
            The timestamp of when this list was last updated (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        nsfw:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: The NSFW reason if this list is NSFW
          type: object
        reported:
          properties:
            reason:
              type: string
          required:
            - reason
          additionalProperties: false
          description: The reported reason if this list is reported
          type: object
        private:
          description: True if this list is private and will not show up in search results
          type: boolean
        viewableWithLink:
          description: True if this list is viewable if queried by the list ID directly
          type: boolean
        metadata:
          description: The metadata of the address list.
          $ref: '#/components/schemas/iMetadata'
        listsActivity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
          description: The activity of the address list.
          type: array
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                type: array
              type:
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          description: The views of the address list.
          type: object
        claims:
          items:
            properties:
              claimId:
                type: string
              plugins:
                items: {}
                description: Plugins are the criteria for the claim.
                type: array
            required:
              - claimId
              - plugins
            additionalProperties: false
            type: object
          description: The claims of the address list.
          type: array
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
        - _docId
        - updateHistory
        - createdBlock
        - lastUpdated
        - listsActivity
        - views
        - claims
      additionalProperties: false
      description: ''
      type: object
    GetAddressListsPayload:
      properties:
        listsToFetch:
          items:
            properties:
              listId:
                type: string
                examples: *ref_11
              viewsToFetch:
                items:
                  properties:
                    viewId:
                      type: string
                      examples: &ref_22
                        - viewKey
                    viewType:
                      enum:
                        - listActivity
                      type: string
                      examples: &ref_23
                        - viewKey
                    bookmark:
                      type: string
                  required:
                    - viewId
                    - viewType
                    - bookmark
                  additionalProperties: false
                  type: object
                type: array
              fetchPrivateParams:
                description: >-
                  Certain views and details are private. If you are the creator
                  of the list, you can fetch these details. By default, we do
                  not fetch them.
                type: boolean
            required:
              - listId
            additionalProperties: false
            type: object
          description: >-
            The lists and accompanyin details to fetch. Supports on-chain,
            off-chain, and reserved lists.
          type: array
      required:
        - listsToFetch
      additionalProperties: false
      type: object
    iGetAddressListsSuccessResponse:
      properties:
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
          type: array
      required:
        - addressLists
      additionalProperties: false
      type: object
    UpdateAddressListsPayload:
      properties:
        addressLists:
          items:
            allOf:
              - $ref: '#/components/schemas/iAddressList'
              - properties:
                  updateAddresses:
                    description: Flag to update addresses?
                    type: boolean
                  private:
                    description: Private lists will not show up in any search results.
                    type: boolean
                  viewableWithLink:
                    description: >-
                      If the list is viewable with a link, anyone with the lisst
                      ID can view details. Only applicable if private = true as
                      well.

                      If not viewable with a link, only the creator can view the
                      list.
                    type: boolean
                  claims:
                    items:
                      properties:
                        claimId:
                          type: string
                        plugins:
                          items: {}
                          type: array
                      required:
                        - claimId
                        - plugins
                      additionalProperties: false
                      type: object
                    description: >-
                      The claims of the address list. Use resetState on updates
                      for resetting individual plugin state (if applicable).
                    type: array
                required:
                  - claims
                additionalProperties: false
                type: object
          type: array
      required:
        - addressLists
      additionalProperties: false
      type: object
    iUpdateAddressListsSuccessResponse:
      additionalProperties: false
      type: object
    CreateAddressListsPayload:
      properties:
        addressLists:
          items:
            allOf:
              - $ref: '#/components/schemas/iAddressList'
              - properties:
                  updateAddresses:
                    description: Flag to update addresses?
                    type: boolean
                  private:
                    description: Private lists will not show up in any search results.
                    type: boolean
                  viewableWithLink:
                    description: >-
                      If the list is viewable with a link, anyone with the lisst
                      ID can view details. Only applicable if private = true as
                      well.

                      If not viewable with a link, only the creator can view the
                      list.
                    type: boolean
                  claims:
                    items:
                      properties:
                        claimId:
                          type: string
                        plugins:
                          items: {}
                          type: array
                      required:
                        - claimId
                        - plugins
                      additionalProperties: false
                      type: object
                    description: >-
                      The claims of the address list. Use resetState on updates
                      for resetting individual plugin state (if applicable).
                    type: array
                required:
                  - claims
                additionalProperties: false
                type: object
          type: array
      required:
        - addressLists
      additionalProperties: false
      type: object
    iCreateAddressListsSuccessResponse:
      additionalProperties: false
      type: object
    DeleteAddressListsPayload:
      properties:
        listIds:
          items:
            type: string
          description: The list IDs to delete.
          type: array
      required:
        - listIds
      additionalProperties: false
      type: object
    iDeleteAddressListsSuccessResponse:
      additionalProperties: false
      type: object
    iBitBadgesUserInfo:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        fetchedProfile:
          description: Whether we have already fetched the profile or not
          type: boolean
        seenActivity:
          description: >-
            The timestamp of the last activity seen for this account
            (milliseconds since epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        createdAt:
          description: >-
            The timestamp of when this account was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        discord:
          description: The Discord username of the account
          type: string
        twitter:
          description: The Twitter username of the account
          type: string
        github:
          description: The GitHub username of the account
          type: string
        telegram:
          description: The Telegram username of the account
          type: string
        readme:
          description: The readme of the account
          type: string
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
          description: The custom links of the account
          type: array
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
          description: The hidden badges of the account
          type: array
        hiddenLists:
          items:
            type: string
          description: The hidden lists of the account
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: The custom pages of the account
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: The watched lists of the account's portfolio
          type: object
        profilePicUrl:
          description: The profile picture URL of the account
          type: string
          examples: *ref_19
        username:
          description: The username of the account
          type: string
        latestSignedInChain:
          description: The latest chain the user signed in with
          $ref: '#/components/schemas/SupportedChain'
        notifications:
          description: The notifications of the account
          $ref: '#/components/schemas/iNotificationPreferences'
        socialConnections:
          description: Social connections stored for the account
          $ref: '#/components/schemas/iSocialConnections'
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            github:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            google:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            twitter:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
          additionalProperties: false
          description: Approved ways to sign in (rather than Blockin)
          type: object
        publicKey:
          description: The public key of the account
          type: string
          examples: *ref_15
        accountNumber:
          description: The account number of the account
          $ref: '#/components/schemas/NumberType'
        pubKeyType:
          description: The public key type of the account
          type: string
        cosmosAddress:
          description: The Cosmos address of the account
          examples: *ref_10
          $ref: '#/components/schemas/CosmosAddress'
        ethAddress:
          description: The Eth address of the account
          type: string
          examples: *ref_20
        solAddress:
          description: The Solana address of the account
          type: string
          examples: *ref_9
        btcAddress:
          description: The Bitcoin address of the account
          type: string
          examples: *ref_21
        sequence:
          description: The sequence of the account
          $ref: '#/components/schemas/NumberType'
        balance:
          description: The balance of the account
          $ref: '#/components/schemas/iCosmosCoin'
        resolvedName:
          description: The resolved name of the account (e.g. ENS name).
          type: string
        avatar:
          description: The avatar of the account.
          type: string
        chain:
          description: The chain of the account.
          $ref: '#/components/schemas/SupportedChain'
        airdropped:
          description: Indicates whether the account has claimed their airdrop.
          type: boolean
        collected:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          description: >-
            A list of badges that the account has collected. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          description: >-
            A list of transfer activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        listsActivity:
          items:
            $ref: '#/components/schemas/iListActivityDoc'
          description: >-
            A list of list activity items for the account. Paginated and fetched
            as needed. To be used in conjunction with views.
          type: array
        reviews:
          items:
            $ref: '#/components/schemas/iReviewDoc'
          description: >-
            A list of review activity items for the account. Paginated and
            fetched as needed. To be used in conjunction with views.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallengeDoc'
          description: >-
            A list of merkle challenge activity items for the account. Paginated
            and fetched as needed. To be used in conjunction with views.
          type: array
        approvalTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
          description: >-
            A list of approvals tracker activity items for the account.
            Paginated and fetched as needed. To be used in conjunction with
            views.
          type: array
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
          description: >-
            A list of address lists for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        claimAlerts:
          items:
            $ref: '#/components/schemas/iClaimAlertDoc'
          description: >-
            A list of claim alerts for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        siwbbRequests:
          items:
            $ref: '#/components/schemas/iSIWBBRequestDoc'
          description: >-
            A list of Siwbb requests for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        secrets:
          items:
            $ref: '#/components/schemas/iSecretDoc'
          description: >-
            A list of user secrets for the account. Paginated and fetched as
            needed. To be used in conjunction with views.
          type: array
        reservedMap:
          description: >-
            The reserved map for the account. This is created and managed
            on-chain through the x/maps module.
          $ref: '#/components/schemas/iMapDoc'
        address:
          description: The native address of the account
          $ref: '#/components/schemas/NativeAddress'
        nsfw:
          additionalProperties:
            type: string
          description: Indicates whether the account is NSFW.
          type: object
        reported:
          additionalProperties:
            type: string
          description: Indicates whether the account has been reported.
          type: object
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                type: array
              type:
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          description: >-
            The views for this collection and their pagination Doc. Views will
            only include the doc _ids. Use the pagination to fetch more. To be
            used in conjunction with activity, announcements, reviews, owners,
            merkleChallenges, and approvalTrackers. For example, if you want to
            fetch the activity for a view, you would use the view's pagination
            to fetch the doc _ids, then use the corresponding activity array to
            find the matching docs.
          type: object
        alias:
          properties:
            collectionId:
              $ref: '#/components/schemas/NumberType'
            listId:
              type: string
              examples: *ref_11
          additionalProperties: false
          description: The alias for the account.
          type: object
      required:
        - _docId
        - publicKey
        - accountNumber
        - pubKeyType
        - cosmosAddress
        - ethAddress
        - solAddress
        - btcAddress
        - chain
        - collected
        - activity
        - listsActivity
        - reviews
        - merkleChallenges
        - approvalTrackers
        - addressLists
        - claimAlerts
        - siwbbRequests
        - secrets
        - address
        - views
      additionalProperties: false
      description: ''
      type: object
    AccountViewKey:
      enum:
        - createdLists
        - privateLists
        - siwbbRequests
        - transferActivity
        - reviews
        - badgesCollected
        - sentClaimAlerts
        - claimAlerts
        - allLists
        - whitelists
        - blacklists
        - createdBadges
        - managingBadges
        - listsActivity
        - createdSecrets
        - receivedSecrets
      description: The supported view keys for fetching account details.
      type: string
    AccountFetchDetails:
      properties:
        address:
          description: >-
            The address of the user. This can be their native address. Only one
            of address or username should be specified.
          $ref: '#/components/schemas/NativeAddress'
        username:
          description: >-
            The username of the user. Only one of address or username should be
            specified.
          type: string
        fetchSequence:
          description: If true, we will fetch the sequence from the blockchain.
          type: boolean
        fetchBalance:
          description: If true, we will fetch the $BADGE balance from the blockchain.
          type: boolean
        noExternalCalls:
          description: If true, we will avoid external API calls.
          type: boolean
        viewsToFetch:
          items:
            properties:
              viewId:
                description: >-
                  Unique view ID. Used for pagination. All fetches w/ same ID
                  should be made with same criteria.
                type: string
                examples: *ref_22
              viewType:
                $ref: '#/components/schemas/AccountViewKey'
                description: The base view type to fetch.
                examples: *ref_23
              specificCollections:
                items:
                  $ref: '#/components/schemas/iBatchBadgeDetails'
                description: >-
                  If defined, we will filter the view to only include the
                  specified collections.
                type: array
              specificLists:
                items:
                  type: string
                description: >-
                  If defined, we will filter the view to only include the
                  specified lists.
                type: array
              oldestFirst:
                description: Oldest first. By default, we fetch newest
                type: boolean
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
            required:
              - viewId
              - viewType
              - bookmark
            additionalProperties: false
            type: object
          description: An array of views to fetch
          type: array
      additionalProperties: false
      description: >-
        This defines the options for fetching additional account details.


        A view is a way of fetching additional details about an account, and
        these will be queryable in the response via the `views` property.


        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the account.

        - `latestAnnouncements` - Fetches the latest announcements for the
        account.

        - `reviews` - Fetches the latest reviews for the account.

        - `badgesCollected` - Fetches the badges collected by the account
        sequentially in random order.
      type: object
    GetAccountsPayload:
      properties:
        accountsToFetch:
          items:
            $ref: '#/components/schemas/AccountFetchDetails'
          type: array
      required:
        - accountsToFetch
      additionalProperties: false
      type: object
    iGetAccountsSuccessResponse:
      properties:
        accounts:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
          type: array
      required:
        - accounts
      additionalProperties: false
      type: object
    GetFollowDetailsPayload:
      properties:
        cosmosAddress:
          type: string
          examples: *ref_10
        followingBookmark:
          type: string
        followersBookmark:
          type: string
        protocol:
          type: string
        activityBookmark:
          type: string
      required:
        - cosmosAddress
      additionalProperties: false
      type: object
    iGetFollowDetailsSuccessResponse:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        cosmosAddress:
          description: The Cosmos address of the user
          examples: *ref_10
          $ref: '#/components/schemas/CosmosAddress'
        followingCount:
          description: The number of users that the user is following
          $ref: '#/components/schemas/NumberType'
        followersCount:
          description: The number of users that are following the user
          $ref: '#/components/schemas/NumberType'
        followers:
          items:
            $ref: '#/components/schemas/CosmosAddress'
          description: The followers of the user
          type: array
        following:
          items:
            $ref: '#/components/schemas/CosmosAddress'
          description: The following of the user
          type: array
        followingCollectionId:
          description: The collection ID of the following collection
          $ref: '#/components/schemas/NumberType'
        followersPagination:
          $ref: '#/components/schemas/PaginationInfo'
        followingPagination:
          $ref: '#/components/schemas/PaginationInfo'
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          type: array
        activityPagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - _docId
        - cosmosAddress
        - followingCount
        - followersCount
        - followers
        - following
        - followingCollectionId
        - followersPagination
        - followingPagination
        - activity
        - activityPagination
      additionalProperties: false
      description: ''
      type: object
    FilterBadgesInCollectionPayload:
      properties:
        badgeIds: *ref_24
        categories: *ref_25
        tags: *ref_26
        mostViewed: *ref_27
        bookmark: *ref_28
        attributes: *ref_29
      required:
        - collectionId
      additionalProperties: false
      type: object
    iFilterBadgesInCollectionSuccessResponse:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
          examples: *ref_18
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - badgeIds
        - pagination
      additionalProperties: false
      type: object
    GetOwnersForBadgePayload:
      properties:
        bookmark:
          description: >-
            The pagination bookmark for where to start the request. Bookmarks
            are obtained via the previous response. "" for first request.
          type: string
      additionalProperties: false
      type: object
    iGetOwnersForBadgeSuccessResponse:
      properties:
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          description: Represents a list of owners balance details.
          type: array
        pagination:
          description: Represents pagination information.
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - owners
        - pagination
      additionalProperties: false
      type: object
    GetBadgeBalanceByAddressPayload:
      properties:
        fetchPrivateParams:
          type: boolean
      additionalProperties: false
      type: object
    iGetBadgeBalanceByAddressSuccessResponse:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          description: The user's permissions.
          $ref: '#/components/schemas/iUserPermissions'
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        cosmosAddress:
          description: The Cosmos address of the user
          examples: *ref_10
          $ref: '#/components/schemas/CosmosAddress'
        onChain:
          description: True if the balances are on-chain
          type: boolean
        uri:
          description: The URI of the off-chain balances
          type: string
          examples: *ref_1
        fetchedAt:
          description: >-
            The timestamp of when the off-chain balances were fetched
            (milliseconds since epoch). For BitBadges indexer, we only populate
            this for Mint and Total docs.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        fetchedAtBlock:
          description: >-
            The block number of when the off-chain balances were fetched. For
            BitBadges indexer, we only populate this for Mint and Total docs.
          $ref: '#/components/schemas/NumberType'
        isPermanent:
          description: True if the off-chain balances are using permanent storage
          type: boolean
        contentHash:
          description: The content hash of the off-chain balances
          type: string
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this balance
          type: array
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
        - _docId
        - collectionId
        - cosmosAddress
        - onChain
        - updateHistory
      additionalProperties: false
      description: >-
        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.
      type: object
    GetBadgeActivityPayload:
      properties:
        bookmark:
          description: >-
            An optional bookmark for pagination. Bookmarks are obtained via the
            previous response. "" for first request.
          type: string
        cosmosAddress:
          description: >-
            Specific address to filter by. If not present, all activity will be
            returned.
          type: string
          examples: *ref_10
      additionalProperties: false
      type: object
    iGetBadgeActivitySuccessResponse:
      properties:
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          description: Array of transfer activity information.
          type: array
        pagination:
          description: Pagination information.
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - activity
        - pagination
      additionalProperties: false
      type: object
    MetadataFetchOptions:
      properties:
        doNotFetchCollectionMetadata:
          description: If true, collection metadata will not be fetched.
          type: boolean
        uris:
          items:
            type: string
          description: >-
            If present, the metadata corresponding to the specified URIs will be
            fetched.
          type: array
        badgeIds:
          anyOf:
            - type: string
            - items:
                type: number
              type: array
            - items:
                $ref: '#/components/schemas/iUintRange'
              type: array
          description: >-
            If present, the metadata corresponding to the specified badge IDs
            will be fetched.
          examples: *ref_18
      additionalProperties: false
      description: Defines the options for fetching metadata.
      type: object
    CollectionViewKey:
      enum:
        - transferActivity
        - reviews
        - owners
        - amountTrackers
        - challengeTrackers
      description: Supported view keys for fetching additional collection details.
      type: string
    GetAdditionalCollectionDetailsPayload:
      properties:
        viewsToFetch:
          items:
            properties:
              viewType:
                $ref: '#/components/schemas/CollectionViewKey'
                description: The base view type to fetch.
                examples: *ref_23
              viewId:
                description: >-
                  A unique view ID. This is used for pagination. All fetches w/
                  same ID should be made with same criteria.
                type: string
                examples: *ref_22
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              oldestFirst:
                description: If defined, we will return the oldest items first.
                type: boolean
              cosmosAddress:
                description: If specified, we will only fetch this users' activity.
                type: string
                examples: *ref_10
            required:
              - viewType
              - viewId
              - bookmark
            additionalProperties: false
            type: object
          description: If present, the specified views will be fetched.
          type: array
        fetchTotalAndMintBalances:
          description: >-
            If true, the total and mint balances will be fetched and will be put
            in owners[].


            collection.owners.find(x => x.cosmosAddresss === 'Mint')
          type: boolean
        challengeTrackersToFetch:
          items:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
          description: >-
            If present, the merkle challenges corresponding to the specified
            merkle challenge IDs will be fetched.
          type: array
        approvalTrackersToFetch:
          items:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
          description: >-
            If present, the approvals trackers corresponding to the specified
            approvals tracker IDs will be fetched.
          type: array
        handleAllAndAppendDefaults:
          description: If true, we will append defaults with empty values.
          type: boolean
        fetchPrivateParams:
          description: >-
            Fetches private parameters for any claims in addition to public
            parameters.
          type: boolean
      additionalProperties: false
      description: >-
        Defines the options for fetching additional collection details.


        A view is a way of fetching additional details about a collection, and
        these will be queryable in the response via the `views` property.

        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.

        If the bookmark is not supplied, the first page will be returned.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the collection.

        - `latestAnnouncements` - Fetches the latest announcements for the
        collection.

        - `reviews` - Fetches the latest reviews for the collection.

        - `owners` - Fetches the owners of the collection sequentially in random
        order.

        - `merkleChallenges` - Fetches the merkle challenges for the collection
        in random order.

        - `approvalTrackers` - Fetches the approvals trackers for the collection
        in random order.
      type: object
    GetMetadataForCollectionPayload:
      properties:
        metadataToFetch:
          description: >-
            If present, we will fetch the metadata corresponding to the
            specified options.


            Consider using pruneMetadataToFetch for filtering out previously
            fetched metadata.
          $ref: '#/components/schemas/MetadataFetchOptions'
      additionalProperties: false
      type: object
    GetCollectionsPayload:
      properties:
        collectionsToFetch:
          items:
            allOf:
              - properties:
                  collectionId:
                    description: The ID of the collection to fetch.
                    $ref: '#/components/schemas/NumberType'
                required:
                  - collectionId
                additionalProperties: false
                type: object
              - $ref: '#/components/schemas/GetMetadataForCollectionPayload'
              - $ref: '#/components/schemas/GetAdditionalCollectionDetailsPayload'
          type: array
      required:
        - collectionsToFetch
      additionalProperties: false
      type: object
    iGetCollectionsSuccessResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
          type: array
      required:
        - collections
      additionalProperties: false
      type: object
    GetCollectionByIdPayload:
      properties:
        viewsToFetch:
          items:
            properties:
              viewType:
                $ref: '#/components/schemas/CollectionViewKey'
                description: The base view type to fetch.
                examples: *ref_23
              viewId:
                description: >-
                  A unique view ID. This is used for pagination. All fetches w/
                  same ID should be made with same criteria.
                type: string
                examples: *ref_22
              bookmark:
                description: A bookmark to pass in for pagination. "" for first request.
                type: string
              oldestFirst:
                description: If defined, we will return the oldest items first.
                type: boolean
              cosmosAddress:
                description: If specified, we will only fetch this users' activity.
                type: string
                examples: *ref_10
            required:
              - viewType
              - viewId
              - bookmark
            additionalProperties: false
            type: object
          description: If present, the specified views will be fetched.
          type: array
        fetchTotalAndMintBalances:
          description: >-
            If true, the total and mint balances will be fetched and will be put
            in owners[].


            collection.owners.find(x => x.cosmosAddresss === 'Mint')
          type: boolean
        challengeTrackersToFetch:
          items:
            $ref: '#/components/schemas/iChallengeTrackerIdDetails'
          description: >-
            If present, the merkle challenges corresponding to the specified
            merkle challenge IDs will be fetched.
          type: array
        approvalTrackersToFetch:
          items:
            $ref: '#/components/schemas/iAmountTrackerIdDetails'
          description: >-
            If present, the approvals trackers corresponding to the specified
            approvals tracker IDs will be fetched.
          type: array
        handleAllAndAppendDefaults:
          description: If true, we will append defaults with empty values.
          type: boolean
        fetchPrivateParams:
          description: >-
            Fetches private parameters for any claims in addition to public
            parameters.
          type: boolean
        metadataToFetch:
          description: >-
            If present, we will fetch the metadata corresponding to the
            specified options.


            Consider using pruneMetadataToFetch for filtering out previously
            fetched metadata.
          $ref: '#/components/schemas/MetadataFetchOptions'
      additionalProperties: false
      description: >-
        Defines the options for fetching additional collection details.


        A view is a way of fetching additional details about a collection, and
        these will be queryable in the response via the `views` property.

        Each view has a bookmark that is used for pagination and must be
        supplied to get the next page.

        If the bookmark is not supplied, the first page will be returned.


        We support the following views:

        - `transferActivity` - Fetches the latest activity for the collection.

        - `latestAnnouncements` - Fetches the latest announcements for the
        collection.

        - `reviews` - Fetches the latest reviews for the collection.

        - `owners` - Fetches the owners of the collection sequentially in random
        order.

        - `merkleChallenges` - Fetches the merkle challenges for the collection
        in random order.

        - `approvalTrackers` - Fetches the approvals trackers for the collection
        in random order.
      type: object
    iGetCollectionByIdSuccessResponse:
      properties:
        collection:
          $ref: '#/components/schemas/iBitBadgesCollection'
      required:
        - collection
      additionalProperties: false
      type: object
    RefreshMetadataPayload:
      additionalProperties: false
      type: object
    iRefreshMetadataSuccessResponse:
      additionalProperties: false
      type: object
    RefreshStatusPayload:
      additionalProperties: false
      type: object
    iRefreshStatusSuccessResponse:
      properties:
        inQueue:
          description: Boolean indicating if the collection is currently in the queue.
          type: boolean
        errorDocs:
          items:
            $ref: '#/components/schemas/iQueueDoc'
          description: Array of error documents corresponding to the collection.
          type: array
        refreshDoc:
          description: The status information corresponding to the collection.
          $ref: '#/components/schemas/iRefreshDoc'
      required:
        - inQueue
        - errorDocs
        - refreshDoc
      additionalProperties: false
      type: object
    BlockinAssetConditionGroup:
      $ref: '#/components/schemas/OwnershipRequirements'
    GetStatusPayload:
      additionalProperties: false
      type: object
    iGetStatusSuccessResponse:
      properties:
        status:
          description: Status details about the indexer / blockchain.
          $ref: '#/components/schemas/iStatusDoc'
      required:
        - status
      additionalProperties: false
      type: object
    GetSearchPayload:
      properties:
        noCollections:
          description: If true, we will skip all collection queries.
          type: boolean
        noAccounts:
          description: If true, we will skip all account queries.
          type: boolean
        noAddressLists:
          description: If true, we will skip all address list queries.
          type: boolean
        noBadges:
          description: If true, we will skip all badge queries.
          type: boolean
        specificCollectionId:
          description: If true, we will limit collection results to a single collection.
          $ref: '#/components/schemas/NumberType'
      additionalProperties: false
      type: object
    iGetSearchSuccessResponse:
      properties:
        collections:
          items:
            $ref: '#/components/schemas/iBitBadgesCollection'
          type: array
        accounts:
          items:
            $ref: '#/components/schemas/iBitBadgesUserInfo'
          type: array
        addressLists:
          items:
            $ref: '#/components/schemas/iBitBadgesAddressList'
          type: array
        badges:
          items:
            properties:
              collection:
                $ref: '#/components/schemas/iBitBadgesCollection'
              badgeIds:
                items:
                  $ref: '#/components/schemas/iUintRange'
                type: array
                examples: *ref_18
            required:
              - collection
              - badgeIds
            additionalProperties: false
            type: object
          type: array
      required:
        - collections
        - accounts
        - addressLists
        - badges
      additionalProperties: false
      type: object
    GetClaimsPayload:
      properties:
        claimIds:
          items:
            type: string
          description: The claim IDs to fetch.
          type: array
        listId:
          description: >-
            If the address list is private and viewable with the link only, you
            must also specify the address list ID to prove knowledge of the
            link.
          type: string
          examples: *ref_11
      required:
        - claimIds
      additionalProperties: false
      type: object
    iClaimDetails:
      properties:
        claimId:
          description: Unique claim ID.
          type: string
        balancesToSet:
          description: >-
            The balances to set for the claim. Only used for claims for
            collections that have off-chain indexed balances and are assigning
            balances based on the claim.
          $ref: '#/components/schemas/iPredeterminedBalances'
        plugins:
          items: {}
          description: >-
            Claim plugins. These are the criteria that must pass for a user to
            claim the badge.
          type: array
        manualDistribution:
          description: >-
            If manual distribution is enabled, we do not handle any distribution
            of claim codes. We leave that up to the claim creator.
          type: boolean
        automatic:
          description: >-
            Whether the claim is expected to be automatically triggered by
            someone (not the user).
          type: boolean
        seedCode:
          description: Seed code for the claim.
          type: string
        metadata:
          description: Metadata for the claim.
          $ref: '#/components/schemas/iMetadata'
      required:
        - claimId
        - plugins
      additionalProperties: false
      type: object
    iGetClaimsSuccessResponse:
      properties:
        claims:
          items:
            $ref: '#/components/schemas/iClaimDetails'
          type: array
      required:
        - claims
      additionalProperties: false
      type: object
    CompleteClaimPayload:
      properties:
        _fetchedAt:
          description: >-
            If provided, we will check that no plugins or claims have been
            updated since the last time the user fetched the claim.
          type: number
      additionalProperties: {}
      type: object
    iCompleteClaimSuccessResponse:
      properties:
        claimAttemptId:
          description: The transaction ID to track the claim.
          type: string
      required:
        - claimAttemptId
      additionalProperties: false
      type: object
    GetClaimAttemptStatusPayload:
      additionalProperties: false
      type: object
    iGetClaimAttemptStatusSuccessResponse:
      properties:
        success:
          type: boolean
        error:
          type: string
        code:
          type: string
      required:
        - success
        - error
      additionalProperties: false
      type: object
    SimulateClaimPayload:
      properties:
        _fetchedAt:
          description: >-
            If provided, we will check that no plugins or claims have been
            updated since the last time the user fetched the claim.
          type: number
      additionalProperties: {}
      type: object
    iSimulateClaimSuccessResponse:
      properties:
        claimAttemptId:
          description: >-
            The transaction ID to track the claim. This is just a simulated
            value for compatibility purposes.
          type: string
      required:
        - claimAttemptId
      additionalProperties: false
      type: object
    GetReservedCodesPayload:
      additionalProperties: false
      type: object
    iGetReservedCodesSuccessResponse:
      properties:
        code:
          description: The new claim code for the user if the claim was successful.
          type: string
        prevCodes:
          items:
            type: string
          description: The previous claim codes for the user.
          type: array
      additionalProperties: false
      type: object
    DeleteReviewPayload:
      properties:
        reviewId:
          description: The review ID to delete.
          type: string
      required:
        - reviewId
      additionalProperties: false
      type: object
    iDeleteReviewSuccessResponse:
      additionalProperties: false
      type: object
    AddReviewPayload:
      properties:
        review:
          description: The review text (1 to 2048 characters).
          type: string
        stars:
          description: The star rating (1 to 5).
          $ref: '#/components/schemas/NumberType'
        cosmosAddress:
          description: >-
            The address you are reviewing. One of cosmosAddress or collectionId
            must be provided.
          examples: *ref_10
          $ref: '#/components/schemas/CosmosAddress'
        collectionId:
          description: >-
            The collection ID that you are reviewing. One of cosmosAddress or
            collectionId must be provided.
          $ref: '#/components/schemas/NumberType'
      required:
        - review
        - stars
      additionalProperties: false
      type: object
    iAddReviewSuccessResponse:
      additionalProperties: false
      type: object
    UpdateAccountInfoPayload:
      properties:
        discord:
          description: The Discord username.
          type: string
        twitter:
          description: The Twitter username.
          type: string
        github:
          description: The GitHub username.
          type: string
        telegram:
          description: The Telegram username.
          type: string
        seenActivity:
          description: The last seen activity timestamp.
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        readme:
          description: The README details (markdown supported).
          type: string
        hiddenBadges:
          items:
            $ref: '#/components/schemas/iBatchBadgeDetails'
          description: The badges to hide and not view for this profile's portfolio
          type: array
        hiddenLists:
          items:
            type: string
          description: The lists to hide and not view for this profile's portfolio
          type: array
        customLinks:
          items:
            $ref: '#/components/schemas/iCustomLink'
          description: Custom URL links to display on the user's portfolio.
          type: array
        customPages:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: >-
            An array of custom pages on the user's portolio. Used to customize,
            sort, and group badges / lists into pages.
          type: object
        watchlists:
          properties:
            badges:
              items:
                $ref: '#/components/schemas/iCustomPage'
              type: array
            lists:
              items:
                $ref: '#/components/schemas/iCustomListPage'
              type: array
          required:
            - badges
            - lists
          additionalProperties: false
          description: The watchlist of badges / lists
          type: object
        profilePicUrl:
          description: The profile picture URL.
          type: string
          examples: *ref_19
        username:
          description: The username.
          type: string
        profilePicImageFile:
          description: >-
            The profile picture image file to set. We will then upload to our
            CDN.
        notifications:
          properties:
            email:
              type: string
            discord:
              properties:
                id:
                  type: string
                username:
                  type: string
                discriminator:
                  type: string
              required:
                - id
                - username
                - discriminator
              additionalProperties: false
              type: object
            antiPhishingCode:
              type: string
            preferences:
              properties:
                listActivity:
                  type: boolean
                transferActivity:
                  type: boolean
                claimAlerts:
                  type: boolean
                ignoreIfInitiator:
                  type: boolean
              additionalProperties: false
              type: object
          additionalProperties: false
          description: >-
            The notification preferences for the user. Will only be returned if
            user is authenticated with full access.
          type: object
        approvedSignInMethods:
          properties:
            discord:
              properties:
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            github:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            google:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            twitter:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
          additionalProperties: false
          description: >-
            Approved sign in methods. Only returned if user is authenticated
            with full access.
          type: object
        socialConnections:
          description: >-
            The social connections for the user. Only returned if user is
            authenticated with full access.
          $ref: '#/components/schemas/iSocialConnections'
      additionalProperties: false
      type: object
    iUpdateAccountInfoSuccessResponse:
      additionalProperties: false
      type: object
    AddBalancesToOffChainStoragePayload:
      properties:
        balances:
          description: >-
            A map of Cosmos addresses or list IDs -> Balance[].

            This will be set first. If undefined, we leave the existing balances
            map as is.

            For genesis, this must be set (even if empty {}), so we create the
            unique URL.
          $ref: '#/components/schemas/iOffChainBalancesMap'
        claims:
          items:
            properties:
              claimId:
                type: string
              plugins:
                items: {}
                type: array
              balancesToSet:
                $ref: '#/components/schemas/iPredeterminedBalances'
            required:
              - claimId
              - plugins
            additionalProperties: false
            type: object
          description: >-
            The new set of claims for the collection. This should be ALL claims.
            We currently do not support fine-grained claim updates.


            If undefined, we leave the existing claims as is. If defined, we set
            the new claims to what is provided.


            If a claim has existing state, you can reset the individual plugin's
            state

            with plugin.resetState = true. Or, claims with new, unique IDs have
            blank state for all plugins.


            We soft delete any claims that are no longer in the claims array. By
            soft delete, we mean that we will flag it as deleted,

            but if you want to reinstate it, you can do so by adding it back
            with the same claim ID.
          type: array
        method:
          enum:
            - ipfs
            - centralized
          description: The method for storing balances (ipfs or centralized).
          type: string
        collectionId:
          description: The collection ID.
          $ref: '#/components/schemas/NumberType'
        isNonIndexed:
          description: >-
            Whether this is for a non-indexed collection. Bypasses some
            validation.
          type: boolean
      required:
        - method
        - collectionId
      additionalProperties: false
      type: object
    iAddBalancesToOffChainStorageSuccessResponse:
      properties:
        uri:
          description: The URI of the stored data.
          type: string
          examples: *ref_1
      additionalProperties: false
      type: object
    AddToIpfsPayload:
      properties:
        contents:
          items:
            anyOf:
              - $ref: '#/components/schemas/iBadgeMetadataDetails'
              - $ref: '#/components/schemas/iMetadata'
              - $ref: '#/components/schemas/iCollectionMetadataDetails'
              - $ref: '#/components/schemas/iChallengeDetails'
          description: The stuff to add to IPFS
          type: array
      additionalProperties: false
      type: object
    iAddToIpfsSuccessResponse:
      properties:
        results:
          items:
            properties:
              cid:
                type: string
            required:
              - cid
            additionalProperties: false
            type: object
          description: An array of badge metadata results, if applicable.
          type: array
      required:
        - results
      additionalProperties: false
      type: object
    AddApprovalDetailsToOffChainStoragePayload:
      properties:
        approvalDetails:
          items:
            properties:
              name:
                description: The name of the approval.
                type: string
                examples: *ref_13
              description:
                description: The description of the approval.
                type: string
                examples: *ref_8
              challengeInfoDetails:
                items:
                  $ref: '#/components/schemas/iChallengeInfoDetails'
                description: For any merkle challenge claims that we are implementing
                type: array
            required:
              - name
              - description
            additionalProperties: false
            type: object
          type: array
      required:
        - approvalDetails
      additionalProperties: false
      type: object
    iAddApprovalDetailsToOffChainStorageSuccessResponse:
      properties:
        approvalResults:
          items:
            properties:
              metadataResult:
                properties:
                  cid:
                    type: string
                required:
                  - cid
                additionalProperties: false
                description: The result for name / description (if applicable).
                type: object
              challengeResults:
                items:
                  properties:
                    cid:
                      type: string
                  required:
                    - cid
                  additionalProperties: false
                  type: object
                description: The result for the approval challenge details (if applicable).
                type: array
            required:
              - metadataResult
            additionalProperties: false
            type: object
          type: array
      required:
        - approvalResults
      additionalProperties: false
      type: object
    GetSignInChallengePayload:
      properties:
        chain:
          description: The blockchain to be signed in with.
          $ref: '#/components/schemas/SupportedChain'
        address:
          description: The user's blockchain address. This can be their native address.
          $ref: '#/components/schemas/NativeAddress'
      required:
        - chain
        - address
      additionalProperties: false
      type: object
    iGetSignInChallengeSuccessResponse:
      properties:
        nonce:
          description: The nonce for the challenge.
          type: string
        params:
          description: The challenge parameters.
          $ref: '#/components/schemas/ChallengeParams'
        message:
          description: The Blockin challenge message to sign.
          $ref: '#/components/schemas/BlockinMessage'
      required:
        - nonce
        - params
        - message
      additionalProperties: false
      type: object
    VerifySignInPayload:
      properties:
        message:
          description: The original Blockin message that was signed.
          $ref: '#/components/schemas/BlockinMessage'
        signature:
          description: The signature of the Blockin message
          type: string
          examples: *ref_16
        publicKey:
          description: >-
            Required for some chains (Cosmos) to verify signature. The public
            key of the signer.
          type: string
          examples: *ref_15
      required:
        - message
        - signature
      additionalProperties: false
      type: object
    iVerifySignInSuccessResponse:
      additionalProperties: false
      type: object
    CheckSignInStatusPayload:
      additionalProperties: false
      type: object
    iCheckSignInStatusSuccessResponse:
      properties:
        signedIn:
          description: Indicates whether the user is signed in.
          type: boolean
        message:
          description: The Blockin message that was signed.
          $ref: '#/components/schemas/BlockinMessage'
        discord:
          properties:
            username:
              type: string
            discriminator:
              type: string
            id:
              type: string
          required:
            - username
            - discriminator
            - id
          additionalProperties: false
          description: Signed in with Discord username and discriminator?
          type: object
        twitter:
          properties:
            id:
              type: string
            username:
              type: string
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with Twitter username?
          type: object
        github:
          properties:
            id:
              type: string
            username:
              type: string
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with GitHub username?
          type: object
        google:
          properties:
            id:
              type: string
            username:
              type: string
          required:
            - id
            - username
          additionalProperties: false
          description: Signed in with Google username?
          type: object
      required:
        - signedIn
        - message
      additionalProperties: false
      type: object
    SignOutPayload:
      properties:
        signOutBlockin:
          description: Sign out of Blockin, and thus the entire API.
          type: boolean
        signOutDiscord:
          description: Sign out of Discord.
          type: boolean
        signOutTwitter:
          description: Sign out of Twitter.
          type: boolean
        signOutGoogle:
          description: Sign out of Google.
          type: boolean
        signOutGithub:
          description: Sign out of GitHub.
          type: boolean
      required:
        - signOutBlockin
      additionalProperties: false
      type: object
    iSignOutSuccessResponse:
      additionalProperties: false
      type: object
    GetBrowseCollectionsPayload:
      additionalProperties: false
      type: object
    iGetBrowseCollectionsSuccessResponse:
      properties:
        collections:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesCollection'
            type: array
          type: object
        addressLists:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesAddressList'
            type: array
          type: object
        profiles:
          additionalProperties:
            items:
              $ref: '#/components/schemas/iBitBadgesUserInfo'
            type: array
          type: object
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          type: array
        badges:
          additionalProperties:
            items:
              properties:
                collection:
                  $ref: '#/components/schemas/iBitBadgesCollection'
                badgeIds:
                  items:
                    $ref: '#/components/schemas/iUintRange'
                  type: array
                  examples: *ref_18
              required:
                - collection
                - badgeIds
              additionalProperties: false
              type: object
            type: array
          type: object
      required:
        - collections
        - addressLists
        - profiles
        - activity
        - badges
      additionalProperties: false
      type: object
    BroadcastTxPayload:
      $ref: '#/components/schemas/BroadcastPostPayload'
    iBroadcastTxSuccessResponse:
      properties:
        tx_response:
          properties:
            code:
              type: number
            codespace:
              type: string
            data:
              type: string
            events:
              items:
                properties:
                  type:
                    type: string
                  attributes:
                    items:
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        index:
                          type: boolean
                      required:
                        - key
                        - value
                        - index
                      additionalProperties: false
                      type: object
                    type: array
                required:
                  - type
                  - attributes
                additionalProperties: false
                type: object
              type: array
            gas_wanted:
              type: string
            gas_used:
              type: string
            height:
              type: string
            logs:
              items:
                properties:
                  events:
                    items:
                      properties:
                        type:
                          type: string
                        attributes:
                          items:
                            properties:
                              key:
                                type: string
                              value:
                                type: string
                              index:
                                type: boolean
                            required:
                              - key
                              - value
                              - index
                            additionalProperties: false
                            type: object
                          type: array
                      required:
                        - type
                        - attributes
                      additionalProperties: false
                      type: object
                    type: array
                required:
                  - events
                additionalProperties: false
                type: object
              type: array
            raw_log:
              type: string
            timestamp:
              type: string
            tx:
              nullable: true
              type: object
            txhash:
              type: string
          required:
            - code
            - codespace
            - data
            - events
            - gas_wanted
            - gas_used
            - height
            - logs
            - raw_log
            - timestamp
            - tx
            - txhash
          additionalProperties: false
          description: The response from the blockchain for the broadcasted tx.
          type: object
      required:
        - tx_response
      additionalProperties: false
      type: object
    SimulateTxPayload:
      $ref: '#/components/schemas/BroadcastPostPayload'
    iSimulateTxSuccessResponse:
      properties:
        gas_info:
          properties:
            gas_used:
              type: string
            gas_wanted:
              type: string
          required:
            - gas_used
            - gas_wanted
          additionalProperties: false
          description: How much gas was used in the simulation.
          type: object
        result:
          properties:
            data:
              type: string
            log:
              type: string
            events:
              items:
                properties:
                  type:
                    type: string
                  attributes:
                    items:
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                        index:
                          type: boolean
                      required:
                        - key
                        - value
                        - index
                      additionalProperties: false
                      type: object
                    type: array
                required:
                  - type
                  - attributes
                additionalProperties: false
                type: object
              type: array
          required:
            - data
            - log
            - events
          additionalProperties: false
          description: The result of the simulation.
          type: object
      required:
        - gas_info
        - result
      additionalProperties: false
      type: object
    FetchMetadataDirectlyPayload:
      properties:
        uris:
          items:
            type: string
          type: array
      required:
        - uris
      additionalProperties: false
      type: object
    iFetchMetadataDirectlySuccessResponse:
      properties:
        metadata:
          items:
            $ref: '#/components/schemas/iMetadata'
          type: array
      required:
        - metadata
      additionalProperties: false
      type: object
    GetTokensFromFaucetPayload:
      additionalProperties: false
      type: object
    SendClaimAlertsPayload:
      properties:
        claimAlerts:
          items:
            properties:
              collectionId:
                description: >-
                  The collection ID to associate with the claim alert. If
                  specified, you (the sender) must be the manager of the
                  collection. This is typically used

                  for sending claim codes. Set to 0 for unspecified.
                $ref: '#/components/schemas/NumberType'
              message:
                description: The message to send to the user.
                type: string
              cosmosAddresses:
                items:
                  $ref: '#/components/schemas/CosmosAddress'
                description: The addresses to send the claim alert to.
                type: array
            required:
              - collectionId
              - cosmosAddresses
            additionalProperties: false
            type: object
          description: The claim alerts to send to users.
          type: array
      required:
        - claimAlerts
      additionalProperties: false
      type: object
    iSendClaimAlertsSuccessResponse:
      additionalProperties: false
      type: object
    CosmosAccountResponse:
      properties:
        account_number:
          type: number
        sequence:
          type: number
        pub_key:
          properties:
            key:
              type: string
          required:
            - key
          additionalProperties: false
          type: object
        address:
          $ref: '#/components/schemas/CosmosAddress'
      required:
        - account_number
        - sequence
        - pub_key
        - address
      additionalProperties: false
      description: >-
        Information returned by the REST API getAccount route.


        Note this should be converted into AccountDoc or BitBadgesUserInfo
        before being returned by the BitBadges API for consistency.
      type: object
    GenericVerifyAssetsPayload:
      properties:
        cosmosAddress:
          description: The address to check
          examples: *ref_10
          $ref: '#/components/schemas/CosmosAddress'
        assetOwnershipRequirements:
          description: The asset requirements to verify.
          examples: *ref_6
          $ref: '#/components/schemas/AssetConditionGroup'
      required:
        - cosmosAddress
        - assetOwnershipRequirements
      additionalProperties: false
      description: Generic route to verify any asset ownership requirements.
      type: object
    iGenericVerifyAssetsSuccessResponse:
      additionalProperties: false
      type: object
    GenericBlockinVerifyPayload:
      properties:
        message:
          description: The original Blockin message that was signed.
          $ref: '#/components/schemas/BlockinMessage'
        signature:
          description: The signature of the Blockin message
          type: string
          examples: *ref_16
        publicKey:
          description: >-
            Required for some chains (Cosmos) to verify signature. The public
            key of the signer.
          type: string
          examples: *ref_15
        options:
          description: Additional options for verifying the challenge.
          $ref: '#/components/schemas/VerifyChallengeOptions'
        secretsPresentations:
          items:
            $ref: '#/components/schemas/iSecretsProof'
          description: Additional secrets to verify in the challenge.
          type: array
      required:
        - message
        - signature
      additionalProperties: false
      description: >-
        Generic route to verify any Blockin request. Does not sign you in with
        the API. Used for custom Blockin integrations.
      type: object
    iGenericBlockinVerifySuccessResponse:
      additionalProperties: false
      description: ''
      type: object
    CreateSecretPayload:
      properties:
        proofOfIssuance:
          properties:
            message:
              type: string
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this secret signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the secretMessages.
          type: string
        scheme:
          enum:
            - bbs
            - standard
          description: >-
            The scheme of the secret. BBS+ signatures are supported and can be
            used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        type:
          description: The type of the secret (e.g. credential).
          type: string
        secretMessages:
          items:
            type: string
          description: >-
            Thesse are the secrets that are signed.

            For BBS+ signatures, there can be >1 secretMessages, and the signer
            can selectively disclose the secrets.

            For standard signatures, there is only 1 secretMessage.
          type: array
          examples: *ref_30
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the
            secretMessages. The siganture maintains the integrity of the
            secretMessages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.
          type: object
        name:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_14
        description:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_8
      required:
        - proofOfIssuance
        - messageFormat
        - scheme
        - type
        - secretMessages
        - dataIntegrityProof
        - name
        - image
        - description
      additionalProperties: false
      type: object
    iCreateSecretSuccessResponse:
      properties:
        secretId:
          description: >-
            The secret ID. This is the ID that is given to the user to query the
            secret. Anyone with the ID can query it, so keep this safe and
            secure.
          type: string
      required:
        - secretId
      additionalProperties: false
      type: object
    GetSecretPayload:
      properties:
        secretId:
          description: >-
            The secret ID. This is the ID that is given to the user to query the
            secret. Anyone with the ID can query it, so keep this safe and
            secure.
          type: string
      required:
        - secretId
      additionalProperties: false
      type: object
    iGetSecretSuccessResponse:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the secretMessages.
          type: string
        createdBy:
          description: The address of the user who created the secret.
          $ref: '#/components/schemas/CosmosAddress'
        proofOfIssuance:
          properties:
            message:
              type: string
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this secret signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        secretId:
          description: >-
            The secret ID. This is the ID that is given to the user to query the
            secret. Anyone with the ID can query it, so keep this safe and
            secure.
          type: string
        scheme:
          enum:
            - bbs
            - standard
          description: >-
            The scheme of the secret. BBS+ signatures are supported and can be
            used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        type:
          description: The type of the secret (e.g. credential).
          type: string
        secretMessages:
          items:
            type: string
          description: >-
            Thesse are the secrets that are signed.

            For BBS+ signatures, there can be >1 secretMessages, and the signer
            can selectively disclose the secrets.

            For standard signatures, there is only 1 secretMessage.
          type: array
          examples: *ref_30
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the
            secretMessages. The siganture maintains the integrity of the
            secretMessages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.
          type: object
        name:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_14
        description:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_8
        holders:
          items:
            type: string
          description: Holders are the addresses that have been given the secret.
          type: array
        anchors:
          items:
            properties:
              txHash:
                type: string
                examples: *ref_7
              message:
                type: string
            additionalProperties: false
            type: object
          description: |-
            Anchors are on-chain transactions used to prove certain things
            about the secret. For example, you can anchor the secret to a
            transaction hash to prove that the secret existed at a certain time.
          type: array
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          type: array
      required:
        - _docId
        - messageFormat
        - createdBy
        - proofOfIssuance
        - secretId
        - scheme
        - type
        - secretMessages
        - dataIntegrityProof
        - name
        - image
        - description
        - holders
        - anchors
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    DeleteSecretPayload:
      properties:
        secretId:
          description: >-
            The secret ID. This is the ID that is given to the user to query the
            secret. Anyone with the ID can query it, so keep this safe and
            secure.
          type: string
      required:
        - secretId
      additionalProperties: false
      type: object
    iDeleteSecretSuccessResponse:
      additionalProperties: false
      type: object
    UpdateSecretPayload:
      properties:
        secretId:
          description: >-
            The secret ID. This is the ID that is given to the user to query the
            secret. Anyone with the ID can query it, so keep this safe and
            secure.
          type: string
        holdersToSet:
          items:
            properties:
              cosmosAddress:
                $ref: '#/components/schemas/CosmosAddress'
                examples: *ref_10
              delete:
                type: boolean
            required:
              - cosmosAddress
            additionalProperties: false
            type: object
          description: >-
            Holders can use the secret to prove something about themselves. This
            is a list of holders that have added this secret to their profile.
          type: array
        anchorsToAdd:
          items:
            properties:
              txHash:
                type: string
                examples: *ref_7
              message:
                type: string
            additionalProperties: false
            type: object
          description: >-
            Blockchain anchors to add to the secret. These are on-chain
            transactions that can be used to prove stuff about the secret, like

            existence at a certain point in time or to maintain data integrity.
          type: array
        proofOfIssuance:
          properties:
            message:
              type: string
            signer:
              type: string
              examples: *ref_17
            signature:
              type: string
              examples: *ref_16
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signer
            - signature
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this secret signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the secretMessages.
          type: string
        scheme:
          enum:
            - bbs
            - standard
          description: >-
            The scheme of the secret. BBS+ signatures are supported and can be
            used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        type:
          description: The type of the secret (e.g. credential).
          type: string
        secretMessages:
          items:
            type: string
          description: >-
            Thesse are the secrets that are signed.

            For BBS+ signatures, there can be >1 secretMessages, and the signer
            can selectively disclose the secrets.

            For standard signatures, there is only 1 secretMessage.
          type: array
          examples: *ref_30
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the
            secretMessages. The siganture maintains the integrity of the
            secretMessages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.
          type: object
        name:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_14
        description:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_8
      required:
        - secretId
      additionalProperties: false
      type: object
    iUpdateSecretSuccessResponse:
      additionalProperties: false
      type: object
    CreateSIWBBRequestPayload:
      properties:
        name:
          description: The name of the Blockin Siwbb request for display purposes.
          type: string
          examples: *ref_13
        description:
          description: The description of the Blockin Siwbb request for display purposes.
          type: string
          examples: *ref_8
        image:
          description: The image of the Blockin Siwbb request for display purposes.
          type: string
          examples: *ref_14
        message:
          description: The original Blockin message that was signed.
          $ref: '#/components/schemas/BlockinMessage'
        signature:
          description: The signature of the Blockin message
          type: string
          examples: *ref_16
        publicKey:
          description: >-
            The public key of the signer (if needed). Only certain chains
            require this.
          type: string
          examples: *ref_15
        secretsPresentations:
          items:
            $ref: '#/components/schemas/iSecretsProof'
          description: >-
            If required, you can additionally add proof of secrets to the
            authentication flow.

            This proves sensitive information (e.g. GPAs, SAT scores, etc.)
            without revealing the information itself.
          type: array
        clientId:
          description: Client ID for the Blockin Siwbb request.
          type: string
        otherSignIns:
          items:
            enum:
              - discord
              - twitter
              - google
              - github
            type: string
          description: >-
            If defined, we will store the current sign-in details for these web2
            connections along with the code
          type: array
        redirectUri:
          description: Redirect URI if redirected after successful sign-in.
          type: string
        state:
          description: State to be passed back to the redirect URI.
          type: string
      required:
        - name
        - description
        - image
        - message
        - signature
        - clientId
      additionalProperties: false
      type: object
    iCreateSIWBBRequestSuccessResponse:
      properties:
        code:
          description: Secret code which can be exchanged for the Siwbb request details.
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    GetAndVerifySIWBBRequestsForDeveloperAppPayload:
      properties:
        bookmark:
          description: The bookmark for pagination.
          type: string
        clientId:
          description: The client ID to fetch for
          type: string
      required:
        - clientId
      additionalProperties: false
      type: object
    iGetAndVerifySIWBBRequestsForDeveloperAppSuccessResponse:
      properties:
        siwbbRequests:
          items:
            $ref: '#/components/schemas/iBlockinChallenge'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - siwbbRequests
        - pagination
      additionalProperties: false
      type: object
    GetAndVerifySIWBBRequestPayload:
      properties:
        code:
          description: The Blockin Siwbb request.
          type: string
        options:
          description: >-
            We attempt to verify the current status with each request. You can
            provide additional options for verification here.
          $ref: '#/components/schemas/VerifyChallengeOptions'
        clientSecret:
          description: Client secret for the Blockin Siwbb request.
          type: string
        clientId:
          description: Client ID for the Blockin Siwbb request.
          type: string
        redirectUri:
          description: >-
            The redirect URI for the Blockin Siwbb request. Only required if the
            code was created with a redirect URI.
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    iGetAndVerifySIWBBRequestSuccessResponse:
      properties:
        blockin:
          description: >-
            Blockin class that contains all details about the Blockin Siwbb
            request.
          $ref: '#/components/schemas/iBlockinChallenge'
      required:
        - blockin
      additionalProperties: false
      type: object
    DeleteSIWBBRequestPayload:
      properties:
        code:
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    iDeleteSIWBBRequestSuccessResponse:
      additionalProperties: false
      type: object
    GenerateAppleWalletPassPayload:
      properties:
        code:
          description: The signature of the Blockin message.
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    iGenerateAppleWalletPassSuccessResponse:
      properties:
        type:
          type: string
        data:
          type: string
      required:
        - type
        - data
      additionalProperties: false
      type: object
    GetClaimAlertsForCollectionPayload:
      properties:
        collectionId:
          description: The collection ID to get claim alerts for.
          $ref: '#/components/schemas/NumberType'
        bookmark:
          description: >-
            The pagination bookmark obtained from the previous request. Leave
            blank for the first request.
          type: string
      required:
        - collectionId
        - bookmark
      additionalProperties: false
      type: object
    iGetClaimAlertsForCollectionSuccessResponse:
      properties:
        claimAlerts:
          items:
            $ref: '#/components/schemas/iClaimAlertDoc'
          type: array
        pagination:
          $ref: '#/components/schemas/PaginationInfo'
      required:
        - claimAlerts
        - pagination
      additionalProperties: false
      type: object
    GetExternalCallPayload:
      properties:
        uri:
          type: string
          examples: *ref_1
        key:
          type: string
      required:
        - uri
        - key
      additionalProperties: false
      type: object
    iGetExternalCallSuccessResponse:
      properties:
        key:
          type: string
        timestamp:
          type: number
      required:
        - key
        - timestamp
      additionalProperties: false
      type: object
    CreateDeveloperAppPayload:
      properties:
        name:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        description:
          description: Description of the app.
          type: string
          examples: *ref_8
        image:
          description: Image for the app.
          type: string
          examples: *ref_14
        redirectUris:
          items:
            type: string
          description: Redirect URIs for the app.
          type: array
      required:
        - name
        - description
        - image
        - redirectUris
      additionalProperties: false
      type: object
    iCreateDeveloperAppSuccessResponse:
      properties:
        clientId:
          description: Client ID for the app.
          type: string
        clientSecret:
          description: Client secret for the app.
          type: string
      required:
        - clientId
        - clientSecret
      additionalProperties: false
      type: object
    GetActiveAuthorizationsPayload:
      additionalProperties: false
      type: object
    iGetActiveAuthorizationsSuccessResponse:
      properties:
        authorizations:
          items:
            $ref: '#/components/schemas/iAccessTokenDoc'
          type: array
        developerApps:
          items:
            $ref: '#/components/schemas/iDeveloperAppDoc'
          type: array
      required:
        - authorizations
        - developerApps
      additionalProperties: false
      type: object
    GetDeveloperAppPayload:
      properties:
        clientId:
          description: >-
            If you want to get a specific app, specify the client ID here (will
            not return the client secret).
          type: string
      additionalProperties: false
      type: object
    iGetDeveloperAppSuccessResponse:
      properties:
        developerApps:
          items:
            $ref: '#/components/schemas/iDeveloperAppDoc'
          type: array
      required:
        - developerApps
      additionalProperties: false
      type: object
    DeleteDeveloperAppPayload:
      properties:
        clientId:
          description: The client ID of the app to delete.
          type: string
      required:
        - clientId
      additionalProperties: false
      type: object
    iDeleteDeveloperAppSuccessResponse:
      additionalProperties: false
      type: object
    UpdateDeveloperAppPayload:
      properties:
        clientId:
          description: Client ID for the app to update.
          type: string
        name:
          description: >-
            Metadata for for display purposes. Note this should not contain
            anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        description:
          description: Description of the app.
          type: string
          examples: *ref_8
        image:
          description: Image for the app.
          type: string
          examples: *ref_14
        redirectUris:
          items:
            type: string
          description: Redirect URIs for the app.
          type: array
      required:
        - clientId
      additionalProperties: false
      type: object
    iUpdateDeveloperAppSuccessResponse:
      additionalProperties: false
      type: object
    CreatePluginPayload:
      properties:
        pluginId:
          description: The unique plugin ID
          type: string
        stateFunctionPreset:
          description: Preset type for how the plugin state is to be maintained.
        duplicatesAllowed:
          description: Whether it makes sense for multiple of this plugin to be allowed
          type: boolean
        requiresSessions:
          description: >-
            This means that the plugin can be used w/o any session cookies or
            authentication.
          type: boolean
        reuseForNonIndexed:
          description: Reuse for non-indexed?
          type: boolean
        requiresUserInputs:
          description: >-
            This is a flag for being compatible with auto-triggered claims,
            meaning no user interaction is needed.
          type: boolean
        metadata:
          properties:
            name:
              description: The name of the plugin
              type: string
              examples: *ref_13
            description:
              description: Description of the plugin
              type: string
              examples: *ref_8
            image:
              description: The image of the plugin
              type: string
              examples: *ref_14
            documentation:
              description: Documentation for the plugin
              type: string
            sourceCode:
              description: Source code for the plugin
              type: string
            supportLink:
              description: Support link for the plugin
              type: string
            createdBy:
              $ref: '#/components/schemas/CosmosAddress'
              description: The creator of the plugin
          required:
            - name
            - description
            - image
            - createdBy
          additionalProperties: false
          type: object
        userInputsSchema:
          items:
            $ref: '#/components/schemas/JsonBodyInputSchema'
          type: array
        publicParamsSchema:
          items:
            anyOf:
              - $ref: '#/components/schemas/JsonBodyInputSchema'
              - properties:
                  key:
                    type: string
                  label:
                    type: string
                  type:
                    enum:
                      - ownershipRequirements
                    type: string
                required:
                  - key
                  - label
                  - type
                additionalProperties: false
                type: object
          type: array
        privateParamsSchema:
          items:
            anyOf:
              - $ref: '#/components/schemas/JsonBodyInputSchema'
              - properties:
                  key:
                    type: string
                  label:
                    type: string
                  type:
                    enum:
                      - ownershipRequirements
                    type: string
                required:
                  - key
                  - label
                  - type
                additionalProperties: false
                type: object
          type: array
        verificationCall:
          properties:
            uri:
              type: string
              examples: *ref_1
            method:
              enum:
                - POST
                - GET
                - PUT
                - DELETE
              type: string
            hardcodedInputs:
              items:
                $ref: '#/components/schemas/JsonBodyInputWithValue'
              type: array
            passAddress:
              type: boolean
            passDiscord:
              type: boolean
            passEmail:
              type: boolean
            passTwitter:
              type: boolean
            passGoogle:
              type: boolean
            passGithub:
              type: boolean
          required:
            - uri
            - method
            - hardcodedInputs
            - passAddress
            - passDiscord
            - passEmail
            - passTwitter
            - passGoogle
            - passGithub
          additionalProperties: false
          description: The verification URL
          type: object
      required:
        - pluginId
        - stateFunctionPreset
        - duplicatesAllowed
        - requiresSessions
        - reuseForNonIndexed
        - requiresUserInputs
        - metadata
        - userInputsSchema
        - publicParamsSchema
        - privateParamsSchema
      additionalProperties: false
      type: object
    iCreatePluginSuccessResponse:
      additionalProperties: false
      type: object
    GetPluginPayload:
      properties:
        createdPluginsOnly:
          type: boolean
      additionalProperties: false
      type: object
    iGetPluginSuccessResponse:
      properties:
        plugins:
          items:
            $ref: '#/components/schemas/iPluginDoc'
          type: array
      required:
        - plugins
      additionalProperties: false
      type: object
    DeleteClaimPayload:
      properties:
        claimIds:
          items:
            type: string
          description: The claim ID to delete.
          type: array
      required:
        - claimIds
      additionalProperties: false
      type: object
    iDeleteClaimSuccessResponse:
      additionalProperties: false
      type: object
    UpdateClaimPayload:
      properties:
        claims:
          items:
            properties:
              claimId:
                description: Unique claim ID.
                type: string
              balancesToSet:
                $ref: '#/components/schemas/iPredeterminedBalances'
                description: >-
                  The balances to set for the claim. Only used for claims for
                  collections that have off-chain indexed balances and are
                  assigning balances based on the claim.
              plugins:
                items: {}
                description: >-
                  Claim plugins. These are the criteria that must pass for a
                  user to claim the badge.
                type: array
              manualDistribution:
                description: >-
                  If manual distribution is enabled, we do not handle any
                  distribution of claim codes. We leave that up to the claim
                  creator.
                type: boolean
              automatic:
                description: >-
                  Whether the claim is expected to be automatically triggered by
                  someone (not the user).
                type: boolean
              metadata:
                $ref: '#/components/schemas/iMetadata'
                description: Metadata for the claim.
            required:
              - claimId
              - plugins
            additionalProperties: false
            type: object
          type: array
      required:
        - claims
      additionalProperties: false
      type: object
    iUpdateClaimSuccessResponse:
      additionalProperties: false
      type: object
    CreateClaimPayload:
      properties:
        claims:
          items:
            allOf:
              - $ref: '#/components/schemas/iClaimDetails'
              - properties:
                  listId:
                    type: string
                    examples: *ref_11
                  collectionId:
                    $ref: '#/components/schemas/NumberType'
                  cid:
                    type: string
                additionalProperties: false
                type: object
          type: array
      required:
        - claims
      additionalProperties: false
      type: object
    iCreateClaimSuccessResponse:
      additionalProperties: false
      type: object
    OauthAuthorizePayload:
      properties:
        response_type:
          type: string
        client_id:
          type: string
        redirect_uri:
          type: string
        scope:
          type: string
        state:
          type: string
      required:
        - response_type
        - client_id
        - redirect_uri
        - scope
      additionalProperties: false
      type: object
    iOauthAuthorizeSuccessResponse:
      properties:
        code:
          type: string
      required:
        - code
      additionalProperties: false
      type: object
    OauthTokenPayload:
      properties:
        grant_type:
          type: string
        client_id:
          type: string
        client_secret:
          type: string
        code:
          type: string
        redirect_uri:
          type: string
        refresh_token:
          type: string
      required:
        - grant_type
        - client_id
        - client_secret
      additionalProperties: false
      type: object
    iOauthTokenSuccessResponse:
      properties:
        _docId:
          type: string
        accessToken:
          type: string
        tokenType:
          type: string
        clientId:
          type: string
        accessTokenExpiresAt:
          type: number
        refreshToken:
          type: string
        refreshTokenExpiresAt:
          type: number
        cosmosAddress:
          type: string
          examples: *ref_10
        address:
          type: string
        scopes:
          items:
            type: string
          type: array
      required:
        - _docId
        - accessToken
        - tokenType
        - clientId
        - accessTokenExpiresAt
        - refreshToken
        - refreshTokenExpiresAt
        - cosmosAddress
        - address
        - scopes
      additionalProperties: false
      description: ''
      type: object
    OauthRevokePayload:
      properties:
        token:
          type: string
      required:
        - token
      additionalProperties: false
      type: object
    iOauthRevokeSuccessResponse:
      additionalProperties: false
      type: object
    GetMapsPayload:
      properties:
        mapIds:
          items:
            type: string
          description: The IDs of the maps to fetch.
          type: array
      required:
        - mapIds
      additionalProperties: false
      type: object
    iMapWithValues:
      properties:
        creator:
          $ref: '#/components/schemas/CosmosAddress'
        mapId:
          type: string
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          type: array
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
        defaultValue:
          type: string
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
          type: array
        values:
          additionalProperties:
            $ref: '#/components/schemas/iValueStore'
          description: The (key, value) pairs for the maps that are set.
          type: object
        metadata:
          description: The fetched metadata for the map (if any).
          $ref: '#/components/schemas/iMetadata'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: >-
            The update history for the map. Maps are maintained through
            blockchain transactions.
          type: array
      required:
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - permissions
        - metadataTimeline
        - values
        - updateHistory
      additionalProperties: false
      description: ''
      type: object
    iGetMapsSuccessResponse:
      properties:
        maps:
          items:
            $ref: '#/components/schemas/iMapWithValues'
          type: array
      required:
        - maps
      additionalProperties: false
      type: object
    iBitBadgesCollection:
      properties:
        _docId:
          description: A unique stringified document ID
          type: string
        _id:
          description: A unique document ID (Mongo DB ObjectID)
          type: string
        collectionId:
          description: The collection ID
          $ref: '#/components/schemas/NumberType'
        collectionMetadataTimeline:
          allOf:
            - items:
                $ref: '#/components/schemas/iCollectionMetadataTimeline'
              description: The collection metadata timeline
              type: array
            - items:
                $ref: '#/components/schemas/iCollectionMetadataTimeline'
              description: >-
                The collection metadata timeline for this collection, with
                off-chain metadata populated.
              type: array
        badgeMetadataTimeline:
          allOf:
            - items:
                $ref: '#/components/schemas/iBadgeMetadataTimeline'
              description: The badge metadata timeline
              type: array
            - items:
                $ref: '#/components/schemas/iBadgeMetadataTimeline'
              description: >-
                The badge metadata timeline for this collection, with off-chain
                metadata populated.
              type: array
        balancesType:
          enum:
            - Standard
            - Off-Chain - Indexed
            - Non-Public
            - Off-Chain - Non-Indexed
          description: >-
            The type of balances (i.e. "Standard", "Off-Chain - Indexed",
            "Non-Public, "Off-Chain - Non-Indexed")
          type: string
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          description: The off-chain balances metadata timeline
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
          description: The custom data timeline
          type: array
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          description: The manager timeline
          type: array
        collectionPermissions:
          description: The collection permissions
          $ref: '#/components/schemas/iCollectionPermissions'
        collectionApprovals:
          allOf:
            - items:
                $ref: '#/components/schemas/iCollectionApproval'
              description: The collection approved transfers timeline
              type: array
            - items:
                $ref: '#/components/schemas/iCollectionApproval'
              description: >-
                The collection approvals for this collection, with off-chain
                metadata populated.
              type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
          description: The standards timeline
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
          description: The is archived timeline
          type: array
        defaultBalances:
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only used if collection has "Standard" balance type.
          $ref: '#/components/schemas/iUserBalanceStore'
        createdBy:
          description: The cosmos address of the user who created this collection
          $ref: '#/components/schemas/CosmosAddress'
        createdBlock:
          description: The block number when this collection was created
          $ref: '#/components/schemas/NumberType'
        createdTimestamp:
          description: >-
            The timestamp when this collection was created (milliseconds since
            epoch)
          $ref: '#/components/schemas/UNIXMilliTimestamp'
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          description: The update history of this collection
          type: array
        aliasAddress:
          description: The alias cosmos address for the collection
          $ref: '#/components/schemas/CosmosAddress'
        activity:
          items:
            $ref: '#/components/schemas/iTransferActivityDoc'
          description: >-
            The fetched activity for this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        reviews:
          items:
            $ref: '#/components/schemas/iReviewDoc'
          description: >-
            The fetched reviews for this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        owners:
          items:
            $ref: '#/components/schemas/iBalanceDoc'
          description: >-
            The fetched owners of this collection. Returned collections will
            only fetch the current page. Use the pagination to fetch more. To be
            used in conjunction with views.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallengeDoc'
          description: >-
            The fetched merkle challenges for this collection. Returned
            collections will only fetch the current page. Use the pagination to
            fetch more. To be used in conjunction with views.
          type: array
        approvalTrackers:
          items:
            $ref: '#/components/schemas/iApprovalTrackerDoc'
          description: >-
            The fetched approval trackers for this collection. Returned
            collections will only fetch the current page. Use the pagination to
            fetch more. To be used in conjunction with views.
          type: array
        nsfw:
          properties:
            badgeIds:
              items:
                $ref: '#/components/schemas/iUintRange'
              type: array
              examples: *ref_18
            reason:
              type: string
          required:
            - badgeIds
            - reason
          additionalProperties: false
          description: The badge IDs in this collection that are marked as NSFW.
          type: object
        reported:
          properties:
            badgeIds:
              items:
                $ref: '#/components/schemas/iUintRange'
              type: array
              examples: *ref_18
            reason:
              type: string
          required:
            - badgeIds
            - reason
          additionalProperties: false
          description: The badge IDs in this collection that have been reported.
          type: object
        reservedMap:
          description: >-
            The reserved map for the account. This is created and managed
            on-chain through the x/maps module.
          $ref: '#/components/schemas/iMapDoc'
        views:
          additionalProperties:
            properties:
              ids:
                items:
                  type: string
                type: array
              type:
                type: string
              pagination:
                $ref: '#/components/schemas/PaginationInfo'
            required:
              - ids
              - type
              - pagination
            additionalProperties: false
            type: object
          description: >-
            The views for this collection and their pagination Doc. Views will
            only include the doc _ids. Use the pagination to fetch more. To be
            used in conjunction with activity, announcements, reviews, owners,
            merkleChallenges, and approvalTrackers. For example, if you want to
            fetch the activity for a view, you would use the view's pagination
            to fetch the doc _ids, then use the corresponding activity array to
            find the matching docs.
          type: object
        claims:
          items:
            $ref: '#/components/schemas/iClaimDetails'
          description: >-
            Details about any off-chain claims for this collection. Only
            applicable when outsourced to BitBadges.
          type: array
      required:
        - _docId
        - collectionId
        - collectionMetadataTimeline
        - badgeMetadataTimeline
        - balancesType
        - offChainBalancesMetadataTimeline
        - customDataTimeline
        - managerTimeline
        - collectionPermissions
        - collectionApprovals
        - standardsTimeline
        - isArchivedTimeline
        - defaultBalances
        - createdBy
        - createdBlock
        - createdTimestamp
        - updateHistory
        - aliasAddress
        - activity
        - reviews
        - owners
        - merkleChallenges
        - approvalTrackers
        - views
        - claims
      additionalProperties: false
      description: ''
      type: object
    iBlockinChallenge:
      properties:
        address:
          description: The user's address
          type: string
        chain:
          description: The chain of the address
          $ref: '#/components/schemas/SupportedChain'
        publicKey:
          description: Some chains require the public key as well to verify signatures
          type: string
          examples: *ref_15
        message:
          description: The corresponding message that was signed to obtain the signature.
          $ref: '#/components/schemas/BlockinMessage'
        signature:
          description: The signature of the message.
          type: string
          examples: *ref_16
        params:
          description: The converted Blockin params fort the message
          $ref: '#/components/schemas/ChallengeParams'
        cosmosAddress:
          description: >-
            The converted Cosmos address of params.address. This can be used as
            the

            unique identifier for the user (e.g. avoid duplicate sign ins from
            equivalent 0x and cosmos1 addresses).
          examples: *ref_10
          $ref: '#/components/schemas/CosmosAddress'
        verificationResponse:
          properties:
            success:
              description: >-
                Returns whether the current (message, signature) pair is valid
                and verified (i.e. signature is valid and any assets are owned).
              type: boolean
            errorMessage:
              description: Returns the response message returned from Blockin verification.
              type: string
          required:
            - success
          additionalProperties: false
          description: Verification response
          type: object
        options:
          $ref: '#/components/schemas/VerifyChallengeOptions'
        secretsPresentations:
          items:
            $ref: '#/components/schemas/iSecretsProof'
          description: Derived data integrity proofs for any secrets requested.
          type: array
        otherSignIns:
          properties:
            discord:
              properties:
                username:
                  type: string
                discriminator:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            github:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            google:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
            twitter:
              properties:
                username:
                  type: string
                id:
                  type: string
              required:
                - username
                - id
              additionalProperties: false
              type: object
          additionalProperties: false
          description: Other sign-ins that were requested
          type: object
      required:
        - address
        - chain
        - message
        - params
        - cosmosAddress
      additionalProperties: false
      description: Used by the frontend for dynamically fetching data from the DB as needed
      type: object
    CodeGenQueryParams:
      properties:
        challengeParams:
          $ref: '#/components/schemas/ChallengeParams'
        name:
          type: string
          examples: *ref_13
        description:
          type: string
          examples: *ref_8
        image:
          type: string
          examples: *ref_14
        allowAddressSelect:
          type: boolean
        autoGenerateNonce:
          type: boolean
        verifyOptions:
          $ref: '#/components/schemas/VerifyChallengeOptions'
        expectVerifySuccess:
          type: boolean
        otherSignIns:
          items:
            enum:
              - discord
              - twitter
              - github
              - google
            type: string
          type: array
        redirectUri:
          type: string
        clientId:
          type: string
        state:
          type: string
        expectSecretsPresentations:
          type: boolean
      required:
        - challengeParams
        - name
        - description
        - image
        - clientId
      additionalProperties: false
      type: object
    iOffChainBalancesMap:
      additionalProperties:
        items:
          $ref: '#/components/schemas/iBalance'
        type: array
      type: object
    iTransferWithIncrements:
      properties:
        from:
          description: The address to transfer from.
          $ref: '#/components/schemas/CosmosAddress'
        toAddresses:
          items:
            $ref: '#/components/schemas/CosmosAddress'
          description: The addresses to transfer to.
          type: array
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The balances to transfer.
          type: array
        precalculateBalancesFromApproval:
          description: >-
            If specified, we will precalculate from this approval and override
            the balances. This can only be used when the specified approval has
            predeterminedBalances set.
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
        merkleProofs:
          items:
            $ref: '#/components/schemas/iMerkleProof'
          description: >-
            The merkle proofs that satisfy the mkerkle challenges in the
            approvals. If the transfer deducts from multiple approvals, we check
            all the merkle proofs and assert at least one is valid for every
            challenge.
          type: array
        memo:
          description: Arbitrary memo for the transfer.
          type: string
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            The prioritized approvals to use for the transfer. If specified, we
            will check these first.
          type: array
        onlyCheckPrioritizedCollectionApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "collection" level approvals specified.
          type: boolean
        onlyCheckPrioritizedIncomingApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "incoming" level approvals specified.
          type: boolean
        onlyCheckPrioritizedOutgoingApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "outgoing" level approvals specified.
          type: boolean
        zkProofSolutions:
          items:
            $ref: '#/components/schemas/iZkProofSolution'
          description: The zk proof solutions for approvals.
          type: array
        toAddressesLength:
          description: >-
            The number of addresses to send the badges to. This takes priority
            over toAddresses.length (used when you don't know exact addresses
            (i.e. you know number of codes)).
          $ref: '#/components/schemas/NumberType'
        incrementBadgeIdsBy:
          description: The number to increment the badgeIDs by for each transfer.
          $ref: '#/components/schemas/NumberType'
        incrementOwnershipTimesBy:
          description: The number to increment the ownershipTimes by for each transfer.
          $ref: '#/components/schemas/NumberType'
      required:
        - from
        - toAddresses
        - balances
      additionalProperties: false
      type: object
    iBatchBadgeDetails:
      properties:
        collectionId:
          description: The collection ID of this element's badge details.
          $ref: '#/components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The corresponding badge IDs for this collection ID.
          type: array
          examples: *ref_18
      required:
        - collectionId
        - badgeIds
      additionalProperties: false
      type: object
    iChallengeDetails:
      properties:
        leaves:
          items:
            type: string
          description: >-
            The leaves of the Merkle tree. Leaves should be considered public.
            Use preimages for the secrets + isHashed. For whitelist trees, these
            can be the plaintext Cosmos addresses.
          type: array
        isHashed:
          description: True if the leaves are hashed. Hash(preimage[i]) = leaves[i]
          type: boolean
        preimages:
          items:
            type: string
          description: >-
            The preimages of the leaves (only used if isHashed = true).
            Oftentimes, this is used for secret codes so should not be present
            when user-facing.
          type: array
        seedCode:
          description: Seed code for generating the leaves
          type: string
        tree:
          description: The Merkle tree
        treeOptions:
          description: The Merkle tree options for how to build it
        numLeaves:
          description: >-
            The number of leaves in the Merkle tree. This takes priority over
            leaves.length if defined (used for buffer time between leaf
            generation and leaf length select)
          $ref: '#/components/schemas/NumberType'
        currCode:
          description: >-
            The current code being used for the challenge. Used behind the
            scenes
          $ref: '#/components/schemas/NumberType'
      required:
        - leaves
        - isHashed
      additionalProperties: false
      examples:
        - >-
          Codes

          1. Generate N codes privately

          2. Hash each code

          3. Store the hashed codes publicly on IPFS via this struct

          4. When a user enters a code, we hash it and check if it matches any
          of the hashed codes. This way, the codes are never stored publicly on
          IPFS and only known by the generator of the codes.
        - >-
          Whitelist

          For storing a public whitelist of addresses (with
          useCreatorAddressAsLeaf = true), hashing complicates everything
          because the whitelist can be stored publicly.

          1. Generate N whitelist addresses

          2. Store the addresses publicly on IPFS via this struct

          3. When a user enters an address, we check if it matches any of the
          addresses.
      type: object
    iChallengeInfoDetails:
      properties:
        challengeDetails:
          description: The challenge details of the claim / approval
          $ref: '#/components/schemas/iChallengeDetails'
        claim:
          $ref: '#/components/schemas/iClaimDetails'
      required:
        - challengeDetails
      additionalProperties: false
      type: object
    iApprovalInfoDetails:
      properties:
        name:
          description: The name of the claim
          type: string
          examples: *ref_13
        description:
          description: >-
            The description of the claim. This describes how to earn and claim
            the badge.
          type: string
          examples: *ref_8
      required:
        - name
        - description
      additionalProperties: false
      type: object
    iCosmosCoin:
      properties:
        amount:
          description: The amount of the coin.
          $ref: '#/components/schemas/NumberType'
        denom:
          description: The denomination of the coin (e.g. "badge").
          type: string
      required:
        - amount
        - denom
      additionalProperties: false
      type: object
    PermissionNameString:
      enum:
        - canDeleteCollection
        - canArchiveCollection
        - canUpdateOffChainBalancesMetadata
        - canUpdateBadgeMetadata
        - canUpdateCollectionMetadata
        - canCreateMoreBadges
        - canUpdateCollectionApprovals
        - canUpdateAutoApproveSelfInitiatedIncomingTransfers
        - canUpdateAutoApproveSelfInitiatedOutgoingTransfers
        - canUpdateStandards
        - canUpdateCustomData
        - canUpdateManager
      type: string
    Validator:
      properties:
        commission:
          properties:
            commission_rates:
              properties:
                max_change_rate:
                  type: string
                max_rate:
                  type: string
                rate:
                  type: string
              required:
                - max_change_rate
                - max_rate
                - rate
              additionalProperties: false
              type: object
            update_time:
              type: string
          required:
            - commission_rates
            - update_time
          additionalProperties: false
          type: object
        consensus_pubkey:
          properties:
            "'@type'":
              type: string
            key:
              type: string
          required:
            - "'@type'"
            - key
          additionalProperties: false
          type: object
        delegator_shares:
          type: string
        description:
          properties:
            details:
              type: string
            identity:
              type: string
            moniker:
              type: string
            security_contact:
              type: string
            website:
              type: string
          required:
            - details
            - identity
            - moniker
            - security_contact
            - website
          additionalProperties: false
          type: object
          examples: *ref_8
        jailed:
          type: boolean
        min_self_delegation:
          type: string
        operator_address:
          type: string
        status:
          type: string
        tokens:
          type: string
        unbonding_height:
          type: string
        unbonding_time:
          type: string
      required:
        - commission
        - consensus_pubkey
        - delegator_shares
        - description
        - jailed
        - min_self_delegation
        - operator_address
        - status
        - tokens
        - unbonding_height
        - unbonding_time
      additionalProperties: false
      type: object
    GetValidatorsResponse:
      properties:
        validators:
          items:
            $ref: '#/components/schemas/Validator'
          type: array
        pagination:
          properties:
            next_key:
              type: string
            total:
              type: number
          required:
            - next_key
            - total
          additionalProperties: false
          type: object
      required:
        - validators
        - pagination
      additionalProperties: false
      type: object
    UndelegationResponse:
      properties:
        delegator_address:
          type: string
        validator_address:
          type: string
        entries:
          items:
            - properties:
                creation_height:
                  type: string
                completion_time:
                  type: string
                initial_balance:
                  type: string
                balance:
                  type: string
              required:
                - creation_height
                - completion_time
                - initial_balance
                - balance
              additionalProperties: false
              type: object
          additionalItems: false
          minItems: 1
          type: array
      required:
        - delegator_address
        - validator_address
        - entries
      additionalProperties: false
      type: object
    GetUndelegationsResponse:
      properties:
        unbonding_responses:
          items:
            $ref: '#/components/schemas/UndelegationResponse'
          type: array
        pagination:
          properties:
            next_key:
              type: string
            total:
              type: string
          required:
            - next_key
            - total
          additionalProperties: false
          type: object
      required:
        - unbonding_responses
        - pagination
      additionalProperties: false
      type: object
    CounterParty:
      properties:
        port_id:
          type: string
        channel_id:
          type: string
      required:
        - port_id
        - channel_id
      additionalProperties: false
      type: object
    Channel:
      properties:
        state:
          type: string
        ordering:
          type: string
        counterparty:
          $ref: '#/components/schemas/CounterParty'
        connection_hops:
          items:
            type: string
          type: array
        version:
          type: string
        port_id:
          type: string
        channel_id:
          type: string
      required:
        - state
        - ordering
        - counterparty
        - connection_hops
        - version
        - port_id
        - channel_id
      additionalProperties: false
      type: object
    ChannelsResponse:
      properties:
        channels:
          items:
            $ref: '#/components/schemas/Channel'
          type: array
        pagination:
          properties:
            next_key:
              type: string
            total:
              type: string
          required:
            - total
          additionalProperties: false
          type: object
        height:
          properties:
            revision_number:
              type: string
            revision_height:
              type: string
          required:
            - revision_number
            - revision_height
          additionalProperties: false
          type: object
      required:
        - channels
        - pagination
        - height
      additionalProperties: false
      type: object
    TallyResponse:
      properties:
        tally:
          properties:
            'yes':
              type: string
            abstain:
              type: string
            'no':
              type: string
            no_with_veto:
              type: string
          required:
            - 'yes'
            - abstain
            - 'no'
            - no_with_veto
          additionalProperties: false
          type: object
      required:
        - tally
      additionalProperties: false
      type: object
    AccountResponse:
      properties:
        account:
          properties:
            "'@type'":
              type: string
            base_account:
              properties:
                address:
                  type: string
                pub_key:
                  properties:
                    "'@type'":
                      type: string
                    key:
                      type: string
                  required:
                    - "'@type'"
                    - key
                  additionalProperties: false
                  type: object
                account_number:
                  type: string
                sequence:
                  type: string
              required:
                - address
                - account_number
                - sequence
              additionalProperties: false
              type: object
          required:
            - "'@type'"
            - base_account
          additionalProperties: false
          type: object
      required:
        - account
      additionalProperties: false
      type: object
    BroadcastPostPayload:
      properties:
        tx_bytes: {}
        mode:
          type: string
      required:
        - tx_bytes
        - mode
      additionalProperties: false
      type: object
    TxContext:
      properties:
        chain:
          $ref: '#/components/schemas/Chain'
        sender:
          $ref: '#/components/schemas/Sender'
        fee:
          $ref: '#/components/schemas/Fee'
        memo:
          type: string
      required:
        - chain
        - sender
        - fee
        - memo
      additionalProperties: false
      description: |-
        TxContext is the transaction context for a SignDoc that is independent
        from the transaction payload.
      type: object
    EIP712ToSign:
      properties:
        types:
          type: object
        primaryType:
          type: string
        domain:
          properties:
            name:
              type: string
              examples: *ref_13
            version:
              type: string
            chainId:
              type: number
            verifyingContract:
              type: string
            salt:
              type: string
          required:
            - name
            - version
            - chainId
            - verifyingContract
            - salt
          additionalProperties: false
          type: object
          examples: *ref_0
        message:
          type: object
      required:
        - types
        - primaryType
        - domain
        - message
      additionalProperties: false
      description: >-
        EI712ToSign represents a signable EIP-712 payload that can be signed
        using MetaMask or Keplr.
      type: object
    Fee:
      properties:
        amount:
          type: string
        denom:
          type: string
        gas:
          type: string
      required:
        - amount
        - denom
        - gas
      additionalProperties: false
      description: Fee represents a Cosmos SDK transaction fee object.
      type: object
    Sender:
      properties:
        accountAddress:
          $ref: '#/components/schemas/CosmosAddress'
        sequence:
          type: number
        accountNumber:
          type: number
        pubkey:
          type: string
      required:
        - accountAddress
        - sequence
        - accountNumber
        - pubkey
      additionalProperties: false
      description: >-
        Sender represents a Cosmos SDK Transaction signer.

        @remarks A sender object is used to populate the Cosmos SDK's SignerInfo
        field,

        which is used to declare transaction signers.
      type: object
    Chain:
      properties:
        chainId:
          type: number
        cosmosChainId:
          type: string
        chain:
          $ref: '#/components/schemas/SupportedChain'
      required:
        - chainId
        - cosmosChainId
        - chain
      additionalProperties: false
      description: >-
        Chain represents the base chain's chainID.

        @remarks chainId corresponds to a numerical Ethereum ChainID (e.g. 9001)

        cosmosChainId corresponds to a Cosmos SDK string ChainID (e.g.
        'bitbadges_1-1')
      type: object
    iMsgInstantiateContractCompat:
      properties:
        sender:
          description: The sender of the transaction.
          type: string
        codeId:
          description: The code ID of the contract to instantiate.
          type: string
        label:
          description: The human-readable label of the contract.
          type: string
        funds:
          description: The amount of funds to send to the contract on instantiation.
          type: string
      required:
        - sender
        - codeId
        - label
        - funds
      additionalProperties: false
      type: object
    iMsgStoreCodeCompat:
      properties:
        sender:
          description: The sender of the transaction.
          type: string
        hexWasmByteCode:
          description: >-
            The contract byte code in hexadecimal format. See BitBadges CosmWASM
            tutorial for more details.
          type: string
      required:
        - sender
        - hexWasmByteCode
      additionalProperties: false
      type: object
    iMsgExecuteContractCompat:
      properties:
        sender:
          description: The sender of the transaction.
          type: string
        contract:
          description: The contract address to execute.
          type: string
        msg:
          description: The message to pass to the contract. Must be a valid JSON string.
          type: string
        funds:
          description: The funds to send to the contract. Must be a valid JSON string.
          type: string
      required:
        - sender
        - contract
        - msg
        - funds
      additionalProperties: false
      type: object
    iValueStore:
      properties:
        key:
          type: string
        value:
          type: string
        lastSetBy:
          $ref: '#/components/schemas/CosmosAddress'
      required:
        - key
        - value
        - lastSetBy
      additionalProperties: false
      type: object
    iMapUpdateCriteria:
      properties:
        managerOnly:
          type: boolean
        collectionId:
          $ref: '#/components/schemas/NumberType'
        creatorOnly:
          type: boolean
        firstComeFirstServe:
          type: boolean
      required:
        - managerOnly
        - collectionId
        - creatorOnly
        - firstComeFirstServe
      additionalProperties: false
      type: object
    iValueOptions:
      properties:
        noDuplicates:
          type: boolean
        permanentOnceSet:
          type: boolean
        expectUint:
          type: boolean
        expectBoolean:
          type: boolean
        expectAddress:
          type: boolean
        expectUri:
          type: boolean
      required:
        - noDuplicates
        - permanentOnceSet
        - expectUint
        - expectBoolean
        - expectAddress
        - expectUri
      additionalProperties: false
      type: object
    iMapPermissions:
      properties:
        canUpdateMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          type: array
        canUpdateManager:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          type: array
        canDeleteMap:
          items:
            $ref: '#/components/schemas/iActionPermission'
          type: array
      required:
        - canUpdateMetadata
        - canUpdateManager
        - canDeleteMap
      additionalProperties: false
      type: object
    iMap:
      properties:
        creator:
          $ref: '#/components/schemas/CosmosAddress'
        mapId:
          type: string
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          type: array
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
        defaultValue:
          type: string
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
          type: array
      required:
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - permissions
        - metadataTimeline
      additionalProperties: false
      type: object
    iMapMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
          examples: &ref_36
            - - start: '1713301889'
                end: '2000000000'
            - - start: '1'
                end: '18446744073709551615'
        metadata:
          $ref: '#/components/schemas/iCollectionMetadata'
      required:
        - timelineTimes
        - metadata
      additionalProperties: false
      type: object
    iMsgCreateMap:
      properties:
        creator:
          $ref: '#/components/schemas/CosmosAddress'
        mapId:
          type: string
        inheritManagerTimelineFrom:
          $ref: '#/components/schemas/NumberType'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          type: array
        updateCriteria:
          $ref: '#/components/schemas/iMapUpdateCriteria'
        valueOptions:
          $ref: '#/components/schemas/iValueOptions'
        defaultValue:
          type: string
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
          type: array
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
      required:
        - creator
        - mapId
        - inheritManagerTimelineFrom
        - managerTimeline
        - updateCriteria
        - valueOptions
        - defaultValue
        - metadataTimeline
        - permissions
      additionalProperties: false
      type: object
    iMsgUpdateMap:
      properties:
        creator:
          $ref: '#/components/schemas/CosmosAddress'
        mapId:
          type: string
        updateManagerTimeline:
          type: boolean
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          type: array
        updateMetadataTimeline:
          type: boolean
        metadataTimeline:
          items:
            $ref: '#/components/schemas/iMapMetadataTimeline'
          type: array
        updatePermissions:
          type: boolean
        permissions:
          $ref: '#/components/schemas/iMapPermissions'
      required:
        - creator
        - mapId
        - updateManagerTimeline
        - managerTimeline
        - updateMetadataTimeline
        - metadataTimeline
        - updatePermissions
        - permissions
      additionalProperties: false
      type: object
    iMsgDeleteMap:
      properties:
        creator:
          $ref: '#/components/schemas/CosmosAddress'
        mapId:
          type: string
      required:
        - creator
        - mapId
      additionalProperties: false
      type: object
    iMsgSetValue:
      properties:
        creator:
          $ref: '#/components/schemas/CosmosAddress'
        mapId:
          type: string
        key:
          type: string
        value:
          type: string
        options:
          $ref: '#/components/schemas/iSetOptions'
      required:
        - creator
        - mapId
        - key
        - value
        - options
      additionalProperties: false
      type: object
    iSetOptions:
      properties:
        useMostRecentCollectionId:
          type: boolean
      required:
        - useMostRecentCollectionId
      additionalProperties: false
      type: object
    iMsgCreateAddressLists:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/CosmosAddress'
        addressLists:
          items:
            $ref: '#/components/schemas/iAddressList'
          description: The address lists to create.
          type: array
      required:
        - creator
        - addressLists
      additionalProperties: false
      type: object
    iMsgCreateCollection:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/CosmosAddress'
        balancesType:
          description: >-
            The balances type. Either "Standard", "Off-Chain - Indexed",
            "Off-Chain - Non-Indexed" or "Non-Public"
          type: string
        defaultBalances:
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only can be set on initial creation. Only used if
            collection has "Standard" balance type.
          $ref: '#/components/schemas/iUserBalanceStore'
        badgesToCreate:
          items:
            $ref: '#/components/schemas/iBalance'
          description: >-
            The badges to create. Newly created badges will be sent to the
            "Mint" address. Must have necessary permissions in future
            transactions to update. However, no restrictions in this genesis
            Msg. Only used if collection has "Standard" balance type.
          type: array
        collectionPermissions:
          description: >-
            The new collection permissions. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg.
          $ref: '#/components/schemas/iCollectionPermissions'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          description: >-
            The new manager timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
          description: >-
            The new collection metadata timeline. Must have the necessary
            permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
          description: >-
            The new badge metadata timeline. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg. Note we take first-match only for badge IDs, so do not
            define duplicates.
          type: array
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          description: >-
            The new off-chain balances metadata timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg. Only used if "Off-Chain - Indexed"
            or "Off-Chain - Non-Indexed" balance type.
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
          description: >-
            The new custom data timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
          description: >-
            The new collection approved transfers timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
          description: >-
            The new standards timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
          description: >-
            The new is archived timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
      required:
        - creator
      additionalProperties: false
      type: object
    iMsgDeleteCollection:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/CosmosAddress'
        collectionId:
          description: The ID of the collection to delete.
          $ref: '#/components/schemas/NumberType'
      required:
        - creator
        - collectionId
      additionalProperties: false
      type: object
    iMsgTransferBadges:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/CosmosAddress'
        collectionId:
          description: The ID of the collection to transfer badges from.
          $ref: '#/components/schemas/NumberType'
        transfers:
          items:
            $ref: '#/components/schemas/iTransfer'
          description: The transfers to perform.
          type: array
      required:
        - creator
        - collectionId
        - transfers
      additionalProperties: false
      type: object
    iMsgUniversalUpdateCollection:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/CosmosAddress'
        balancesType:
          description: >-
            The balances type. Either "Standard", "Off-Chain - Indexed",
            "Off-Chain - Non-Indexed" or "Non-Public"
          type: string
        defaultBalances:
          description: >-
            The default balances for users who have not interacted with the
            collection yet. Only can be set on initial creation. Only used if
            collection has "Standard" balance type.
          $ref: '#/components/schemas/iUserBalanceStore'
        badgesToCreate:
          items:
            $ref: '#/components/schemas/iBalance'
          description: >-
            The badges to create. Newly created badges will be sent to the
            "Mint" address. Must have necessary permissions in future
            transactions to update. However, no restrictions in this genesis
            Msg. Only used if collection has "Standard" balance type.
          type: array
        collectionPermissions:
          description: >-
            The new collection permissions. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg.
          $ref: '#/components/schemas/iCollectionPermissions'
        managerTimeline:
          items:
            $ref: '#/components/schemas/iManagerTimeline'
          description: >-
            The new manager timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionMetadataTimeline:
          items:
            $ref: '#/components/schemas/iCollectionMetadataTimeline'
          description: >-
            The new collection metadata timeline. Must have the necessary
            permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        badgeMetadataTimeline:
          items:
            $ref: '#/components/schemas/iBadgeMetadataTimeline'
          description: >-
            The new badge metadata timeline. Must have the necessary permissions
            in future transactions to update. However, no restrictions in this
            genesis Msg. Note we take first-match only for badge IDs, so do not
            define duplicates.
          type: array
        offChainBalancesMetadataTimeline:
          items:
            $ref: '#/components/schemas/iOffChainBalancesMetadataTimeline'
          description: >-
            The new off-chain balances metadata timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg. Only used if "Off-Chain - Indexed"
            or "Off-Chain - Non-Indexed" balance type.
          type: array
        customDataTimeline:
          items:
            $ref: '#/components/schemas/iCustomDataTimeline'
          description: >-
            The new custom data timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApproval'
          description: >-
            The new collection approved transfers timeline. Must have the
            necessary permissions in future transactions to update. However, no
            restrictions in this genesis Msg.
          type: array
        standardsTimeline:
          items:
            $ref: '#/components/schemas/iStandardsTimeline'
          description: >-
            The new standards timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        isArchivedTimeline:
          items:
            $ref: '#/components/schemas/iIsArchivedTimeline'
          description: >-
            The new is archived timeline. Must have the necessary permissions in
            future transactions to update. However, no restrictions in this
            genesis Msg.
          type: array
        collectionId:
          description: The ID of the collection to update.
          $ref: '#/components/schemas/NumberType'
        updateCollectionPermissions:
          description: Whether or not to update the collection permissions.
          type: boolean
        updateManagerTimeline:
          description: Whether or not to update the manager timeline.
          type: boolean
        updateCollectionMetadataTimeline:
          description: Whether or not to update the collection metadata timeline.
          type: boolean
        updateBadgeMetadataTimeline:
          description: Whether or not to update the badge metadata timeline.
          type: boolean
        updateOffChainBalancesMetadataTimeline:
          description: Whether or not to update the off-chain balances metadata timeline.
          type: boolean
        updateCustomDataTimeline:
          description: Whether or not to update the custom data timeline.
          type: boolean
        updateCollectionApprovals:
          description: Whether or not to update the collection approved transfers timeline.
          type: boolean
        updateStandardsTimeline:
          description: Whether or not to update the standards timeline.
          type: boolean
        updateIsArchivedTimeline:
          description: Whether or not to update the is archived timeline.
          type: boolean
      required:
        - creator
        - collectionId
      additionalProperties: false
      type: object
    iMsgUpdateCollection:
      additionalProperties: false
      type: object
    iMsgUpdateUserApprovals:
      properties:
        creator:
          description: The creator of the transaction.
          $ref: '#/components/schemas/CosmosAddress'
        collectionId:
          description: The ID of the collection to transfer badges from.
          $ref: '#/components/schemas/NumberType'
        updateOutgoingApprovals:
          description: Whether or not to update the outgoing approvals.
          type: boolean
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: >-
            The new outgoing approvals. Must have the necessary permissions to
            update.
          type: array
        updateIncomingApprovals:
          description: Whether or not to update the incoming approvals.
          type: boolean
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: >-
            The new incoming approvals. Must have the necessary permissions to
            update.
          type: array
        updateAutoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether or not to update the auto approve self initiated outgoing
            transfers (i.e. from == the user and initiator == the user).
          type: boolean
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            The new auto approve self initiated outgoing transfers. Must have
            the necessary permissions to update.
          type: boolean
        updateAutoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether or not to update the auto approve self initiated incoming
            transfers (i.e. to == the user and initiator == the user).
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            The new auto approve self initiated incoming transfers. Must have
            the necessary permissions to update.
          type: boolean
        updateUserPermissions:
          description: Whether or not to update the user permissions.
          type: boolean
        userPermissions:
          description: >-
            The new user permissions. Must have the necessary permissions to
            update.
          $ref: '#/components/schemas/iUserPermissions'
      required:
        - creator
        - collectionId
      additionalProperties: false
      type: object
    SupportedChainType:
      enum:
        - Bitcoin
        - Ethereum
        - Cosmos
        - Solana
        - Unknown
      description: >-
        Safe adds two uints and returns an error if the result is invalid. Keeps
        the right type.
      type: string
    JSPrimitiveNumberType:
      description: >-
        JSPrimitiveNumberType is a type that can be used to represent a number
        in JavaScript in multiple ways.

        Because the blockchain supports numbers > 2^53, we need to use BigInts
        or strings to represent them.


        JSPrimitiveNumberType is a union of all the types that can be used to
        represent a number in JavaScript.

        This is the same as NumberType, but without BigInts because they are not
        a primitive.
      $ref: '#/components/schemas/NumberType'
    iUserPermissions:
      properties:
        canUpdateOutgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApprovalPermission'
          description: The list of permissions for updating approved outgoing transfers.
          type: array
        canUpdateIncomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApprovalPermission'
          description: The list of permissions for updating approved incoming transfers.
          type: array
        canUpdateAutoApproveSelfInitiatedOutgoingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: >-
            The permissions for updating auto-approving self-initiated outgoing
            transfers. If auto-approve is enabled, then the user will be
            approved by default for all outgoing transfers that are
            self-initiated.
          type: array
        canUpdateAutoApproveSelfInitiatedIncomingTransfers:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: >-
            The permissions for updating auto-approving self-initiated incoming
            transfers. If auto-approve is enabled, then the user will be
            approved by default for all incoming transfers that are
            self-initiated.
          type: array
      required:
        - canUpdateOutgoingApprovals
        - canUpdateIncomingApprovals
        - canUpdateAutoApproveSelfInitiatedOutgoingTransfers
        - canUpdateAutoApproveSelfInitiatedIncomingTransfers
      additionalProperties: false
      type: object
    iUserOutgoingApprovalPermission:
      properties:
        toListId:
          description: The list ID of the to addresses of the approved outgoing transfers.
          type: string
          examples: &ref_38
            - customOrReservedListId
            - Mint
            - All
            - cosmos1...
        toList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: >-
            The list ID of the initiatedBy addresses of the approved outgoing
            transfers.
          type: string
          examples: &ref_32
            - customOrReservedListId
            - Mint
            - All
            - cosmos1...
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The transfer times of the approved outgoing transfers.
          type: array
          examples: &ref_33
            - - start: '1713301889'
                end: '2000000000'
            - - start: '1'
                end: '18446744073709551615'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs of the approved outgoing transfers.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the approved outgoing transfers.
          type: array
          examples: *ref_31
        approvalId:
          description: >-
            The approval ID of the approved outgoing transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the approved outgoing transfers.
          type: array
          examples: &ref_34
            - - start: '1713301889'
                end: '2000000000'
            - - start: '1'
                end: '18446744073709551615'
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the approved outgoing transfers.
          type: array
          examples: &ref_35
            - - start: '1713301889'
                end: '2000000000'
            - - start: '1'
                end: '18446744073709551615'
      required:
        - toListId
        - toList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iUserIncomingApprovalPermission:
      properties:
        fromListId:
          description: >-
            The list ID of the from addresses of the approved incoming
            transfers.
          type: string
          examples: &ref_37
            - customOrReservedListId
            - Mint
            - All
            - cosmos1...
        fromList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: >-
            The list ID of the initiatedBy addresses of the approved incoming
            transfers.
          type: string
          examples: *ref_32
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The transfer times of the approved incoming transfers.
          type: array
          examples: *ref_33
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs of the approved incoming transfers.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the approved incoming transfers.
          type: array
          examples: *ref_31
        approvalId:
          description: >-
            The approval ID of the approved incoming transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the approved incoming transfers.
          type: array
          examples: *ref_34
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the approved incoming transfers.
          type: array
          examples: *ref_35
      required:
        - fromListId
        - fromList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iCollectionPermissions:
      properties:
        canDeleteCollection:
          items:
            $ref: '#/components/schemas/iActionPermission'
          description: The permissions for deleting the collection.
          type: array
        canArchiveCollection:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for archiving the collection.
          type: array
        canUpdateOffChainBalancesMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the off-chain balances metadata.
          type: array
        canUpdateStandards:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the standards.
          type: array
        canUpdateCustomData:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the custom data.
          type: array
        canUpdateManager:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the manager.
          type: array
        canUpdateCollectionMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdatePermission'
          description: The permissions for updating the collection metadata.
          type: array
        canCreateMoreBadges:
          items:
            $ref: '#/components/schemas/iBalancesActionPermission'
          description: The permissions for creating more badges.
          type: array
        canUpdateBadgeMetadata:
          items:
            $ref: '#/components/schemas/iTimedUpdateWithBadgeIdsPermission'
          description: The permissions for updating the badge metadata.
          type: array
        canUpdateCollectionApprovals:
          items:
            $ref: '#/components/schemas/iCollectionApprovalPermission'
          description: The permissions for updating the collection approved transfers.
          type: array
      required:
        - canDeleteCollection
        - canArchiveCollection
        - canUpdateOffChainBalancesMetadata
        - canUpdateStandards
        - canUpdateCustomData
        - canUpdateManager
        - canUpdateCollectionMetadata
        - canCreateMoreBadges
        - canUpdateBadgeMetadata
        - canUpdateCollectionApprovals
      additionalProperties: false
      type: object
    iActionPermission:
      properties:
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
          examples: *ref_34
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
          examples: *ref_35
      required:
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iTimedUpdatePermission:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The timeline times that the permission applies to.
          type: array
          examples: *ref_36
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
          examples: *ref_34
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
          examples: *ref_35
      required:
        - timelineTimes
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iBalancesActionPermission:
      properties:
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs that the permission applies to.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the permission.
          type: array
          examples: *ref_31
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
          examples: *ref_34
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
          examples: *ref_35
      required:
        - badgeIds
        - ownershipTimes
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iTimedUpdateWithBadgeIdsPermission:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The timeline times that the permission applies to.
          type: array
          examples: *ref_36
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs that the permission applies to.
          type: array
          examples: *ref_18
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of the permission.
          type: array
          examples: *ref_34
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of the permission.
          type: array
          examples: *ref_35
      required:
        - timelineTimes
        - badgeIds
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iCollectionApprovalPermission:
      properties:
        fromListId:
          description: The list ID of the from addresses of the approved transfers.
          type: string
          examples: *ref_37
        fromList:
          $ref: '#/components/schemas/iAddressList'
        toListId:
          description: The list ID of the to addresses of the approved transfers.
          type: string
          examples: *ref_38
        toList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: The list ID of the initiatedBy addresses of the approved transfers.
          type: string
          examples: *ref_32
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The transfer times of the approved transfers.
          type: array
          examples: *ref_33
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs of the approved transfers.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The owned times of the approved transfers.
          type: array
          examples: *ref_31
        approvalId:
          description: >-
            The approval ID of the approved transfers. Can use "All" to
            represent all IDs, "!approvalId" to represent all IDs except
            approvalId, or "approvalId" to represent only approvalId.
          type: string
        permanentlyPermittedTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The permitted times of this permission.
          type: array
          examples: *ref_34
        permanentlyForbiddenTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The forbidden times of this permission.
          type: array
          examples: *ref_35
      required:
        - fromListId
        - fromList
        - toListId
        - toList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
        - permanentlyPermittedTimes
        - permanentlyForbiddenTimes
      additionalProperties: false
      type: object
    iUintRange:
      properties:
        start:
          description: The start of the range.
          $ref: '#/components/schemas/NumberType'
        end:
          description: The end of the range, inclusive.
          $ref: '#/components/schemas/NumberType'
      required:
        - start
        - end
      additionalProperties: false
      type: object
    iBadgeMetadata:
      properties:
        uri:
          description: The URI where to fetch the badge metadata from.
          type: string
          examples: *ref_1
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs corresponding to the URI.
          type: array
          examples: *ref_18
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - badgeIds
        - customData
      additionalProperties: false
      type: object
    iCollectionMetadata:
      properties:
        uri:
          description: The URI where to fetch the collection metadata from.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - customData
      additionalProperties: false
      type: object
    iOffChainBalancesMetadata:
      properties:
        uri:
          description: The URI where to fetch the off-chain balances metadata from.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data that can be stored on-chain
          type: string
      required:
        - uri
        - customData
      additionalProperties: false
      type: object
    iSecretsProof:
      properties:
        entropies:
          items:
            type: string
          description: >-
            Entropies used for certain data integrity proofs on-chain (e.g.
            HASH(message + entropy) = on-chain value)
          type: array
        updateHistory:
          items:
            $ref: '#/components/schemas/iUpdateHistory'
          type: array
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the secretMessages.
          type: string
        createdBy:
          description: The address of the user who created the secret.
          $ref: '#/components/schemas/CosmosAddress'
        proofOfIssuance:
          properties:
            message:
              type: string
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this secret signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        scheme:
          enum:
            - bbs
            - standard
          description: >-
            The scheme of the secret. BBS+ signatures are supported and can be
            used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        secretMessages:
          items:
            type: string
          description: >-
            Thesse are the secrets that are signed.

            For BBS+ signatures, there can be >1 secretMessages, and the signer
            can selectively disclose the secrets.

            For standard signatures, there is only 1 secretMessage.
          type: array
          examples: *ref_30
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the
            secretMessages. The siganture maintains the integrity of the
            secretMessages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.
          type: object
        name:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_14
        description:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_8
        anchors:
          items:
            properties:
              txHash:
                type: string
                examples: *ref_7
              message:
                type: string
            additionalProperties: false
            type: object
          description: |-
            Anchors are on-chain transactions used to prove certain things
            about the secret. For example, you can anchor the secret to a
            transaction hash to prove that the secret existed at a certain time.
          type: array
      required:
        - messageFormat
        - createdBy
        - proofOfIssuance
        - scheme
        - secretMessages
        - dataIntegrityProof
        - name
        - image
        - description
      additionalProperties: false
      type: object
    iSecret:
      properties:
        messageFormat:
          enum:
            - plaintext
            - json
          description: The message format of the secretMessages.
          type: string
        createdBy:
          description: The address of the user who created the secret.
          $ref: '#/components/schemas/CosmosAddress'
        proofOfIssuance:
          properties:
            message:
              type: string
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - message
            - signature
            - signer
          additionalProperties: false
          description: >-
            Proof of issuance is used for BBS+ signatures (scheme = bbs) only.

            BBS+ signatures are signed with a BBS+ key pair, but you would often
            want the issuer to be a native address.

            The prooofOfIssuance establishes a link saying that "I am the issuer
            of this secret signed with BBS+ key pair ___".


            Fields can be left blank for standard signatures.
          type: object
        secretId:
          description: >-
            The secret ID. This is the ID that is given to the user to query the
            secret. Anyone with the ID can query it, so keep this safe and
            secure.
          type: string
        scheme:
          enum:
            - bbs
            - standard
          description: >-
            The scheme of the secret. BBS+ signatures are supported and can be
            used where selective disclosure is a requirement.

            Otherwise, you can simply use your native blockchain's signature
            scheme.
          type: string
        type:
          description: The type of the secret (e.g. credential).
          type: string
        secretMessages:
          items:
            type: string
          description: >-
            Thesse are the secrets that are signed.

            For BBS+ signatures, there can be >1 secretMessages, and the signer
            can selectively disclose the secrets.

            For standard signatures, there is only 1 secretMessage.
          type: array
          examples: *ref_30
        dataIntegrityProof:
          properties:
            signature:
              type: string
              examples: *ref_16
            signer:
              type: string
              examples: *ref_17
            publicKey:
              type: string
              examples: *ref_15
          required:
            - signature
            - signer
          additionalProperties: false
          description: >-
            This is the signature and accompanying details of the
            secretMessages. The siganture maintains the integrity of the
            secretMessages.


            This should match the expected scheme. For example, if the scheme is
            BBS+, the signature should be a BBS+ signature and signer should be
            a BBS+ public key.
          type: object
        name:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_13
        image:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_14
        description:
          description: >-
            Metadata for the secret for display purposes. Note this should not
            contain anything sensitive. It may be displayed to verifiers.
          type: string
          examples: *ref_8
        holders:
          items:
            type: string
          description: Holders are the addresses that have been given the secret.
          type: array
        anchors:
          items:
            properties:
              txHash:
                type: string
                examples: *ref_7
              message:
                type: string
            additionalProperties: false
            type: object
          description: |-
            Anchors are on-chain transactions used to prove certain things
            about the secret. For example, you can anchor the secret to a
            transaction hash to prove that the secret existed at a certain time.
          type: array
      required:
        - messageFormat
        - createdBy
        - proofOfIssuance
        - secretId
        - scheme
        - type
        - secretMessages
        - dataIntegrityProof
        - name
        - image
        - description
        - holders
        - anchors
      additionalProperties: false
      type: object
    iZkProof:
      properties:
        verificationKey:
          description: The verification key of the zkProof.
          type: string
        uri:
          description: The URI where to fetch the zkProof metadata from.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        zkpTrackerId:
          description: ZKP tracker ID.
          type: string
      required:
        - verificationKey
        - uri
        - customData
        - zkpTrackerId
      additionalProperties: false
      type: object
    iZkProofSolution:
      properties:
        proof:
          description: The proof of the zkProof.
          type: string
        publicInputs:
          description: The public inputs of the zkProof.
          type: string
      required:
        - proof
        - publicInputs
      additionalProperties: false
      type: object
    iMustOwnBadges:
      properties:
        collectionId:
          description: The collection ID of the badges to own.
          $ref: '#/components/schemas/NumberType'
        amountRange:
          description: >-
            The min/max acceptable amount of badges that must be owned (can be
            any values, including 0-0).
          $ref: '#/components/schemas/iUintRange'
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The range of the times that the badges must be owned.
          type: array
          examples: *ref_31
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The range of the badge IDs that must be owned.
          type: array
          examples: *ref_18
        overrideWithCurrentTime:
          description: Whether or not to override the ownershipTimes with the current time.
          type: boolean
        mustSatisfyForAllAssets:
          description: >-
            Whether or not the user must own all the specified badges. If false,
            we will accept if they meet criteria for at least one badge.
          type: boolean
      required:
        - collectionId
        - amountRange
        - ownershipTimes
        - badgeIds
        - overrideWithCurrentTime
        - mustSatisfyForAllAssets
      additionalProperties: false
      type: object
    iBalance:
      properties:
        amount:
          description: The amount or balance of the owned badge.
          $ref: '#/components/schemas/NumberType'
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs corresponding to the balance.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times that the badge is owned from.
          type: array
          examples: *ref_31
      required:
        - amount
        - badgeIds
        - ownershipTimes
      additionalProperties: false
      type: object
    iAddressList:
      properties:
        listId:
          description: The ID of the address list.
          type: string
          examples: *ref_11
        addresses:
          items:
            type: string
          description: >-
            The addresses of the address list. If this is a tracker list, the
            addresses are the tracker IDs.
          type: array
        whitelist:
          description: >-
            Whether or not to include ONLY the addresses or include all EXCEPT
            the addresses.
          type: boolean
        uri:
          description: The URI where to fetch the address list metadata from.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        createdBy:
          description: The address that created the address list.
          $ref: '#/components/schemas/CosmosAddress'
        aliasAddress:
          description: The alias cosmos address of the address list.
          $ref: '#/components/schemas/CosmosAddress'
      required:
        - listId
        - addresses
        - whitelist
        - uri
        - customData
      additionalProperties: false
      type: object
    iTransfer:
      properties:
        from:
          description: The address to transfer from.
          $ref: '#/components/schemas/CosmosAddress'
        toAddresses:
          items:
            $ref: '#/components/schemas/CosmosAddress'
          description: The addresses to transfer to.
          type: array
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The balances to transfer.
          type: array
        precalculateBalancesFromApproval:
          description: >-
            If specified, we will precalculate from this approval and override
            the balances. This can only be used when the specified approval has
            predeterminedBalances set.
          $ref: '#/components/schemas/iApprovalIdentifierDetails'
        merkleProofs:
          items:
            $ref: '#/components/schemas/iMerkleProof'
          description: >-
            The merkle proofs that satisfy the mkerkle challenges in the
            approvals. If the transfer deducts from multiple approvals, we check
            all the merkle proofs and assert at least one is valid for every
            challenge.
          type: array
        memo:
          description: Arbitrary memo for the transfer.
          type: string
        prioritizedApprovals:
          items:
            $ref: '#/components/schemas/iApprovalIdentifierDetails'
          description: >-
            The prioritized approvals to use for the transfer. If specified, we
            will check these first.
          type: array
        onlyCheckPrioritizedCollectionApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "collection" level approvals specified.
          type: boolean
        onlyCheckPrioritizedIncomingApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "incoming" level approvals specified.
          type: boolean
        onlyCheckPrioritizedOutgoingApprovals:
          description: >-
            Whether or not to only check the prioritized approvals. If false, we
            will check all approvals with any prioritized first.


            This only applies to the "outgoing" level approvals specified.
          type: boolean
        zkProofSolutions:
          items:
            $ref: '#/components/schemas/iZkProofSolution'
          description: The zk proof solutions for approvals.
          type: array
      required:
        - from
        - toAddresses
        - balances
      additionalProperties: false
      type: object
    iApprovalIdentifierDetails:
      properties:
        approvalId:
          description: The approval ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
          examples: *ref_12
        approverAddress:
          description: >-
            The address of the approval to check. If approvalLevel is
            "collection", this is blank "".
          $ref: '#/components/schemas/CosmosAddress'
      required:
        - approvalId
        - approvalLevel
        - approverAddress
      additionalProperties: false
      type: object
    iCoinTransfer:
      properties:
        to:
          description: >-
            The recipient of the coin transfer. This should be a Bech32 Cosmos
            address.
          $ref: '#/components/schemas/CosmosAddress'
        coins:
          items:
            $ref: '#/components/schemas/iCosmosCoin'
          description: The coins
          type: array
      required:
        - to
        - coins
      additionalProperties: false
      type: object
    iAmountTrackerIdDetails:
      properties:
        collectionId:
          description: The collection ID for the approval.
          $ref: '#/components/schemas/NumberType'
        approvalId:
          description: The approval ID
          type: string
        amountTrackerId:
          description: The amount tracker ID of the approval.
          type: string
        approvalLevel:
          description: >-
            The approval level of the approval "collection", "incoming", or
            "outgoing".
          type: string
          examples: *ref_12
        approverAddress:
          description: The address of the approval to check.
          $ref: '#/components/schemas/CosmosAddress'
        trackerType:
          description: >-
            The type of tracker to check "overall", "to", "from", or
            "initiatedBy".
          type: string
        approvedAddress:
          description: The address to check for the approval.
          $ref: '#/components/schemas/CosmosAddress'
      required:
        - collectionId
        - approvalId
        - amountTrackerId
        - approvalLevel
        - approverAddress
        - trackerType
        - approvedAddress
      additionalProperties: false
      type: object
    iMerkleChallenge:
      properties:
        root:
          description: The root of the merkle tree.
          type: string
        expectedProofLength:
          description: The expected proof length of the merkle proof.
          $ref: '#/components/schemas/NumberType'
        useCreatorAddressAsLeaf:
          description: >-
            Whether or not to override any leaf value and use the creator
            address as the leaf. Used for whitelist trees.
          type: boolean
        maxUsesPerLeaf:
          description: >-
            Whether or not to enforce max uses per leaf. Used to prevent replay
            attacks.
          $ref: '#/components/schemas/NumberType'
        uri:
          description: The URI where to fetch the merkle challenge metadata from.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data that can be stored on-chain.
          type: string
        challengeTrackerId:
          description: Tracker ID details for the merkle challenge.
          type: string
      required:
        - root
        - expectedProofLength
        - useCreatorAddressAsLeaf
        - maxUsesPerLeaf
        - uri
        - customData
        - challengeTrackerId
      additionalProperties: false
      type: object
    iMerklePathItem:
      properties:
        aunt:
          description: The aunt of the merkle path item.
          type: string
        onRight:
          description: Indicates whether the aunt node is on the right side of the path.
          type: boolean
      required:
        - aunt
        - onRight
      additionalProperties: false
      type: object
    iMerkleProof:
      properties:
        aunts:
          items:
            $ref: '#/components/schemas/iMerklePathItem'
          description: The aunts of the merkle proof.
          type: array
        leaf:
          description: >-
            The leaf of the merkle proof. If useCreatorAddressAsLeaf is true,
            this will be populated with the creator Cosmos address.
          type: string
      required:
        - aunts
        - leaf
      additionalProperties: false
      type: object
    iTimelineItem:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_36
      required:
        - timelineTimes
      additionalProperties: false
      type: object
    iManagerTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_36
        manager:
          description: The manager of the collection.
          $ref: '#/components/schemas/CosmosAddress'
      required:
        - timelineTimes
        - manager
      additionalProperties: false
      type: object
    iCollectionMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_36
        collectionMetadata:
          description: The collection metadata, with off-chain details populated.
          $ref: '#/components/schemas/iCollectionMetadataDetails'
      required:
        - timelineTimes
        - collectionMetadata
      additionalProperties: false
      type: object
    iBadgeMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_36
        badgeMetadata:
          items:
            $ref: '#/components/schemas/iBadgeMetadataDetails'
          description: The badge metadata, with off-chain details populated.
          type: array
      required:
        - timelineTimes
        - badgeMetadata
      additionalProperties: false
      type: object
    iOffChainBalancesMetadataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_36
        offChainBalancesMetadata:
          description: The off-chain balances metadata.
          $ref: '#/components/schemas/iOffChainBalancesMetadata'
      required:
        - timelineTimes
        - offChainBalancesMetadata
      additionalProperties: false
      type: object
    iCustomDataTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_36
        customData:
          description: Arbitrary custom data.
          type: string
      required:
        - timelineTimes
        - customData
      additionalProperties: false
      type: object
    iStandardsTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_36
        standards:
          items:
            type: string
          description: The standards.
          type: array
      required:
        - timelineTimes
        - standards
      additionalProperties: false
      type: object
    iIsArchivedTimeline:
      properties:
        timelineTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the timeline item. Times in a timeline cannot overlap.
          type: array
          examples: *ref_36
        isArchived:
          description: Whether the collection is archived.
          type: boolean
      required:
        - timelineTimes
        - isArchived
      additionalProperties: false
      type: object
    iUserOutgoingApproval:
      properties:
        toListId:
          type: string
          examples: *ref_38
        toList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          type: string
          examples: *ref_32
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
          examples: *ref_33
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          type: array
          examples: *ref_31
        approvalId:
          type: string
        uri:
          type: string
          examples: *ref_1
        customData:
          type: string
        approvalCriteria:
          $ref: '#/components/schemas/iOutgoingApprovalCriteria'
      required:
        - toListId
        - toList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
      additionalProperties: false
      type: object
    iOutgoingApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
          description: The list of must own badges to be approved.
          type: array
        zkProofs:
          items:
            $ref: '#/components/schemas/iZkProof'
          description: >-
            The list of ZK proofs that need to be satisfied. One use per proof
            solution.
          type: array
        coinTransfers:
          items:
            $ref: '#/components/schemas/iCoinTransfer'
          description: The $BADGE transfers to be executed upon every approval.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallenge'
          description: The list of merkle challenges that need valid proofs to be approved.
          type: array
        predeterminedBalances:
          description: The predetermined balances for each transfer.
          $ref: '#/components/schemas/iPredeterminedBalances'
        approvalAmounts:
          description: The maximum approved amounts for this approval.
          $ref: '#/components/schemas/iApprovalAmounts'
        maxNumTransfers:
          description: The max num transfers for this approval.
          $ref: '#/components/schemas/iMaxNumTransfers'
        requireToEqualsInitiatedBy:
          description: Whether the to address must equal the initiatedBy address.
          type: boolean
        requireToDoesNotEqualInitiatedBy:
          description: Whether the to address must not equal the initiatedBy address.
          type: boolean
      additionalProperties: false
      type: object
    iPredeterminedBalances:
      properties:
        manualBalances:
          items:
            $ref: '#/components/schemas/iManualBalances'
          description: >-
            Manually define the balances for each transfer. Cannot be used with
            incrementedBalances. Order number corresponds to the index of the
            balance in the array.
          type: array
        incrementedBalances:
          description: >-
            Define a starting balance and increment the badge IDs and owned
            times by a certain amount after each transfer. Cannot be used with
            manualBalances. Order number corresponds to number of times we
            increment.
          $ref: '#/components/schemas/iIncrementedBalances'
        orderCalculationMethod:
          description: The order calculation method.
          $ref: '#/components/schemas/iPredeterminedOrderCalculationMethod'
      required:
        - manualBalances
        - incrementedBalances
        - orderCalculationMethod
      additionalProperties: false
      type: object
    iManualBalances:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: >-
            The list of balances for each transfer. Order number corresponds to
            the index of the balance in the array.
          type: array
      required:
        - balances
      additionalProperties: false
      type: object
    iIncrementedBalances:
      properties:
        startBalances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: >-
            The starting balances for each transfer. Order number corresponds to
            the number of times we increment.
          type: array
        incrementBadgeIdsBy:
          description: The amount to increment the badge IDs by after each transfer.
          $ref: '#/components/schemas/NumberType'
        incrementOwnershipTimesBy:
          description: The amount to increment the owned times by after each transfer.
          $ref: '#/components/schemas/NumberType'
      required:
        - startBalances
        - incrementBadgeIdsBy
        - incrementOwnershipTimesBy
      additionalProperties: false
      type: object
    iPredeterminedOrderCalculationMethod:
      properties:
        useOverallNumTransfers:
          description: >-
            Use the overall number of transfers this approval has been used with
            as the order number. Ex: If this approval has been used 2 times by
            ANY address, then the order number for the next transfer will be 3.
          type: boolean
        usePerToAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each to
            address as the order number. Ex: If this approval has been used 2
            times by to address A, then the order number for the next transfer
            by to address A will be 3.
          type: boolean
        usePerFromAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each from
            address as the order number. Ex: If this approval has been used 2
            times by from address A, then the order number for the next transfer
            by from address A will be 3.
          type: boolean
        usePerInitiatedByAddressNumTransfers:
          description: >-
            Use the number of times this approval has been used by each
            initiated by address as the order number. Ex: If this approval has
            been used 2 times by initiated by address A, then the order number
            for the next transfer by initiated by address A will be 3.
          type: boolean
        useMerkleChallengeLeafIndex:
          description: >-
            Use the merkle challenge leaf index as the order number. Must
            specify ONE merkle challenge with the useLeafIndexForTransferOrder
            flag set to true. If so, we will use the leaf index of each merkle
            proof to calculate the order number. This is used to reserve
            specific balances for specific leaves (such as codes or whitelist
            address leafs)
          type: boolean
        challengeTrackerId:
          description: >-
            Use the merkle challenge leaf index as the order number. Must
            specify ONE merkle challenge with the useLeafIndexForTransferOrder
            flag set to true. If so, we will use the leaf index of each merkle
            proof to calculate the order number. This is used to reserve
            specific balances for specific leaves (such as codes or whitelist
            address leafs)
          type: string
      required:
        - useOverallNumTransfers
        - usePerToAddressNumTransfers
        - usePerFromAddressNumTransfers
        - usePerInitiatedByAddressNumTransfers
        - useMerkleChallengeLeafIndex
        - challengeTrackerId
      additionalProperties: false
      type: object
    iApprovalAmounts:
      properties:
        overallApprovalAmount:
          description: >-
            The overall maximum amount approved for the badgeIDs and
            ownershipTimes. Running tally that includes all transfers that match
            this approval.
          $ref: '#/components/schemas/NumberType'
        perToAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each to address. Running tally that includes all transfers from each
            unique to address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perFromAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each from address. Running tally that includes all transfers from
            each unique from address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perInitiatedByAddressApprovalAmount:
          description: >-
            The maximum amount approved for the badgeIDs and ownershipTimes for
            each initiated by address. Running tally that includes all transfers
            from each unique initiated by address that match this approval.
          $ref: '#/components/schemas/NumberType'
        amountTrackerId:
          description: >-
            The ID of the approval tracker. This is the key used to track
            tallies.
          type: string
      required:
        - overallApprovalAmount
        - perToAddressApprovalAmount
        - perFromAddressApprovalAmount
        - perInitiatedByAddressApprovalAmount
        - amountTrackerId
      additionalProperties: false
      type: object
    iMaxNumTransfers:
      properties:
        overallMaxNumTransfers:
          description: >-
            The overall maximum number of transfers for the badgeIDs and
            ownershipTimes. Running tally that includes all transfers that match
            this approval.
          $ref: '#/components/schemas/NumberType'
        perToAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each to address. Running tally that includes all transfers from
            each unique to address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perFromAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each from address. Running tally that includes all transfers
            from each unique from address that match this approval.
          $ref: '#/components/schemas/NumberType'
        perInitiatedByAddressMaxNumTransfers:
          description: >-
            The maximum number of transfers for the badgeIDs and ownershipTimes
            for each initiated by address. Running tally that includes all
            transfers from each unique initiated by address that match this
            approval.
          $ref: '#/components/schemas/NumberType'
        amountTrackerId:
          description: >-
            The ID of the approval tracker. This is the key used to track
            tallies.
          type: string
      required:
        - overallMaxNumTransfers
        - perToAddressMaxNumTransfers
        - perFromAddressMaxNumTransfers
        - perInitiatedByAddressMaxNumTransfers
        - amountTrackerId
      additionalProperties: false
      type: object
    iUserIncomingApproval:
      properties:
        fromListId:
          description: The list ID for the user(s) who is sending the badges.
          type: string
          examples: *ref_37
        fromList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: The list ID for the user(s) who initiate the transfer.
          type: string
          examples: *ref_32
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the transfer transaction.
          type: array
          examples: *ref_33
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs to be transferred.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The ownership times of the badges being transferred.
          type: array
          examples: *ref_31
        approvalId:
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        uri:
          description: The URI of the approval.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          description: >-
            For allowed combinations, we also must check the details of the
            approval. These represent the restrictions that must be obeyed such
            as the total amount approved, max num transfers, merkle challenges,
            must own badges, etc.
          $ref: '#/components/schemas/iIncomingApprovalCriteria'
      required:
        - fromListId
        - fromList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
      additionalProperties: false
      type: object
    iIncomingApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
          description: The list of must own badges to be approved.
          type: array
        zkProofs:
          items:
            $ref: '#/components/schemas/iZkProof'
          description: >-
            The list of ZK proofs that need to be satisfied. One use per proof
            solution.
          type: array
        coinTransfers:
          items:
            $ref: '#/components/schemas/iCoinTransfer'
          description: The $BADGE transfers to be executed upon every approval.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallenge'
          description: The list of merkle challenges that need valid proofs to be approved.
          type: array
        predeterminedBalances:
          description: The predetermined balances for each transfer using this approval.
          $ref: '#/components/schemas/iPredeterminedBalances'
        approvalAmounts:
          description: The maximum approved amounts for this approval.
          $ref: '#/components/schemas/iApprovalAmounts'
        maxNumTransfers:
          description: The max num transfers for this approval.
          $ref: '#/components/schemas/iMaxNumTransfers'
        requireFromEqualsInitiatedBy:
          description: Whether the from address must equal the initiatedBy address.
          type: boolean
        requireFromDoesNotEqualInitiatedBy:
          description: Whether the from address must not equal the initiatedBy address.
          type: boolean
      additionalProperties: false
      type: object
    iCollectionApproval:
      properties:
        toListId:
          description: The list ID for the user(s) who is receiving the badges.
          type: string
          examples: *ref_38
        toList:
          $ref: '#/components/schemas/iAddressList'
        fromListId:
          description: The list ID for the user(s) who is sending the badges.
          type: string
          examples: *ref_37
        fromList:
          $ref: '#/components/schemas/iAddressList'
        initiatedByListId:
          description: The list ID for the user(s) who initiate the transfer.
          type: string
          examples: *ref_32
        initiatedByList:
          $ref: '#/components/schemas/iAddressList'
        transferTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The times of the transfer transaction.
          type: array
          examples: *ref_33
        badgeIds:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The badge IDs to be transferred.
          type: array
          examples: *ref_18
        ownershipTimes:
          items:
            $ref: '#/components/schemas/iUintRange'
          description: The ownership times of the badges being transferred.
          type: array
          examples: *ref_31
        approvalId:
          description: >-
            The ID of the approval. Must not be a duplicate of another approval
            ID in the same timeline.
          type: string
        uri:
          description: The URI of the approval.
          type: string
          examples: *ref_1
        customData:
          description: Arbitrary custom data of the approval
          type: string
        approvalCriteria:
          description: >-
            For allowed combinations, we also must check the details of the
            approval. These represent the restrictions that must be obeyed such
            as the total amount approved, max num transfers, merkle challenges,
            must own badges, etc.
          $ref: '#/components/schemas/iApprovalCriteria'
      required:
        - toListId
        - toList
        - fromListId
        - fromList
        - initiatedByListId
        - initiatedByList
        - transferTimes
        - badgeIds
        - ownershipTimes
        - approvalId
      additionalProperties: false
      type: object
    iApprovalCriteria:
      properties:
        mustOwnBadges:
          items:
            $ref: '#/components/schemas/iMustOwnBadges'
          description: The list of must own badges to be approved.
          type: array
        zkProofs:
          items:
            $ref: '#/components/schemas/iZkProof'
          description: >-
            The list of ZK proofs that need to be satisfied. One use per proof
            solution.
          type: array
        coinTransfers:
          items:
            $ref: '#/components/schemas/iCoinTransfer'
          description: The $BADGE transfers to be executed upon every approval.
          type: array
        merkleChallenges:
          items:
            $ref: '#/components/schemas/iMerkleChallenge'
          description: The list of merkle challenges that need valid proofs to be approved.
          type: array
        predeterminedBalances:
          description: The predetermined balances for each transfer.
          $ref: '#/components/schemas/iPredeterminedBalances'
        approvalAmounts:
          description: The maximum approved amounts for this approval.
          $ref: '#/components/schemas/iApprovalAmounts'
        maxNumTransfers:
          description: The max num transfers for this approval.
          $ref: '#/components/schemas/iMaxNumTransfers'
        requireToEqualsInitiatedBy:
          description: Whether the to address must equal the initiatedBy address.
          type: boolean
        requireFromEqualsInitiatedBy:
          description: Whether the from address must equal the initiatedBy address.
          type: boolean
        requireToDoesNotEqualInitiatedBy:
          description: Whether the to address must not equal the initiatedBy address.
          type: boolean
        requireFromDoesNotEqualInitiatedBy:
          description: Whether the from address must not equal the initiatedBy address.
          type: boolean
        overridesFromOutgoingApprovals:
          description: >-
            Whether this approval overrides the from address's approved outgoing
            transfers.
          type: boolean
        overridesToIncomingApprovals:
          description: >-
            Whether this approval overrides the to address's approved incoming
            transfers.
          type: boolean
      additionalProperties: false
      type: object
    iUserBalanceStore:
      properties:
        balances:
          items:
            $ref: '#/components/schemas/iBalance'
          description: The user's balances.
          type: array
        incomingApprovals:
          items:
            $ref: '#/components/schemas/iUserIncomingApproval'
          description: The user's incoming approvals.
          type: array
        outgoingApprovals:
          items:
            $ref: '#/components/schemas/iUserOutgoingApproval'
          description: The user's outgoing approvals.
          type: array
        userPermissions:
          description: The user's permissions.
          $ref: '#/components/schemas/iUserPermissions'
        autoApproveSelfInitiatedOutgoingTransfers:
          description: >-
            Whether the user's self-initiated outgoing transfers are
            auto-approved. If not, they must be explicitly approved using the
            outgoing approvals.
          type: boolean
        autoApproveSelfInitiatedIncomingTransfers:
          description: >-
            Whether the user's self-initiated incoming transfers are
            auto-approved. If not, they must be explicitly approved using the
            incoming approvals.
          type: boolean
      required:
        - balances
        - incomingApprovals
        - outgoingApprovals
        - userPermissions
        - autoApproveSelfInitiatedOutgoingTransfers
        - autoApproveSelfInitiatedIncomingTransfers
      additionalProperties: false
      description: >-
        This stores everythign about a user's balances for a specific collection
        ID.

        This includes their balances, incoming approvals, outgoing approvals,
        and permissions.
      type: object
